
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad80  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800b02c  0800b02c  0000c02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b0a0  0800b0a0  0000c0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b0a4  0800b0a4  0000c0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800b0a8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008d8  24000010  0800b0b8  0000d010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240008e8  0800b0b8  0000d8e8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c427  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002ff1  00000000  00000000  00029465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018c8  00000000  00000000  0002c456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001358  00000000  00000000  0002dd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033e53  00000000  00000000  0002f076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f69f  00000000  00000000  00062ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a11e  00000000  00000000  00082568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001dc686  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006d30  00000000  00000000  001dc6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800b014 	.word	0x0800b014

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800b014 	.word	0x0800b014

080002ec <Config_Setup>:

#include "config.h"

#define ID 1

void Config_Setup(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

#if ID == 1
	Config_1();
 80002f0:	f000 f802 	bl	80002f8 <Config_1>
#elif ID == 2
	Config_2();
#elif ID == 3
	Config_3();
#endif
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Config_1>:

void Config_1(){
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

	CAN_interval = 20;
 80002fc:	4b33      	ldr	r3, [pc, #204]	@ (80003cc <Config_1+0xd4>)
 80002fe:	2214      	movs	r2, #20
 8000300:	801a      	strh	r2, [r3, #0]

	transfer_functions[0] = VOLTAGE_3V3;		// PA6
 8000302:	4b33      	ldr	r3, [pc, #204]	@ (80003d0 <Config_1+0xd8>)
 8000304:	2200      	movs	r2, #0
 8000306:	801a      	strh	r2, [r3, #0]
	transfer_functions[1] = VOLTAGE_3V3;	// PC4
 8000308:	4b31      	ldr	r3, [pc, #196]	@ (80003d0 <Config_1+0xd8>)
 800030a:	2200      	movs	r2, #0
 800030c:	805a      	strh	r2, [r3, #2]
	transfer_functions[2] = VOLTAGE_3V3;		//PB1
 800030e:	4b30      	ldr	r3, [pc, #192]	@ (80003d0 <Config_1+0xd8>)
 8000310:	2200      	movs	r2, #0
 8000312:	809a      	strh	r2, [r3, #4]
	transfer_functions[3] = VOLTAGE_3V3;		//PA7
 8000314:	4b2e      	ldr	r3, [pc, #184]	@ (80003d0 <Config_1+0xd8>)
 8000316:	2200      	movs	r2, #0
 8000318:	80da      	strh	r2, [r3, #6]
	transfer_functions[4] = VOLTAGE_3V3;		//PC5
 800031a:	4b2d      	ldr	r3, [pc, #180]	@ (80003d0 <Config_1+0xd8>)
 800031c:	2200      	movs	r2, #0
 800031e:	811a      	strh	r2, [r3, #8]
	transfer_functions[5] = VOLTAGE_3V3;			//PB0
 8000320:	4b2b      	ldr	r3, [pc, #172]	@ (80003d0 <Config_1+0xd8>)
 8000322:	2200      	movs	r2, #0
 8000324:	815a      	strh	r2, [r3, #10]
	transfer_functions[6] = VOLTAGE_3V3;			//PC0
 8000326:	4b2a      	ldr	r3, [pc, #168]	@ (80003d0 <Config_1+0xd8>)
 8000328:	2200      	movs	r2, #0
 800032a:	819a      	strh	r2, [r3, #12]
	transfer_functions[7] = VOLTAGE_3V3;			//PC1
 800032c:	4b28      	ldr	r3, [pc, #160]	@ (80003d0 <Config_1+0xd8>)
 800032e:	2200      	movs	r2, #0
 8000330:	81da      	strh	r2, [r3, #14]
	transfer_functions[8] = VOLTAGE_3V3;		//PC2
 8000332:	4b27      	ldr	r3, [pc, #156]	@ (80003d0 <Config_1+0xd8>)
 8000334:	2200      	movs	r2, #0
 8000336:	821a      	strh	r2, [r3, #16]
	transfer_functions[9] = VOLTAGE_3V3;		//PC3
 8000338:	4b25      	ldr	r3, [pc, #148]	@ (80003d0 <Config_1+0xd8>)
 800033a:	2200      	movs	r2, #0
 800033c:	825a      	strh	r2, [r3, #18]
	transfer_functions[10] = VOLTAGE_3V3;	//PA2
 800033e:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <Config_1+0xd8>)
 8000340:	2200      	movs	r2, #0
 8000342:	829a      	strh	r2, [r3, #20]
	transfer_functions[11] = VOLTAGE_3V3;	//PA3
 8000344:	4b22      	ldr	r3, [pc, #136]	@ (80003d0 <Config_1+0xd8>)
 8000346:	2200      	movs	r2, #0
 8000348:	82da      	strh	r2, [r3, #22]
	transfer_functions[12] = VOLTAGE_3V3;	//PA0
 800034a:	4b21      	ldr	r3, [pc, #132]	@ (80003d0 <Config_1+0xd8>)
 800034c:	2200      	movs	r2, #0
 800034e:	831a      	strh	r2, [r3, #24]
	transfer_functions[13] = VOLTAGE_3V3;	//PA1
 8000350:	4b1f      	ldr	r3, [pc, #124]	@ (80003d0 <Config_1+0xd8>)
 8000352:	2200      	movs	r2, #0
 8000354:	835a      	strh	r2, [r3, #26]
	transfer_functions[14] = VOLTAGE_3V3;	//PA4
 8000356:	4b1e      	ldr	r3, [pc, #120]	@ (80003d0 <Config_1+0xd8>)
 8000358:	2200      	movs	r2, #0
 800035a:	839a      	strh	r2, [r3, #28]
	transfer_functions[15] = VOLTAGE_3V3;	//PA5
 800035c:	4b1c      	ldr	r3, [pc, #112]	@ (80003d0 <Config_1+0xd8>)
 800035e:	2200      	movs	r2, #0
 8000360:	83da      	strh	r2, [r3, #30]

	CAN_ID[0] = 1;
 8000362:	4b1c      	ldr	r3, [pc, #112]	@ (80003d4 <Config_1+0xdc>)
 8000364:	2201      	movs	r2, #1
 8000366:	801a      	strh	r2, [r3, #0]
	CAN_ID[1] = 2;
 8000368:	4b1a      	ldr	r3, [pc, #104]	@ (80003d4 <Config_1+0xdc>)
 800036a:	2202      	movs	r2, #2
 800036c:	805a      	strh	r2, [r3, #2]
	CAN_ID[2] = 3;
 800036e:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <Config_1+0xdc>)
 8000370:	2203      	movs	r2, #3
 8000372:	809a      	strh	r2, [r3, #4]
	CAN_ID[3] = 4;
 8000374:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <Config_1+0xdc>)
 8000376:	2204      	movs	r2, #4
 8000378:	80da      	strh	r2, [r3, #6]
	CAN_ID[4] = 5;
 800037a:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <Config_1+0xdc>)
 800037c:	2205      	movs	r2, #5
 800037e:	811a      	strh	r2, [r3, #8]
	CAN_ID[5] = 6;
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <Config_1+0xdc>)
 8000382:	2206      	movs	r2, #6
 8000384:	815a      	strh	r2, [r3, #10]
	CAN_ID[6] = 7;
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <Config_1+0xdc>)
 8000388:	2207      	movs	r2, #7
 800038a:	819a      	strh	r2, [r3, #12]
	CAN_ID[7] = 8;
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <Config_1+0xdc>)
 800038e:	2208      	movs	r2, #8
 8000390:	81da      	strh	r2, [r3, #14]
	CAN_ID[8] = 9;
 8000392:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <Config_1+0xdc>)
 8000394:	2209      	movs	r2, #9
 8000396:	821a      	strh	r2, [r3, #16]
	CAN_ID[9] = 10;
 8000398:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <Config_1+0xdc>)
 800039a:	220a      	movs	r2, #10
 800039c:	825a      	strh	r2, [r3, #18]
	CAN_ID[10] = 11;
 800039e:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <Config_1+0xdc>)
 80003a0:	220b      	movs	r2, #11
 80003a2:	829a      	strh	r2, [r3, #20]
	CAN_ID[11] = 12;
 80003a4:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <Config_1+0xdc>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	82da      	strh	r2, [r3, #22]
	CAN_ID[12] = 13;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <Config_1+0xdc>)
 80003ac:	220d      	movs	r2, #13
 80003ae:	831a      	strh	r2, [r3, #24]
	CAN_ID[13] = 14;
 80003b0:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <Config_1+0xdc>)
 80003b2:	220e      	movs	r2, #14
 80003b4:	835a      	strh	r2, [r3, #26]
	CAN_ID[14] = 15;
 80003b6:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <Config_1+0xdc>)
 80003b8:	220f      	movs	r2, #15
 80003ba:	839a      	strh	r2, [r3, #28]
	CAN_ID[15] = 16;
 80003bc:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <Config_1+0xdc>)
 80003be:	2210      	movs	r2, #16
 80003c0:	83da      	strh	r2, [r3, #30]

}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	2400084e 	.word	0x2400084e
 80003d0:	24000874 	.word	0x24000874
 80003d4:	24000850 	.word	0x24000850

080003d8 <CanSend>:

uint8_t TxData[8];
uint8_t RxData[8];


void CanSend(uint8_t *TxData){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80003e0:	e001      	b.n	80003e6 <CanSend+0xe>
		Error_Handler();
 80003e2:	f000 fe53 	bl	800108c <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80003e6:	4809      	ldr	r0, [pc, #36]	@ (800040c <CanSend+0x34>)
 80003e8:	f005 fc90 	bl	8005d0c <HAL_FDCAN_GetTxFifoFreeLevel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d007      	beq.n	8000402 <CanSend+0x2a>
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	4906      	ldr	r1, [pc, #24]	@ (8000410 <CanSend+0x38>)
 80003f6:	4805      	ldr	r0, [pc, #20]	@ (800040c <CanSend+0x34>)
 80003f8:	f005 fac1 	bl	800597e <HAL_FDCAN_AddMessageToTxFifoQ>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1ef      	bne.n	80003e2 <CanSend+0xa>
	}
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	24000118 	.word	0x24000118
 8000410:	24000894 	.word	0x24000894

08000414 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	2b00      	cmp	r3, #0
 8000426:	d017      	beq.n	8000458 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000428:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800042a:	4a0e      	ldr	r2, [pc, #56]	@ (8000464 <HAL_FDCAN_RxFifo0Callback+0x50>)
 800042c:	2140      	movs	r1, #64	@ 0x40
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f005 fb00 	bl	8005a34 <HAL_FDCAN_GetRxMessage>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d002      	beq.n	8000440 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 800043a:	f000 fe27 	bl	800108c <Error_Handler>
 800043e:	e001      	b.n	8000444 <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 8000440:	f000 f848 	bl	80004d4 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000444:	2200      	movs	r2, #0
 8000446:	2101      	movs	r1, #1
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f005 fc71 	bl	8005d30 <HAL_FDCAN_ActivateNotification>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 8000454:	f000 fe1a 	bl	800108c <Error_Handler>
		}
	}
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	24000034 	.word	0x24000034
 8000464:	240008b8 	.word	0x240008b8

08000468 <print>:



void print(uint16_t select){
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
		uint16_t Data = TF_Select(1,averages[select],transfer_functions[select]);
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	4a12      	ldr	r2, [pc, #72]	@ (80004c0 <print+0x58>)
 8000476:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	4a11      	ldr	r2, [pc, #68]	@ (80004c4 <print+0x5c>)
 800047e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	461a      	mov	r2, r3
 8000486:	2001      	movs	r0, #1
 8000488:	f001 fa28 	bl	80018dc <TF_Select>
 800048c:	4603      	mov	r3, r0
 800048e:	81fb      	strh	r3, [r7, #14]
		TxData[0] = Data;
 8000490:	89fb      	ldrh	r3, [r7, #14]
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <print+0x60>)
 8000496:	701a      	strb	r2, [r3, #0]
		TxData[1] = Data >> 8;
 8000498:	89fb      	ldrh	r3, [r7, #14]
 800049a:	0a1b      	lsrs	r3, r3, #8
 800049c:	b29b      	uxth	r3, r3
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <print+0x60>)
 80004a2:	705a      	strb	r2, [r3, #1]
		TxHeader.Identifier = CAN_ID[select];
 80004a4:	88fb      	ldrh	r3, [r7, #6]
 80004a6:	4a09      	ldr	r2, [pc, #36]	@ (80004cc <print+0x64>)
 80004a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <print+0x68>)
 80004b0:	601a      	str	r2, [r3, #0]

		CanSend(TxData);
 80004b2:	4805      	ldr	r0, [pc, #20]	@ (80004c8 <print+0x60>)
 80004b4:	f7ff ff90 	bl	80003d8 <CanSend>
}
 80004b8:	bf00      	nop
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2400080c 	.word	0x2400080c
 80004c4:	24000874 	.word	0x24000874
 80004c8:	2400002c 	.word	0x2400002c
 80004cc:	24000850 	.word	0x24000850
 80004d0:	24000894 	.word	0x24000894

080004d4 <decode>:

void decode(){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
	switch(TxData[0]){
 80004da:	4b19      	ldr	r3, [pc, #100]	@ (8000540 <decode+0x6c>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d01d      	beq.n	800051e <decode+0x4a>
 80004e2:	2b03      	cmp	r3, #3
 80004e4:	dc26      	bgt.n	8000534 <decode+0x60>
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d002      	beq.n	80004f0 <decode+0x1c>
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d00b      	beq.n	8000506 <decode+0x32>
		break;
	case 3:					//change CAN_id for sensor (most probably not to be used but in case let's have it)
		uint8_t select_id = TxData[1];
		CAN_ID[select_id] = TxData[2];
	}
}
 80004ee:	e021      	b.n	8000534 <decode+0x60>
		uint8_t select_type = TxData[1];
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <decode+0x6c>)
 80004f2:	785b      	ldrb	r3, [r3, #1]
 80004f4:	717b      	strb	r3, [r7, #5]
		transfer_functions[select_type] = TxData[2];
 80004f6:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <decode+0x6c>)
 80004f8:	789a      	ldrb	r2, [r3, #2]
 80004fa:	797b      	ldrb	r3, [r7, #5]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a11      	ldr	r2, [pc, #68]	@ (8000544 <decode+0x70>)
 8000500:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 8000504:	e016      	b.n	8000534 <decode+0x60>
		uint8_t divider = TxData[1];
 8000506:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <decode+0x6c>)
 8000508:	785b      	ldrb	r3, [r3, #1]
 800050a:	71bb      	strb	r3, [r7, #6]
		CAN_interval = 1000 / divider;
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000512:	fb92 f3f3 	sdiv	r3, r2, r3
 8000516:	b29a      	uxth	r2, r3
 8000518:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <decode+0x74>)
 800051a:	801a      	strh	r2, [r3, #0]
		break;
 800051c:	e00a      	b.n	8000534 <decode+0x60>
		uint8_t select_id = TxData[1];
 800051e:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <decode+0x6c>)
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	71fb      	strb	r3, [r7, #7]
		CAN_ID[select_id] = TxData[2];
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <decode+0x6c>)
 8000526:	789a      	ldrb	r2, [r3, #2]
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4611      	mov	r1, r2
 800052c:	4a07      	ldr	r2, [pc, #28]	@ (800054c <decode+0x78>)
 800052e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000532:	e7ff      	b.n	8000534 <decode+0x60>
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	2400002c 	.word	0x2400002c
 8000544:	24000874 	.word	0x24000874
 8000548:	2400084e 	.word	0x2400084e
 800054c:	24000850 	.word	0x24000850

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f001 fb59 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f86b 	bl	8000634 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Config_Setup();
 800055e:	f7ff fec5 	bl	80002ec <Config_Setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 fcd7 	bl	8000f14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000566:	f000 fcb5 	bl	8000ed4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800056a:	f000 fa4f 	bl	8000a0c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800056e:	f000 fad3 	bl	8000b18 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000572:	f000 fb4d 	bl	8000c10 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000576:	f000 fb8b 	bl	8000c90 <MX_I2C3_Init>
  MX_ADC1_Init();
 800057a:	f000 f8d1 	bl	8000720 <MX_ADC1_Init>
  MX_I2C4_Init();
 800057e:	f000 fbc7 	bl	8000d10 <MX_I2C4_Init>
  MX_TIM1_Init();
 8000582:	f000 fc05 	bl	8000d90 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000586:	f000 fc57 	bl	8000e38 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800058a:	4822      	ldr	r0, [pc, #136]	@ (8000614 <main+0xc4>)
 800058c:	f00a f86e 	bl	800a66c <HAL_TIM_Base_Start_IT>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000590:	4b21      	ldr	r3, [pc, #132]	@ (8000618 <main+0xc8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	461a      	mov	r2, r3
 8000596:	4921      	ldr	r1, [pc, #132]	@ (800061c <main+0xcc>)
 8000598:	481f      	ldr	r0, [pc, #124]	@ (8000618 <main+0xc8>)
 800059a:	f001 ff0b 	bl	80023b4 <HAL_ADC_Start_DMA>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <main+0x58>
 80005a4:	f000 fd72 	bl	800108c <Error_Handler>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }
 80005a8:	481d      	ldr	r0, [pc, #116]	@ (8000620 <main+0xd0>)
 80005aa:	f005 f9bd 	bl	8005928 <HAL_FDCAN_Start>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <main+0x68>
 80005b4:	f000 fd6a 	bl	800108c <Error_Handler>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 80005b8:	2200      	movs	r2, #0
 80005ba:	2101      	movs	r1, #1
 80005bc:	4818      	ldr	r0, [pc, #96]	@ (8000620 <main+0xd0>)
 80005be:	f005 fbb7 	bl	8005d30 <HAL_FDCAN_ActivateNotification>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <main+0x7c>
 80005c8:	f000 fd60 	bl	800108c <Error_Handler>


  uint8_t counter = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <main+0xd4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d1fb      	bne.n	80005d0 <main+0x80>
		  if(millis % CAN_interval == 0){
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <main+0xd8>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	4a13      	ldr	r2, [pc, #76]	@ (800062c <main+0xdc>)
 80005de:	8812      	ldrh	r2, [r2, #0]
 80005e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80005e4:	fb01 f202 	mul.w	r2, r1, r2
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d10c      	bne.n	800060a <main+0xba>
			  print(counter);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff37 	bl	8000468 <print>
			  counter++;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	3301      	adds	r3, #1
 80005fe:	71fb      	strb	r3, [r7, #7]
			  if(counter == 16){
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	2b10      	cmp	r3, #16
 8000604:	d101      	bne.n	800060a <main+0xba>
				  counter = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	71fb      	strb	r3, [r7, #7]
			  }
		  }
		  TxHeader.Identifier = 17;
 800060a:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <main+0xe0>)
 800060c:	2211      	movs	r2, #17
 800060e:	601a      	str	r2, [r3, #0]
	  if(CAN_enable == 1){
 8000610:	e7de      	b.n	80005d0 <main+0x80>
 8000612:	bf00      	nop
 8000614:	240003a0 	.word	0x240003a0
 8000618:	2400003c 	.word	0x2400003c
 800061c:	240003ec 	.word	0x240003ec
 8000620:	24000118 	.word	0x24000118
 8000624:	24000872 	.word	0x24000872
 8000628:	24000870 	.word	0x24000870
 800062c:	2400084e 	.word	0x2400084e
 8000630:	24000894 	.word	0x24000894

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	@ 0x70
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800063e:	224c      	movs	r2, #76	@ 0x4c
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f00a fcac 	bl	800afa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2220      	movs	r2, #32
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00a fca6 	bl	800afa0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000654:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <SystemClock_Config+0xe4>)
 8000656:	f04f 32ff 	mov.w	r2, #4294967295
 800065a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800065e:	2002      	movs	r0, #2
 8000660:	f006 fbc0 	bl	8006de4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b2c      	ldr	r3, [pc, #176]	@ (800071c <SystemClock_Config+0xe8>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a2b      	ldr	r2, [pc, #172]	@ (800071c <SystemClock_Config+0xe8>)
 800066e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b29      	ldr	r3, [pc, #164]	@ (800071c <SystemClock_Config+0xe8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000680:	bf00      	nop
 8000682:	4b26      	ldr	r3, [pc, #152]	@ (800071c <SystemClock_Config+0xe8>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068e:	d1f8      	bne.n	8000682 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000694:	2301      	movs	r3, #1
 8000696:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000698:	2340      	movs	r3, #64	@ 0x40
 800069a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006b8:	230c      	movs	r3, #12
 80006ba:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006bc:	2300      	movs	r3, #0
 80006be:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c8:	4618      	mov	r0, r3
 80006ca:	f006 fbc5 	bl	8006e58 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006d4:	f000 fcda 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	233f      	movs	r3, #63	@ 0x3f
 80006da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006e8:	2340      	movs	r3, #64	@ 0x40
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ec:	2340      	movs	r3, #64	@ 0x40
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006f6:	2340      	movs	r3, #64	@ 0x40
 80006f8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f006 ffdc 	bl	80076bc <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800070a:	f000 fcbf 	bl	800108c <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3770      	adds	r7, #112	@ 0x70
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	58024400 	.word	0x58024400
 800071c:	58024800 	.word	0x58024800

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	@ 0x28
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
 8000740:	615a      	str	r2, [r3, #20]
 8000742:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000744:	4b9f      	ldr	r3, [pc, #636]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000746:	4aa0      	ldr	r2, [pc, #640]	@ (80009c8 <MX_ADC1_Init+0x2a8>)
 8000748:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800074a:	4b9e      	ldr	r3, [pc, #632]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 800074c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000752:	4b9c      	ldr	r3, [pc, #624]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000754:	2208      	movs	r2, #8
 8000756:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000758:	4b9a      	ldr	r3, [pc, #616]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 800075a:	2201      	movs	r2, #1
 800075c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075e:	4b99      	ldr	r3, [pc, #612]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000760:	2204      	movs	r2, #4
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000764:	4b97      	ldr	r3, [pc, #604]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000766:	2200      	movs	r2, #0
 8000768:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800076a:	4b96      	ldr	r3, [pc, #600]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 800076c:	2201      	movs	r2, #1
 800076e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 8000770:	4b94      	ldr	r3, [pc, #592]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000772:	2210      	movs	r2, #16
 8000774:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000776:	4b93      	ldr	r3, [pc, #588]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000778:	2200      	movs	r2, #0
 800077a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077c:	4b91      	ldr	r3, [pc, #580]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000782:	4b90      	ldr	r3, [pc, #576]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000788:	4b8e      	ldr	r3, [pc, #568]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 800078a:	2203      	movs	r2, #3
 800078c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078e:	4b8d      	ldr	r3, [pc, #564]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000790:	2200      	movs	r2, #0
 8000792:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000794:	4b8b      	ldr	r3, [pc, #556]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000796:	2200      	movs	r2, #0
 8000798:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800079a:	4b8a      	ldr	r3, [pc, #552]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a2:	4888      	ldr	r0, [pc, #544]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 80007a4:	f001 fcac 	bl	8002100 <HAL_ADC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ae:	f000 fc6d 	bl	800108c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4881      	ldr	r0, [pc, #516]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 80007be:	f002 fbaf 	bl	8002f20 <HAL_ADCEx_MultiModeConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007c8:	f000 fc60 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007cc:	4b7f      	ldr	r3, [pc, #508]	@ (80009cc <MX_ADC1_Init+0x2ac>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d0:	2306      	movs	r3, #6
 80007d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80007d4:	2306      	movs	r3, #6
 80007d6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007de:	2304      	movs	r3, #4
 80007e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	4875      	ldr	r0, [pc, #468]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 80007f0:	f001 fea8 	bl	8002544 <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007fa:	f000 fc47 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007fe:	4b74      	ldr	r3, [pc, #464]	@ (80009d0 <MX_ADC1_Init+0x2b0>)
 8000800:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000802:	230c      	movs	r3, #12
 8000804:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	486e      	ldr	r0, [pc, #440]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 800080c:	f001 fe9a 	bl	8002544 <HAL_ADC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000816:	f000 fc39 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800081a:	4b6e      	ldr	r3, [pc, #440]	@ (80009d4 <MX_ADC1_Init+0x2b4>)
 800081c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800081e:	2312      	movs	r3, #18
 8000820:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4867      	ldr	r0, [pc, #412]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000828:	f001 fe8c 	bl	8002544 <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000832:	f000 fc2b 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000836:	4b68      	ldr	r3, [pc, #416]	@ (80009d8 <MX_ADC1_Init+0x2b8>)
 8000838:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800083a:	2318      	movs	r3, #24
 800083c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	4860      	ldr	r0, [pc, #384]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000844:	f001 fe7e 	bl	8002544 <HAL_ADC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800084e:	f000 fc1d 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000852:	4b62      	ldr	r3, [pc, #392]	@ (80009dc <MX_ADC1_Init+0x2bc>)
 8000854:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800085a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4858      	ldr	r0, [pc, #352]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000862:	f001 fe6f 	bl	8002544 <HAL_ADC_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 800086c:	f000 fc0e 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000870:	4b5b      	ldr	r3, [pc, #364]	@ (80009e0 <MX_ADC1_Init+0x2c0>)
 8000872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000874:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000878:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	4619      	mov	r1, r3
 800087e:	4851      	ldr	r0, [pc, #324]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000880:	f001 fe60 	bl	8002544 <HAL_ADC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800088a:	f000 fbff 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800088e:	4b55      	ldr	r3, [pc, #340]	@ (80009e4 <MX_ADC1_Init+0x2c4>)
 8000890:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000892:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000896:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4849      	ldr	r0, [pc, #292]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 800089e:	f001 fe51 	bl	8002544 <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80008a8:	f000 fbf0 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008ac:	4b4e      	ldr	r3, [pc, #312]	@ (80009e8 <MX_ADC1_Init+0x2c8>)
 80008ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008b0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80008b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4842      	ldr	r0, [pc, #264]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 80008bc:	f001 fe42 	bl	8002544 <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80008c6:	f000 fbe1 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80008ca:	4b48      	ldr	r3, [pc, #288]	@ (80009ec <MX_ADC1_Init+0x2cc>)
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80008ce:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80008d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	483a      	ldr	r0, [pc, #232]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 80008da:	f001 fe33 	bl	8002544 <HAL_ADC_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 80008e4:	f000 fbd2 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80008e8:	4b41      	ldr	r3, [pc, #260]	@ (80009f0 <MX_ADC1_Init+0x2d0>)
 80008ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80008ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	4619      	mov	r1, r3
 80008f6:	4833      	ldr	r0, [pc, #204]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 80008f8:	f001 fe24 	bl	8002544 <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8000902:	f000 fbc3 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000906:	4b3b      	ldr	r3, [pc, #236]	@ (80009f4 <MX_ADC1_Init+0x2d4>)
 8000908:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800090a:	f240 2306 	movw	r3, #518	@ 0x206
 800090e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	482b      	ldr	r0, [pc, #172]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000916:	f001 fe15 	bl	8002544 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 8000920:	f000 fbb4 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000924:	4b34      	ldr	r3, [pc, #208]	@ (80009f8 <MX_ADC1_Init+0x2d8>)
 8000926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000928:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 800092c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	4824      	ldr	r0, [pc, #144]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000934:	f001 fe06 	bl	8002544 <HAL_ADC_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 800093e:	f000 fba5 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000942:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <MX_ADC1_Init+0x2dc>)
 8000944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000946:	f240 2312 	movw	r3, #530	@ 0x212
 800094a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	481c      	ldr	r0, [pc, #112]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000952:	f001 fdf7 	bl	8002544 <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 800095c:	f000 fb96 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000960:	4b27      	ldr	r3, [pc, #156]	@ (8000a00 <MX_ADC1_Init+0x2e0>)
 8000962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000964:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8000968:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4815      	ldr	r0, [pc, #84]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 8000970:	f001 fde8 	bl	8002544 <HAL_ADC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 800097a:	f000 fb87 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800097e:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <MX_ADC1_Init+0x2e4>)
 8000980:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000982:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	480d      	ldr	r0, [pc, #52]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 800098e:	f001 fdd9 	bl	8002544 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 8000998:	f000 fb78 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_ADC1_Init+0x2e8>)
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80009a0:	f240 3306 	movw	r3, #774	@ 0x306
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <MX_ADC1_Init+0x2a4>)
 80009ac:	f001 fdca 	bl	8002544 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 80009b6:	f000 fb69 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	@ 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2400003c 	.word	0x2400003c
 80009c8:	40022000 	.word	0x40022000
 80009cc:	0c900008 	.word	0x0c900008
 80009d0:	10c00010 	.word	0x10c00010
 80009d4:	14f00020 	.word	0x14f00020
 80009d8:	1d500080 	.word	0x1d500080
 80009dc:	21800100 	.word	0x21800100
 80009e0:	25b00200 	.word	0x25b00200
 80009e4:	2a000400 	.word	0x2a000400
 80009e8:	2e300800 	.word	0x2e300800
 80009ec:	32601000 	.word	0x32601000
 80009f0:	36902000 	.word	0x36902000
 80009f4:	3ac04000 	.word	0x3ac04000
 80009f8:	3ef08000 	.word	0x3ef08000
 80009fc:	43210000 	.word	0x43210000
 8000a00:	47520000 	.word	0x47520000
 8000a04:	4b840000 	.word	0x4b840000
 8000a08:	4fb80000 	.word	0x4fb80000

08000a0c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a10:	4b3d      	ldr	r3, [pc, #244]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a12:	4a3e      	ldr	r2, [pc, #248]	@ (8000b0c <MX_FDCAN1_Init+0x100>)
 8000a14:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a16:	4b3c      	ldr	r3, [pc, #240]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000a22:	4b39      	ldr	r3, [pc, #228]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a28:	4b37      	ldr	r3, [pc, #220]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a2e:	4b36      	ldr	r3, [pc, #216]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a34:	4b34      	ldr	r3, [pc, #208]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a3a:	4b33      	ldr	r3, [pc, #204]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000a40:	4b31      	ldr	r3, [pc, #196]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a42:	220d      	movs	r2, #13
 8000a44:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a46:	4b30      	ldr	r3, [pc, #192]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a52:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a58:	4b2b      	ldr	r3, [pc, #172]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a64:	4b28      	ldr	r3, [pc, #160]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 28;
 8000a6a:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a6c:	221c      	movs	r2, #28
 8000a6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a70:	4b25      	ldr	r3, [pc, #148]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000a76:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a7e:	2204      	movs	r2, #4
 8000a80:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a82:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ab8:	4813      	ldr	r0, [pc, #76]	@ (8000b08 <MX_FDCAN1_Init+0xfc>)
 8000aba:	f004 fd57 	bl	800556c <HAL_FDCAN_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ac4:	f000 fae2 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <MX_FDCAN1_Init+0x104>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <MX_FDCAN1_Init+0x108>)
 8000ad0:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_FDCAN1_Init+0x108>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_FDCAN1_Init+0x108>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <MX_FDCAN1_Init+0x108>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <MX_FDCAN1_Init+0x108>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <MX_FDCAN1_Init+0x108>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <MX_FDCAN1_Init+0x108>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000af6:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <MX_FDCAN1_Init+0x108>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <MX_FDCAN1_Init+0x108>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	24000118 	.word	0x24000118
 8000b0c:	4000a000 	.word	0x4000a000
 8000b10:	24000850 	.word	0x24000850
 8000b14:	24000894 	.word	0x24000894

08000b18 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b1c:	4b39      	ldr	r3, [pc, #228]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b1e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c08 <MX_FDCAN2_Init+0xf0>)
 8000b20:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b22:	4b38      	ldr	r3, [pc, #224]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b28:	4b36      	ldr	r3, [pc, #216]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000b2e:	4b35      	ldr	r3, [pc, #212]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b34:	4b33      	ldr	r3, [pc, #204]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b3a:	4b32      	ldr	r3, [pc, #200]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000b40:	4b30      	ldr	r3, [pc, #192]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b42:	2210      	movs	r2, #16
 8000b44:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000b58:	4b2a      	ldr	r3, [pc, #168]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b5e:	4b29      	ldr	r3, [pc, #164]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000b64:	4b27      	ldr	r3, [pc, #156]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000b70:	4b24      	ldr	r3, [pc, #144]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000b76:	4b23      	ldr	r3, [pc, #140]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000b7c:	4b21      	ldr	r3, [pc, #132]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000b82:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b88:	4b1e      	ldr	r3, [pc, #120]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000ba6:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000bac:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000bc4:	480f      	ldr	r0, [pc, #60]	@ (8000c04 <MX_FDCAN2_Init+0xec>)
 8000bc6:	f004 fcd1 	bl	800556c <HAL_FDCAN_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000bd0:	f000 fa5c 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  //TxHeader.IdType = FDCAN_STANDARD_ID;
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <MX_FDCAN2_Init+0xf4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_FDCAN2_Init+0xf4>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <MX_FDCAN2_Init+0xf4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_FDCAN2_Init+0xf4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <MX_FDCAN2_Init+0xf4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_FDCAN2_Init+0xf4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <MX_FDCAN2_Init+0xf4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	240001b8 	.word	0x240001b8
 8000c08:	4000a400 	.word	0x4000a400
 8000c0c:	24000894 	.word	0x24000894

08000c10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	@ (8000c88 <MX_I2C1_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c4c:	f005 ff96 	bl	8006b7c <HAL_I2C_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c56:	f000 fa19 	bl	800108c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4809      	ldr	r0, [pc, #36]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c5e:	f006 f829 	bl	8006cb4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f000 fa10 	bl	800108c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c70:	f006 f86b 	bl	8006d4a <HAL_I2CEx_ConfigDigitalFilter>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 fa07 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	24000258 	.word	0x24000258
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	00707cbb 	.word	0x00707cbb

08000c90 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	@ (8000d08 <MX_I2C3_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d0c <MX_I2C3_Init+0x7c>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000cca:	480e      	ldr	r0, [pc, #56]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000ccc:	f005 ff56 	bl	8006b7c <HAL_I2C_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000cd6:	f000 f9d9 	bl	800108c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4809      	ldr	r0, [pc, #36]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000cde:	f005 ffe9 	bl	8006cb4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ce8:	f000 f9d0 	bl	800108c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_I2C3_Init+0x74>)
 8000cf0:	f006 f82b 	bl	8006d4a <HAL_I2CEx_ConfigDigitalFilter>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 f9c7 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	240002ac 	.word	0x240002ac
 8000d08:	40005c00 	.word	0x40005c00
 8000d0c:	00707cbb 	.word	0x00707cbb

08000d10 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d16:	4a1c      	ldr	r2, [pc, #112]	@ (8000d88 <MX_I2C4_Init+0x78>)
 8000d18:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d8c <MX_I2C4_Init+0x7c>)
 8000d1e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d4a:	480e      	ldr	r0, [pc, #56]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d4c:	f005 ff16 	bl	8006b7c <HAL_I2C_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d56:	f000 f999 	bl	800108c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4809      	ldr	r0, [pc, #36]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d5e:	f005 ffa9 	bl	8006cb4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d68:	f000 f990 	bl	800108c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_I2C4_Init+0x74>)
 8000d70:	f005 ffeb 	bl	8006d4a <HAL_I2CEx_ConfigDigitalFilter>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d7a:	f000 f987 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	24000300 	.word	0x24000300
 8000d88:	58001c00 	.word	0x58001c00
 8000d8c:	00707cbb 	.word	0x00707cbb

08000d90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dae:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <MX_TIM1_Init+0xa0>)
 8000db0:	4a20      	ldr	r2, [pc, #128]	@ (8000e34 <MX_TIM1_Init+0xa4>)
 8000db2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <MX_TIM1_Init+0xa0>)
 8000db6:	223f      	movs	r2, #63	@ 0x3f
 8000db8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <MX_TIM1_Init+0xa0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <MX_TIM1_Init+0xa0>)
 8000dc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <MX_TIM1_Init+0xa0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dce:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <MX_TIM1_Init+0xa0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <MX_TIM1_Init+0xa0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dda:	4815      	ldr	r0, [pc, #84]	@ (8000e30 <MX_TIM1_Init+0xa0>)
 8000ddc:	f009 fbee 	bl	800a5bc <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000de6:	f000 f951 	bl	800108c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	480e      	ldr	r0, [pc, #56]	@ (8000e30 <MX_TIM1_Init+0xa0>)
 8000df8:	f009 fdb8 	bl	800a96c <HAL_TIM_ConfigClockSource>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e02:	f000 f943 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	4619      	mov	r1, r3
 8000e16:	4806      	ldr	r0, [pc, #24]	@ (8000e30 <MX_TIM1_Init+0xa0>)
 8000e18:	f00a f816 	bl	800ae48 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e22:	f000 f933 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	24000354 	.word	0x24000354
 8000e34:	40010000 	.word	0x40010000

08000e38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <MX_TIM3_Init+0x94>)
 8000e58:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed0 <MX_TIM3_Init+0x98>)
 8000e5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <MX_TIM3_Init+0x94>)
 8000e5e:	223f      	movs	r2, #63	@ 0x3f
 8000e60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <MX_TIM3_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e68:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <MX_TIM3_Init+0x94>)
 8000e6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <MX_TIM3_Init+0x94>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <MX_TIM3_Init+0x94>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e7c:	4813      	ldr	r0, [pc, #76]	@ (8000ecc <MX_TIM3_Init+0x94>)
 8000e7e:	f009 fb9d 	bl	800a5bc <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e88:	f000 f900 	bl	800108c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	4619      	mov	r1, r3
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <MX_TIM3_Init+0x94>)
 8000e9a:	f009 fd67 	bl	800a96c <HAL_TIM_ConfigClockSource>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ea4:	f000 f8f2 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_TIM3_Init+0x94>)
 8000eb6:	f009 ffc7 	bl	800ae48 <HAL_TIMEx_MasterConfigSynchronization>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ec0:	f000 f8e4 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	240003a0 	.word	0x240003a0
 8000ed0:	40000400 	.word	0x40000400

08000ed4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <MX_DMA_Init+0x3c>)
 8000edc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <MX_DMA_Init+0x3c>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <MX_DMA_Init+0x3c>)
 8000eec:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	200b      	movs	r0, #11
 8000efe:	f002 f986 	bl	800320e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f02:	200b      	movs	r0, #11
 8000f04:	f002 f99d 	bl	8003242 <HAL_NVIC_EnableIRQ>

}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	58024400 	.word	0x58024400

08000f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f20:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f26:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f3e:	4a18      	ldr	r2, [pc, #96]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f5c:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f7a:	4a09      	ldr	r2, [pc, #36]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_GPIO_Init+0x8c>)
 8000f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	58024400 	.word	0x58024400

08000fa4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a31      	ldr	r2, [pc, #196]	@ (8001078 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d159      	bne.n	800106a <HAL_ADC_ConvCpltCallback+0xc6>
		if(AVE_POS < ROLLING_AVE){
 8000fb6:	4b31      	ldr	r3, [pc, #196]	@ (800107c <HAL_ADC_ConvCpltCallback+0xd8>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b1f      	cmp	r3, #31
 8000fbc:	d806      	bhi.n	8000fcc <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800107c <HAL_ADC_ConvCpltCallback+0xd8>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <HAL_ADC_ConvCpltCallback+0xd8>)
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e035      	b.n	8001038 <HAL_ADC_ConvCpltCallback+0x94>
		}
		else{
			AVE_POS = 0;
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <HAL_ADC_ConvCpltCallback+0xd8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e02a      	b.n	800102e <HAL_ADC_ConvCpltCallback+0x8a>
				for(int z = 0; z < ROLLING_AVE;z++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	e021      	b.n	8001022 <HAL_ADC_ConvCpltCallback+0x7e>
					if(z == 0){
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10a      	bne.n	8000ffa <HAL_ADC_ConvCpltCallback+0x56>
						averages[i] = all_raw_data[i][0];
 8000fe4:	4a26      	ldr	r2, [pc, #152]	@ (8001080 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	4413      	add	r3, r2
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4a24      	ldr	r2, [pc, #144]	@ (8001084 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ff8:	e010      	b.n	800101c <HAL_ADC_ConvCpltCallback+0x78>
					}else{
						averages[i]=(averages[i] + all_raw_data[i][z])/2;
 8000ffa:	4a22      	ldr	r2, [pc, #136]	@ (8001084 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	481f      	ldr	r0, [pc, #124]	@ (8001080 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	0151      	lsls	r1, r2, #5
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	440a      	add	r2, r1
 800100c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001010:	4413      	add	r3, r2
 8001012:	085a      	lsrs	r2, r3, #1
 8001014:	491b      	ldr	r1, [pc, #108]	@ (8001084 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int z = 0; z < ROLLING_AVE;z++){
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	3301      	adds	r3, #1
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	2b1f      	cmp	r3, #31
 8001026:	ddda      	ble.n	8000fde <HAL_ADC_ConvCpltCallback+0x3a>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8cf      	bhi.n	8000fd8 <HAL_ADC_ConvCpltCallback+0x34>
					}
				}
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e010      	b.n	8001060 <HAL_ADC_ConvCpltCallback+0xbc>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	3b01      	subs	r3, #1
 8001044:	4910      	ldr	r1, [pc, #64]	@ (8001088 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 800104c:	490c      	ldr	r1, [pc, #48]	@ (8001080 <HAL_ADC_ConvCpltCallback+0xdc>)
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	0152      	lsls	r2, r2, #5
 8001052:	4413      	add	r3, r2
 8001054:	4602      	mov	r2, r0
 8001056:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	699a      	ldr	r2, [r3, #24]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	429a      	cmp	r2, r3
 8001068:	d8e9      	bhi.n	800103e <HAL_ADC_ConvCpltCallback+0x9a>
		}
	}
}
 800106a:	bf00      	nop
 800106c:	371c      	adds	r7, #28
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40022000 	.word	0x40022000
 800107c:	2400084c 	.word	0x2400084c
 8001080:	2400040c 	.word	0x2400040c
 8001084:	2400080c 	.word	0x2400080c
 8001088:	240003ec 	.word	0x240003ec

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <Error_Handler+0x8>

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_MspInit+0x30>)
 80010a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010a4:	4a08      	ldr	r2, [pc, #32]	@ (80010c8 <HAL_MspInit+0x30>)
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_MspInit+0x30>)
 80010b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	58024400 	.word	0x58024400

080010cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0bc      	sub	sp, #240	@ 0xf0
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	22c0      	movs	r2, #192	@ 0xc0
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f009 ff57 	bl	800afa0 <memset>
  if(hadc->Instance==ADC1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a62      	ldr	r2, [pc, #392]	@ (8001280 <HAL_ADC_MspInit+0x1b4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	f040 80bc 	bne.w	8001276 <HAL_ADC_MspInit+0x1aa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800110a:	2304      	movs	r3, #4
 800110c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 800110e:	2308      	movs	r3, #8
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8001112:	2303      	movs	r3, #3
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800111e:	23c0      	movs	r3, #192	@ 0xc0
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001122:	2300      	movs	r3, #0
 8001124:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	4618      	mov	r0, r3
 8001136:	f006 fe37 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001140:	f7ff ffa4 	bl	800108c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001144:	4b4f      	ldr	r3, [pc, #316]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 8001146:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800114a:	4a4e      	ldr	r2, [pc, #312]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001154:	4b4b      	ldr	r3, [pc, #300]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 8001156:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b48      	ldr	r3, [pc, #288]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 8001164:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001168:	4a46      	ldr	r2, [pc, #280]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001172:	4b44      	ldr	r3, [pc, #272]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 8001174:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b40      	ldr	r3, [pc, #256]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 8001182:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001186:	4a3f      	ldr	r2, [pc, #252]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001190:	4b3c      	ldr	r3, [pc, #240]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 8001192:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b39      	ldr	r3, [pc, #228]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 80011a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011a4:	4a37      	ldr	r2, [pc, #220]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011ae:	4b35      	ldr	r3, [pc, #212]	@ (8001284 <HAL_ADC_MspInit+0x1b8>)
 80011b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011bc:	233f      	movs	r3, #63	@ 0x3f
 80011be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c2:	2303      	movs	r3, #3
 80011c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011d2:	4619      	mov	r1, r3
 80011d4:	482c      	ldr	r0, [pc, #176]	@ (8001288 <HAL_ADC_MspInit+0x1bc>)
 80011d6:	f005 fb21 	bl	800681c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011f0:	4619      	mov	r1, r3
 80011f2:	4826      	ldr	r0, [pc, #152]	@ (800128c <HAL_ADC_MspInit+0x1c0>)
 80011f4:	f005 fb12 	bl	800681c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011f8:	2303      	movs	r3, #3
 80011fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fe:	2303      	movs	r3, #3
 8001200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800120e:	4619      	mov	r1, r3
 8001210:	481f      	ldr	r0, [pc, #124]	@ (8001290 <HAL_ADC_MspInit+0x1c4>)
 8001212:	f005 fb03 	bl	800681c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001216:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 8001218:	4a1f      	ldr	r2, [pc, #124]	@ (8001298 <HAL_ADC_MspInit+0x1cc>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800121c:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 800121e:	2209      	movs	r2, #9
 8001220:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 8001230:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001234:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001236:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 8001238:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800123c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 8001240:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001244:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 8001248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800124c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800125a:	480e      	ldr	r0, [pc, #56]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 800125c:	f002 f80c 	bl	8003278 <HAL_DMA_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 8001266:	f7ff ff11 	bl	800108c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 800126e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001270:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_ADC_MspInit+0x1c8>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	37f0      	adds	r7, #240	@ 0xf0
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40022000 	.word	0x40022000
 8001284:	58024400 	.word	0x58024400
 8001288:	58020800 	.word	0x58020800
 800128c:	58020000 	.word	0x58020000
 8001290:	58020400 	.word	0x58020400
 8001294:	240000a0 	.word	0x240000a0
 8001298:	40020010 	.word	0x40020010

0800129c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0bc      	sub	sp, #240	@ 0xf0
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	22c0      	movs	r2, #192	@ 0xc0
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f009 fe6f 	bl	800afa0 <memset>
  if(hfdcan->Instance==FDCAN1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001434 <HAL_FDCAN_MspInit+0x198>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d159      	bne.n	8001380 <HAL_FDCAN_MspInit+0xe4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80012d8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80012dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f006 fd5f 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80012f0:	f7ff fecc 	bl	800108c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80012f4:	4b50      	ldr	r3, [pc, #320]	@ (8001438 <HAL_FDCAN_MspInit+0x19c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a4f      	ldr	r2, [pc, #316]	@ (8001438 <HAL_FDCAN_MspInit+0x19c>)
 80012fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80012fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001438 <HAL_FDCAN_MspInit+0x19c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10e      	bne.n	8001324 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001306:	4b4d      	ldr	r3, [pc, #308]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 8001308:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800130c:	4a4b      	ldr	r2, [pc, #300]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 800130e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001312:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001316:	4b49      	ldr	r3, [pc, #292]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 8001318:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800131c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b45      	ldr	r3, [pc, #276]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 8001326:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800132a:	4a44      	ldr	r2, [pc, #272]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001334:	4b41      	ldr	r3, [pc, #260]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 8001336:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001342:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800135c:	2309      	movs	r3, #9
 800135e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001366:	4619      	mov	r1, r3
 8001368:	4835      	ldr	r0, [pc, #212]	@ (8001440 <HAL_FDCAN_MspInit+0x1a4>)
 800136a:	f005 fa57 	bl	800681c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2013      	movs	r0, #19
 8001374:	f001 ff4b 	bl	800320e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001378:	2013      	movs	r0, #19
 800137a:	f001 ff62 	bl	8003242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800137e:	e055      	b.n	800142c <HAL_FDCAN_MspInit+0x190>
  else if(hfdcan->Instance==FDCAN2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a2f      	ldr	r2, [pc, #188]	@ (8001444 <HAL_FDCAN_MspInit+0x1a8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d150      	bne.n	800142c <HAL_FDCAN_MspInit+0x190>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800138a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001396:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800139a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139e:	f107 0318 	add.w	r3, r7, #24
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 fd00 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_FDCAN_MspInit+0x116>
      Error_Handler();
 80013ae:	f7ff fe6d 	bl	800108c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80013b2:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <HAL_FDCAN_MspInit+0x19c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <HAL_FDCAN_MspInit+0x19c>)
 80013ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80013bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <HAL_FDCAN_MspInit+0x19c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d10e      	bne.n	80013e2 <HAL_FDCAN_MspInit+0x146>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80013c4:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 80013c6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013ca:	4a1c      	ldr	r2, [pc, #112]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d0:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 80013d6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 80013e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013e8:	4a14      	ldr	r2, [pc, #80]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_FDCAN_MspInit+0x1a0>)
 80013f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001400:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001404:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800141a:	2309      	movs	r3, #9
 800141c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001424:	4619      	mov	r1, r3
 8001426:	4808      	ldr	r0, [pc, #32]	@ (8001448 <HAL_FDCAN_MspInit+0x1ac>)
 8001428:	f005 f9f8 	bl	800681c <HAL_GPIO_Init>
}
 800142c:	bf00      	nop
 800142e:	37f0      	adds	r7, #240	@ 0xf0
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	4000a000 	.word	0x4000a000
 8001438:	240008e0 	.word	0x240008e0
 800143c:	58024400 	.word	0x58024400
 8001440:	58020000 	.word	0x58020000
 8001444:	4000a400 	.word	0x4000a400
 8001448:	58020400 	.word	0x58020400

0800144c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0c0      	sub	sp, #256	@ 0x100
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001464:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001468:	22c0      	movs	r2, #192	@ 0xc0
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f009 fd97 	bl	800afa0 <memset>
  if(hi2c->Instance==I2C1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a86      	ldr	r2, [pc, #536]	@ (8001690 <HAL_I2C_MspInit+0x244>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d146      	bne.n	800150a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800147c:	f04f 0208 	mov.w	r2, #8
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001492:	4618      	mov	r0, r3
 8001494:	f006 fc88 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800149e:	f7ff fdf5 	bl	800108c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 80014a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014a8:	4a7a      	ldr	r2, [pc, #488]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014b2:	4b78      	ldr	r3, [pc, #480]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 80014b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014c0:	23c0      	movs	r3, #192	@ 0xc0
 80014c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c6:	2312      	movs	r3, #18
 80014c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d8:	2304      	movs	r3, #4
 80014da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80014e2:	4619      	mov	r1, r3
 80014e4:	486c      	ldr	r0, [pc, #432]	@ (8001698 <HAL_I2C_MspInit+0x24c>)
 80014e6:	f005 f999 	bl	800681c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 80014ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014f0:	4a68      	ldr	r2, [pc, #416]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 80014f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014f6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80014fa:	4b66      	ldr	r3, [pc, #408]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 80014fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001504:	623b      	str	r3, [r7, #32]
 8001506:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001508:	e0bd      	b.n	8001686 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a63      	ldr	r2, [pc, #396]	@ (800169c <HAL_I2C_MspInit+0x250>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d16c      	bne.n	80015ee <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001514:	f04f 0208 	mov.w	r2, #8
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001526:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152a:	4618      	mov	r0, r3
 800152c:	f006 fc3c 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001536:	f7ff fda9 	bl	800108c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b56      	ldr	r3, [pc, #344]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 800153c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001540:	4a54      	ldr	r2, [pc, #336]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800154a:	4b52      	ldr	r3, [pc, #328]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 800154c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	4b4e      	ldr	r3, [pc, #312]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 800155a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800155e:	4a4d      	ldr	r2, [pc, #308]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001568:	4b4a      	ldr	r3, [pc, #296]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 800156a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800157a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157e:	2312      	movs	r3, #18
 8001580:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001590:	2304      	movs	r3, #4
 8001592:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001596:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800159a:	4619      	mov	r1, r3
 800159c:	4840      	ldr	r0, [pc, #256]	@ (80016a0 <HAL_I2C_MspInit+0x254>)
 800159e:	f005 f93d 	bl	800681c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015aa:	2312      	movs	r3, #18
 80015ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015bc:	2304      	movs	r3, #4
 80015be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015c6:	4619      	mov	r1, r3
 80015c8:	4836      	ldr	r0, [pc, #216]	@ (80016a4 <HAL_I2C_MspInit+0x258>)
 80015ca:	f005 f927 	bl	800681c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015ce:	4b31      	ldr	r3, [pc, #196]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 80015d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 80015d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015da:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80015de:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 80015e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]
}
 80015ec:	e04b      	b.n	8001686 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a2d      	ldr	r2, [pc, #180]	@ (80016a8 <HAL_I2C_MspInit+0x25c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d146      	bne.n	8001686 <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015f8:	f04f 0210 	mov.w	r2, #16
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800160e:	4618      	mov	r0, r3
 8001610:	f006 fbca 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 800161a:	f7ff fd37 	bl	800108c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 8001620:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001624:	4a1b      	ldr	r2, [pc, #108]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 8001630:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800163c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001640:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001644:	2312      	movs	r3, #18
 8001646:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001656:	2306      	movs	r3, #6
 8001658:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001660:	4619      	mov	r1, r3
 8001662:	480d      	ldr	r0, [pc, #52]	@ (8001698 <HAL_I2C_MspInit+0x24c>)
 8001664:	f005 f8da 	bl	800681c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 800166a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 8001670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001674:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_I2C_MspInit+0x248>)
 800167a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800167e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
}
 8001686:	bf00      	nop
 8001688:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40005400 	.word	0x40005400
 8001694:	58024400 	.word	0x58024400
 8001698:	58020400 	.word	0x58020400
 800169c:	40005c00 	.word	0x40005c00
 80016a0:	58020800 	.word	0x58020800
 80016a4:	58020000 	.word	0x58020000
 80016a8:	58001c00 	.word	0x58001c00

080016ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <HAL_TIM_Base_MspInit+0x74>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10f      	bne.n	80016de <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_TIM_Base_MspInit+0x78>)
 80016c0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80016c4:	4a17      	ldr	r2, [pc, #92]	@ (8001724 <HAL_TIM_Base_MspInit+0x78>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_TIM_Base_MspInit+0x78>)
 80016d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016dc:	e01b      	b.n	8001716 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a11      	ldr	r2, [pc, #68]	@ (8001728 <HAL_TIM_Base_MspInit+0x7c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d116      	bne.n	8001716 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_TIM_Base_MspInit+0x78>)
 80016ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <HAL_TIM_Base_MspInit+0x78>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <HAL_TIM_Base_MspInit+0x78>)
 80016fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	201d      	movs	r0, #29
 800170c:	f001 fd7f 	bl	800320e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001710:	201d      	movs	r0, #29
 8001712:	f001 fd96 	bl	8003242 <HAL_NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40010000 	.word	0x40010000
 8001724:	58024400 	.word	0x58024400
 8001728:	40000400 	.word	0x40000400

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <NMI_Handler+0x4>

08001734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <MemManage_Handler+0x4>

08001744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <UsageFault_Handler+0x4>

08001754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001782:	f000 fab5 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <DMA1_Stream0_IRQHandler+0x10>)
 8001792:	f002 fb69 	bl	8003e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	240000a0 	.word	0x240000a0

080017a0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <FDCAN1_IT0_IRQHandler+0x10>)
 80017a6:	f004 fb3d 	bl	8005e24 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	24000118 	.word	0x24000118

080017b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <TIM3_IRQHandler+0x2c>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <TIM3_IRQHandler+0x2c>)
 80017c2:	801a      	strh	r2, [r3, #0]
	if(millis == 1000){
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <TIM3_IRQHandler+0x2c>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017cc:	d102      	bne.n	80017d4 <TIM3_IRQHandler+0x20>
		CAN_enable = 1;
 80017ce:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <TIM3_IRQHandler+0x30>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017d4:	4804      	ldr	r0, [pc, #16]	@ (80017e8 <TIM3_IRQHandler+0x34>)
 80017d6:	f008 ffc1 	bl	800a75c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	24000870 	.word	0x24000870
 80017e4:	24000872 	.word	0x24000872
 80017e8:	240003a0 	.word	0x240003a0

080017ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017f0:	4b32      	ldr	r3, [pc, #200]	@ (80018bc <SystemInit+0xd0>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f6:	4a31      	ldr	r2, [pc, #196]	@ (80018bc <SystemInit+0xd0>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001800:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <SystemInit+0xd4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	2b02      	cmp	r3, #2
 800180a:	d807      	bhi.n	800181c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800180c:	4b2c      	ldr	r3, [pc, #176]	@ (80018c0 <SystemInit+0xd4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 030f 	bic.w	r3, r3, #15
 8001814:	4a2a      	ldr	r2, [pc, #168]	@ (80018c0 <SystemInit+0xd4>)
 8001816:	f043 0303 	orr.w	r3, r3, #3
 800181a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800181c:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <SystemInit+0xd8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a28      	ldr	r2, [pc, #160]	@ (80018c4 <SystemInit+0xd8>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001828:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <SystemInit+0xd8>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800182e:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <SystemInit+0xd8>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4924      	ldr	r1, [pc, #144]	@ (80018c4 <SystemInit+0xd8>)
 8001834:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <SystemInit+0xdc>)
 8001836:	4013      	ands	r3, r2
 8001838:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800183a:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <SystemInit+0xd4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001846:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <SystemInit+0xd4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 030f 	bic.w	r3, r3, #15
 800184e:	4a1c      	ldr	r2, [pc, #112]	@ (80018c0 <SystemInit+0xd4>)
 8001850:	f043 0303 	orr.w	r3, r3, #3
 8001854:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001856:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <SystemInit+0xd8>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <SystemInit+0xd8>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001862:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <SystemInit+0xd8>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <SystemInit+0xd8>)
 800186a:	4a18      	ldr	r2, [pc, #96]	@ (80018cc <SystemInit+0xe0>)
 800186c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <SystemInit+0xd8>)
 8001870:	4a17      	ldr	r2, [pc, #92]	@ (80018d0 <SystemInit+0xe4>)
 8001872:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <SystemInit+0xd8>)
 8001876:	4a17      	ldr	r2, [pc, #92]	@ (80018d4 <SystemInit+0xe8>)
 8001878:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800187a:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <SystemInit+0xd8>)
 800187c:	2200      	movs	r2, #0
 800187e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001880:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <SystemInit+0xd8>)
 8001882:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <SystemInit+0xe8>)
 8001884:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001886:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <SystemInit+0xd8>)
 8001888:	2200      	movs	r2, #0
 800188a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800188c:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <SystemInit+0xd8>)
 800188e:	4a11      	ldr	r2, [pc, #68]	@ (80018d4 <SystemInit+0xe8>)
 8001890:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001892:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <SystemInit+0xd8>)
 8001894:	2200      	movs	r2, #0
 8001896:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <SystemInit+0xd8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a09      	ldr	r2, [pc, #36]	@ (80018c4 <SystemInit+0xd8>)
 800189e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018a4:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <SystemInit+0xd8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <SystemInit+0xec>)
 80018ac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00
 80018c0:	52002000 	.word	0x52002000
 80018c4:	58024400 	.word	0x58024400
 80018c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80018cc:	02020200 	.word	0x02020200
 80018d0:	01ff0000 	.word	0x01ff0000
 80018d4:	01010280 	.word	0x01010280
 80018d8:	52004000 	.word	0x52004000

080018dc <TF_Select>:
#include "functions.h"
#include "main.h"



uint16_t TF_Select(uint8_t bytes, uint32_t raw, uint8_t sensor){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]

	uint16_t transmit = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	81fb      	strh	r3, [r7, #14]

	switch(sensor){
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	2b0b      	cmp	r3, #11
 80018f4:	d879      	bhi.n	80019ea <TF_Select+0x10e>
 80018f6:	a201      	add	r2, pc, #4	@ (adr r2, 80018fc <TF_Select+0x20>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	0800192d 	.word	0x0800192d
 8001900:	0800193d 	.word	0x0800193d
 8001904:	0800194d 	.word	0x0800194d
 8001908:	0800195d 	.word	0x0800195d
 800190c:	0800196d 	.word	0x0800196d
 8001910:	0800198d 	.word	0x0800198d
 8001914:	0800197d 	.word	0x0800197d
 8001918:	0800199d 	.word	0x0800199d
 800191c:	080019ad 	.word	0x080019ad
 8001920:	080019bd 	.word	0x080019bd
 8001924:	080019cd 	.word	0x080019cd
 8001928:	080019dd 	.word	0x080019dd
	case VOLTAGE_3V3:
		transmit = TF_3V3(bytes, raw);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 f861 	bl	80019f8 <TF_3V3>
 8001936:	4603      	mov	r3, r0
 8001938:	81fb      	strh	r3, [r7, #14]
		break;
 800193a:	e057      	b.n	80019ec <TF_Select+0x110>
	case VOLTAGE_5V:
		transmit = TF_5V(bytes, raw);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f877 	bl	8001a34 <TF_5V>
 8001946:	4603      	mov	r3, r0
 8001948:	81fb      	strh	r3, [r7, #14]
		break;
 800194a:	e04f      	b.n	80019ec <TF_Select+0x110>
	case BPPS:
		transmit = TF_BPPS(bytes, raw);
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	6839      	ldr	r1, [r7, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f88d 	bl	8001a70 <TF_BPPS>
 8001956:	4603      	mov	r3, r0
 8001958:	81fb      	strh	r3, [r7, #14]
		break;
 800195a:	e047      	b.n	80019ec <TF_Select+0x110>
	case APPS:
		transmit = TF_APPS(bytes, raw);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f000 f8a3 	bl	8001aac <TF_APPS>
 8001966:	4603      	mov	r3, r0
 8001968:	81fb      	strh	r3, [r7, #14]
		break;
 800196a:	e03f      	b.n	80019ec <TF_Select+0x110>
	case FRONT_HEAVE:
		transmit = TF_FRONT_HEAVE(bytes, raw);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	6839      	ldr	r1, [r7, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f8b9 	bl	8001ae8 <TF_FRONT_HEAVE>
 8001976:	4603      	mov	r3, r0
 8001978:	81fb      	strh	r3, [r7, #14]
		break;
 800197a:	e037      	b.n	80019ec <TF_Select+0x110>
	case REAR_HEAVE:
		transmit = TF_REAR_HEAVE(bytes, raw);
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f8be 	bl	8001b02 <TF_REAR_HEAVE>
 8001986:	4603      	mov	r3, r0
 8001988:	81fb      	strh	r3, [r7, #14]
		break;
 800198a:	e02f      	b.n	80019ec <TF_Select+0x110>
	case FRONT_ROLL:
		transmit = TF_FRONT_ROLL(bytes, raw);
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	6839      	ldr	r1, [r7, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f8c3 	bl	8001b1c <TF_FRONT_ROLL>
 8001996:	4603      	mov	r3, r0
 8001998:	81fb      	strh	r3, [r7, #14]
		break;
 800199a:	e027      	b.n	80019ec <TF_Select+0x110>
	case REAR_ROLL:
		transmit = TF_REAR_ROLL(bytes, raw);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f8c8 	bl	8001b36 <TF_REAR_ROLL>
 80019a6:	4603      	mov	r3, r0
 80019a8:	81fb      	strh	r3, [r7, #14]
		break;
 80019aa:	e01f      	b.n	80019ec <TF_Select+0x110>
	case TYRE_TEMP:
		transmit = TF_TYRE_TEMP(bytes, raw);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	6839      	ldr	r1, [r7, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f8cd 	bl	8001b50 <TF_TYRE_TEMP>
 80019b6:	4603      	mov	r3, r0
 80019b8:	81fb      	strh	r3, [r7, #14]
		break;
 80019ba:	e017      	b.n	80019ec <TF_Select+0x110>
	case ANGLE_GEAR:
		transmit = TF_ANGLE_GEAR(bytes, raw);
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f8d2 	bl	8001b6a <TF_ANGLE_GEAR>
 80019c6:	4603      	mov	r3, r0
 80019c8:	81fb      	strh	r3, [r7, #14]
		break;
 80019ca:	e00f      	b.n	80019ec <TF_Select+0x110>
	case WATER_LVL:
		transmit = TF_WATER_LVL(bytes, raw);
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	6839      	ldr	r1, [r7, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f8d7 	bl	8001b84 <TF_WATER_LVL>
 80019d6:	4603      	mov	r3, r0
 80019d8:	81fb      	strh	r3, [r7, #14]
		break;
 80019da:	e007      	b.n	80019ec <TF_Select+0x110>
	case BRK_PRES:
		transmit = TF_BRK_PRES(bytes, raw);
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	6839      	ldr	r1, [r7, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 f8dc 	bl	8001b9e <TF_BRK_PRES>
 80019e6:	4603      	mov	r3, r0
 80019e8:	81fb      	strh	r3, [r7, #14]
	default:
		//TODO implement error here
		break;
 80019ea:	bf00      	nop
	}

	return transmit;
 80019ec:	89fb      	ldrh	r3, [r7, #14]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop

080019f8 <TF_3V3>:

uint16_t TF_3V3(uint8_t bytes, uint32_t raw){
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 3300;
 8001a04:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001a08:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	fb03 f202 	mul.w	r2, r3, r2
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <TF_3V3+0x38>)
 8001a14:	fba3 1302 	umull	r1, r3, r3, r2
 8001a18:	1ad2      	subs	r2, r2, r3
 8001a1a:	0852      	lsrs	r2, r2, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	0adb      	lsrs	r3, r3, #11
 8001a20:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001a22:	89bb      	ldrh	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	00100101 	.word	0x00100101

08001a34 <TF_5V>:

uint16_t TF_5V(uint8_t bytes, uint32_t raw){
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 5000;
 8001a40:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a44:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 8001a46:	89fb      	ldrh	r3, [r7, #14]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	fb03 f202 	mul.w	r2, r3, r2
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <TF_5V+0x38>)
 8001a50:	fba3 1302 	umull	r1, r3, r3, r2
 8001a54:	1ad2      	subs	r2, r2, r3
 8001a56:	0852      	lsrs	r2, r2, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	0adb      	lsrs	r3, r3, #11
 8001a5c:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001a5e:	89bb      	ldrh	r3, [r7, #12]

}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	00100101 	.word	0x00100101

08001a70 <TF_BPPS>:
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw){ //brake pedal position sensor
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
	uint16_t max_brake_pres = 200;
 8001a7c:	23c8      	movs	r3, #200	@ 0xc8
 8001a7e:	81fb      	strh	r3, [r7, #14]

	uint16_t brake_pres = raw*max_brake_pres / 4095;
 8001a80:	89fb      	ldrh	r3, [r7, #14]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	fb03 f202 	mul.w	r2, r3, r2
 8001a88:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <TF_BPPS+0x38>)
 8001a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	0852      	lsrs	r2, r2, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	0adb      	lsrs	r3, r3, #11
 8001a96:	81bb      	strh	r3, [r7, #12]
	return brake_pres;
 8001a98:	89bb      	ldrh	r3, [r7, #12]

}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	00100101 	.word	0x00100101

08001aac <TF_APPS>:
uint16_t TF_APPS(uint8_t bytes, uint32_t raw){
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 8001ab8:	2364      	movs	r3, #100	@ 0x64
 8001aba:	81fb      	strh	r3, [r7, #14]

	uint16_t apps = raw*max_pos / 4095;
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	fb03 f202 	mul.w	r2, r3, r2
 8001ac4:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <TF_APPS+0x38>)
 8001ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	0852      	lsrs	r2, r2, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	0adb      	lsrs	r3, r3, #11
 8001ad2:	81bb      	strh	r3, [r7, #12]
	return apps;
 8001ad4:	89bb      	ldrh	r3, [r7, #12]

}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	00100101 	.word	0x00100101

08001ae8 <TF_FRONT_HEAVE>:
uint16_t TF_FRONT_HEAVE(uint8_t bytes, uint32_t raw){
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]

}
 8001af4:	bf00      	nop
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <TF_REAR_HEAVE>:
uint16_t TF_REAR_HEAVE(uint8_t bytes, uint32_t raw){
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	6039      	str	r1, [r7, #0]
 8001b0c:	71fb      	strb	r3, [r7, #7]

}
 8001b0e:	bf00      	nop
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <TF_FRONT_ROLL>:
uint16_t TF_FRONT_ROLL(uint8_t bytes, uint32_t raw){
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]

}
 8001b28:	bf00      	nop
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <TF_REAR_ROLL>:
uint16_t TF_REAR_ROLL(uint8_t bytes, uint32_t raw){
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	6039      	str	r1, [r7, #0]
 8001b40:	71fb      	strb	r3, [r7, #7]

}
 8001b42:	bf00      	nop
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <TF_TYRE_TEMP>:
uint16_t TF_TYRE_TEMP(uint8_t bytes, uint32_t raw){
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]

}
 8001b5c:	bf00      	nop
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <TF_ANGLE_GEAR>:
uint16_t TF_ANGLE_GEAR(uint8_t bytes, uint32_t raw){
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	6039      	str	r1, [r7, #0]
 8001b74:	71fb      	strb	r3, [r7, #7]

}
 8001b76:	bf00      	nop
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <TF_WATER_LVL>:
uint16_t TF_WATER_LVL(uint8_t bytes, uint32_t raw){
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]

}
 8001b90:	bf00      	nop
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <TF_BRK_PRES>:

uint16_t TF_BRK_PRES(uint8_t bytes, uint32_t raw){
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	6039      	str	r1, [r7, #0]
 8001ba8:	71fb      	strb	r3, [r7, #7]

}
 8001baa:	bf00      	nop
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <Reset_Handler>:
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bf0 <LoopFillZerobss+0xe>
 8001bbc:	f7ff fe16 	bl	80017ec <SystemInit>
 8001bc0:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <LoopFillZerobss+0x12>)
 8001bc2:	490d      	ldr	r1, [pc, #52]	@ (8001bf8 <LoopFillZerobss+0x16>)
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <LoopFillZerobss+0x1a>)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:
 8001bca:	58d4      	ldr	r4, [r2, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:
 8001bd0:	18c4      	adds	r4, r0, r3
 8001bd2:	428c      	cmp	r4, r1
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <LoopFillZerobss+0x1e>)
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c04 <LoopFillZerobss+0x22>)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:
 8001be2:	42a2      	cmp	r2, r4
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>
 8001be6:	f009 f9e3 	bl	800afb0 <__libc_init_array>
 8001bea:	f7fe fcb1 	bl	8000550 <main>
 8001bee:	4770      	bx	lr
 8001bf0:	24100000 	.word	0x24100000
 8001bf4:	24000000 	.word	0x24000000
 8001bf8:	24000010 	.word	0x24000010
 8001bfc:	0800b0a8 	.word	0x0800b0a8
 8001c00:	24000010 	.word	0x24000010
 8001c04:	240008e8 	.word	0x240008e8

08001c08 <ADC_IRQHandler>:
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c12:	2003      	movs	r0, #3
 8001c14:	f001 faf0 	bl	80031f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c18:	f005 ff06 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <HAL_Init+0x68>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	4913      	ldr	r1, [pc, #76]	@ (8001c78 <HAL_Init+0x6c>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c36:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <HAL_Init+0x68>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c78 <HAL_Init+0x6c>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c7c <HAL_Init+0x70>)
 8001c4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c50:	4a0b      	ldr	r2, [pc, #44]	@ (8001c80 <HAL_Init+0x74>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c56:	200f      	movs	r0, #15
 8001c58:	f000 f814 	bl	8001c84 <HAL_InitTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e002      	b.n	8001c6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c66:	f7ff fa17 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	58024400 	.word	0x58024400
 8001c78:	0800b078 	.word	0x0800b078
 8001c7c:	24000004 	.word	0x24000004
 8001c80:	24000000 	.word	0x24000000

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_InitTick+0x60>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e021      	b.n	8001cdc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c98:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <HAL_InitTick+0x64>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <HAL_InitTick+0x60>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fad5 	bl	800325e <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00e      	b.n	8001cdc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d80a      	bhi.n	8001cda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f001 fa9f 	bl	800320e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd0:	4a06      	ldr	r2, [pc, #24]	@ (8001cec <HAL_InitTick+0x68>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2400000c 	.word	0x2400000c
 8001ce8:	24000000 	.word	0x24000000
 8001cec:	24000008 	.word	0x24000008

08001cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_IncTick+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_IncTick+0x24>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <HAL_IncTick+0x24>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	2400000c 	.word	0x2400000c
 8001d14:	240008e4 	.word	0x240008e4

08001d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <HAL_GetTick+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	240008e4 	.word	0x240008e4

08001d30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	609a      	str	r2, [r3, #8]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3360      	adds	r3, #96	@ 0x60
 8001daa:	461a      	mov	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001dcc:	bf00      	nop
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	611a      	str	r2, [r3, #16]
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b087      	sub	sp, #28
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3360      	adds	r3, #96	@ 0x60
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	601a      	str	r2, [r3, #0]
  }
}
 8001e34:	bf00      	nop
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b087      	sub	sp, #28
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3330      	adds	r3, #48	@ 0x30
 8001e76:	461a      	mov	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	4413      	add	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	211f      	movs	r1, #31
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	0e9b      	lsrs	r3, r3, #26
 8001e9e:	f003 011f 	and.w	r1, r3, #31
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	431a      	orrs	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001eb2:	bf00      	nop
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f023 0203 	bic.w	r2, r3, #3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3314      	adds	r3, #20
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	0e5b      	lsrs	r3, r3, #25
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	4413      	add	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	0d1b      	lsrs	r3, r3, #20
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	2107      	movs	r1, #7
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	401a      	ands	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	0d1b      	lsrs	r3, r3, #20
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f2e:	bf00      	nop
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0318 	and.w	r3, r3, #24
 8001f5e:	4908      	ldr	r1, [pc, #32]	@ (8001f80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f60:	40d9      	lsrs	r1, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	400b      	ands	r3, r1
 8001f66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	000fffff 	.word	0x000fffff

08001f84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 031f 	and.w	r3, r3, #31
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6093      	str	r3, [r2, #8]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	5fffffc0 	.word	0x5fffffc0

08001fc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fd8:	d101      	bne.n	8001fde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	6fffffc0 	.word	0x6fffffc0

08002014 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002028:	d101      	bne.n	800202e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <LL_ADC_Enable+0x24>)
 800204a:	4013      	ands	r3, r2
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	7fffffc0 	.word	0x7fffffc0

08002064 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <LL_ADC_IsEnabled+0x18>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <LL_ADC_IsEnabled+0x1a>
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <LL_ADC_REG_StartConversion+0x24>)
 800209a:	4013      	ands	r3, r2
 800209c:	f043 0204 	orr.w	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	7fffffc0 	.word	0x7fffffc0

080020b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d101      	bne.n	80020cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d101      	bne.n	80020f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e138      	b.n	800238c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe ffcf 	bl	80010cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff3f 	bl	8001fc4 <LL_ADC_IsDeepPowerDownEnabled>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d004      	beq.n	8002156 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff25 	bl	8001fa0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff5a 	bl	8002014 <LL_ADC_IsInternalRegulatorEnabled>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d114      	bne.n	8002190 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff ff3e 	bl	8001fec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002170:	4b88      	ldr	r3, [pc, #544]	@ (8002394 <HAL_ADC_Init+0x294>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	099b      	lsrs	r3, r3, #6
 8002176:	4a88      	ldr	r2, [pc, #544]	@ (8002398 <HAL_ADC_Init+0x298>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	3301      	adds	r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002182:	e002      	b.n	800218a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	3b01      	subs	r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f9      	bne.n	8002184 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff3d 	bl	8002014 <LL_ADC_IsInternalRegulatorEnabled>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a4:	f043 0210 	orr.w	r2, r3, #16
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff77 	bl	80020b4 <LL_ADC_REG_IsConversionOngoing>
 80021c6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 80d2 	bne.w	800237a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 80ce 	bne.w	800237a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021e6:	f043 0202 	orr.w	r2, r3, #2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff36 	bl	8002064 <LL_ADC_IsEnabled>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d110      	bne.n	8002220 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021fe:	4867      	ldr	r0, [pc, #412]	@ (800239c <HAL_ADC_Init+0x29c>)
 8002200:	f7ff ff30 	bl	8002064 <LL_ADC_IsEnabled>
 8002204:	4604      	mov	r4, r0
 8002206:	4866      	ldr	r0, [pc, #408]	@ (80023a0 <HAL_ADC_Init+0x2a0>)
 8002208:	f7ff ff2c 	bl	8002064 <LL_ADC_IsEnabled>
 800220c:	4603      	mov	r3, r0
 800220e:	4323      	orrs	r3, r4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d105      	bne.n	8002220 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4619      	mov	r1, r3
 800221a:	4862      	ldr	r0, [pc, #392]	@ (80023a4 <HAL_ADC_Init+0x2a4>)
 800221c:	f7ff fd88 	bl	8001d30 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7d5b      	ldrb	r3, [r3, #21]
 8002224:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800222a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002230:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7f1b      	ldrb	r3, [r3, #28]
 8002236:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7f1b      	ldrb	r3, [r3, #28]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	3b01      	subs	r3, #1
 800224a:	045b      	lsls	r3, r3, #17
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	4b4c      	ldr	r3, [pc, #304]	@ (80023a8 <HAL_ADC_Init+0x2a8>)
 8002276:	4013      	ands	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	69b9      	ldr	r1, [r7, #24]
 800227e:	430b      	orrs	r3, r1
 8002280:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff14 	bl	80020b4 <LL_ADC_REG_IsConversionOngoing>
 800228c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff21 	bl	80020da <LL_ADC_INJ_IsConversionOngoing>
 8002298:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d14a      	bne.n	8002336 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d147      	bne.n	8002336 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7d1b      	ldrb	r3, [r3, #20]
 80022aa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	4b3c      	ldr	r3, [pc, #240]	@ (80023ac <HAL_ADC_Init+0x2ac>)
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	69b9      	ldr	r1, [r7, #24]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d11b      	bne.n	800230a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	4b34      	ldr	r3, [pc, #208]	@ (80023b0 <HAL_ADC_Init+0x2b0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022e6:	3a01      	subs	r2, #1
 80022e8:	0411      	lsls	r1, r2, #16
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022f4:	4311      	orrs	r1, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022fa:	430a      	orrs	r2, r1
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	611a      	str	r2, [r3, #16]
 8002308:	e007      	b.n	800231a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fd01 	bl	8002d38 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d10c      	bne.n	8002358 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	f023 010f 	bic.w	r1, r3, #15
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	1e5a      	subs	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	631a      	str	r2, [r3, #48]	@ 0x30
 8002356:	e007      	b.n	8002368 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 020f 	bic.w	r2, r2, #15
 8002366:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236c:	f023 0303 	bic.w	r3, r3, #3
 8002370:	f043 0201 	orr.w	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54
 8002378:	e007      	b.n	800238a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237e:	f043 0210 	orr.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800238a:	7ffb      	ldrb	r3, [r7, #31]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3724      	adds	r7, #36	@ 0x24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}
 8002394:	24000000 	.word	0x24000000
 8002398:	053e2d63 	.word	0x053e2d63
 800239c:	40022000 	.word	0x40022000
 80023a0:	40022100 	.word	0x40022100
 80023a4:	40022300 	.word	0x40022300
 80023a8:	fff0c003 	.word	0xfff0c003
 80023ac:	ffffbffc 	.word	0xffffbffc
 80023b0:	fc00f81e 	.word	0xfc00f81e

080023b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023c0:	484f      	ldr	r0, [pc, #316]	@ (8002500 <HAL_ADC_Start_DMA+0x14c>)
 80023c2:	f7ff fddf 	bl	8001f84 <LL_ADC_GetMultimode>
 80023c6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fe71 	bl	80020b4 <LL_ADC_REG_IsConversionOngoing>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f040 808c 	bne.w	80024f2 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_Start_DMA+0x34>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e087      	b.n	80024f8 <HAL_ADC_Start_DMA+0x144>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d002      	beq.n	8002402 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b09      	cmp	r3, #9
 8002400:	d170      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fb88 	bl	8002b18 <ADC_Enable>
 8002408:	4603      	mov	r3, r0
 800240a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d163      	bne.n	80024da <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002416:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <HAL_ADC_Start_DMA+0x150>)
 8002418:	4013      	ands	r3, r2
 800241a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a38      	ldr	r2, [pc, #224]	@ (8002508 <HAL_ADC_Start_DMA+0x154>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d002      	beq.n	8002432 <HAL_ADC_Start_DMA+0x7e>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	e000      	b.n	8002434 <HAL_ADC_Start_DMA+0x80>
 8002432:	4b36      	ldr	r3, [pc, #216]	@ (800250c <HAL_ADC_Start_DMA+0x158>)
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	4293      	cmp	r3, r2
 800243a:	d002      	beq.n	8002442 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002446:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002452:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	f023 0206 	bic.w	r2, r3, #6
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	659a      	str	r2, [r3, #88]	@ 0x58
 8002466:	e002      	b.n	800246e <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	4a27      	ldr	r2, [pc, #156]	@ (8002510 <HAL_ADC_Start_DMA+0x15c>)
 8002474:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247a:	4a26      	ldr	r2, [pc, #152]	@ (8002514 <HAL_ADC_Start_DMA+0x160>)
 800247c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	4a25      	ldr	r2, [pc, #148]	@ (8002518 <HAL_ADC_Start_DMA+0x164>)
 8002484:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	221c      	movs	r2, #28
 800248c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0210 	orr.w	r2, r2, #16
 80024a4:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f7ff fd04 	bl	8001ebe <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3340      	adds	r3, #64	@ 0x40
 80024c0:	4619      	mov	r1, r3
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f001 fa65 	bl	8003994 <HAL_DMA_Start_IT>
 80024ca:	4603      	mov	r3, r0
 80024cc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fdda 	bl	800208c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80024d8:	e00d      	b.n	80024f6 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80024e2:	e008      	b.n	80024f6 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80024f0:	e001      	b.n	80024f6 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40022300 	.word	0x40022300
 8002504:	fffff0fe 	.word	0xfffff0fe
 8002508:	40022100 	.word	0x40022100
 800250c:	40022000 	.word	0x40022000
 8002510:	08002c11 	.word	0x08002c11
 8002514:	08002ce9 	.word	0x08002ce9
 8002518:	08002d05 	.word	0x08002d05

0800251c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b0a1      	sub	sp, #132	@ 0x84
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a95      	ldr	r2, [pc, #596]	@ (80027b4 <HAL_ADC_ConfigChannel+0x270>)
 800255e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x2a>
 800256a:	2302      	movs	r3, #2
 800256c:	e2c0      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x5ac>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fd9a 	bl	80020b4 <LL_ADC_REG_IsConversionOngoing>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 82a5 	bne.w	8002ad2 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db2c      	blt.n	80025ea <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002598:	2b00      	cmp	r3, #0
 800259a:	d108      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x6a>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	2201      	movs	r2, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	e016      	b.n	80025dc <HAL_ADC_ConfigChannel+0x98>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025be:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80025c6:	2320      	movs	r3, #32
 80025c8:	e003      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80025ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2201      	movs	r2, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	69d1      	ldr	r1, [r2, #28]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f7ff fc35 	bl	8001e66 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fd57 	bl	80020b4 <LL_ADC_REG_IsConversionOngoing>
 8002606:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fd64 	bl	80020da <LL_ADC_INJ_IsConversionOngoing>
 8002612:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002614:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 80a0 	bne.w	800275c <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800261c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 809c 	bne.w	800275c <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6819      	ldr	r1, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	461a      	mov	r2, r3
 8002632:	f7ff fc57 	bl	8001ee4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <HAL_ADC_ConfigChannel+0x118>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	e00a      	b.n	8002672 <HAL_ADC_ConfigChannel+0x12e>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d027      	beq.n	80026cc <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6919      	ldr	r1, [r3, #16]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800268a:	f7ff fb85 	bl	8001d98 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	7e5b      	ldrb	r3, [r3, #25]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x160>
 800269e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80026a2:	e000      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x162>
 80026a4:	2300      	movs	r3, #0
 80026a6:	461a      	mov	r2, r3
 80026a8:	f7ff fbaf 	bl	8001e0a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6919      	ldr	r1, [r3, #16]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	7e1b      	ldrb	r3, [r3, #24]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x17e>
 80026bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026c0:	e000      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x180>
 80026c2:	2300      	movs	r3, #0
 80026c4:	461a      	mov	r2, r3
 80026c6:	f7ff fb87 	bl	8001dd8 <LL_ADC_SetDataRightShift>
 80026ca:	e047      	b.n	800275c <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	069b      	lsls	r3, r3, #26
 80026dc:	429a      	cmp	r2, r3
 80026de:	d107      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026ee:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	069b      	lsls	r3, r3, #26
 8002700:	429a      	cmp	r2, r3
 8002702:	d107      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002712:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800271a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	069b      	lsls	r3, r3, #26
 8002724:	429a      	cmp	r2, r3
 8002726:	d107      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002736:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800273e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	069b      	lsls	r3, r3, #26
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800275a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fc7f 	bl	8002064 <LL_ADC_IsEnabled>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 81bb 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	461a      	mov	r2, r3
 800277c:	f7ff fbde 	bl	8001f3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a0b      	ldr	r2, [pc, #44]	@ (80027b4 <HAL_ADC_ConfigChannel+0x270>)
 8002786:	4293      	cmp	r3, r2
 8002788:	f040 8130 	bne.w	80029ec <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10d      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x274>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	3301      	adds	r3, #1
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2b09      	cmp	r3, #9
 80027aa:	bf94      	ite	ls
 80027ac:	2301      	movls	r3, #1
 80027ae:	2300      	movhi	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e01b      	b.n	80027ec <HAL_ADC_ConfigChannel+0x2a8>
 80027b4:	47ff0000 	.word	0x47ff0000
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e003      	b.n	80027dc <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 80027d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2b09      	cmp	r3, #9
 80027e4:	bf94      	ite	ls
 80027e6:	2301      	movls	r3, #1
 80027e8:	2300      	movhi	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d079      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <HAL_ADC_ConfigChannel+0x2c8>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0e9b      	lsrs	r3, r3, #26
 8002802:	3301      	adds	r3, #1
 8002804:	069b      	lsls	r3, r3, #26
 8002806:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800280a:	e015      	b.n	8002838 <HAL_ADC_ConfigChannel+0x2f4>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800281a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800281c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800281e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3301      	adds	r3, #1
 8002832:	069b      	lsls	r3, r3, #26
 8002834:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x314>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	3301      	adds	r3, #1
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2101      	movs	r1, #1
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	e017      	b.n	8002888 <HAL_ADC_ConfigChannel+0x344>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002868:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800286a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e003      	b.n	800287c <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	ea42 0103 	orr.w	r1, r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x36a>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	3301      	adds	r3, #1
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	051b      	lsls	r3, r3, #20
 80028ac:	e018      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x39c>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80028c6:	2320      	movs	r3, #32
 80028c8:	e003      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80028ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	3301      	adds	r3, #1
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e0:	430b      	orrs	r3, r1
 80028e2:	e07e      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x3bc>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0e9b      	lsrs	r3, r3, #26
 80028f6:	3301      	adds	r3, #1
 80028f8:	069b      	lsls	r3, r3, #26
 80028fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028fe:	e015      	b.n	800292c <HAL_ADC_ConfigChannel+0x3e8>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002918:	2320      	movs	r3, #32
 800291a:	e003      	b.n	8002924 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 800291c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	3301      	adds	r3, #1
 8002926:	069b      	lsls	r3, r3, #26
 8002928:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_ADC_ConfigChannel+0x408>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	3301      	adds	r3, #1
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	e017      	b.n	800297c <HAL_ADC_ConfigChannel+0x438>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	61bb      	str	r3, [r7, #24]
  return result;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e003      	b.n	8002970 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	ea42 0103 	orr.w	r1, r2, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10d      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x464>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	3301      	adds	r3, #1
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	3b1e      	subs	r3, #30
 80029a0:	051b      	lsls	r3, r3, #20
 80029a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	e01b      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x49c>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	60fb      	str	r3, [r7, #12]
  return result;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80029c0:	2320      	movs	r3, #32
 80029c2:	e003      	b.n	80029cc <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	f003 021f 	and.w	r2, r3, #31
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	3b1e      	subs	r3, #30
 80029da:	051b      	lsls	r3, r3, #20
 80029dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e0:	430b      	orrs	r3, r1
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	6892      	ldr	r2, [r2, #8]
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7ff fa7c 	bl	8001ee4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	da77      	bge.n	8002ae4 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029f4:	4840      	ldr	r0, [pc, #256]	@ (8002af8 <HAL_ADC_ConfigChannel+0x5b4>)
 80029f6:	f7ff f9c1 	bl	8001d7c <LL_ADC_GetCommonPathInternalCh>
 80029fa:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029fc:	483f      	ldr	r0, [pc, #252]	@ (8002afc <HAL_ADC_ConfigChannel+0x5b8>)
 80029fe:	f7ff fb31 	bl	8002064 <LL_ADC_IsEnabled>
 8002a02:	4604      	mov	r4, r0
 8002a04:	483e      	ldr	r0, [pc, #248]	@ (8002b00 <HAL_ADC_ConfigChannel+0x5bc>)
 8002a06:	f7ff fb2d 	bl	8002064 <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4323      	orrs	r3, r4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d155      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3b      	ldr	r2, [pc, #236]	@ (8002b04 <HAL_ADC_ConfigChannel+0x5c0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d122      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x51e>
 8002a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11d      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a35      	ldr	r2, [pc, #212]	@ (8002b00 <HAL_ADC_ConfigChannel+0x5bc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d159      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a36:	4619      	mov	r1, r3
 8002a38:	482f      	ldr	r0, [pc, #188]	@ (8002af8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002a3a:	f7ff f98c 	bl	8001d56 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a3e:	4b32      	ldr	r3, [pc, #200]	@ (8002b08 <HAL_ADC_ConfigChannel+0x5c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	099b      	lsrs	r3, r3, #6
 8002a44:	4a31      	ldr	r2, [pc, #196]	@ (8002b0c <HAL_ADC_ConfigChannel+0x5c8>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	099b      	lsrs	r3, r3, #6
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a52:	e002      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f9      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a60:	e040      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2a      	ldr	r2, [pc, #168]	@ (8002b10 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d111      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x54c>
 8002a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a21      	ldr	r2, [pc, #132]	@ (8002b00 <HAL_ADC_ConfigChannel+0x5bc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d131      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a86:	4619      	mov	r1, r3
 8002a88:	481b      	ldr	r0, [pc, #108]	@ (8002af8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002a8a:	f7ff f964 	bl	8001d56 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a8e:	e029      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	@ (8002b14 <HAL_ADC_ConfigChannel+0x5d0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d124      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x5a0>
 8002a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d11f      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a15      	ldr	r2, [pc, #84]	@ (8002b00 <HAL_ADC_ConfigChannel+0x5bc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d11a      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4810      	ldr	r0, [pc, #64]	@ (8002af8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002ab8:	f7ff f94d 	bl	8001d56 <LL_ADC_SetCommonPathInternalCh>
 8002abc:	e012      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac2:	f043 0220 	orr.w	r2, r3, #32
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ad0:	e008      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3784      	adds	r7, #132	@ 0x84
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd90      	pop	{r4, r7, pc}
 8002af8:	40022300 	.word	0x40022300
 8002afc:	40022000 	.word	0x40022000
 8002b00:	40022100 	.word	0x40022100
 8002b04:	cb840000 	.word	0xcb840000
 8002b08:	24000000 	.word	0x24000000
 8002b0c:	053e2d63 	.word	0x053e2d63
 8002b10:	bac04000 	.word	0xbac04000
 8002b14:	cfb80000 	.word	0xcfb80000

08002b18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fa9d 	bl	8002064 <LL_ADC_IsEnabled>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d161      	bne.n	8002bf4 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	4b32      	ldr	r3, [pc, #200]	@ (8002c00 <ADC_Enable+0xe8>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e04d      	b.n	8002bf6 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fa6c 	bl	800203c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b64:	f7ff f8d8 	bl	8001d18 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b6a:	4826      	ldr	r0, [pc, #152]	@ (8002c04 <ADC_Enable+0xec>)
 8002b6c:	f7ff fa0a 	bl	8001f84 <LL_ADC_GetMultimode>
 8002b70:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a24      	ldr	r2, [pc, #144]	@ (8002c08 <ADC_Enable+0xf0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d002      	beq.n	8002b82 <ADC_Enable+0x6a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	e000      	b.n	8002b84 <ADC_Enable+0x6c>
 8002b82:	4b22      	ldr	r3, [pc, #136]	@ (8002c0c <ADC_Enable+0xf4>)
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d02c      	beq.n	8002be6 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d130      	bne.n	8002bf4 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b92:	e028      	b.n	8002be6 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fa63 	bl	8002064 <LL_ADC_IsEnabled>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fa47 	bl	800203c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bae:	f7ff f8b3 	bl	8001d18 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d914      	bls.n	8002be6 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d00d      	beq.n	8002be6 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d1cf      	bne.n	8002b94 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	8000003f 	.word	0x8000003f
 8002c04:	40022300 	.word	0x40022300
 8002c08:	40022100 	.word	0x40022100
 8002c0c:	40022000 	.word	0x40022000

08002c10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d14b      	bne.n	8002cc2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d021      	beq.n	8002c88 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f8f9 	bl	8001e40 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d032      	beq.n	8002cba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d12b      	bne.n	8002cba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d11f      	bne.n	8002cba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c86:	e018      	b.n	8002cba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d111      	bne.n	8002cba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f7fe f972 	bl	8000fa4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cc0:	e00e      	b.n	8002ce0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff fc2e 	bl	8002530 <HAL_ADC_ErrorCallback>
}
 8002cd4:	e004      	b.n	8002ce0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff fc10 	bl	800251c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d22:	f043 0204 	orr.w	r2, r3, #4
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f7ff fc00 	bl	8002530 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d40:	4b60      	ldr	r3, [pc, #384]	@ (8002ec4 <ADC_ConfigureBoostMode+0x18c>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01c      	beq.n	8002d86 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d4c:	f004 ffe6 	bl	8007d1c <HAL_RCC_GetHCLKFreq>
 8002d50:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d5a:	d010      	beq.n	8002d7e <ADC_ConfigureBoostMode+0x46>
 8002d5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d60:	d873      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x112>
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d66:	d002      	beq.n	8002d6e <ADC_ConfigureBoostMode+0x36>
 8002d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d6c:	d16d      	bne.n	8002e4a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	60fb      	str	r3, [r7, #12]
        break;
 8002d7c:	e068      	b.n	8002e50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	60fb      	str	r3, [r7, #12]
        break;
 8002d84:	e064      	b.n	8002e50 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d86:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	f006 f9c9 	bl	8009124 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d92:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d9c:	d051      	beq.n	8002e42 <ADC_ConfigureBoostMode+0x10a>
 8002d9e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002da2:	d854      	bhi.n	8002e4e <ADC_ConfigureBoostMode+0x116>
 8002da4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002da8:	d047      	beq.n	8002e3a <ADC_ConfigureBoostMode+0x102>
 8002daa:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002dae:	d84e      	bhi.n	8002e4e <ADC_ConfigureBoostMode+0x116>
 8002db0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002db4:	d03d      	beq.n	8002e32 <ADC_ConfigureBoostMode+0xfa>
 8002db6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002dba:	d848      	bhi.n	8002e4e <ADC_ConfigureBoostMode+0x116>
 8002dbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dc0:	d033      	beq.n	8002e2a <ADC_ConfigureBoostMode+0xf2>
 8002dc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dc6:	d842      	bhi.n	8002e4e <ADC_ConfigureBoostMode+0x116>
 8002dc8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002dcc:	d029      	beq.n	8002e22 <ADC_ConfigureBoostMode+0xea>
 8002dce:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002dd2:	d83c      	bhi.n	8002e4e <ADC_ConfigureBoostMode+0x116>
 8002dd4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002dd8:	d01a      	beq.n	8002e10 <ADC_ConfigureBoostMode+0xd8>
 8002dda:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002dde:	d836      	bhi.n	8002e4e <ADC_ConfigureBoostMode+0x116>
 8002de0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002de4:	d014      	beq.n	8002e10 <ADC_ConfigureBoostMode+0xd8>
 8002de6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002dea:	d830      	bhi.n	8002e4e <ADC_ConfigureBoostMode+0x116>
 8002dec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002df0:	d00e      	beq.n	8002e10 <ADC_ConfigureBoostMode+0xd8>
 8002df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002df6:	d82a      	bhi.n	8002e4e <ADC_ConfigureBoostMode+0x116>
 8002df8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002dfc:	d008      	beq.n	8002e10 <ADC_ConfigureBoostMode+0xd8>
 8002dfe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e02:	d824      	bhi.n	8002e4e <ADC_ConfigureBoostMode+0x116>
 8002e04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e08:	d002      	beq.n	8002e10 <ADC_ConfigureBoostMode+0xd8>
 8002e0a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e0e:	d11e      	bne.n	8002e4e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	0c9b      	lsrs	r3, r3, #18
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1e:	60fb      	str	r3, [r7, #12]
        break;
 8002e20:	e016      	b.n	8002e50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	60fb      	str	r3, [r7, #12]
        break;
 8002e28:	e012      	b.n	8002e50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	60fb      	str	r3, [r7, #12]
        break;
 8002e30:	e00e      	b.n	8002e50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	099b      	lsrs	r3, r3, #6
 8002e36:	60fb      	str	r3, [r7, #12]
        break;
 8002e38:	e00a      	b.n	8002e50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	09db      	lsrs	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]
        break;
 8002e40:	e006      	b.n	8002e50 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	60fb      	str	r3, [r7, #12]
        break;
 8002e48:	e002      	b.n	8002e50 <ADC_ConfigureBoostMode+0x118>
        break;
 8002e4a:	bf00      	nop
 8002e4c:	e000      	b.n	8002e50 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002e4e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec8 <ADC_ConfigureBoostMode+0x190>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d808      	bhi.n	8002e70 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002e6c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e6e:	e025      	b.n	8002ebc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <ADC_ConfigureBoostMode+0x194>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d80a      	bhi.n	8002e8e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e8a:	609a      	str	r2, [r3, #8]
}
 8002e8c:	e016      	b.n	8002ebc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a0f      	ldr	r2, [pc, #60]	@ (8002ed0 <ADC_ConfigureBoostMode+0x198>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d80a      	bhi.n	8002eac <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea8:	609a      	str	r2, [r3, #8]
}
 8002eaa:	e007      	b.n	8002ebc <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002eba:	609a      	str	r2, [r3, #8]
}
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40022300 	.word	0x40022300
 8002ec8:	005f5e10 	.word	0x005f5e10
 8002ecc:	00bebc20 	.word	0x00bebc20
 8002ed0:	017d7840 	.word	0x017d7840

08002ed4 <LL_ADC_IsEnabled>:
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <LL_ADC_IsEnabled+0x18>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <LL_ADC_IsEnabled+0x1a>
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_ADC_REG_IsConversionOngoing>:
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d101      	bne.n	8002f12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b09f      	sub	sp, #124	@ 0x7c
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e080      	b.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a3d      	ldr	r2, [pc, #244]	@ (8003048 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d102      	bne.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f58:	4b3c      	ldr	r3, [pc, #240]	@ (800304c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	e001      	b.n	8002f62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e05f      	b.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ffb9 	bl	8002efa <LL_ADC_REG_IsConversionOngoing>
 8002f88:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ffb3 	bl	8002efa <LL_ADC_REG_IsConversionOngoing>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d141      	bne.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d13e      	bne.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002fac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fbc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fbe:	4822      	ldr	r0, [pc, #136]	@ (8003048 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002fc0:	f7ff ff88 	bl	8002ed4 <LL_ADC_IsEnabled>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	4821      	ldr	r0, [pc, #132]	@ (800304c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002fc8:	f7ff ff84 	bl	8002ed4 <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4323      	orrs	r3, r4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d12e      	bne.n	8003032 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	6811      	ldr	r1, [r2, #0]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	6892      	ldr	r2, [r2, #8]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fec:	e021      	b.n	8003032 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ff8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ffa:	4813      	ldr	r0, [pc, #76]	@ (8003048 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ffc:	f7ff ff6a 	bl	8002ed4 <LL_ADC_IsEnabled>
 8003000:	4604      	mov	r4, r0
 8003002:	4812      	ldr	r0, [pc, #72]	@ (800304c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003004:	f7ff ff66 	bl	8002ed4 <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	4323      	orrs	r3, r4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d110      	bne.n	8003032 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	4b0f      	ldr	r3, [pc, #60]	@ (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003016:	4013      	ands	r3, r2
 8003018:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800301a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800301c:	e009      	b.n	8003032 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003030:	e000      	b.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003032:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800303c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003040:	4618      	mov	r0, r3
 8003042:	377c      	adds	r7, #124	@ 0x7c
 8003044:	46bd      	mov	sp, r7
 8003046:	bd90      	pop	{r4, r7, pc}
 8003048:	40022000 	.word	0x40022000
 800304c:	40022100 	.word	0x40022100
 8003050:	40022300 	.word	0x40022300
 8003054:	fffff0e0 	.word	0xfffff0e0

08003058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <__NVIC_SetPriorityGrouping+0x40>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003074:	4013      	ands	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003080:	4b06      	ldr	r3, [pc, #24]	@ (800309c <__NVIC_SetPriorityGrouping+0x44>)
 8003082:	4313      	orrs	r3, r2
 8003084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003086:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <__NVIC_SetPriorityGrouping+0x40>)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	60d3      	str	r3, [r2, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00
 800309c:	05fa0000 	.word	0x05fa0000

080030a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a4:	4b04      	ldr	r3, [pc, #16]	@ (80030b8 <__NVIC_GetPriorityGrouping+0x18>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	0a1b      	lsrs	r3, r3, #8
 80030aa:	f003 0307 	and.w	r3, r3, #7
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	db0b      	blt.n	80030e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	4907      	ldr	r1, [pc, #28]	@ (80030f4 <__NVIC_EnableIRQ+0x38>)
 80030d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2001      	movs	r0, #1
 80030de:	fa00 f202 	lsl.w	r2, r0, r2
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000e100 	.word	0xe000e100

080030f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003104:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	db0a      	blt.n	8003122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	490c      	ldr	r1, [pc, #48]	@ (8003144 <__NVIC_SetPriority+0x4c>)
 8003112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	440b      	add	r3, r1
 800311c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003120:	e00a      	b.n	8003138 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4908      	ldr	r1, [pc, #32]	@ (8003148 <__NVIC_SetPriority+0x50>)
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	3b04      	subs	r3, #4
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	440b      	add	r3, r1
 8003136:	761a      	strb	r2, [r3, #24]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000e100 	.word	0xe000e100
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	@ 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f1c3 0307 	rsb	r3, r3, #7
 8003166:	2b04      	cmp	r3, #4
 8003168:	bf28      	it	cs
 800316a:	2304      	movcs	r3, #4
 800316c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3304      	adds	r3, #4
 8003172:	2b06      	cmp	r3, #6
 8003174:	d902      	bls.n	800317c <NVIC_EncodePriority+0x30>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3b03      	subs	r3, #3
 800317a:	e000      	b.n	800317e <NVIC_EncodePriority+0x32>
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	f04f 32ff 	mov.w	r2, #4294967295
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	401a      	ands	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003194:	f04f 31ff 	mov.w	r1, #4294967295
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	43d9      	mvns	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	4313      	orrs	r3, r2
         );
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	@ 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c4:	d301      	bcc.n	80031ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00f      	b.n	80031ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ca:	4a0a      	ldr	r2, [pc, #40]	@ (80031f4 <SysTick_Config+0x40>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031d2:	210f      	movs	r1, #15
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	f7ff ff8e 	bl	80030f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031dc:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <SysTick_Config+0x40>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031e2:	4b04      	ldr	r3, [pc, #16]	@ (80031f4 <SysTick_Config+0x40>)
 80031e4:	2207      	movs	r2, #7
 80031e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	e000e010 	.word	0xe000e010

080031f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ff29 	bl	8003058 <__NVIC_SetPriorityGrouping>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800321c:	f7ff ff40 	bl	80030a0 <__NVIC_GetPriorityGrouping>
 8003220:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7ff ff90 	bl	800314c <NVIC_EncodePriority>
 800322c:	4602      	mov	r2, r0
 800322e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff5f 	bl	80030f8 <__NVIC_SetPriority>
}
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800324c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff33 	bl	80030bc <__NVIC_EnableIRQ>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffa4 	bl	80031b4 <SysTick_Config>
 800326c:	4603      	mov	r3, r0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003280:	f7fe fd4a 	bl	8001d18 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e37d      	b.n	800398c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a66      	ldr	r2, [pc, #408]	@ (8003430 <HAL_DMA_Init+0x1b8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d04a      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a65      	ldr	r2, [pc, #404]	@ (8003434 <HAL_DMA_Init+0x1bc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d045      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a63      	ldr	r2, [pc, #396]	@ (8003438 <HAL_DMA_Init+0x1c0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d040      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a62      	ldr	r2, [pc, #392]	@ (800343c <HAL_DMA_Init+0x1c4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d03b      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a60      	ldr	r2, [pc, #384]	@ (8003440 <HAL_DMA_Init+0x1c8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d036      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a5f      	ldr	r2, [pc, #380]	@ (8003444 <HAL_DMA_Init+0x1cc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d031      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003448 <HAL_DMA_Init+0x1d0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02c      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a5c      	ldr	r2, [pc, #368]	@ (800344c <HAL_DMA_Init+0x1d4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d027      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003450 <HAL_DMA_Init+0x1d8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d022      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a59      	ldr	r2, [pc, #356]	@ (8003454 <HAL_DMA_Init+0x1dc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d01d      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a57      	ldr	r2, [pc, #348]	@ (8003458 <HAL_DMA_Init+0x1e0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d018      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a56      	ldr	r2, [pc, #344]	@ (800345c <HAL_DMA_Init+0x1e4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a54      	ldr	r2, [pc, #336]	@ (8003460 <HAL_DMA_Init+0x1e8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00e      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a53      	ldr	r2, [pc, #332]	@ (8003464 <HAL_DMA_Init+0x1ec>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a51      	ldr	r2, [pc, #324]	@ (8003468 <HAL_DMA_Init+0x1f0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a50      	ldr	r2, [pc, #320]	@ (800346c <HAL_DMA_Init+0x1f4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_DMA_Init+0xbc>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_DMA_Init+0xbe>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 813c 	beq.w	80035b4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a37      	ldr	r2, [pc, #220]	@ (8003430 <HAL_DMA_Init+0x1b8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d04a      	beq.n	80033ec <HAL_DMA_Init+0x174>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a36      	ldr	r2, [pc, #216]	@ (8003434 <HAL_DMA_Init+0x1bc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d045      	beq.n	80033ec <HAL_DMA_Init+0x174>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a34      	ldr	r2, [pc, #208]	@ (8003438 <HAL_DMA_Init+0x1c0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d040      	beq.n	80033ec <HAL_DMA_Init+0x174>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a33      	ldr	r2, [pc, #204]	@ (800343c <HAL_DMA_Init+0x1c4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d03b      	beq.n	80033ec <HAL_DMA_Init+0x174>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a31      	ldr	r2, [pc, #196]	@ (8003440 <HAL_DMA_Init+0x1c8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d036      	beq.n	80033ec <HAL_DMA_Init+0x174>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a30      	ldr	r2, [pc, #192]	@ (8003444 <HAL_DMA_Init+0x1cc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d031      	beq.n	80033ec <HAL_DMA_Init+0x174>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2e      	ldr	r2, [pc, #184]	@ (8003448 <HAL_DMA_Init+0x1d0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d02c      	beq.n	80033ec <HAL_DMA_Init+0x174>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2d      	ldr	r2, [pc, #180]	@ (800344c <HAL_DMA_Init+0x1d4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d027      	beq.n	80033ec <HAL_DMA_Init+0x174>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003450 <HAL_DMA_Init+0x1d8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003454 <HAL_DMA_Init+0x1dc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a28      	ldr	r2, [pc, #160]	@ (8003458 <HAL_DMA_Init+0x1e0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a27      	ldr	r2, [pc, #156]	@ (800345c <HAL_DMA_Init+0x1e4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a25      	ldr	r2, [pc, #148]	@ (8003460 <HAL_DMA_Init+0x1e8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a24      	ldr	r2, [pc, #144]	@ (8003464 <HAL_DMA_Init+0x1ec>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a22      	ldr	r2, [pc, #136]	@ (8003468 <HAL_DMA_Init+0x1f0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a21      	ldr	r2, [pc, #132]	@ (800346c <HAL_DMA_Init+0x1f4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d108      	bne.n	80033fe <HAL_DMA_Init+0x186>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e007      	b.n	800340e <HAL_DMA_Init+0x196>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800340e:	e02f      	b.n	8003470 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003410:	f7fe fc82 	bl	8001d18 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b05      	cmp	r3, #5
 800341c:	d928      	bls.n	8003470 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2203      	movs	r2, #3
 8003428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e2ad      	b.n	800398c <HAL_DMA_Init+0x714>
 8003430:	40020010 	.word	0x40020010
 8003434:	40020028 	.word	0x40020028
 8003438:	40020040 	.word	0x40020040
 800343c:	40020058 	.word	0x40020058
 8003440:	40020070 	.word	0x40020070
 8003444:	40020088 	.word	0x40020088
 8003448:	400200a0 	.word	0x400200a0
 800344c:	400200b8 	.word	0x400200b8
 8003450:	40020410 	.word	0x40020410
 8003454:	40020428 	.word	0x40020428
 8003458:	40020440 	.word	0x40020440
 800345c:	40020458 	.word	0x40020458
 8003460:	40020470 	.word	0x40020470
 8003464:	40020488 	.word	0x40020488
 8003468:	400204a0 	.word	0x400204a0
 800346c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1c8      	bne.n	8003410 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4b73      	ldr	r3, [pc, #460]	@ (8003658 <HAL_DMA_Init+0x3e0>)
 800348a:	4013      	ands	r3, r2
 800348c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003496:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d107      	bne.n	80034d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034cc:	4313      	orrs	r3, r2
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b28      	cmp	r3, #40	@ 0x28
 80034da:	d903      	bls.n	80034e4 <HAL_DMA_Init+0x26c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80034e2:	d91f      	bls.n	8003524 <HAL_DMA_Init+0x2ac>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80034ea:	d903      	bls.n	80034f4 <HAL_DMA_Init+0x27c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b42      	cmp	r3, #66	@ 0x42
 80034f2:	d917      	bls.n	8003524 <HAL_DMA_Init+0x2ac>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b46      	cmp	r3, #70	@ 0x46
 80034fa:	d903      	bls.n	8003504 <HAL_DMA_Init+0x28c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b48      	cmp	r3, #72	@ 0x48
 8003502:	d90f      	bls.n	8003524 <HAL_DMA_Init+0x2ac>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b4e      	cmp	r3, #78	@ 0x4e
 800350a:	d903      	bls.n	8003514 <HAL_DMA_Init+0x29c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b52      	cmp	r3, #82	@ 0x52
 8003512:	d907      	bls.n	8003524 <HAL_DMA_Init+0x2ac>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b73      	cmp	r3, #115	@ 0x73
 800351a:	d905      	bls.n	8003528 <HAL_DMA_Init+0x2b0>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b77      	cmp	r3, #119	@ 0x77
 8003522:	d801      	bhi.n	8003528 <HAL_DMA_Init+0x2b0>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_DMA_Init+0x2b2>
 8003528:	2300      	movs	r3, #0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003534:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f023 0307 	bic.w	r3, r3, #7
 800354c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	2b04      	cmp	r3, #4
 800355e:	d117      	bne.n	8003590 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00e      	beq.n	8003590 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f001 fe70 	bl	8005258 <DMA_CheckFifoParam>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2240      	movs	r2, #64	@ 0x40
 8003582:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e1fd      	b.n	800398c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f001 fdab 	bl	80050f4 <DMA_CalcBaseAndBitshift>
 800359e:	4603      	mov	r3, r0
 80035a0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	223f      	movs	r2, #63	@ 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	e0fd      	b.n	80037b0 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a28      	ldr	r2, [pc, #160]	@ (800365c <HAL_DMA_Init+0x3e4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d04a      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a27      	ldr	r2, [pc, #156]	@ (8003660 <HAL_DMA_Init+0x3e8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d045      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a25      	ldr	r2, [pc, #148]	@ (8003664 <HAL_DMA_Init+0x3ec>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d040      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a24      	ldr	r2, [pc, #144]	@ (8003668 <HAL_DMA_Init+0x3f0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d03b      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a22      	ldr	r2, [pc, #136]	@ (800366c <HAL_DMA_Init+0x3f4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d036      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a21      	ldr	r2, [pc, #132]	@ (8003670 <HAL_DMA_Init+0x3f8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d031      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003674 <HAL_DMA_Init+0x3fc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d02c      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003678 <HAL_DMA_Init+0x400>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d027      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1c      	ldr	r2, [pc, #112]	@ (800367c <HAL_DMA_Init+0x404>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1b      	ldr	r2, [pc, #108]	@ (8003680 <HAL_DMA_Init+0x408>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01d      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a19      	ldr	r2, [pc, #100]	@ (8003684 <HAL_DMA_Init+0x40c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d018      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a18      	ldr	r2, [pc, #96]	@ (8003688 <HAL_DMA_Init+0x410>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a16      	ldr	r2, [pc, #88]	@ (800368c <HAL_DMA_Init+0x414>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a15      	ldr	r2, [pc, #84]	@ (8003690 <HAL_DMA_Init+0x418>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <HAL_DMA_Init+0x41c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <HAL_DMA_Init+0x420>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d123      	bne.n	800369c <HAL_DMA_Init+0x424>
 8003654:	2301      	movs	r3, #1
 8003656:	e022      	b.n	800369e <HAL_DMA_Init+0x426>
 8003658:	fe10803f 	.word	0xfe10803f
 800365c:	48022c08 	.word	0x48022c08
 8003660:	48022c1c 	.word	0x48022c1c
 8003664:	48022c30 	.word	0x48022c30
 8003668:	48022c44 	.word	0x48022c44
 800366c:	48022c58 	.word	0x48022c58
 8003670:	48022c6c 	.word	0x48022c6c
 8003674:	48022c80 	.word	0x48022c80
 8003678:	48022c94 	.word	0x48022c94
 800367c:	58025408 	.word	0x58025408
 8003680:	5802541c 	.word	0x5802541c
 8003684:	58025430 	.word	0x58025430
 8003688:	58025444 	.word	0x58025444
 800368c:	58025458 	.word	0x58025458
 8003690:	5802546c 	.word	0x5802546c
 8003694:	58025480 	.word	0x58025480
 8003698:	58025494 	.word	0x58025494
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d07d      	beq.n	800379e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7f      	ldr	r2, [pc, #508]	@ (80038a4 <HAL_DMA_Init+0x62c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d021      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a7d      	ldr	r2, [pc, #500]	@ (80038a8 <HAL_DMA_Init+0x630>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01c      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7c      	ldr	r2, [pc, #496]	@ (80038ac <HAL_DMA_Init+0x634>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d017      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a7a      	ldr	r2, [pc, #488]	@ (80038b0 <HAL_DMA_Init+0x638>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d012      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a79      	ldr	r2, [pc, #484]	@ (80038b4 <HAL_DMA_Init+0x63c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00d      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a77      	ldr	r2, [pc, #476]	@ (80038b8 <HAL_DMA_Init+0x640>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d008      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a76      	ldr	r2, [pc, #472]	@ (80038bc <HAL_DMA_Init+0x644>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d003      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a74      	ldr	r2, [pc, #464]	@ (80038c0 <HAL_DMA_Init+0x648>)
 80036ee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4b6e      	ldr	r3, [pc, #440]	@ (80038c4 <HAL_DMA_Init+0x64c>)
 800370c:	4013      	ands	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b40      	cmp	r3, #64	@ 0x40
 8003716:	d008      	beq.n	800372a <HAL_DMA_Init+0x4b2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b80      	cmp	r3, #128	@ 0x80
 800371e:	d102      	bne.n	8003726 <HAL_DMA_Init+0x4ae>
 8003720:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003724:	e002      	b.n	800372c <HAL_DMA_Init+0x4b4>
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HAL_DMA_Init+0x4b4>
 800372a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68d2      	ldr	r2, [r2, #12]
 8003730:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003732:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800373a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003742:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800374a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003752:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800375a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	4b55      	ldr	r3, [pc, #340]	@ (80038c8 <HAL_DMA_Init+0x650>)
 8003772:	4413      	add	r3, r2
 8003774:	4a55      	ldr	r2, [pc, #340]	@ (80038cc <HAL_DMA_Init+0x654>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	009a      	lsls	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f001 fcb6 	bl	80050f4 <DMA_CalcBaseAndBitshift>
 8003788:	4603      	mov	r3, r0
 800378a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	2201      	movs	r2, #1
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	605a      	str	r2, [r3, #4]
 800379c:	e008      	b.n	80037b0 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2240      	movs	r2, #64	@ 0x40
 80037a2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2203      	movs	r2, #3
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0ed      	b.n	800398c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a46      	ldr	r2, [pc, #280]	@ (80038d0 <HAL_DMA_Init+0x658>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d072      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a45      	ldr	r2, [pc, #276]	@ (80038d4 <HAL_DMA_Init+0x65c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d06d      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a43      	ldr	r2, [pc, #268]	@ (80038d8 <HAL_DMA_Init+0x660>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d068      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a42      	ldr	r2, [pc, #264]	@ (80038dc <HAL_DMA_Init+0x664>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d063      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a40      	ldr	r2, [pc, #256]	@ (80038e0 <HAL_DMA_Init+0x668>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d05e      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a3f      	ldr	r2, [pc, #252]	@ (80038e4 <HAL_DMA_Init+0x66c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d059      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a3d      	ldr	r2, [pc, #244]	@ (80038e8 <HAL_DMA_Init+0x670>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d054      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a3c      	ldr	r2, [pc, #240]	@ (80038ec <HAL_DMA_Init+0x674>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d04f      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3a      	ldr	r2, [pc, #232]	@ (80038f0 <HAL_DMA_Init+0x678>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04a      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a39      	ldr	r2, [pc, #228]	@ (80038f4 <HAL_DMA_Init+0x67c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d045      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a37      	ldr	r2, [pc, #220]	@ (80038f8 <HAL_DMA_Init+0x680>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d040      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a36      	ldr	r2, [pc, #216]	@ (80038fc <HAL_DMA_Init+0x684>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d03b      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a34      	ldr	r2, [pc, #208]	@ (8003900 <HAL_DMA_Init+0x688>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d036      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a33      	ldr	r2, [pc, #204]	@ (8003904 <HAL_DMA_Init+0x68c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d031      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a31      	ldr	r2, [pc, #196]	@ (8003908 <HAL_DMA_Init+0x690>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02c      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a30      	ldr	r2, [pc, #192]	@ (800390c <HAL_DMA_Init+0x694>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d027      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a13      	ldr	r2, [pc, #76]	@ (80038a4 <HAL_DMA_Init+0x62c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a12      	ldr	r2, [pc, #72]	@ (80038a8 <HAL_DMA_Init+0x630>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d01d      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a10      	ldr	r2, [pc, #64]	@ (80038ac <HAL_DMA_Init+0x634>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d018      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a0f      	ldr	r2, [pc, #60]	@ (80038b0 <HAL_DMA_Init+0x638>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0d      	ldr	r2, [pc, #52]	@ (80038b4 <HAL_DMA_Init+0x63c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00e      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a0c      	ldr	r2, [pc, #48]	@ (80038b8 <HAL_DMA_Init+0x640>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0a      	ldr	r2, [pc, #40]	@ (80038bc <HAL_DMA_Init+0x644>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_DMA_Init+0x628>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a09      	ldr	r2, [pc, #36]	@ (80038c0 <HAL_DMA_Init+0x648>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d137      	bne.n	8003910 <HAL_DMA_Init+0x698>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e036      	b.n	8003912 <HAL_DMA_Init+0x69a>
 80038a4:	58025408 	.word	0x58025408
 80038a8:	5802541c 	.word	0x5802541c
 80038ac:	58025430 	.word	0x58025430
 80038b0:	58025444 	.word	0x58025444
 80038b4:	58025458 	.word	0x58025458
 80038b8:	5802546c 	.word	0x5802546c
 80038bc:	58025480 	.word	0x58025480
 80038c0:	58025494 	.word	0x58025494
 80038c4:	fffe000f 	.word	0xfffe000f
 80038c8:	a7fdabf8 	.word	0xa7fdabf8
 80038cc:	cccccccd 	.word	0xcccccccd
 80038d0:	40020010 	.word	0x40020010
 80038d4:	40020028 	.word	0x40020028
 80038d8:	40020040 	.word	0x40020040
 80038dc:	40020058 	.word	0x40020058
 80038e0:	40020070 	.word	0x40020070
 80038e4:	40020088 	.word	0x40020088
 80038e8:	400200a0 	.word	0x400200a0
 80038ec:	400200b8 	.word	0x400200b8
 80038f0:	40020410 	.word	0x40020410
 80038f4:	40020428 	.word	0x40020428
 80038f8:	40020440 	.word	0x40020440
 80038fc:	40020458 	.word	0x40020458
 8003900:	40020470 	.word	0x40020470
 8003904:	40020488 	.word	0x40020488
 8003908:	400204a0 	.word	0x400204a0
 800390c:	400204b8 	.word	0x400204b8
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d032      	beq.n	800397c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f001 fd1a 	bl	8005350 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b80      	cmp	r3, #128	@ 0x80
 8003922:	d102      	bne.n	800392a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800393e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d010      	beq.n	800396a <HAL_DMA_Init+0x6f2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d80c      	bhi.n	800396a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f001 fd97 	bl	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	e008      	b.n	800397c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e226      	b.n	8003dfe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_DMA_Start_IT+0x2a>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e21f      	b.n	8003dfe <HAL_DMA_Start_IT+0x46a>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	f040 820a 	bne.w	8003de8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a68      	ldr	r2, [pc, #416]	@ (8003b88 <HAL_DMA_Start_IT+0x1f4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d04a      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a66      	ldr	r2, [pc, #408]	@ (8003b8c <HAL_DMA_Start_IT+0x1f8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d045      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a65      	ldr	r2, [pc, #404]	@ (8003b90 <HAL_DMA_Start_IT+0x1fc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d040      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a63      	ldr	r2, [pc, #396]	@ (8003b94 <HAL_DMA_Start_IT+0x200>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d03b      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a62      	ldr	r2, [pc, #392]	@ (8003b98 <HAL_DMA_Start_IT+0x204>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d036      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a60      	ldr	r2, [pc, #384]	@ (8003b9c <HAL_DMA_Start_IT+0x208>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d031      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a5f      	ldr	r2, [pc, #380]	@ (8003ba0 <HAL_DMA_Start_IT+0x20c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d02c      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ba4 <HAL_DMA_Start_IT+0x210>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d027      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5c      	ldr	r2, [pc, #368]	@ (8003ba8 <HAL_DMA_Start_IT+0x214>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d022      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a5a      	ldr	r2, [pc, #360]	@ (8003bac <HAL_DMA_Start_IT+0x218>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d01d      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a59      	ldr	r2, [pc, #356]	@ (8003bb0 <HAL_DMA_Start_IT+0x21c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d018      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a57      	ldr	r2, [pc, #348]	@ (8003bb4 <HAL_DMA_Start_IT+0x220>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a56      	ldr	r2, [pc, #344]	@ (8003bb8 <HAL_DMA_Start_IT+0x224>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a54      	ldr	r2, [pc, #336]	@ (8003bbc <HAL_DMA_Start_IT+0x228>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a53      	ldr	r2, [pc, #332]	@ (8003bc0 <HAL_DMA_Start_IT+0x22c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_DMA_Start_IT+0xee>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a51      	ldr	r2, [pc, #324]	@ (8003bc4 <HAL_DMA_Start_IT+0x230>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d108      	bne.n	8003a94 <HAL_DMA_Start_IT+0x100>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0201 	bic.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e007      	b.n	8003aa4 <HAL_DMA_Start_IT+0x110>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f001 f93e 	bl	8004d2c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a34      	ldr	r2, [pc, #208]	@ (8003b88 <HAL_DMA_Start_IT+0x1f4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d04a      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a33      	ldr	r2, [pc, #204]	@ (8003b8c <HAL_DMA_Start_IT+0x1f8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d045      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a31      	ldr	r2, [pc, #196]	@ (8003b90 <HAL_DMA_Start_IT+0x1fc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d040      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a30      	ldr	r2, [pc, #192]	@ (8003b94 <HAL_DMA_Start_IT+0x200>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d03b      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a2e      	ldr	r2, [pc, #184]	@ (8003b98 <HAL_DMA_Start_IT+0x204>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d036      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b9c <HAL_DMA_Start_IT+0x208>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d031      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba0 <HAL_DMA_Start_IT+0x20c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02c      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba4 <HAL_DMA_Start_IT+0x210>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d027      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a28      	ldr	r2, [pc, #160]	@ (8003ba8 <HAL_DMA_Start_IT+0x214>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a27      	ldr	r2, [pc, #156]	@ (8003bac <HAL_DMA_Start_IT+0x218>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d01d      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a25      	ldr	r2, [pc, #148]	@ (8003bb0 <HAL_DMA_Start_IT+0x21c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a24      	ldr	r2, [pc, #144]	@ (8003bb4 <HAL_DMA_Start_IT+0x220>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	@ (8003bb8 <HAL_DMA_Start_IT+0x224>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a21      	ldr	r2, [pc, #132]	@ (8003bbc <HAL_DMA_Start_IT+0x228>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc0 <HAL_DMA_Start_IT+0x22c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_DMA_Start_IT+0x1bc>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc4 <HAL_DMA_Start_IT+0x230>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_DMA_Start_IT+0x1c0>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_DMA_Start_IT+0x1c2>
 8003b54:	2300      	movs	r3, #0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d036      	beq.n	8003bc8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 021e 	bic.w	r2, r3, #30
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0216 	orr.w	r2, r2, #22
 8003b6c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d03e      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0208 	orr.w	r2, r2, #8
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e035      	b.n	8003bf4 <HAL_DMA_Start_IT+0x260>
 8003b88:	40020010 	.word	0x40020010
 8003b8c:	40020028 	.word	0x40020028
 8003b90:	40020040 	.word	0x40020040
 8003b94:	40020058 	.word	0x40020058
 8003b98:	40020070 	.word	0x40020070
 8003b9c:	40020088 	.word	0x40020088
 8003ba0:	400200a0 	.word	0x400200a0
 8003ba4:	400200b8 	.word	0x400200b8
 8003ba8:	40020410 	.word	0x40020410
 8003bac:	40020428 	.word	0x40020428
 8003bb0:	40020440 	.word	0x40020440
 8003bb4:	40020458 	.word	0x40020458
 8003bb8:	40020470 	.word	0x40020470
 8003bbc:	40020488 	.word	0x40020488
 8003bc0:	400204a0 	.word	0x400204a0
 8003bc4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 020e 	bic.w	r2, r3, #14
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 020a 	orr.w	r2, r2, #10
 8003bda:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0204 	orr.w	r2, r2, #4
 8003bf2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a83      	ldr	r2, [pc, #524]	@ (8003e08 <HAL_DMA_Start_IT+0x474>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d072      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a82      	ldr	r2, [pc, #520]	@ (8003e0c <HAL_DMA_Start_IT+0x478>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d06d      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a80      	ldr	r2, [pc, #512]	@ (8003e10 <HAL_DMA_Start_IT+0x47c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d068      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7f      	ldr	r2, [pc, #508]	@ (8003e14 <HAL_DMA_Start_IT+0x480>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d063      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a7d      	ldr	r2, [pc, #500]	@ (8003e18 <HAL_DMA_Start_IT+0x484>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d05e      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e1c <HAL_DMA_Start_IT+0x488>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d059      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a7a      	ldr	r2, [pc, #488]	@ (8003e20 <HAL_DMA_Start_IT+0x48c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d054      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a79      	ldr	r2, [pc, #484]	@ (8003e24 <HAL_DMA_Start_IT+0x490>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d04f      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a77      	ldr	r2, [pc, #476]	@ (8003e28 <HAL_DMA_Start_IT+0x494>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d04a      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a76      	ldr	r2, [pc, #472]	@ (8003e2c <HAL_DMA_Start_IT+0x498>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d045      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a74      	ldr	r2, [pc, #464]	@ (8003e30 <HAL_DMA_Start_IT+0x49c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d040      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a73      	ldr	r2, [pc, #460]	@ (8003e34 <HAL_DMA_Start_IT+0x4a0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d03b      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a71      	ldr	r2, [pc, #452]	@ (8003e38 <HAL_DMA_Start_IT+0x4a4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d036      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a70      	ldr	r2, [pc, #448]	@ (8003e3c <HAL_DMA_Start_IT+0x4a8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d031      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a6e      	ldr	r2, [pc, #440]	@ (8003e40 <HAL_DMA_Start_IT+0x4ac>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d02c      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6d      	ldr	r2, [pc, #436]	@ (8003e44 <HAL_DMA_Start_IT+0x4b0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d027      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a6b      	ldr	r2, [pc, #428]	@ (8003e48 <HAL_DMA_Start_IT+0x4b4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d022      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a6a      	ldr	r2, [pc, #424]	@ (8003e4c <HAL_DMA_Start_IT+0x4b8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d01d      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a68      	ldr	r2, [pc, #416]	@ (8003e50 <HAL_DMA_Start_IT+0x4bc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d018      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a67      	ldr	r2, [pc, #412]	@ (8003e54 <HAL_DMA_Start_IT+0x4c0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a65      	ldr	r2, [pc, #404]	@ (8003e58 <HAL_DMA_Start_IT+0x4c4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00e      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a64      	ldr	r2, [pc, #400]	@ (8003e5c <HAL_DMA_Start_IT+0x4c8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a62      	ldr	r2, [pc, #392]	@ (8003e60 <HAL_DMA_Start_IT+0x4cc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x350>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a61      	ldr	r2, [pc, #388]	@ (8003e64 <HAL_DMA_Start_IT+0x4d0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <HAL_DMA_Start_IT+0x354>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <HAL_DMA_Start_IT+0x356>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01a      	beq.n	8003d24 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d0a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d22:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a37      	ldr	r2, [pc, #220]	@ (8003e08 <HAL_DMA_Start_IT+0x474>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d04a      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a36      	ldr	r2, [pc, #216]	@ (8003e0c <HAL_DMA_Start_IT+0x478>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d045      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a34      	ldr	r2, [pc, #208]	@ (8003e10 <HAL_DMA_Start_IT+0x47c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d040      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a33      	ldr	r2, [pc, #204]	@ (8003e14 <HAL_DMA_Start_IT+0x480>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d03b      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a31      	ldr	r2, [pc, #196]	@ (8003e18 <HAL_DMA_Start_IT+0x484>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d036      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a30      	ldr	r2, [pc, #192]	@ (8003e1c <HAL_DMA_Start_IT+0x488>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d031      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2e      	ldr	r2, [pc, #184]	@ (8003e20 <HAL_DMA_Start_IT+0x48c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02c      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e24 <HAL_DMA_Start_IT+0x490>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d027      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2b      	ldr	r2, [pc, #172]	@ (8003e28 <HAL_DMA_Start_IT+0x494>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2a      	ldr	r2, [pc, #168]	@ (8003e2c <HAL_DMA_Start_IT+0x498>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d01d      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a28      	ldr	r2, [pc, #160]	@ (8003e30 <HAL_DMA_Start_IT+0x49c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a27      	ldr	r2, [pc, #156]	@ (8003e34 <HAL_DMA_Start_IT+0x4a0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a25      	ldr	r2, [pc, #148]	@ (8003e38 <HAL_DMA_Start_IT+0x4a4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a24      	ldr	r2, [pc, #144]	@ (8003e3c <HAL_DMA_Start_IT+0x4a8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a22      	ldr	r2, [pc, #136]	@ (8003e40 <HAL_DMA_Start_IT+0x4ac>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x430>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a21      	ldr	r2, [pc, #132]	@ (8003e44 <HAL_DMA_Start_IT+0x4b0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d108      	bne.n	8003dd6 <HAL_DMA_Start_IT+0x442>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e012      	b.n	8003dfc <HAL_DMA_Start_IT+0x468>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e009      	b.n	8003dfc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40020010 	.word	0x40020010
 8003e0c:	40020028 	.word	0x40020028
 8003e10:	40020040 	.word	0x40020040
 8003e14:	40020058 	.word	0x40020058
 8003e18:	40020070 	.word	0x40020070
 8003e1c:	40020088 	.word	0x40020088
 8003e20:	400200a0 	.word	0x400200a0
 8003e24:	400200b8 	.word	0x400200b8
 8003e28:	40020410 	.word	0x40020410
 8003e2c:	40020428 	.word	0x40020428
 8003e30:	40020440 	.word	0x40020440
 8003e34:	40020458 	.word	0x40020458
 8003e38:	40020470 	.word	0x40020470
 8003e3c:	40020488 	.word	0x40020488
 8003e40:	400204a0 	.word	0x400204a0
 8003e44:	400204b8 	.word	0x400204b8
 8003e48:	58025408 	.word	0x58025408
 8003e4c:	5802541c 	.word	0x5802541c
 8003e50:	58025430 	.word	0x58025430
 8003e54:	58025444 	.word	0x58025444
 8003e58:	58025458 	.word	0x58025458
 8003e5c:	5802546c 	.word	0x5802546c
 8003e60:	58025480 	.word	0x58025480
 8003e64:	58025494 	.word	0x58025494

08003e68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	@ 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e74:	4b67      	ldr	r3, [pc, #412]	@ (8004014 <HAL_DMA_IRQHandler+0x1ac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a67      	ldr	r2, [pc, #412]	@ (8004018 <HAL_DMA_IRQHandler+0x1b0>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	0a9b      	lsrs	r3, r3, #10
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e86:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a5f      	ldr	r2, [pc, #380]	@ (800401c <HAL_DMA_IRQHandler+0x1b4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d04a      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a5d      	ldr	r2, [pc, #372]	@ (8004020 <HAL_DMA_IRQHandler+0x1b8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d045      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a5c      	ldr	r2, [pc, #368]	@ (8004024 <HAL_DMA_IRQHandler+0x1bc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d040      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8004028 <HAL_DMA_IRQHandler+0x1c0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d03b      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a59      	ldr	r2, [pc, #356]	@ (800402c <HAL_DMA_IRQHandler+0x1c4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d036      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a57      	ldr	r2, [pc, #348]	@ (8004030 <HAL_DMA_IRQHandler+0x1c8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d031      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a56      	ldr	r2, [pc, #344]	@ (8004034 <HAL_DMA_IRQHandler+0x1cc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d02c      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a54      	ldr	r2, [pc, #336]	@ (8004038 <HAL_DMA_IRQHandler+0x1d0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d027      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a53      	ldr	r2, [pc, #332]	@ (800403c <HAL_DMA_IRQHandler+0x1d4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a51      	ldr	r2, [pc, #324]	@ (8004040 <HAL_DMA_IRQHandler+0x1d8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01d      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a50      	ldr	r2, [pc, #320]	@ (8004044 <HAL_DMA_IRQHandler+0x1dc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a4e      	ldr	r2, [pc, #312]	@ (8004048 <HAL_DMA_IRQHandler+0x1e0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a4d      	ldr	r2, [pc, #308]	@ (800404c <HAL_DMA_IRQHandler+0x1e4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a4b      	ldr	r2, [pc, #300]	@ (8004050 <HAL_DMA_IRQHandler+0x1e8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a4a      	ldr	r2, [pc, #296]	@ (8004054 <HAL_DMA_IRQHandler+0x1ec>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a48      	ldr	r2, [pc, #288]	@ (8004058 <HAL_DMA_IRQHandler+0x1f0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <HAL_DMA_IRQHandler+0xd6>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_DMA_IRQHandler+0xd8>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 842b 	beq.w	800479c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	2208      	movs	r2, #8
 8003f50:	409a      	lsls	r2, r3
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80a2 	beq.w	80040a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a2e      	ldr	r2, [pc, #184]	@ (800401c <HAL_DMA_IRQHandler+0x1b4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d04a      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004020 <HAL_DMA_IRQHandler+0x1b8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d045      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a2b      	ldr	r2, [pc, #172]	@ (8004024 <HAL_DMA_IRQHandler+0x1bc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d040      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2a      	ldr	r2, [pc, #168]	@ (8004028 <HAL_DMA_IRQHandler+0x1c0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d03b      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a28      	ldr	r2, [pc, #160]	@ (800402c <HAL_DMA_IRQHandler+0x1c4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d036      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a27      	ldr	r2, [pc, #156]	@ (8004030 <HAL_DMA_IRQHandler+0x1c8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d031      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a25      	ldr	r2, [pc, #148]	@ (8004034 <HAL_DMA_IRQHandler+0x1cc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d02c      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a24      	ldr	r2, [pc, #144]	@ (8004038 <HAL_DMA_IRQHandler+0x1d0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d027      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a22      	ldr	r2, [pc, #136]	@ (800403c <HAL_DMA_IRQHandler+0x1d4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d022      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a21      	ldr	r2, [pc, #132]	@ (8004040 <HAL_DMA_IRQHandler+0x1d8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d01d      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <HAL_DMA_IRQHandler+0x1dc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d018      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <HAL_DMA_IRQHandler+0x1e0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d013      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800404c <HAL_DMA_IRQHandler+0x1e4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00e      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <HAL_DMA_IRQHandler+0x1e8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d009      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a19      	ldr	r2, [pc, #100]	@ (8004054 <HAL_DMA_IRQHandler+0x1ec>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a18      	ldr	r2, [pc, #96]	@ (8004058 <HAL_DMA_IRQHandler+0x1f0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d12f      	bne.n	800405c <HAL_DMA_IRQHandler+0x1f4>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e02e      	b.n	8004070 <HAL_DMA_IRQHandler+0x208>
 8004012:	bf00      	nop
 8004014:	24000000 	.word	0x24000000
 8004018:	1b4e81b5 	.word	0x1b4e81b5
 800401c:	40020010 	.word	0x40020010
 8004020:	40020028 	.word	0x40020028
 8004024:	40020040 	.word	0x40020040
 8004028:	40020058 	.word	0x40020058
 800402c:	40020070 	.word	0x40020070
 8004030:	40020088 	.word	0x40020088
 8004034:	400200a0 	.word	0x400200a0
 8004038:	400200b8 	.word	0x400200b8
 800403c:	40020410 	.word	0x40020410
 8004040:	40020428 	.word	0x40020428
 8004044:	40020440 	.word	0x40020440
 8004048:	40020458 	.word	0x40020458
 800404c:	40020470 	.word	0x40020470
 8004050:	40020488 	.word	0x40020488
 8004054:	400204a0 	.word	0x400204a0
 8004058:	400204b8 	.word	0x400204b8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0204 	bic.w	r2, r2, #4
 8004082:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2208      	movs	r2, #8
 800408e:	409a      	lsls	r2, r3
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	fa22 f303 	lsr.w	r3, r2, r3
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d06e      	beq.n	8004194 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a69      	ldr	r2, [pc, #420]	@ (8004260 <HAL_DMA_IRQHandler+0x3f8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d04a      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a67      	ldr	r2, [pc, #412]	@ (8004264 <HAL_DMA_IRQHandler+0x3fc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d045      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a66      	ldr	r2, [pc, #408]	@ (8004268 <HAL_DMA_IRQHandler+0x400>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d040      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a64      	ldr	r2, [pc, #400]	@ (800426c <HAL_DMA_IRQHandler+0x404>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d03b      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a63      	ldr	r2, [pc, #396]	@ (8004270 <HAL_DMA_IRQHandler+0x408>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d036      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a61      	ldr	r2, [pc, #388]	@ (8004274 <HAL_DMA_IRQHandler+0x40c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d031      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a60      	ldr	r2, [pc, #384]	@ (8004278 <HAL_DMA_IRQHandler+0x410>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d02c      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a5e      	ldr	r2, [pc, #376]	@ (800427c <HAL_DMA_IRQHandler+0x414>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d027      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a5d      	ldr	r2, [pc, #372]	@ (8004280 <HAL_DMA_IRQHandler+0x418>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d022      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a5b      	ldr	r2, [pc, #364]	@ (8004284 <HAL_DMA_IRQHandler+0x41c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01d      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a5a      	ldr	r2, [pc, #360]	@ (8004288 <HAL_DMA_IRQHandler+0x420>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d018      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a58      	ldr	r2, [pc, #352]	@ (800428c <HAL_DMA_IRQHandler+0x424>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a57      	ldr	r2, [pc, #348]	@ (8004290 <HAL_DMA_IRQHandler+0x428>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00e      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a55      	ldr	r2, [pc, #340]	@ (8004294 <HAL_DMA_IRQHandler+0x42c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d009      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a54      	ldr	r2, [pc, #336]	@ (8004298 <HAL_DMA_IRQHandler+0x430>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a52      	ldr	r2, [pc, #328]	@ (800429c <HAL_DMA_IRQHandler+0x434>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d10a      	bne.n	800416c <HAL_DMA_IRQHandler+0x304>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e003      	b.n	8004174 <HAL_DMA_IRQHandler+0x30c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00d      	beq.n	8004194 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2201      	movs	r2, #1
 8004182:	409a      	lsls	r2, r3
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418c:	f043 0202 	orr.w	r2, r3, #2
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2204      	movs	r2, #4
 800419e:	409a      	lsls	r2, r3
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 808f 	beq.w	80042c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004260 <HAL_DMA_IRQHandler+0x3f8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d04a      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004264 <HAL_DMA_IRQHandler+0x3fc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d045      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a29      	ldr	r2, [pc, #164]	@ (8004268 <HAL_DMA_IRQHandler+0x400>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d040      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a27      	ldr	r2, [pc, #156]	@ (800426c <HAL_DMA_IRQHandler+0x404>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d03b      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a26      	ldr	r2, [pc, #152]	@ (8004270 <HAL_DMA_IRQHandler+0x408>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d036      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a24      	ldr	r2, [pc, #144]	@ (8004274 <HAL_DMA_IRQHandler+0x40c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d031      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a23      	ldr	r2, [pc, #140]	@ (8004278 <HAL_DMA_IRQHandler+0x410>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d02c      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a21      	ldr	r2, [pc, #132]	@ (800427c <HAL_DMA_IRQHandler+0x414>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d027      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a20      	ldr	r2, [pc, #128]	@ (8004280 <HAL_DMA_IRQHandler+0x418>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1e      	ldr	r2, [pc, #120]	@ (8004284 <HAL_DMA_IRQHandler+0x41c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1d      	ldr	r2, [pc, #116]	@ (8004288 <HAL_DMA_IRQHandler+0x420>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1b      	ldr	r2, [pc, #108]	@ (800428c <HAL_DMA_IRQHandler+0x424>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1a      	ldr	r2, [pc, #104]	@ (8004290 <HAL_DMA_IRQHandler+0x428>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a18      	ldr	r2, [pc, #96]	@ (8004294 <HAL_DMA_IRQHandler+0x42c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a17      	ldr	r2, [pc, #92]	@ (8004298 <HAL_DMA_IRQHandler+0x430>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a15      	ldr	r2, [pc, #84]	@ (800429c <HAL_DMA_IRQHandler+0x434>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d12a      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x438>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf14      	ite	ne
 8004258:	2301      	movne	r3, #1
 800425a:	2300      	moveq	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e023      	b.n	80042a8 <HAL_DMA_IRQHandler+0x440>
 8004260:	40020010 	.word	0x40020010
 8004264:	40020028 	.word	0x40020028
 8004268:	40020040 	.word	0x40020040
 800426c:	40020058 	.word	0x40020058
 8004270:	40020070 	.word	0x40020070
 8004274:	40020088 	.word	0x40020088
 8004278:	400200a0 	.word	0x400200a0
 800427c:	400200b8 	.word	0x400200b8
 8004280:	40020410 	.word	0x40020410
 8004284:	40020428 	.word	0x40020428
 8004288:	40020440 	.word	0x40020440
 800428c:	40020458 	.word	0x40020458
 8004290:	40020470 	.word	0x40020470
 8004294:	40020488 	.word	0x40020488
 8004298:	400204a0 	.word	0x400204a0
 800429c:	400204b8 	.word	0x400204b8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2300      	movs	r3, #0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00d      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2204      	movs	r2, #4
 80042b6:	409a      	lsls	r2, r3
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c0:	f043 0204 	orr.w	r2, r3, #4
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2210      	movs	r2, #16
 80042d2:	409a      	lsls	r2, r3
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80a6 	beq.w	800442a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a85      	ldr	r2, [pc, #532]	@ (80044f8 <HAL_DMA_IRQHandler+0x690>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d04a      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a83      	ldr	r2, [pc, #524]	@ (80044fc <HAL_DMA_IRQHandler+0x694>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d045      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a82      	ldr	r2, [pc, #520]	@ (8004500 <HAL_DMA_IRQHandler+0x698>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d040      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a80      	ldr	r2, [pc, #512]	@ (8004504 <HAL_DMA_IRQHandler+0x69c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d03b      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a7f      	ldr	r2, [pc, #508]	@ (8004508 <HAL_DMA_IRQHandler+0x6a0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d036      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a7d      	ldr	r2, [pc, #500]	@ (800450c <HAL_DMA_IRQHandler+0x6a4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d031      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7c      	ldr	r2, [pc, #496]	@ (8004510 <HAL_DMA_IRQHandler+0x6a8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d02c      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7a      	ldr	r2, [pc, #488]	@ (8004514 <HAL_DMA_IRQHandler+0x6ac>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d027      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a79      	ldr	r2, [pc, #484]	@ (8004518 <HAL_DMA_IRQHandler+0x6b0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d022      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a77      	ldr	r2, [pc, #476]	@ (800451c <HAL_DMA_IRQHandler+0x6b4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d01d      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a76      	ldr	r2, [pc, #472]	@ (8004520 <HAL_DMA_IRQHandler+0x6b8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d018      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a74      	ldr	r2, [pc, #464]	@ (8004524 <HAL_DMA_IRQHandler+0x6bc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d013      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a73      	ldr	r2, [pc, #460]	@ (8004528 <HAL_DMA_IRQHandler+0x6c0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00e      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a71      	ldr	r2, [pc, #452]	@ (800452c <HAL_DMA_IRQHandler+0x6c4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d009      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a70      	ldr	r2, [pc, #448]	@ (8004530 <HAL_DMA_IRQHandler+0x6c8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d004      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6e      	ldr	r2, [pc, #440]	@ (8004534 <HAL_DMA_IRQHandler+0x6cc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d10a      	bne.n	8004394 <HAL_DMA_IRQHandler+0x52c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e009      	b.n	80043a8 <HAL_DMA_IRQHandler+0x540>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bf14      	ite	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	2300      	moveq	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d03e      	beq.n	800442a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2210      	movs	r2, #16
 80043b6:	409a      	lsls	r2, r3
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d018      	beq.n	80043fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d108      	bne.n	80043ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d024      	beq.n	800442a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
 80043e8:	e01f      	b.n	800442a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01b      	beq.n	800442a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4798      	blx	r3
 80043fa:	e016      	b.n	800442a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0208 	bic.w	r2, r2, #8
 8004418:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2220      	movs	r2, #32
 8004434:	409a      	lsls	r2, r3
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8110 	beq.w	8004660 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2c      	ldr	r2, [pc, #176]	@ (80044f8 <HAL_DMA_IRQHandler+0x690>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d04a      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a2b      	ldr	r2, [pc, #172]	@ (80044fc <HAL_DMA_IRQHandler+0x694>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d045      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a29      	ldr	r2, [pc, #164]	@ (8004500 <HAL_DMA_IRQHandler+0x698>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d040      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a28      	ldr	r2, [pc, #160]	@ (8004504 <HAL_DMA_IRQHandler+0x69c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d03b      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a26      	ldr	r2, [pc, #152]	@ (8004508 <HAL_DMA_IRQHandler+0x6a0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d036      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a25      	ldr	r2, [pc, #148]	@ (800450c <HAL_DMA_IRQHandler+0x6a4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d031      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a23      	ldr	r2, [pc, #140]	@ (8004510 <HAL_DMA_IRQHandler+0x6a8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d02c      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a22      	ldr	r2, [pc, #136]	@ (8004514 <HAL_DMA_IRQHandler+0x6ac>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d027      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a20      	ldr	r2, [pc, #128]	@ (8004518 <HAL_DMA_IRQHandler+0x6b0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d022      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a1f      	ldr	r2, [pc, #124]	@ (800451c <HAL_DMA_IRQHandler+0x6b4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d01d      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004520 <HAL_DMA_IRQHandler+0x6b8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d018      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004524 <HAL_DMA_IRQHandler+0x6bc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004528 <HAL_DMA_IRQHandler+0x6c0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00e      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a19      	ldr	r2, [pc, #100]	@ (800452c <HAL_DMA_IRQHandler+0x6c4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <HAL_DMA_IRQHandler+0x6c8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <HAL_DMA_IRQHandler+0x6cc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d12b      	bne.n	8004538 <HAL_DMA_IRQHandler+0x6d0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bf14      	ite	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	2300      	moveq	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	e02a      	b.n	800454c <HAL_DMA_IRQHandler+0x6e4>
 80044f6:	bf00      	nop
 80044f8:	40020010 	.word	0x40020010
 80044fc:	40020028 	.word	0x40020028
 8004500:	40020040 	.word	0x40020040
 8004504:	40020058 	.word	0x40020058
 8004508:	40020070 	.word	0x40020070
 800450c:	40020088 	.word	0x40020088
 8004510:	400200a0 	.word	0x400200a0
 8004514:	400200b8 	.word	0x400200b8
 8004518:	40020410 	.word	0x40020410
 800451c:	40020428 	.word	0x40020428
 8004520:	40020440 	.word	0x40020440
 8004524:	40020458 	.word	0x40020458
 8004528:	40020470 	.word	0x40020470
 800452c:	40020488 	.word	0x40020488
 8004530:	400204a0 	.word	0x400204a0
 8004534:	400204b8 	.word	0x400204b8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	bf14      	ite	ne
 8004546:	2301      	movne	r3, #1
 8004548:	2300      	moveq	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8087 	beq.w	8004660 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	2220      	movs	r2, #32
 800455c:	409a      	lsls	r2, r3
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b04      	cmp	r3, #4
 800456c:	d139      	bne.n	80045e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0216 	bic.w	r2, r2, #22
 800457c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800458c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <HAL_DMA_IRQHandler+0x736>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0208 	bic.w	r2, r2, #8
 80045ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	223f      	movs	r2, #63	@ 0x3f
 80045b8:	409a      	lsls	r2, r3
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8382 	beq.w	8004cdc <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
          }
          return;
 80045e0:	e37c      	b.n	8004cdc <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d018      	beq.n	8004622 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d108      	bne.n	8004610 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004602:	2b00      	cmp	r3, #0
 8004604:	d02c      	beq.n	8004660 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	4798      	blx	r3
 800460e:	e027      	b.n	8004660 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d023      	beq.n	8004660 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
 8004620:	e01e      	b.n	8004660 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10f      	bne.n	8004650 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0210 	bic.w	r2, r2, #16
 800463e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 833e 	beq.w	8004ce6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 8088 	beq.w	8004788 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2204      	movs	r2, #4
 800467c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a89      	ldr	r2, [pc, #548]	@ (80048ac <HAL_DMA_IRQHandler+0xa44>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d04a      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a88      	ldr	r2, [pc, #544]	@ (80048b0 <HAL_DMA_IRQHandler+0xa48>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d045      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a86      	ldr	r2, [pc, #536]	@ (80048b4 <HAL_DMA_IRQHandler+0xa4c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d040      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a85      	ldr	r2, [pc, #532]	@ (80048b8 <HAL_DMA_IRQHandler+0xa50>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d03b      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a83      	ldr	r2, [pc, #524]	@ (80048bc <HAL_DMA_IRQHandler+0xa54>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d036      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a82      	ldr	r2, [pc, #520]	@ (80048c0 <HAL_DMA_IRQHandler+0xa58>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d031      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a80      	ldr	r2, [pc, #512]	@ (80048c4 <HAL_DMA_IRQHandler+0xa5c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d02c      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a7f      	ldr	r2, [pc, #508]	@ (80048c8 <HAL_DMA_IRQHandler+0xa60>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d027      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a7d      	ldr	r2, [pc, #500]	@ (80048cc <HAL_DMA_IRQHandler+0xa64>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d022      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7c      	ldr	r2, [pc, #496]	@ (80048d0 <HAL_DMA_IRQHandler+0xa68>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d01d      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a7a      	ldr	r2, [pc, #488]	@ (80048d4 <HAL_DMA_IRQHandler+0xa6c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d018      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a79      	ldr	r2, [pc, #484]	@ (80048d8 <HAL_DMA_IRQHandler+0xa70>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d013      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a77      	ldr	r2, [pc, #476]	@ (80048dc <HAL_DMA_IRQHandler+0xa74>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00e      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a76      	ldr	r2, [pc, #472]	@ (80048e0 <HAL_DMA_IRQHandler+0xa78>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d009      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a74      	ldr	r2, [pc, #464]	@ (80048e4 <HAL_DMA_IRQHandler+0xa7c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a73      	ldr	r2, [pc, #460]	@ (80048e8 <HAL_DMA_IRQHandler+0xa80>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d108      	bne.n	8004732 <HAL_DMA_IRQHandler+0x8ca>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e007      	b.n	8004742 <HAL_DMA_IRQHandler+0x8da>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0201 	bic.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3301      	adds	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474a:	429a      	cmp	r2, r3
 800474c:	d307      	bcc.n	800475e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f2      	bne.n	8004742 <HAL_DMA_IRQHandler+0x8da>
 800475c:	e000      	b.n	8004760 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800475e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2203      	movs	r2, #3
 8004772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004776:	e003      	b.n	8004780 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 82aa 	beq.w	8004ce6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
 800479a:	e2a4      	b.n	8004ce6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a52      	ldr	r2, [pc, #328]	@ (80048ec <HAL_DMA_IRQHandler+0xa84>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d04a      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a51      	ldr	r2, [pc, #324]	@ (80048f0 <HAL_DMA_IRQHandler+0xa88>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d045      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a4f      	ldr	r2, [pc, #316]	@ (80048f4 <HAL_DMA_IRQHandler+0xa8c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d040      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a4e      	ldr	r2, [pc, #312]	@ (80048f8 <HAL_DMA_IRQHandler+0xa90>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d03b      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a4c      	ldr	r2, [pc, #304]	@ (80048fc <HAL_DMA_IRQHandler+0xa94>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d036      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a4b      	ldr	r2, [pc, #300]	@ (8004900 <HAL_DMA_IRQHandler+0xa98>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d031      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a49      	ldr	r2, [pc, #292]	@ (8004904 <HAL_DMA_IRQHandler+0xa9c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d02c      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a48      	ldr	r2, [pc, #288]	@ (8004908 <HAL_DMA_IRQHandler+0xaa0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d027      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a46      	ldr	r2, [pc, #280]	@ (800490c <HAL_DMA_IRQHandler+0xaa4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d022      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a45      	ldr	r2, [pc, #276]	@ (8004910 <HAL_DMA_IRQHandler+0xaa8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d01d      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a43      	ldr	r2, [pc, #268]	@ (8004914 <HAL_DMA_IRQHandler+0xaac>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a42      	ldr	r2, [pc, #264]	@ (8004918 <HAL_DMA_IRQHandler+0xab0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a40      	ldr	r2, [pc, #256]	@ (800491c <HAL_DMA_IRQHandler+0xab4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a3f      	ldr	r2, [pc, #252]	@ (8004920 <HAL_DMA_IRQHandler+0xab8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a3d      	ldr	r2, [pc, #244]	@ (8004924 <HAL_DMA_IRQHandler+0xabc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_DMA_IRQHandler+0x9d4>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a3c      	ldr	r2, [pc, #240]	@ (8004928 <HAL_DMA_IRQHandler+0xac0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <HAL_DMA_IRQHandler+0x9d8>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_DMA_IRQHandler+0x9da>
 8004840:	2300      	movs	r3, #0
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 824f 	beq.w	8004ce6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	2204      	movs	r2, #4
 800485a:	409a      	lsls	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80dd 	beq.w	8004a20 <HAL_DMA_IRQHandler+0xbb8>
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80d7 	beq.w	8004a20 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	2204      	movs	r2, #4
 800487c:	409a      	lsls	r2, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d059      	beq.n	8004940 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d14a      	bne.n	800492c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8220 	beq.w	8004ce0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048a8:	e21a      	b.n	8004ce0 <HAL_DMA_IRQHandler+0xe78>
 80048aa:	bf00      	nop
 80048ac:	40020010 	.word	0x40020010
 80048b0:	40020028 	.word	0x40020028
 80048b4:	40020040 	.word	0x40020040
 80048b8:	40020058 	.word	0x40020058
 80048bc:	40020070 	.word	0x40020070
 80048c0:	40020088 	.word	0x40020088
 80048c4:	400200a0 	.word	0x400200a0
 80048c8:	400200b8 	.word	0x400200b8
 80048cc:	40020410 	.word	0x40020410
 80048d0:	40020428 	.word	0x40020428
 80048d4:	40020440 	.word	0x40020440
 80048d8:	40020458 	.word	0x40020458
 80048dc:	40020470 	.word	0x40020470
 80048e0:	40020488 	.word	0x40020488
 80048e4:	400204a0 	.word	0x400204a0
 80048e8:	400204b8 	.word	0x400204b8
 80048ec:	48022c08 	.word	0x48022c08
 80048f0:	48022c1c 	.word	0x48022c1c
 80048f4:	48022c30 	.word	0x48022c30
 80048f8:	48022c44 	.word	0x48022c44
 80048fc:	48022c58 	.word	0x48022c58
 8004900:	48022c6c 	.word	0x48022c6c
 8004904:	48022c80 	.word	0x48022c80
 8004908:	48022c94 	.word	0x48022c94
 800490c:	58025408 	.word	0x58025408
 8004910:	5802541c 	.word	0x5802541c
 8004914:	58025430 	.word	0x58025430
 8004918:	58025444 	.word	0x58025444
 800491c:	58025458 	.word	0x58025458
 8004920:	5802546c 	.word	0x5802546c
 8004924:	58025480 	.word	0x58025480
 8004928:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 81d5 	beq.w	8004ce0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800493e:	e1cf      	b.n	8004ce0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d160      	bne.n	8004a0c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a7f      	ldr	r2, [pc, #508]	@ (8004b4c <HAL_DMA_IRQHandler+0xce4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d04a      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a7d      	ldr	r2, [pc, #500]	@ (8004b50 <HAL_DMA_IRQHandler+0xce8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d045      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a7c      	ldr	r2, [pc, #496]	@ (8004b54 <HAL_DMA_IRQHandler+0xcec>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d040      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a7a      	ldr	r2, [pc, #488]	@ (8004b58 <HAL_DMA_IRQHandler+0xcf0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d03b      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a79      	ldr	r2, [pc, #484]	@ (8004b5c <HAL_DMA_IRQHandler+0xcf4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d036      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a77      	ldr	r2, [pc, #476]	@ (8004b60 <HAL_DMA_IRQHandler+0xcf8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d031      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a76      	ldr	r2, [pc, #472]	@ (8004b64 <HAL_DMA_IRQHandler+0xcfc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d02c      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a74      	ldr	r2, [pc, #464]	@ (8004b68 <HAL_DMA_IRQHandler+0xd00>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d027      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a73      	ldr	r2, [pc, #460]	@ (8004b6c <HAL_DMA_IRQHandler+0xd04>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d022      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a71      	ldr	r2, [pc, #452]	@ (8004b70 <HAL_DMA_IRQHandler+0xd08>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01d      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a70      	ldr	r2, [pc, #448]	@ (8004b74 <HAL_DMA_IRQHandler+0xd0c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d018      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004b78 <HAL_DMA_IRQHandler+0xd10>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a6d      	ldr	r2, [pc, #436]	@ (8004b7c <HAL_DMA_IRQHandler+0xd14>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00e      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004b80 <HAL_DMA_IRQHandler+0xd18>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d009      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a6a      	ldr	r2, [pc, #424]	@ (8004b84 <HAL_DMA_IRQHandler+0xd1c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_DMA_IRQHandler+0xb82>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a68      	ldr	r2, [pc, #416]	@ (8004b88 <HAL_DMA_IRQHandler+0xd20>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d108      	bne.n	80049fc <HAL_DMA_IRQHandler+0xb94>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0208 	bic.w	r2, r2, #8
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e007      	b.n	8004a0c <HAL_DMA_IRQHandler+0xba4>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0204 	bic.w	r2, r2, #4
 8004a0a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8165 	beq.w	8004ce0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a1e:	e15f      	b.n	8004ce0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2202      	movs	r2, #2
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80c5 	beq.w	8004bc0 <HAL_DMA_IRQHandler+0xd58>
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80bf 	beq.w	8004bc0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d018      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 813a 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a78:	e134      	b.n	8004ce4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8130 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a8c:	e12a      	b.n	8004ce4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 8089 	bne.w	8004bac <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b4c <HAL_DMA_IRQHandler+0xce4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d04a      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a29      	ldr	r2, [pc, #164]	@ (8004b50 <HAL_DMA_IRQHandler+0xce8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d045      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a28      	ldr	r2, [pc, #160]	@ (8004b54 <HAL_DMA_IRQHandler+0xcec>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d040      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a26      	ldr	r2, [pc, #152]	@ (8004b58 <HAL_DMA_IRQHandler+0xcf0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d03b      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a25      	ldr	r2, [pc, #148]	@ (8004b5c <HAL_DMA_IRQHandler+0xcf4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d036      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a23      	ldr	r2, [pc, #140]	@ (8004b60 <HAL_DMA_IRQHandler+0xcf8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d031      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a22      	ldr	r2, [pc, #136]	@ (8004b64 <HAL_DMA_IRQHandler+0xcfc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d02c      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a20      	ldr	r2, [pc, #128]	@ (8004b68 <HAL_DMA_IRQHandler+0xd00>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d027      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1f      	ldr	r2, [pc, #124]	@ (8004b6c <HAL_DMA_IRQHandler+0xd04>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d022      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b70 <HAL_DMA_IRQHandler+0xd08>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01d      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1c      	ldr	r2, [pc, #112]	@ (8004b74 <HAL_DMA_IRQHandler+0xd0c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d018      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004b78 <HAL_DMA_IRQHandler+0xd10>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d013      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a19      	ldr	r2, [pc, #100]	@ (8004b7c <HAL_DMA_IRQHandler+0xd14>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00e      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a17      	ldr	r2, [pc, #92]	@ (8004b80 <HAL_DMA_IRQHandler+0xd18>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d009      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a16      	ldr	r2, [pc, #88]	@ (8004b84 <HAL_DMA_IRQHandler+0xd1c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d004      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xcd2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a14      	ldr	r2, [pc, #80]	@ (8004b88 <HAL_DMA_IRQHandler+0xd20>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d128      	bne.n	8004b8c <HAL_DMA_IRQHandler+0xd24>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0214 	bic.w	r2, r2, #20
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e027      	b.n	8004b9c <HAL_DMA_IRQHandler+0xd34>
 8004b4c:	40020010 	.word	0x40020010
 8004b50:	40020028 	.word	0x40020028
 8004b54:	40020040 	.word	0x40020040
 8004b58:	40020058 	.word	0x40020058
 8004b5c:	40020070 	.word	0x40020070
 8004b60:	40020088 	.word	0x40020088
 8004b64:	400200a0 	.word	0x400200a0
 8004b68:	400200b8 	.word	0x400200b8
 8004b6c:	40020410 	.word	0x40020410
 8004b70:	40020428 	.word	0x40020428
 8004b74:	40020440 	.word	0x40020440
 8004b78:	40020458 	.word	0x40020458
 8004b7c:	40020470 	.word	0x40020470
 8004b80:	40020488 	.word	0x40020488
 8004b84:	400204a0 	.word	0x400204a0
 8004b88:	400204b8 	.word	0x400204b8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 020a 	bic.w	r2, r2, #10
 8004b9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8097 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bbe:	e091      	b.n	8004ce4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2208      	movs	r2, #8
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8088 	beq.w	8004ce6 <HAL_DMA_IRQHandler+0xe7e>
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8082 	beq.w	8004ce6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a41      	ldr	r2, [pc, #260]	@ (8004cec <HAL_DMA_IRQHandler+0xe84>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d04a      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a3f      	ldr	r2, [pc, #252]	@ (8004cf0 <HAL_DMA_IRQHandler+0xe88>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d045      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a3e      	ldr	r2, [pc, #248]	@ (8004cf4 <HAL_DMA_IRQHandler+0xe8c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d040      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a3c      	ldr	r2, [pc, #240]	@ (8004cf8 <HAL_DMA_IRQHandler+0xe90>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d03b      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a3b      	ldr	r2, [pc, #236]	@ (8004cfc <HAL_DMA_IRQHandler+0xe94>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d036      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a39      	ldr	r2, [pc, #228]	@ (8004d00 <HAL_DMA_IRQHandler+0xe98>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d031      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a38      	ldr	r2, [pc, #224]	@ (8004d04 <HAL_DMA_IRQHandler+0xe9c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d02c      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a36      	ldr	r2, [pc, #216]	@ (8004d08 <HAL_DMA_IRQHandler+0xea0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d027      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a35      	ldr	r2, [pc, #212]	@ (8004d0c <HAL_DMA_IRQHandler+0xea4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a33      	ldr	r2, [pc, #204]	@ (8004d10 <HAL_DMA_IRQHandler+0xea8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01d      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a32      	ldr	r2, [pc, #200]	@ (8004d14 <HAL_DMA_IRQHandler+0xeac>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d018      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a30      	ldr	r2, [pc, #192]	@ (8004d18 <HAL_DMA_IRQHandler+0xeb0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d1c <HAL_DMA_IRQHandler+0xeb4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2d      	ldr	r2, [pc, #180]	@ (8004d20 <HAL_DMA_IRQHandler+0xeb8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2c      	ldr	r2, [pc, #176]	@ (8004d24 <HAL_DMA_IRQHandler+0xebc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe1a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004d28 <HAL_DMA_IRQHandler+0xec0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d108      	bne.n	8004c94 <HAL_DMA_IRQHandler+0xe2c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 021c 	bic.w	r2, r2, #28
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e007      	b.n	8004ca4 <HAL_DMA_IRQHandler+0xe3c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 020e 	bic.w	r2, r2, #14
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	2201      	movs	r2, #1
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4798      	blx	r3
 8004cda:	e004      	b.n	8004ce6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004cdc:	bf00      	nop
 8004cde:	e002      	b.n	8004ce6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce0:	bf00      	nop
 8004ce2:	e000      	b.n	8004ce6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ce6:	3728      	adds	r7, #40	@ 0x28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40020010 	.word	0x40020010
 8004cf0:	40020028 	.word	0x40020028
 8004cf4:	40020040 	.word	0x40020040
 8004cf8:	40020058 	.word	0x40020058
 8004cfc:	40020070 	.word	0x40020070
 8004d00:	40020088 	.word	0x40020088
 8004d04:	400200a0 	.word	0x400200a0
 8004d08:	400200b8 	.word	0x400200b8
 8004d0c:	40020410 	.word	0x40020410
 8004d10:	40020428 	.word	0x40020428
 8004d14:	40020440 	.word	0x40020440
 8004d18:	40020458 	.word	0x40020458
 8004d1c:	40020470 	.word	0x40020470
 8004d20:	40020488 	.word	0x40020488
 8004d24:	400204a0 	.word	0x400204a0
 8004d28:	400204b8 	.word	0x400204b8

08004d2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d44:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a7f      	ldr	r2, [pc, #508]	@ (8004f48 <DMA_SetConfig+0x21c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d072      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a7d      	ldr	r2, [pc, #500]	@ (8004f4c <DMA_SetConfig+0x220>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d06d      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a7c      	ldr	r2, [pc, #496]	@ (8004f50 <DMA_SetConfig+0x224>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d068      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a7a      	ldr	r2, [pc, #488]	@ (8004f54 <DMA_SetConfig+0x228>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d063      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a79      	ldr	r2, [pc, #484]	@ (8004f58 <DMA_SetConfig+0x22c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d05e      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a77      	ldr	r2, [pc, #476]	@ (8004f5c <DMA_SetConfig+0x230>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d059      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a76      	ldr	r2, [pc, #472]	@ (8004f60 <DMA_SetConfig+0x234>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d054      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a74      	ldr	r2, [pc, #464]	@ (8004f64 <DMA_SetConfig+0x238>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d04f      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a73      	ldr	r2, [pc, #460]	@ (8004f68 <DMA_SetConfig+0x23c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d04a      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a71      	ldr	r2, [pc, #452]	@ (8004f6c <DMA_SetConfig+0x240>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d045      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a70      	ldr	r2, [pc, #448]	@ (8004f70 <DMA_SetConfig+0x244>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d040      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a6e      	ldr	r2, [pc, #440]	@ (8004f74 <DMA_SetConfig+0x248>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d03b      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a6d      	ldr	r2, [pc, #436]	@ (8004f78 <DMA_SetConfig+0x24c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d036      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8004f7c <DMA_SetConfig+0x250>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d031      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a6a      	ldr	r2, [pc, #424]	@ (8004f80 <DMA_SetConfig+0x254>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d02c      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a68      	ldr	r2, [pc, #416]	@ (8004f84 <DMA_SetConfig+0x258>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d027      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a67      	ldr	r2, [pc, #412]	@ (8004f88 <DMA_SetConfig+0x25c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d022      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a65      	ldr	r2, [pc, #404]	@ (8004f8c <DMA_SetConfig+0x260>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01d      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a64      	ldr	r2, [pc, #400]	@ (8004f90 <DMA_SetConfig+0x264>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a62      	ldr	r2, [pc, #392]	@ (8004f94 <DMA_SetConfig+0x268>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a61      	ldr	r2, [pc, #388]	@ (8004f98 <DMA_SetConfig+0x26c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a5f      	ldr	r2, [pc, #380]	@ (8004f9c <DMA_SetConfig+0x270>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a5e      	ldr	r2, [pc, #376]	@ (8004fa0 <DMA_SetConfig+0x274>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <DMA_SetConfig+0x10a>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a5c      	ldr	r2, [pc, #368]	@ (8004fa4 <DMA_SetConfig+0x278>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <DMA_SetConfig+0x10e>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <DMA_SetConfig+0x110>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00d      	beq.n	8004e5c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e5a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a39      	ldr	r2, [pc, #228]	@ (8004f48 <DMA_SetConfig+0x21c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d04a      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a38      	ldr	r2, [pc, #224]	@ (8004f4c <DMA_SetConfig+0x220>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d045      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a36      	ldr	r2, [pc, #216]	@ (8004f50 <DMA_SetConfig+0x224>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d040      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a35      	ldr	r2, [pc, #212]	@ (8004f54 <DMA_SetConfig+0x228>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d03b      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a33      	ldr	r2, [pc, #204]	@ (8004f58 <DMA_SetConfig+0x22c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d036      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a32      	ldr	r2, [pc, #200]	@ (8004f5c <DMA_SetConfig+0x230>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d031      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a30      	ldr	r2, [pc, #192]	@ (8004f60 <DMA_SetConfig+0x234>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02c      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8004f64 <DMA_SetConfig+0x238>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d027      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8004f68 <DMA_SetConfig+0x23c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d022      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2c      	ldr	r2, [pc, #176]	@ (8004f6c <DMA_SetConfig+0x240>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01d      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f70 <DMA_SetConfig+0x244>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a29      	ldr	r2, [pc, #164]	@ (8004f74 <DMA_SetConfig+0x248>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a27      	ldr	r2, [pc, #156]	@ (8004f78 <DMA_SetConfig+0x24c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a26      	ldr	r2, [pc, #152]	@ (8004f7c <DMA_SetConfig+0x250>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a24      	ldr	r2, [pc, #144]	@ (8004f80 <DMA_SetConfig+0x254>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <DMA_SetConfig+0x1d0>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a23      	ldr	r2, [pc, #140]	@ (8004f84 <DMA_SetConfig+0x258>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <DMA_SetConfig+0x1d4>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <DMA_SetConfig+0x1d6>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d059      	beq.n	8004fba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	223f      	movs	r2, #63	@ 0x3f
 8004f10:	409a      	lsls	r2, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f24:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b40      	cmp	r3, #64	@ 0x40
 8004f34:	d138      	bne.n	8004fa8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f46:	e0ae      	b.n	80050a6 <DMA_SetConfig+0x37a>
 8004f48:	40020010 	.word	0x40020010
 8004f4c:	40020028 	.word	0x40020028
 8004f50:	40020040 	.word	0x40020040
 8004f54:	40020058 	.word	0x40020058
 8004f58:	40020070 	.word	0x40020070
 8004f5c:	40020088 	.word	0x40020088
 8004f60:	400200a0 	.word	0x400200a0
 8004f64:	400200b8 	.word	0x400200b8
 8004f68:	40020410 	.word	0x40020410
 8004f6c:	40020428 	.word	0x40020428
 8004f70:	40020440 	.word	0x40020440
 8004f74:	40020458 	.word	0x40020458
 8004f78:	40020470 	.word	0x40020470
 8004f7c:	40020488 	.word	0x40020488
 8004f80:	400204a0 	.word	0x400204a0
 8004f84:	400204b8 	.word	0x400204b8
 8004f88:	58025408 	.word	0x58025408
 8004f8c:	5802541c 	.word	0x5802541c
 8004f90:	58025430 	.word	0x58025430
 8004f94:	58025444 	.word	0x58025444
 8004f98:	58025458 	.word	0x58025458
 8004f9c:	5802546c 	.word	0x5802546c
 8004fa0:	58025480 	.word	0x58025480
 8004fa4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]
}
 8004fb8:	e075      	b.n	80050a6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a3d      	ldr	r2, [pc, #244]	@ (80050b4 <DMA_SetConfig+0x388>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d04a      	beq.n	800505a <DMA_SetConfig+0x32e>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a3b      	ldr	r2, [pc, #236]	@ (80050b8 <DMA_SetConfig+0x38c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d045      	beq.n	800505a <DMA_SetConfig+0x32e>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a3a      	ldr	r2, [pc, #232]	@ (80050bc <DMA_SetConfig+0x390>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d040      	beq.n	800505a <DMA_SetConfig+0x32e>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a38      	ldr	r2, [pc, #224]	@ (80050c0 <DMA_SetConfig+0x394>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d03b      	beq.n	800505a <DMA_SetConfig+0x32e>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a37      	ldr	r2, [pc, #220]	@ (80050c4 <DMA_SetConfig+0x398>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d036      	beq.n	800505a <DMA_SetConfig+0x32e>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a35      	ldr	r2, [pc, #212]	@ (80050c8 <DMA_SetConfig+0x39c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d031      	beq.n	800505a <DMA_SetConfig+0x32e>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a34      	ldr	r2, [pc, #208]	@ (80050cc <DMA_SetConfig+0x3a0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d02c      	beq.n	800505a <DMA_SetConfig+0x32e>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a32      	ldr	r2, [pc, #200]	@ (80050d0 <DMA_SetConfig+0x3a4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d027      	beq.n	800505a <DMA_SetConfig+0x32e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a31      	ldr	r2, [pc, #196]	@ (80050d4 <DMA_SetConfig+0x3a8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d022      	beq.n	800505a <DMA_SetConfig+0x32e>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a2f      	ldr	r2, [pc, #188]	@ (80050d8 <DMA_SetConfig+0x3ac>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01d      	beq.n	800505a <DMA_SetConfig+0x32e>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a2e      	ldr	r2, [pc, #184]	@ (80050dc <DMA_SetConfig+0x3b0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d018      	beq.n	800505a <DMA_SetConfig+0x32e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2c      	ldr	r2, [pc, #176]	@ (80050e0 <DMA_SetConfig+0x3b4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <DMA_SetConfig+0x32e>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a2b      	ldr	r2, [pc, #172]	@ (80050e4 <DMA_SetConfig+0x3b8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <DMA_SetConfig+0x32e>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a29      	ldr	r2, [pc, #164]	@ (80050e8 <DMA_SetConfig+0x3bc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <DMA_SetConfig+0x32e>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a28      	ldr	r2, [pc, #160]	@ (80050ec <DMA_SetConfig+0x3c0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <DMA_SetConfig+0x32e>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a26      	ldr	r2, [pc, #152]	@ (80050f0 <DMA_SetConfig+0x3c4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d101      	bne.n	800505e <DMA_SetConfig+0x332>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <DMA_SetConfig+0x334>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d020      	beq.n	80050a6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	2201      	movs	r2, #1
 800506e:	409a      	lsls	r2, r3
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b40      	cmp	r3, #64	@ 0x40
 8005082:	d108      	bne.n	8005096 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	60da      	str	r2, [r3, #12]
}
 8005094:	e007      	b.n	80050a6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	60da      	str	r2, [r3, #12]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	48022c08 	.word	0x48022c08
 80050b8:	48022c1c 	.word	0x48022c1c
 80050bc:	48022c30 	.word	0x48022c30
 80050c0:	48022c44 	.word	0x48022c44
 80050c4:	48022c58 	.word	0x48022c58
 80050c8:	48022c6c 	.word	0x48022c6c
 80050cc:	48022c80 	.word	0x48022c80
 80050d0:	48022c94 	.word	0x48022c94
 80050d4:	58025408 	.word	0x58025408
 80050d8:	5802541c 	.word	0x5802541c
 80050dc:	58025430 	.word	0x58025430
 80050e0:	58025444 	.word	0x58025444
 80050e4:	58025458 	.word	0x58025458
 80050e8:	5802546c 	.word	0x5802546c
 80050ec:	58025480 	.word	0x58025480
 80050f0:	58025494 	.word	0x58025494

080050f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a42      	ldr	r2, [pc, #264]	@ (800520c <DMA_CalcBaseAndBitshift+0x118>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d04a      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a41      	ldr	r2, [pc, #260]	@ (8005210 <DMA_CalcBaseAndBitshift+0x11c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d045      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a3f      	ldr	r2, [pc, #252]	@ (8005214 <DMA_CalcBaseAndBitshift+0x120>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d040      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a3e      	ldr	r2, [pc, #248]	@ (8005218 <DMA_CalcBaseAndBitshift+0x124>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d03b      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a3c      	ldr	r2, [pc, #240]	@ (800521c <DMA_CalcBaseAndBitshift+0x128>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d036      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a3b      	ldr	r2, [pc, #236]	@ (8005220 <DMA_CalcBaseAndBitshift+0x12c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d031      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a39      	ldr	r2, [pc, #228]	@ (8005224 <DMA_CalcBaseAndBitshift+0x130>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d02c      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a38      	ldr	r2, [pc, #224]	@ (8005228 <DMA_CalcBaseAndBitshift+0x134>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d027      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a36      	ldr	r2, [pc, #216]	@ (800522c <DMA_CalcBaseAndBitshift+0x138>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d022      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a35      	ldr	r2, [pc, #212]	@ (8005230 <DMA_CalcBaseAndBitshift+0x13c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d01d      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a33      	ldr	r2, [pc, #204]	@ (8005234 <DMA_CalcBaseAndBitshift+0x140>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d018      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a32      	ldr	r2, [pc, #200]	@ (8005238 <DMA_CalcBaseAndBitshift+0x144>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d013      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a30      	ldr	r2, [pc, #192]	@ (800523c <DMA_CalcBaseAndBitshift+0x148>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00e      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a2f      	ldr	r2, [pc, #188]	@ (8005240 <DMA_CalcBaseAndBitshift+0x14c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d009      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a2d      	ldr	r2, [pc, #180]	@ (8005244 <DMA_CalcBaseAndBitshift+0x150>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <DMA_CalcBaseAndBitshift+0xa8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a2c      	ldr	r2, [pc, #176]	@ (8005248 <DMA_CalcBaseAndBitshift+0x154>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d101      	bne.n	80051a0 <DMA_CalcBaseAndBitshift+0xac>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <DMA_CalcBaseAndBitshift+0xae>
 80051a0:	2300      	movs	r3, #0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d024      	beq.n	80051f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	3b10      	subs	r3, #16
 80051ae:	4a27      	ldr	r2, [pc, #156]	@ (800524c <DMA_CalcBaseAndBitshift+0x158>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	4a24      	ldr	r2, [pc, #144]	@ (8005250 <DMA_CalcBaseAndBitshift+0x15c>)
 80051c0:	5cd3      	ldrb	r3, [r2, r3]
 80051c2:	461a      	mov	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d908      	bls.n	80051e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005254 <DMA_CalcBaseAndBitshift+0x160>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	1d1a      	adds	r2, r3, #4
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80051de:	e00d      	b.n	80051fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <DMA_CalcBaseAndBitshift+0x160>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80051ee:	e005      	b.n	80051fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40020010 	.word	0x40020010
 8005210:	40020028 	.word	0x40020028
 8005214:	40020040 	.word	0x40020040
 8005218:	40020058 	.word	0x40020058
 800521c:	40020070 	.word	0x40020070
 8005220:	40020088 	.word	0x40020088
 8005224:	400200a0 	.word	0x400200a0
 8005228:	400200b8 	.word	0x400200b8
 800522c:	40020410 	.word	0x40020410
 8005230:	40020428 	.word	0x40020428
 8005234:	40020440 	.word	0x40020440
 8005238:	40020458 	.word	0x40020458
 800523c:	40020470 	.word	0x40020470
 8005240:	40020488 	.word	0x40020488
 8005244:	400204a0 	.word	0x400204a0
 8005248:	400204b8 	.word	0x400204b8
 800524c:	aaaaaaab 	.word	0xaaaaaaab
 8005250:	0800b088 	.word	0x0800b088
 8005254:	fffffc00 	.word	0xfffffc00

08005258 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d120      	bne.n	80052ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005270:	2b03      	cmp	r3, #3
 8005272:	d858      	bhi.n	8005326 <DMA_CheckFifoParam+0xce>
 8005274:	a201      	add	r2, pc, #4	@ (adr r2, 800527c <DMA_CheckFifoParam+0x24>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	0800528d 	.word	0x0800528d
 8005280:	0800529f 	.word	0x0800529f
 8005284:	0800528d 	.word	0x0800528d
 8005288:	08005327 	.word	0x08005327
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d048      	beq.n	800532a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800529c:	e045      	b.n	800532a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052a6:	d142      	bne.n	800532e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052ac:	e03f      	b.n	800532e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052b6:	d123      	bne.n	8005300 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d838      	bhi.n	8005332 <DMA_CheckFifoParam+0xda>
 80052c0:	a201      	add	r2, pc, #4	@ (adr r2, 80052c8 <DMA_CheckFifoParam+0x70>)
 80052c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c6:	bf00      	nop
 80052c8:	080052d9 	.word	0x080052d9
 80052cc:	080052df 	.word	0x080052df
 80052d0:	080052d9 	.word	0x080052d9
 80052d4:	080052f1 	.word	0x080052f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]
        break;
 80052dc:	e030      	b.n	8005340 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d025      	beq.n	8005336 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052ee:	e022      	b.n	8005336 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052f8:	d11f      	bne.n	800533a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052fe:	e01c      	b.n	800533a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	2b02      	cmp	r3, #2
 8005306:	d902      	bls.n	800530e <DMA_CheckFifoParam+0xb6>
 8005308:	2b03      	cmp	r3, #3
 800530a:	d003      	beq.n	8005314 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800530c:	e018      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
        break;
 8005312:	e015      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00e      	beq.n	800533e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
    break;
 8005324:	e00b      	b.n	800533e <DMA_CheckFifoParam+0xe6>
        break;
 8005326:	bf00      	nop
 8005328:	e00a      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        break;
 800532a:	bf00      	nop
 800532c:	e008      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        break;
 800532e:	bf00      	nop
 8005330:	e006      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        break;
 8005332:	bf00      	nop
 8005334:	e004      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        break;
 8005336:	bf00      	nop
 8005338:	e002      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
        break;
 800533a:	bf00      	nop
 800533c:	e000      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
    break;
 800533e:	bf00      	nop
    }
  }

  return status;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop

08005350 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a38      	ldr	r2, [pc, #224]	@ (8005444 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d022      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a36      	ldr	r2, [pc, #216]	@ (8005448 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01d      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a35      	ldr	r2, [pc, #212]	@ (800544c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d018      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a33      	ldr	r2, [pc, #204]	@ (8005450 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a32      	ldr	r2, [pc, #200]	@ (8005454 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00e      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a30      	ldr	r2, [pc, #192]	@ (8005458 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d009      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a2f      	ldr	r2, [pc, #188]	@ (800545c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d004      	beq.n	80053ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005460 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d101      	bne.n	80053b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80053b2:	2300      	movs	r3, #0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01a      	beq.n	80053ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	3b08      	subs	r3, #8
 80053c0:	4a28      	ldr	r2, [pc, #160]	@ (8005464 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4b26      	ldr	r3, [pc, #152]	@ (8005468 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	461a      	mov	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a24      	ldr	r2, [pc, #144]	@ (800546c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80053dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	2201      	movs	r2, #1
 80053e6:	409a      	lsls	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80053ec:	e024      	b.n	8005438 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	3b10      	subs	r3, #16
 80053f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4a1c      	ldr	r2, [pc, #112]	@ (8005474 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d806      	bhi.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4a1b      	ldr	r2, [pc, #108]	@ (8005478 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d902      	bls.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3308      	adds	r3, #8
 8005414:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4b18      	ldr	r3, [pc, #96]	@ (800547c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	461a      	mov	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a16      	ldr	r2, [pc, #88]	@ (8005480 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005428:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 031f 	and.w	r3, r3, #31
 8005430:	2201      	movs	r2, #1
 8005432:	409a      	lsls	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	58025408 	.word	0x58025408
 8005448:	5802541c 	.word	0x5802541c
 800544c:	58025430 	.word	0x58025430
 8005450:	58025444 	.word	0x58025444
 8005454:	58025458 	.word	0x58025458
 8005458:	5802546c 	.word	0x5802546c
 800545c:	58025480 	.word	0x58025480
 8005460:	58025494 	.word	0x58025494
 8005464:	cccccccd 	.word	0xcccccccd
 8005468:	16009600 	.word	0x16009600
 800546c:	58025880 	.word	0x58025880
 8005470:	aaaaaaab 	.word	0xaaaaaaab
 8005474:	400204b8 	.word	0x400204b8
 8005478:	4002040f 	.word	0x4002040f
 800547c:	10008200 	.word	0x10008200
 8005480:	40020880 	.word	0x40020880

08005484 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04a      	beq.n	8005530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d847      	bhi.n	8005530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a25      	ldr	r2, [pc, #148]	@ (800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d022      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a24      	ldr	r2, [pc, #144]	@ (8005540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d01d      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a22      	ldr	r2, [pc, #136]	@ (8005544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d018      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a21      	ldr	r2, [pc, #132]	@ (8005548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1f      	ldr	r2, [pc, #124]	@ (800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d009      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4b17      	ldr	r3, [pc, #92]	@ (800555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	461a      	mov	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a15      	ldr	r2, [pc, #84]	@ (8005560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800550c:	671a      	str	r2, [r3, #112]	@ 0x70
 800550e:	e009      	b.n	8005524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4b14      	ldr	r3, [pc, #80]	@ (8005564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	461a      	mov	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a11      	ldr	r2, [pc, #68]	@ (8005568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005522:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3b01      	subs	r3, #1
 8005528:	2201      	movs	r2, #1
 800552a:	409a      	lsls	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	58025408 	.word	0x58025408
 8005540:	5802541c 	.word	0x5802541c
 8005544:	58025430 	.word	0x58025430
 8005548:	58025444 	.word	0x58025444
 800554c:	58025458 	.word	0x58025458
 8005550:	5802546c 	.word	0x5802546c
 8005554:	58025480 	.word	0x58025480
 8005558:	58025494 	.word	0x58025494
 800555c:	1600963f 	.word	0x1600963f
 8005560:	58025940 	.word	0x58025940
 8005564:	1000823f 	.word	0x1000823f
 8005568:	40020940 	.word	0x40020940

0800556c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b098      	sub	sp, #96	@ 0x60
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005574:	4a84      	ldr	r2, [pc, #528]	@ (8005788 <HAL_FDCAN_Init+0x21c>)
 8005576:	f107 030c 	add.w	r3, r7, #12
 800557a:	4611      	mov	r1, r2
 800557c:	224c      	movs	r2, #76	@ 0x4c
 800557e:	4618      	mov	r0, r3
 8005580:	f005 fd3a 	bl	800aff8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e1c6      	b.n	800591c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a7e      	ldr	r2, [pc, #504]	@ (800578c <HAL_FDCAN_Init+0x220>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d106      	bne.n	80055a6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055a0:	461a      	mov	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fb fe6e 	bl	800129c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0210 	bic.w	r2, r2, #16
 80055ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055d0:	f7fc fba2 	bl	8001d18 <HAL_GetTick>
 80055d4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80055d6:	e014      	b.n	8005602 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80055d8:	f7fc fb9e 	bl	8001d18 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b0a      	cmp	r3, #10
 80055e4:	d90d      	bls.n	8005602 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055ec:	f043 0201 	orr.w	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2203      	movs	r2, #3
 80055fa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e18c      	b.n	800591c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	d0e3      	beq.n	80055d8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005620:	f7fc fb7a 	bl	8001d18 <HAL_GetTick>
 8005624:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005626:	e014      	b.n	8005652 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005628:	f7fc fb76 	bl	8001d18 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b0a      	cmp	r3, #10
 8005634:	d90d      	bls.n	8005652 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800563c:	f043 0201 	orr.w	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2203      	movs	r2, #3
 800564a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e164      	b.n	800591c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0e3      	beq.n	8005628 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0202 	orr.w	r2, r2, #2
 800566e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	7c1b      	ldrb	r3, [r3, #16]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d108      	bne.n	800568a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005686:	619a      	str	r2, [r3, #24]
 8005688:	e007      	b.n	800569a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005698:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	7c5b      	ldrb	r3, [r3, #17]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d108      	bne.n	80056b4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699a      	ldr	r2, [r3, #24]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056b0:	619a      	str	r2, [r3, #24]
 80056b2:	e007      	b.n	80056c4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	7c9b      	ldrb	r3, [r3, #18]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d108      	bne.n	80056de <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056da:	619a      	str	r2, [r3, #24]
 80056dc:	e007      	b.n	80056ee <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056ec:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005712:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0210 	bic.w	r2, r2, #16
 8005722:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d108      	bne.n	800573e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0204 	orr.w	r2, r2, #4
 800573a:	619a      	str	r2, [r3, #24]
 800573c:	e030      	b.n	80057a0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d02c      	beq.n	80057a0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d020      	beq.n	8005790 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699a      	ldr	r2, [r3, #24]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800575c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0210 	orr.w	r2, r2, #16
 800576c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	2b03      	cmp	r3, #3
 8005774:	d114      	bne.n	80057a0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0220 	orr.w	r2, r2, #32
 8005784:	619a      	str	r2, [r3, #24]
 8005786:	e00b      	b.n	80057a0 <HAL_FDCAN_Init+0x234>
 8005788:	0800b02c 	.word	0x0800b02c
 800578c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0220 	orr.w	r2, r2, #32
 800579e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	3b01      	subs	r3, #1
 80057a6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057b0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80057b8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80057c8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057ca:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057d4:	d115      	bne.n	8005802 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057da:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	3b01      	subs	r3, #1
 80057e2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057e4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	3b01      	subs	r3, #1
 80057ec:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80057ee:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	3b01      	subs	r3, #1
 80057f8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80057fe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005800:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005828:	4413      	add	r3, r2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d011      	beq.n	8005852 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005836:	f023 0107 	bic.w	r1, r3, #7
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	3360      	adds	r3, #96	@ 0x60
 8005842:	443b      	add	r3, r7
 8005844:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d011      	beq.n	800587e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005862:	f023 0107 	bic.w	r1, r3, #7
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	3360      	adds	r3, #96	@ 0x60
 800586e:	443b      	add	r3, r7
 8005870:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005882:	2b00      	cmp	r3, #0
 8005884:	d012      	beq.n	80058ac <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800588e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	3360      	adds	r3, #96	@ 0x60
 800589a:	443b      	add	r3, r7
 800589c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80058a0:	011a      	lsls	r2, r3, #4
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d012      	beq.n	80058da <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80058bc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	3360      	adds	r3, #96	@ 0x60
 80058c8:	443b      	add	r3, r7
 80058ca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80058ce:	021a      	lsls	r2, r3, #8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a11      	ldr	r2, [pc, #68]	@ (8005924 <HAL_FDCAN_Init+0x3b8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d107      	bne.n	80058f4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f022 0203 	bic.w	r2, r2, #3
 80058f2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fd81 	bl	8006414 <FDCAN_CalcultateRamBlockAddresses>
 8005912:	4603      	mov	r3, r0
 8005914:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005918:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800591c:	4618      	mov	r0, r3
 800591e:	3760      	adds	r7, #96	@ 0x60
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	4000a000 	.word	0x4000a000

08005928 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d111      	bne.n	8005960 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0201 	bic.w	r2, r2, #1
 8005952:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e008      	b.n	8005972 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005966:	f043 0204 	orr.w	r2, r3, #4
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b086      	sub	sp, #24
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d141      	bne.n	8005a1a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800599e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059ac:	f043 0220 	orr.w	r2, r3, #32
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e038      	b.n	8005a2c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80059c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e026      	b.n	8005a2c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80059e6:	0c1b      	lsrs	r3, r3, #16
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 fe93 	bl	8006720 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2101      	movs	r1, #1
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	fa01 f202 	lsl.w	r2, r1, r2
 8005a06:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	409a      	lsls	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e008      	b.n	8005a2c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a20:	f043 0208 	orr.w	r2, r3, #8
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
  }
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b08b      	sub	sp, #44	@ 0x2c
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005a4c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005a4e:	7efb      	ldrb	r3, [r7, #27]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	f040 8149 	bne.w	8005ce8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b40      	cmp	r3, #64	@ 0x40
 8005a5a:	d14c      	bne.n	8005af6 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a64:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d109      	bne.n	8005a80 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a72:	f043 0220 	orr.w	r2, r3, #32
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e13c      	b.n	8005cfa <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e12a      	b.n	8005cfa <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005aac:	0e1b      	lsrs	r3, r3, #24
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d10a      	bne.n	8005acc <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005abe:	0fdb      	lsrs	r3, r3, #31
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae8:	69f9      	ldr	r1, [r7, #28]
 8005aea:	fb01 f303 	mul.w	r3, r1, r3
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af4:	e068      	b.n	8005bc8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b41      	cmp	r3, #65	@ 0x41
 8005afa:	d14c      	bne.n	8005b96 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b04:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b12:	f043 0220 	orr.w	r2, r3, #32
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0ec      	b.n	8005cfa <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d109      	bne.n	8005b44 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0da      	b.n	8005cfa <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b4c:	0e1b      	lsrs	r3, r3, #24
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d10a      	bne.n	8005b6c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b5e:	0fdb      	lsrs	r3, r3, #31
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b74:	0a1b      	lsrs	r3, r3, #8
 8005b76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b88:	69f9      	ldr	r1, [r7, #28]
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b94:	e018      	b.n	8005bc8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d309      	bcc.n	8005bb4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ba6:	f043 0220 	orr.w	r2, r3, #32
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0a2      	b.n	8005cfa <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	fb01 f303 	mul.w	r3, r1, r3
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d107      	bne.n	8005bec <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	0c9b      	lsrs	r3, r3, #18
 8005be2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e005      	b.n	8005bf8 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	3304      	adds	r3, #4
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	f003 020f 	and.w	r2, r3, #15
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	0e1b      	lsrs	r3, r3, #24
 8005c4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	0fda      	lsrs	r2, r3, #31
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	3304      	adds	r3, #4
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	623b      	str	r3, [r7, #32]
 8005c6c:	e00a      	b.n	8005c84 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	441a      	add	r2, r3
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	440b      	add	r3, r1
 8005c7a:	7812      	ldrb	r2, [r2, #0]
 8005c7c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	3301      	adds	r3, #1
 8005c82:	623b      	str	r3, [r7, #32]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	4a1f      	ldr	r2, [pc, #124]	@ (8005d08 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005c8a:	5cd3      	ldrb	r3, [r2, r3]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d3ec      	bcc.n	8005c6e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b40      	cmp	r3, #64	@ 0x40
 8005c98:	d105      	bne.n	8005ca6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005ca4:	e01e      	b.n	8005ce4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b41      	cmp	r3, #65	@ 0x41
 8005caa:	d105      	bne.n	8005cb8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005cb6:	e015      	b.n	8005ce4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b1f      	cmp	r3, #31
 8005cbc:	d808      	bhi.n	8005cd0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8005cca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005cce:	e009      	b.n	8005ce4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 021f 	and.w	r2, r3, #31
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2101      	movs	r1, #1
 8005cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ce0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e008      	b.n	8005cfa <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cee:	f043 0208 	orr.w	r2, r3, #8
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
  }
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	372c      	adds	r7, #44	@ 0x2c
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	0800b090 	.word	0x0800b090

08005d0c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005d22:	68fb      	ldr	r3, [r7, #12]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005d42:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d002      	beq.n	8005d50 <HAL_FDCAN_ActivateNotification+0x20>
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d155      	bne.n	8005dfc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d108      	bne.n	8005d70 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d6e:	e014      	b.n	8005d9a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d108      	bne.n	8005d92 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0202 	orr.w	r2, r2, #2
 8005d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d90:	e003      	b.n	8005d9a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2203      	movs	r2, #3
 8005d98:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d009      	beq.n	8005db8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	4b0f      	ldr	r3, [pc, #60]	@ (8005e1c <HAL_FDCAN_ActivateNotification+0xec>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	430b      	orrs	r3, r1
 8005de8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005dea:	4b0d      	ldr	r3, [pc, #52]	@ (8005e20 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	0f9b      	lsrs	r3, r3, #30
 8005df2:	490b      	ldr	r1, [pc, #44]	@ (8005e20 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e008      	b.n	8005e0e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e02:	f043 0202 	orr.w	r2, r3, #2
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
  }
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	3fcfffff 	.word	0x3fcfffff
 8005e20:	4000a800 	.word	0x4000a800

08005e24 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b096      	sub	sp, #88	@ 0x58
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005e2c:	4b95      	ldr	r3, [pc, #596]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	079b      	lsls	r3, r3, #30
 8005e32:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005e34:	4b93      	ldr	r3, [pc, #588]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	079b      	lsls	r3, r3, #30
 8005e3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e46:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005e4a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e54:	4013      	ands	r3, r2
 8005e56:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e84:	4013      	ands	r3, r2
 8005e86:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e8e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005e92:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea6:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005eaa:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00f      	beq.n	8005ef2 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ee4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ee6:	4b67      	ldr	r3, [pc, #412]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fa44 	bl	800637a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01c      	beq.n	8005f36 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d017      	beq.n	8005f36 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005f0e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f26:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f28:	4b56      	ldr	r3, [pc, #344]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005f2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f9f9 	bl	8006328 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00d      	beq.n	8005f58 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f42:	4b51      	ldr	r3, [pc, #324]	@ (8006088 <HAL_FDCAN_IRQHandler+0x264>)
 8005f44:	400b      	ands	r3, r1
 8005f46:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f48:	4a4e      	ldr	r2, [pc, #312]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 8005f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f4c:	0f9b      	lsrs	r3, r3, #30
 8005f4e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005f50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f9b2 	bl	80062bc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005f58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00d      	beq.n	8005f7a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f64:	4b48      	ldr	r3, [pc, #288]	@ (8006088 <HAL_FDCAN_IRQHandler+0x264>)
 8005f66:	400b      	ands	r3, r1
 8005f68:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f6a:	4a46      	ldr	r2, [pc, #280]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 8005f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f6e:	0f9b      	lsrs	r3, r3, #30
 8005f70:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005f72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f9ac 	bl	80062d2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00d      	beq.n	8005f9c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005f86:	4b40      	ldr	r3, [pc, #256]	@ (8006088 <HAL_FDCAN_IRQHandler+0x264>)
 8005f88:	400b      	ands	r3, r1
 8005f8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f8c:	4a3d      	ldr	r2, [pc, #244]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 8005f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f90:	0f9b      	lsrs	r3, r3, #30
 8005f92:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005f94:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fa fa3c 	bl	8000414 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005f9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00d      	beq.n	8005fbe <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005fa8:	4b37      	ldr	r3, [pc, #220]	@ (8006088 <HAL_FDCAN_IRQHandler+0x264>)
 8005faa:	400b      	ands	r3, r1
 8005fac:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fae:	4a35      	ldr	r2, [pc, #212]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 8005fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fb2:	0f9b      	lsrs	r3, r3, #30
 8005fb4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005fb6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f995 	bl	80062e8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00f      	beq.n	8005fe8 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fda:	651a      	str	r2, [r3, #80]	@ 0x50
 8005fdc:	4b29      	ldr	r3, [pc, #164]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f98b 	bl	80062fe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01c      	beq.n	800602c <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d017      	beq.n	800602c <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006004:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800600e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006010:	4013      	ands	r3, r2
 8006012:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800601c:	651a      	str	r2, [r3, #80]	@ 0x50
 800601e:	4b19      	ldr	r3, [pc, #100]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 8006020:	2200      	movs	r2, #0
 8006022:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006024:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f973 	bl	8006312 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800602c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800602e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00f      	beq.n	8006056 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006038:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006048:	651a      	str	r2, [r3, #80]	@ 0x50
 800604a:	4b0e      	ldr	r3, [pc, #56]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 800604c:	2200      	movs	r2, #0
 800604e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f974 	bl	800633e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d015      	beq.n	800608c <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d010      	beq.n	800608c <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006072:	651a      	str	r2, [r3, #80]	@ 0x50
 8006074:	4b03      	ldr	r3, [pc, #12]	@ (8006084 <HAL_FDCAN_IRQHandler+0x260>)
 8006076:	2200      	movs	r2, #0
 8006078:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f969 	bl	8006352 <HAL_FDCAN_TimestampWraparoundCallback>
 8006080:	e004      	b.n	800608c <HAL_FDCAN_IRQHandler+0x268>
 8006082:	bf00      	nop
 8006084:	4000a800 	.word	0x4000a800
 8006088:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800608c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800608e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00f      	beq.n	80060b6 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006098:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80060a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80060aa:	4b81      	ldr	r3, [pc, #516]	@ (80062b0 <HAL_FDCAN_IRQHandler+0x48c>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f958 	bl	8006366 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80060b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d014      	beq.n	80060ea <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80060c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00f      	beq.n	80060ea <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80060d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80060d4:	4b76      	ldr	r3, [pc, #472]	@ (80062b0 <HAL_FDCAN_IRQHandler+0x48c>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80060ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060f6:	4b6f      	ldr	r3, [pc, #444]	@ (80062b4 <HAL_FDCAN_IRQHandler+0x490>)
 80060f8:	400b      	ands	r3, r1
 80060fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80060fc:	4a6c      	ldr	r2, [pc, #432]	@ (80062b0 <HAL_FDCAN_IRQHandler+0x48c>)
 80060fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006100:	0f9b      	lsrs	r3, r3, #30
 8006102:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006104:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f94b 	bl	80063a2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800610c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800610e:	2b00      	cmp	r3, #0
 8006110:	d011      	beq.n	8006136 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006118:	4b66      	ldr	r3, [pc, #408]	@ (80062b4 <HAL_FDCAN_IRQHandler+0x490>)
 800611a:	400b      	ands	r3, r1
 800611c:	6513      	str	r3, [r2, #80]	@ 0x50
 800611e:	4a64      	ldr	r2, [pc, #400]	@ (80062b0 <HAL_FDCAN_IRQHandler+0x48c>)
 8006120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006122:	0f9b      	lsrs	r3, r3, #30
 8006124:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800612c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a5f      	ldr	r2, [pc, #380]	@ (80062b8 <HAL_FDCAN_IRQHandler+0x494>)
 800613c:	4293      	cmp	r3, r2
 800613e:	f040 80aa 	bne.w	8006296 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80a2 	beq.w	8006296 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f003 030f 	and.w	r3, r3, #15
 800615c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006166:	4013      	ands	r3, r2
 8006168:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006174:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800617e:	4013      	ands	r3, r2
 8006180:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800618c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006196:	4013      	ands	r3, r2
 8006198:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80061a4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	6a3a      	ldr	r2, [r7, #32]
 80061ae:	4013      	ands	r3, r2
 80061b0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80061bc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	4013      	ands	r3, r2
 80061c8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80061da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061e6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80061e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f8e4 	bl	80063b8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80061f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061fc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80061fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f8e4 	bl	80063ce <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d019      	beq.n	8006244 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d014      	beq.n	8006244 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006220:	0c1b      	lsrs	r3, r3, #16
 8006222:	b29b      	uxth	r3, r3
 8006224:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006230:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2240      	movs	r2, #64	@ 0x40
 8006238:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	6939      	ldr	r1, [r7, #16]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8d0 	bl	80063e4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006250:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006252:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f8d1 	bl	80063fc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	6a3a      	ldr	r2, [r7, #32]
 8006266:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00b      	beq.n	8006296 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f874 	bl	800638e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80062a6:	bf00      	nop
 80062a8:	3758      	adds	r7, #88	@ 0x58
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	4000a800 	.word	0x4000a800
 80062b4:	3fcfffff 	.word	0x3fcfffff
 80062b8:	4000a000 	.word	0x4000a000

080062bc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006420:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800642a:	4ba7      	ldr	r3, [pc, #668]	@ (80066c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800642c:	4013      	ands	r3, r2
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	0091      	lsls	r1, r2, #2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	430b      	orrs	r3, r1
 8006438:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006444:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644c:	041a      	lsls	r2, r3, #16
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	4413      	add	r3, r2
 8006460:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800646a:	4b97      	ldr	r3, [pc, #604]	@ (80066c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800646c:	4013      	ands	r3, r2
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	0091      	lsls	r1, r2, #2
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	430b      	orrs	r3, r1
 8006478:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006484:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648c:	041a      	lsls	r2, r3, #16
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80064ac:	4b86      	ldr	r3, [pc, #536]	@ (80066c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	0091      	lsls	r1, r2, #2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	430b      	orrs	r3, r1
 80064ba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064c6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ce:	041a      	lsls	r2, r3, #16
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	4413      	add	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80064f4:	4b74      	ldr	r3, [pc, #464]	@ (80066c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	0091      	lsls	r1, r2, #2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	430b      	orrs	r3, r1
 8006502:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800650e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006516:	041a      	lsls	r2, r3, #16
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	4413      	add	r3, r2
 8006532:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800653c:	4b62      	ldr	r3, [pc, #392]	@ (80066c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800653e:	4013      	ands	r3, r2
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	0091      	lsls	r1, r2, #2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	430b      	orrs	r3, r1
 800654a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006556:	fb02 f303 	mul.w	r3, r2, r3
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4413      	add	r3, r2
 800655e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006568:	4b57      	ldr	r3, [pc, #348]	@ (80066c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800656a:	4013      	ands	r3, r2
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	0091      	lsls	r1, r2, #2
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	430b      	orrs	r3, r1
 8006576:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006582:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658a:	041a      	lsls	r2, r3, #16
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	4413      	add	r3, r2
 80065a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80065aa:	4b47      	ldr	r3, [pc, #284]	@ (80066c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	0091      	lsls	r1, r2, #2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	430b      	orrs	r3, r1
 80065b8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80065c4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065cc:	041a      	lsls	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80065e0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065e8:	061a      	lsls	r2, r3, #24
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065f8:	4b34      	ldr	r3, [pc, #208]	@ (80066cc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80065fa:	4413      	add	r3, r2
 80065fc:	009a      	lsls	r2, r3, #2
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	441a      	add	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	441a      	add	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800662e:	fb01 f303 	mul.w	r3, r1, r3
 8006632:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006634:	441a      	add	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006646:	fb01 f303 	mul.w	r3, r1, r3
 800664a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800664c:	441a      	add	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800665e:	fb01 f303 	mul.w	r3, r1, r3
 8006662:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006664:	441a      	add	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	441a      	add	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800668e:	fb01 f303 	mul.w	r3, r1, r3
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	441a      	add	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80066b0:	441a      	add	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066be:	4a04      	ldr	r2, [pc, #16]	@ (80066d0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d915      	bls.n	80066f0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80066c4:	e006      	b.n	80066d4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80066c6:	bf00      	nop
 80066c8:	ffff0003 	.word	0xffff0003
 80066cc:	10002b00 	.word	0x10002b00
 80066d0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066da:	f043 0220 	orr.w	r2, r3, #32
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2203      	movs	r2, #3
 80066e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e010      	b.n	8006712 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	e005      	b.n	8006704 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3304      	adds	r3, #4
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	429a      	cmp	r2, r3
 800670e:	d3f3      	bcc.n	80066f8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop

08006720 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006720:	b480      	push	{r7}
 8006722:	b089      	sub	sp, #36	@ 0x24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800673e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006746:	4313      	orrs	r3, r2
 8006748:	61fb      	str	r3, [r7, #28]
 800674a:	e00a      	b.n	8006762 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006754:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800675a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800675c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006760:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800676c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006772:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006778:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006780:	4313      	orrs	r3, r2
 8006782:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	fb01 f303 	mul.w	r3, r1, r3
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	3304      	adds	r3, #4
 80067a4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	3304      	adds	r3, #4
 80067b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	e020      	b.n	80067fa <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	3303      	adds	r3, #3
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	3302      	adds	r3, #2
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	440b      	add	r3, r1
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80067d0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	3301      	adds	r3, #1
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	440b      	add	r3, r1
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80067de:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	440a      	add	r2, r1
 80067e6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80067e8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	3304      	adds	r3, #4
 80067f2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	3304      	adds	r3, #4
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	4a06      	ldr	r2, [pc, #24]	@ (8006818 <FDCAN_CopyMessageToRAM+0xf8>)
 8006800:	5cd3      	ldrb	r3, [r2, r3]
 8006802:	461a      	mov	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4293      	cmp	r3, r2
 8006808:	d3d6      	bcc.n	80067b8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	3724      	adds	r7, #36	@ 0x24
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	0800b090 	.word	0x0800b090

0800681c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800681c:	b480      	push	{r7}
 800681e:	b089      	sub	sp, #36	@ 0x24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800682a:	4b89      	ldr	r3, [pc, #548]	@ (8006a50 <HAL_GPIO_Init+0x234>)
 800682c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800682e:	e194      	b.n	8006b5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	2101      	movs	r1, #1
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	fa01 f303 	lsl.w	r3, r1, r3
 800683c:	4013      	ands	r3, r2
 800683e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8186 	beq.w	8006b54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	2b01      	cmp	r3, #1
 8006852:	d005      	beq.n	8006860 <HAL_GPIO_Init+0x44>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d130      	bne.n	80068c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	2203      	movs	r2, #3
 800686c:	fa02 f303 	lsl.w	r3, r2, r3
 8006870:	43db      	mvns	r3, r3
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	4013      	ands	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	4313      	orrs	r3, r2
 8006888:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006896:	2201      	movs	r2, #1
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	43db      	mvns	r3, r3
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	4013      	ands	r3, r2
 80068a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	091b      	lsrs	r3, r3, #4
 80068ac:	f003 0201 	and.w	r2, r3, #1
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d017      	beq.n	80068fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	2203      	movs	r2, #3
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	43db      	mvns	r3, r3
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	4013      	ands	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d123      	bne.n	8006952 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	08da      	lsrs	r2, r3, #3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3208      	adds	r2, #8
 8006912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	220f      	movs	r2, #15
 8006922:	fa02 f303 	lsl.w	r3, r2, r3
 8006926:	43db      	mvns	r3, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4013      	ands	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	691a      	ldr	r2, [r3, #16]
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	4313      	orrs	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	08da      	lsrs	r2, r3, #3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3208      	adds	r2, #8
 800694c:	69b9      	ldr	r1, [r7, #24]
 800694e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	2203      	movs	r2, #3
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	43db      	mvns	r3, r3
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	4013      	ands	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f003 0203 	and.w	r2, r3, #3
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	fa02 f303 	lsl.w	r3, r2, r3
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	4313      	orrs	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 80e0 	beq.w	8006b54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006994:	4b2f      	ldr	r3, [pc, #188]	@ (8006a54 <HAL_GPIO_Init+0x238>)
 8006996:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800699a:	4a2e      	ldr	r2, [pc, #184]	@ (8006a54 <HAL_GPIO_Init+0x238>)
 800699c:	f043 0302 	orr.w	r3, r3, #2
 80069a0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80069a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a54 <HAL_GPIO_Init+0x238>)
 80069a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069b2:	4a29      	ldr	r2, [pc, #164]	@ (8006a58 <HAL_GPIO_Init+0x23c>)
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	089b      	lsrs	r3, r3, #2
 80069b8:	3302      	adds	r3, #2
 80069ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	220f      	movs	r2, #15
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	43db      	mvns	r3, r3
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	4013      	ands	r3, r2
 80069d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a20      	ldr	r2, [pc, #128]	@ (8006a5c <HAL_GPIO_Init+0x240>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d052      	beq.n	8006a84 <HAL_GPIO_Init+0x268>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a60 <HAL_GPIO_Init+0x244>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d031      	beq.n	8006a4a <HAL_GPIO_Init+0x22e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a64 <HAL_GPIO_Init+0x248>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d02b      	beq.n	8006a46 <HAL_GPIO_Init+0x22a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a68 <HAL_GPIO_Init+0x24c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d025      	beq.n	8006a42 <HAL_GPIO_Init+0x226>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a6c <HAL_GPIO_Init+0x250>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d01f      	beq.n	8006a3e <HAL_GPIO_Init+0x222>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1b      	ldr	r2, [pc, #108]	@ (8006a70 <HAL_GPIO_Init+0x254>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d019      	beq.n	8006a3a <HAL_GPIO_Init+0x21e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1a      	ldr	r2, [pc, #104]	@ (8006a74 <HAL_GPIO_Init+0x258>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d013      	beq.n	8006a36 <HAL_GPIO_Init+0x21a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a19      	ldr	r2, [pc, #100]	@ (8006a78 <HAL_GPIO_Init+0x25c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d00d      	beq.n	8006a32 <HAL_GPIO_Init+0x216>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a18      	ldr	r2, [pc, #96]	@ (8006a7c <HAL_GPIO_Init+0x260>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d007      	beq.n	8006a2e <HAL_GPIO_Init+0x212>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a17      	ldr	r2, [pc, #92]	@ (8006a80 <HAL_GPIO_Init+0x264>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d101      	bne.n	8006a2a <HAL_GPIO_Init+0x20e>
 8006a26:	2309      	movs	r3, #9
 8006a28:	e02d      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a2a:	230a      	movs	r3, #10
 8006a2c:	e02b      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a2e:	2308      	movs	r3, #8
 8006a30:	e029      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a32:	2307      	movs	r3, #7
 8006a34:	e027      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a36:	2306      	movs	r3, #6
 8006a38:	e025      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a3a:	2305      	movs	r3, #5
 8006a3c:	e023      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a3e:	2304      	movs	r3, #4
 8006a40:	e021      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a42:	2303      	movs	r3, #3
 8006a44:	e01f      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e01d      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e01b      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a4e:	bf00      	nop
 8006a50:	58000080 	.word	0x58000080
 8006a54:	58024400 	.word	0x58024400
 8006a58:	58000400 	.word	0x58000400
 8006a5c:	58020000 	.word	0x58020000
 8006a60:	58020400 	.word	0x58020400
 8006a64:	58020800 	.word	0x58020800
 8006a68:	58020c00 	.word	0x58020c00
 8006a6c:	58021000 	.word	0x58021000
 8006a70:	58021400 	.word	0x58021400
 8006a74:	58021800 	.word	0x58021800
 8006a78:	58021c00 	.word	0x58021c00
 8006a7c:	58022000 	.word	0x58022000
 8006a80:	58022400 	.word	0x58022400
 8006a84:	2300      	movs	r3, #0
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	f002 0203 	and.w	r2, r2, #3
 8006a8c:	0092      	lsls	r2, r2, #2
 8006a8e:	4093      	lsls	r3, r2
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a96:	4938      	ldr	r1, [pc, #224]	@ (8006b78 <HAL_GPIO_Init+0x35c>)
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	089b      	lsrs	r3, r3, #2
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006aca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	43db      	mvns	r3, r3
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006af8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	43db      	mvns	r3, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4013      	ands	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f47f ae63 	bne.w	8006830 <HAL_GPIO_Init+0x14>
  }
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	3724      	adds	r7, #36	@ 0x24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	58000400 	.word	0x58000400

08006b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e08b      	b.n	8006ca6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fa fc52 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2224      	movs	r2, #36	@ 0x24
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0201 	bic.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006bcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d107      	bne.n	8006bf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bf2:	609a      	str	r2, [r3, #8]
 8006bf4:	e006      	b.n	8006c04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006c02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d108      	bne.n	8006c1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c1a:	605a      	str	r2, [r3, #4]
 8006c1c:	e007      	b.n	8006c2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6859      	ldr	r1, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb0 <HAL_I2C_Init+0x134>)
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69d9      	ldr	r1, [r3, #28]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1a      	ldr	r2, [r3, #32]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	02008000 	.word	0x02008000

08006cb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d138      	bne.n	8006d3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e032      	b.n	8006d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2224      	movs	r2, #36	@ 0x24
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0201 	bic.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6819      	ldr	r1, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e000      	b.n	8006d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d3c:	2302      	movs	r3, #2
  }
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b20      	cmp	r3, #32
 8006d5e:	d139      	bne.n	8006dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e033      	b.n	8006dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2224      	movs	r2, #36	@ 0x24
 8006d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	021b      	lsls	r3, r3, #8
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e000      	b.n	8006dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dd4:	2302      	movs	r3, #2
  }
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006dec:	4b19      	ldr	r3, [pc, #100]	@ (8006e54 <HAL_PWREx_ConfigSupply+0x70>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d00a      	beq.n	8006e0e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006df8:	4b16      	ldr	r3, [pc, #88]	@ (8006e54 <HAL_PWREx_ConfigSupply+0x70>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d001      	beq.n	8006e0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e01f      	b.n	8006e4a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e01d      	b.n	8006e4a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e0e:	4b11      	ldr	r3, [pc, #68]	@ (8006e54 <HAL_PWREx_ConfigSupply+0x70>)
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f023 0207 	bic.w	r2, r3, #7
 8006e16:	490f      	ldr	r1, [pc, #60]	@ (8006e54 <HAL_PWREx_ConfigSupply+0x70>)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e1e:	f7fa ff7b 	bl	8001d18 <HAL_GetTick>
 8006e22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e24:	e009      	b.n	8006e3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e26:	f7fa ff77 	bl	8001d18 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e34:	d901      	bls.n	8006e3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e007      	b.n	8006e4a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e3a:	4b06      	ldr	r3, [pc, #24]	@ (8006e54 <HAL_PWREx_ConfigSupply+0x70>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e46:	d1ee      	bne.n	8006e26 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	58024800 	.word	0x58024800

08006e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08c      	sub	sp, #48	@ 0x30
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d102      	bne.n	8006e6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f000 bc1f 	b.w	80076aa <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80b3 	beq.w	8006fe0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e7a:	4b95      	ldr	r3, [pc, #596]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e84:	4b92      	ldr	r3, [pc, #584]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8c:	2b10      	cmp	r3, #16
 8006e8e:	d007      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x48>
 8006e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e92:	2b18      	cmp	r3, #24
 8006e94:	d112      	bne.n	8006ebc <HAL_RCC_OscConfig+0x64>
 8006e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d10d      	bne.n	8006ebc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea0:	4b8b      	ldr	r3, [pc, #556]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8098 	beq.w	8006fde <HAL_RCC_OscConfig+0x186>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f040 8093 	bne.w	8006fde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e3f6      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec4:	d106      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x7c>
 8006ec6:	4b82      	ldr	r3, [pc, #520]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a81      	ldr	r2, [pc, #516]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e058      	b.n	8006f86 <HAL_RCC_OscConfig+0x12e>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d112      	bne.n	8006f02 <HAL_RCC_OscConfig+0xaa>
 8006edc:	4b7c      	ldr	r3, [pc, #496]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a7b      	ldr	r2, [pc, #492]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	4b79      	ldr	r3, [pc, #484]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a78      	ldr	r2, [pc, #480]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006eee:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	4b76      	ldr	r3, [pc, #472]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a75      	ldr	r2, [pc, #468]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	e041      	b.n	8006f86 <HAL_RCC_OscConfig+0x12e>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f0a:	d112      	bne.n	8006f32 <HAL_RCC_OscConfig+0xda>
 8006f0c:	4b70      	ldr	r3, [pc, #448]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a6f      	ldr	r2, [pc, #444]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	4b6d      	ldr	r3, [pc, #436]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a6c      	ldr	r2, [pc, #432]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f1e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	4b6a      	ldr	r3, [pc, #424]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a69      	ldr	r2, [pc, #420]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	e029      	b.n	8006f86 <HAL_RCC_OscConfig+0x12e>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006f3a:	d112      	bne.n	8006f62 <HAL_RCC_OscConfig+0x10a>
 8006f3c:	4b64      	ldr	r3, [pc, #400]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a63      	ldr	r2, [pc, #396]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	4b61      	ldr	r3, [pc, #388]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a60      	ldr	r2, [pc, #384]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	4b5e      	ldr	r3, [pc, #376]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a5d      	ldr	r2, [pc, #372]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	e011      	b.n	8006f86 <HAL_RCC_OscConfig+0x12e>
 8006f62:	4b5b      	ldr	r3, [pc, #364]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a5a      	ldr	r2, [pc, #360]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	4b58      	ldr	r3, [pc, #352]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a57      	ldr	r2, [pc, #348]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	4b55      	ldr	r3, [pc, #340]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a54      	ldr	r2, [pc, #336]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006f80:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d013      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8e:	f7fa fec3 	bl	8001d18 <HAL_GetTick>
 8006f92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f96:	f7fa febf 	bl	8001d18 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b64      	cmp	r3, #100	@ 0x64
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e380      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fa8:	4b49      	ldr	r3, [pc, #292]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d0f0      	beq.n	8006f96 <HAL_RCC_OscConfig+0x13e>
 8006fb4:	e014      	b.n	8006fe0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb6:	f7fa feaf 	bl	8001d18 <HAL_GetTick>
 8006fba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fbc:	e008      	b.n	8006fd0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fbe:	f7fa feab 	bl	8001d18 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b64      	cmp	r3, #100	@ 0x64
 8006fca:	d901      	bls.n	8006fd0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e36c      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1f0      	bne.n	8006fbe <HAL_RCC_OscConfig+0x166>
 8006fdc:	e000      	b.n	8006fe0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 808c 	beq.w	8007106 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fee:	4b38      	ldr	r3, [pc, #224]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ff6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ff8:	4b35      	ldr	r3, [pc, #212]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <HAL_RCC_OscConfig+0x1bc>
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	2b18      	cmp	r3, #24
 8007008:	d137      	bne.n	800707a <HAL_RCC_OscConfig+0x222>
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d132      	bne.n	800707a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007014:	4b2e      	ldr	r3, [pc, #184]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <HAL_RCC_OscConfig+0x1d4>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e33e      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800702c:	4b28      	ldr	r3, [pc, #160]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f023 0219 	bic.w	r2, r3, #25
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	4925      	ldr	r1, [pc, #148]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 800703a:	4313      	orrs	r3, r2
 800703c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703e:	f7fa fe6b 	bl	8001d18 <HAL_GetTick>
 8007042:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007046:	f7fa fe67 	bl	8001d18 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e328      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007058:	4b1d      	ldr	r3, [pc, #116]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f0      	beq.n	8007046 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007064:	4b1a      	ldr	r3, [pc, #104]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	061b      	lsls	r3, r3, #24
 8007072:	4917      	ldr	r1, [pc, #92]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8007074:	4313      	orrs	r3, r2
 8007076:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007078:	e045      	b.n	8007106 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d028      	beq.n	80070d4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007082:	4b13      	ldr	r3, [pc, #76]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f023 0219 	bic.w	r2, r3, #25
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	4910      	ldr	r1, [pc, #64]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8007090:	4313      	orrs	r3, r2
 8007092:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7fa fe40 	bl	8001d18 <HAL_GetTick>
 8007098:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800709c:	f7fa fe3c 	bl	8001d18 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e2fd      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070ae:	4b08      	ldr	r3, [pc, #32]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0304 	and.w	r3, r3, #4
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ba:	4b05      	ldr	r3, [pc, #20]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	061b      	lsls	r3, r3, #24
 80070c8:	4901      	ldr	r1, [pc, #4]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	604b      	str	r3, [r1, #4]
 80070ce:	e01a      	b.n	8007106 <HAL_RCC_OscConfig+0x2ae>
 80070d0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070d4:	4b97      	ldr	r3, [pc, #604]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a96      	ldr	r2, [pc, #600]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e0:	f7fa fe1a 	bl	8001d18 <HAL_GetTick>
 80070e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070e8:	f7fa fe16 	bl	8001d18 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e2d7      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80070fa:	4b8e      	ldr	r3, [pc, #568]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f0      	bne.n	80070e8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	2b00      	cmp	r3, #0
 8007110:	d06a      	beq.n	80071e8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007112:	4b88      	ldr	r3, [pc, #544]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800711a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800711c:	4b85      	ldr	r3, [pc, #532]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 800711e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007120:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b08      	cmp	r3, #8
 8007126:	d007      	beq.n	8007138 <HAL_RCC_OscConfig+0x2e0>
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b18      	cmp	r3, #24
 800712c:	d11b      	bne.n	8007166 <HAL_RCC_OscConfig+0x30e>
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d116      	bne.n	8007166 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007138:	4b7e      	ldr	r3, [pc, #504]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007140:	2b00      	cmp	r3, #0
 8007142:	d005      	beq.n	8007150 <HAL_RCC_OscConfig+0x2f8>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	2b80      	cmp	r3, #128	@ 0x80
 800714a:	d001      	beq.n	8007150 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e2ac      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007150:	4b78      	ldr	r3, [pc, #480]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	061b      	lsls	r3, r3, #24
 800715e:	4975      	ldr	r1, [pc, #468]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007160:	4313      	orrs	r3, r2
 8007162:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007164:	e040      	b.n	80071e8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d023      	beq.n	80071b6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800716e:	4b71      	ldr	r3, [pc, #452]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a70      	ldr	r2, [pc, #448]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800717a:	f7fa fdcd 	bl	8001d18 <HAL_GetTick>
 800717e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007180:	e008      	b.n	8007194 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007182:	f7fa fdc9 	bl	8001d18 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d901      	bls.n	8007194 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e28a      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007194:	4b67      	ldr	r3, [pc, #412]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0f0      	beq.n	8007182 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071a0:	4b64      	ldr	r3, [pc, #400]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	061b      	lsls	r3, r3, #24
 80071ae:	4961      	ldr	r1, [pc, #388]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60cb      	str	r3, [r1, #12]
 80071b4:	e018      	b.n	80071e8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80071b6:	4b5f      	ldr	r3, [pc, #380]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a5e      	ldr	r2, [pc, #376]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80071bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c2:	f7fa fda9 	bl	8001d18 <HAL_GetTick>
 80071c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071c8:	e008      	b.n	80071dc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80071ca:	f7fa fda5 	bl	8001d18 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d901      	bls.n	80071dc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e266      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071dc:	4b55      	ldr	r3, [pc, #340]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1f0      	bne.n	80071ca <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d036      	beq.n	8007262 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d019      	beq.n	8007230 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071fc:	4b4d      	ldr	r3, [pc, #308]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80071fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007200:	4a4c      	ldr	r2, [pc, #304]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007208:	f7fa fd86 	bl	8001d18 <HAL_GetTick>
 800720c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007210:	f7fa fd82 	bl	8001d18 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e243      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007222:	4b44      	ldr	r3, [pc, #272]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0f0      	beq.n	8007210 <HAL_RCC_OscConfig+0x3b8>
 800722e:	e018      	b.n	8007262 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007230:	4b40      	ldr	r3, [pc, #256]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007234:	4a3f      	ldr	r2, [pc, #252]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007236:	f023 0301 	bic.w	r3, r3, #1
 800723a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723c:	f7fa fd6c 	bl	8001d18 <HAL_GetTick>
 8007240:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007244:	f7fa fd68 	bl	8001d18 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e229      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007256:	4b37      	ldr	r3, [pc, #220]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d036      	beq.n	80072dc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d019      	beq.n	80072aa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007276:	4b2f      	ldr	r3, [pc, #188]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a2e      	ldr	r2, [pc, #184]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 800727c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007280:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007282:	f7fa fd49 	bl	8001d18 <HAL_GetTick>
 8007286:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800728a:	f7fa fd45 	bl	8001d18 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e206      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800729c:	4b25      	ldr	r3, [pc, #148]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0f0      	beq.n	800728a <HAL_RCC_OscConfig+0x432>
 80072a8:	e018      	b.n	80072dc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072aa:	4b22      	ldr	r3, [pc, #136]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a21      	ldr	r2, [pc, #132]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80072b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072b6:	f7fa fd2f 	bl	8001d18 <HAL_GetTick>
 80072ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072bc:	e008      	b.n	80072d0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072be:	f7fa fd2b 	bl	8001d18 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e1ec      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072d0:	4b18      	ldr	r3, [pc, #96]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1f0      	bne.n	80072be <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 80af 	beq.w	8007448 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072ea:	4b13      	ldr	r3, [pc, #76]	@ (8007338 <HAL_RCC_OscConfig+0x4e0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a12      	ldr	r2, [pc, #72]	@ (8007338 <HAL_RCC_OscConfig+0x4e0>)
 80072f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072f6:	f7fa fd0f 	bl	8001d18 <HAL_GetTick>
 80072fa:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072fc:	e008      	b.n	8007310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072fe:	f7fa fd0b 	bl	8001d18 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b64      	cmp	r3, #100	@ 0x64
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e1cc      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007310:	4b09      	ldr	r3, [pc, #36]	@ (8007338 <HAL_RCC_OscConfig+0x4e0>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f0      	beq.n	80072fe <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d10b      	bne.n	800733c <HAL_RCC_OscConfig+0x4e4>
 8007324:	4b03      	ldr	r3, [pc, #12]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007328:	4a02      	ldr	r2, [pc, #8]	@ (8007334 <HAL_RCC_OscConfig+0x4dc>)
 800732a:	f043 0301 	orr.w	r3, r3, #1
 800732e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007330:	e05b      	b.n	80073ea <HAL_RCC_OscConfig+0x592>
 8007332:	bf00      	nop
 8007334:	58024400 	.word	0x58024400
 8007338:	58024800 	.word	0x58024800
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d112      	bne.n	800736a <HAL_RCC_OscConfig+0x512>
 8007344:	4b9d      	ldr	r3, [pc, #628]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007348:	4a9c      	ldr	r2, [pc, #624]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800734a:	f023 0301 	bic.w	r3, r3, #1
 800734e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007350:	4b9a      	ldr	r3, [pc, #616]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007354:	4a99      	ldr	r2, [pc, #612]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800735a:	6713      	str	r3, [r2, #112]	@ 0x70
 800735c:	4b97      	ldr	r3, [pc, #604]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800735e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007360:	4a96      	ldr	r2, [pc, #600]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007362:	f023 0304 	bic.w	r3, r3, #4
 8007366:	6713      	str	r3, [r2, #112]	@ 0x70
 8007368:	e03f      	b.n	80073ea <HAL_RCC_OscConfig+0x592>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	2b05      	cmp	r3, #5
 8007370:	d112      	bne.n	8007398 <HAL_RCC_OscConfig+0x540>
 8007372:	4b92      	ldr	r3, [pc, #584]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007376:	4a91      	ldr	r2, [pc, #580]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007378:	f043 0304 	orr.w	r3, r3, #4
 800737c:	6713      	str	r3, [r2, #112]	@ 0x70
 800737e:	4b8f      	ldr	r3, [pc, #572]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007382:	4a8e      	ldr	r2, [pc, #568]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007388:	6713      	str	r3, [r2, #112]	@ 0x70
 800738a:	4b8c      	ldr	r3, [pc, #560]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800738c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738e:	4a8b      	ldr	r2, [pc, #556]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007390:	f043 0301 	orr.w	r3, r3, #1
 8007394:	6713      	str	r3, [r2, #112]	@ 0x70
 8007396:	e028      	b.n	80073ea <HAL_RCC_OscConfig+0x592>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b85      	cmp	r3, #133	@ 0x85
 800739e:	d112      	bne.n	80073c6 <HAL_RCC_OscConfig+0x56e>
 80073a0:	4b86      	ldr	r3, [pc, #536]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a4:	4a85      	ldr	r2, [pc, #532]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073a6:	f043 0304 	orr.w	r3, r3, #4
 80073aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ac:	4b83      	ldr	r3, [pc, #524]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b0:	4a82      	ldr	r2, [pc, #520]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80073b8:	4b80      	ldr	r3, [pc, #512]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073bc:	4a7f      	ldr	r2, [pc, #508]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073be:	f043 0301 	orr.w	r3, r3, #1
 80073c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073c4:	e011      	b.n	80073ea <HAL_RCC_OscConfig+0x592>
 80073c6:	4b7d      	ldr	r3, [pc, #500]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ca:	4a7c      	ldr	r2, [pc, #496]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80073d2:	4b7a      	ldr	r3, [pc, #488]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d6:	4a79      	ldr	r2, [pc, #484]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073d8:	f023 0304 	bic.w	r3, r3, #4
 80073dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80073de:	4b77      	ldr	r3, [pc, #476]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e2:	4a76      	ldr	r2, [pc, #472]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80073e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d015      	beq.n	800741e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f2:	f7fa fc91 	bl	8001d18 <HAL_GetTick>
 80073f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073f8:	e00a      	b.n	8007410 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073fa:	f7fa fc8d 	bl	8001d18 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007408:	4293      	cmp	r3, r2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e14c      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007410:	4b6a      	ldr	r3, [pc, #424]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0ee      	beq.n	80073fa <HAL_RCC_OscConfig+0x5a2>
 800741c:	e014      	b.n	8007448 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800741e:	f7fa fc7b 	bl	8001d18 <HAL_GetTick>
 8007422:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007424:	e00a      	b.n	800743c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007426:	f7fa fc77 	bl	8001d18 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007434:	4293      	cmp	r3, r2
 8007436:	d901      	bls.n	800743c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e136      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800743c:	4b5f      	ldr	r3, [pc, #380]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800743e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1ee      	bne.n	8007426 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 812b 	beq.w	80076a8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007452:	4b5a      	ldr	r3, [pc, #360]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800745a:	2b18      	cmp	r3, #24
 800745c:	f000 80bb 	beq.w	80075d6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007464:	2b02      	cmp	r3, #2
 8007466:	f040 8095 	bne.w	8007594 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800746a:	4b54      	ldr	r3, [pc, #336]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a53      	ldr	r2, [pc, #332]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007470:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007476:	f7fa fc4f 	bl	8001d18 <HAL_GetTick>
 800747a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747e:	f7fa fc4b 	bl	8001d18 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e10c      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007490:	4b4a      	ldr	r3, [pc, #296]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f0      	bne.n	800747e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800749c:	4b47      	ldr	r3, [pc, #284]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800749e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074a0:	4b47      	ldr	r3, [pc, #284]	@ (80075c0 <HAL_RCC_OscConfig+0x768>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074ac:	0112      	lsls	r2, r2, #4
 80074ae:	430a      	orrs	r2, r1
 80074b0:	4942      	ldr	r1, [pc, #264]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	628b      	str	r3, [r1, #40]	@ 0x28
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ba:	3b01      	subs	r3, #1
 80074bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074c4:	3b01      	subs	r3, #1
 80074c6:	025b      	lsls	r3, r3, #9
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d0:	3b01      	subs	r3, #1
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074de:	3b01      	subs	r3, #1
 80074e0:	061b      	lsls	r3, r3, #24
 80074e2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80074e6:	4935      	ldr	r1, [pc, #212]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80074ec:	4b33      	ldr	r3, [pc, #204]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80074ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f0:	4a32      	ldr	r2, [pc, #200]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80074f2:	f023 0301 	bic.w	r3, r3, #1
 80074f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074f8:	4b30      	ldr	r3, [pc, #192]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 80074fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074fc:	4b31      	ldr	r3, [pc, #196]	@ (80075c4 <HAL_RCC_OscConfig+0x76c>)
 80074fe:	4013      	ands	r3, r2
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007504:	00d2      	lsls	r2, r2, #3
 8007506:	492d      	ldr	r1, [pc, #180]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007508:	4313      	orrs	r3, r2
 800750a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800750c:	4b2b      	ldr	r3, [pc, #172]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800750e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007510:	f023 020c 	bic.w	r2, r3, #12
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007518:	4928      	ldr	r1, [pc, #160]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800751a:	4313      	orrs	r3, r2
 800751c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800751e:	4b27      	ldr	r3, [pc, #156]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007522:	f023 0202 	bic.w	r2, r3, #2
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800752a:	4924      	ldr	r1, [pc, #144]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800752c:	4313      	orrs	r3, r2
 800752e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007530:	4b22      	ldr	r3, [pc, #136]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007534:	4a21      	ldr	r2, [pc, #132]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800753a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753c:	4b1f      	ldr	r3, [pc, #124]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800753e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007540:	4a1e      	ldr	r2, [pc, #120]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007548:	4b1c      	ldr	r3, [pc, #112]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	4a1b      	ldr	r2, [pc, #108]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800754e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007554:	4b19      	ldr	r3, [pc, #100]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	4a18      	ldr	r2, [pc, #96]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800755a:	f043 0301 	orr.w	r3, r3, #1
 800755e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007560:	4b16      	ldr	r3, [pc, #88]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a15      	ldr	r2, [pc, #84]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800756a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756c:	f7fa fbd4 	bl	8001d18 <HAL_GetTick>
 8007570:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007572:	e008      	b.n	8007586 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007574:	f7fa fbd0 	bl	8001d18 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e091      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007586:	4b0d      	ldr	r3, [pc, #52]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0f0      	beq.n	8007574 <HAL_RCC_OscConfig+0x71c>
 8007592:	e089      	b.n	80076a8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007594:	4b09      	ldr	r3, [pc, #36]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a08      	ldr	r2, [pc, #32]	@ (80075bc <HAL_RCC_OscConfig+0x764>)
 800759a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800759e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a0:	f7fa fbba 	bl	8001d18 <HAL_GetTick>
 80075a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075a6:	e00f      	b.n	80075c8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075a8:	f7fa fbb6 	bl	8001d18 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d908      	bls.n	80075c8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e077      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
 80075ba:	bf00      	nop
 80075bc:	58024400 	.word	0x58024400
 80075c0:	fffffc0c 	.word	0xfffffc0c
 80075c4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075c8:	4b3a      	ldr	r3, [pc, #232]	@ (80076b4 <HAL_RCC_OscConfig+0x85c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e9      	bne.n	80075a8 <HAL_RCC_OscConfig+0x750>
 80075d4:	e068      	b.n	80076a8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80075d6:	4b37      	ldr	r3, [pc, #220]	@ (80076b4 <HAL_RCC_OscConfig+0x85c>)
 80075d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075da:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80075dc:	4b35      	ldr	r3, [pc, #212]	@ (80076b4 <HAL_RCC_OscConfig+0x85c>)
 80075de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d031      	beq.n	800764e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f003 0203 	and.w	r2, r3, #3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d12a      	bne.n	800764e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	091b      	lsrs	r3, r3, #4
 80075fc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007604:	429a      	cmp	r2, r3
 8007606:	d122      	bne.n	800764e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007612:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007614:	429a      	cmp	r2, r3
 8007616:	d11a      	bne.n	800764e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	0a5b      	lsrs	r3, r3, #9
 800761c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007624:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007626:	429a      	cmp	r2, r3
 8007628:	d111      	bne.n	800764e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	0c1b      	lsrs	r3, r3, #16
 800762e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007636:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007638:	429a      	cmp	r2, r3
 800763a:	d108      	bne.n	800764e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	0e1b      	lsrs	r3, r3, #24
 8007640:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007648:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800764a:	429a      	cmp	r2, r3
 800764c:	d001      	beq.n	8007652 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e02b      	b.n	80076aa <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007652:	4b18      	ldr	r3, [pc, #96]	@ (80076b4 <HAL_RCC_OscConfig+0x85c>)
 8007654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007656:	08db      	lsrs	r3, r3, #3
 8007658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800765c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	429a      	cmp	r2, r3
 8007666:	d01f      	beq.n	80076a8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007668:	4b12      	ldr	r3, [pc, #72]	@ (80076b4 <HAL_RCC_OscConfig+0x85c>)
 800766a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766c:	4a11      	ldr	r2, [pc, #68]	@ (80076b4 <HAL_RCC_OscConfig+0x85c>)
 800766e:	f023 0301 	bic.w	r3, r3, #1
 8007672:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007674:	f7fa fb50 	bl	8001d18 <HAL_GetTick>
 8007678:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800767a:	bf00      	nop
 800767c:	f7fa fb4c 	bl	8001d18 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	4293      	cmp	r3, r2
 8007686:	d0f9      	beq.n	800767c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007688:	4b0a      	ldr	r3, [pc, #40]	@ (80076b4 <HAL_RCC_OscConfig+0x85c>)
 800768a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800768c:	4b0a      	ldr	r3, [pc, #40]	@ (80076b8 <HAL_RCC_OscConfig+0x860>)
 800768e:	4013      	ands	r3, r2
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007694:	00d2      	lsls	r2, r2, #3
 8007696:	4907      	ldr	r1, [pc, #28]	@ (80076b4 <HAL_RCC_OscConfig+0x85c>)
 8007698:	4313      	orrs	r3, r2
 800769a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800769c:	4b05      	ldr	r3, [pc, #20]	@ (80076b4 <HAL_RCC_OscConfig+0x85c>)
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	4a04      	ldr	r2, [pc, #16]	@ (80076b4 <HAL_RCC_OscConfig+0x85c>)
 80076a2:	f043 0301 	orr.w	r3, r3, #1
 80076a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3730      	adds	r7, #48	@ 0x30
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	58024400 	.word	0x58024400
 80076b8:	ffff0007 	.word	0xffff0007

080076bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e19c      	b.n	8007a0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076d0:	4b8a      	ldr	r3, [pc, #552]	@ (80078fc <HAL_RCC_ClockConfig+0x240>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d910      	bls.n	8007700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076de:	4b87      	ldr	r3, [pc, #540]	@ (80078fc <HAL_RCC_ClockConfig+0x240>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f023 020f 	bic.w	r2, r3, #15
 80076e6:	4985      	ldr	r1, [pc, #532]	@ (80078fc <HAL_RCC_ClockConfig+0x240>)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ee:	4b83      	ldr	r3, [pc, #524]	@ (80078fc <HAL_RCC_ClockConfig+0x240>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d001      	beq.n	8007700 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e184      	b.n	8007a0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b00      	cmp	r3, #0
 800770a:	d010      	beq.n	800772e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691a      	ldr	r2, [r3, #16]
 8007710:	4b7b      	ldr	r3, [pc, #492]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007718:	429a      	cmp	r2, r3
 800771a:	d908      	bls.n	800772e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800771c:	4b78      	ldr	r3, [pc, #480]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	4975      	ldr	r1, [pc, #468]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800772a:	4313      	orrs	r3, r2
 800772c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d010      	beq.n	800775c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	695a      	ldr	r2, [r3, #20]
 800773e:	4b70      	ldr	r3, [pc, #448]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007746:	429a      	cmp	r2, r3
 8007748:	d908      	bls.n	800775c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800774a:	4b6d      	ldr	r3, [pc, #436]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	496a      	ldr	r1, [pc, #424]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 8007758:	4313      	orrs	r3, r2
 800775a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b00      	cmp	r3, #0
 8007766:	d010      	beq.n	800778a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699a      	ldr	r2, [r3, #24]
 800776c:	4b64      	ldr	r3, [pc, #400]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007774:	429a      	cmp	r2, r3
 8007776:	d908      	bls.n	800778a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007778:	4b61      	ldr	r3, [pc, #388]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	495e      	ldr	r1, [pc, #376]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 8007786:	4313      	orrs	r3, r2
 8007788:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d010      	beq.n	80077b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	69da      	ldr	r2, [r3, #28]
 800779a:	4b59      	ldr	r3, [pc, #356]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d908      	bls.n	80077b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80077a6:	4b56      	ldr	r3, [pc, #344]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	4953      	ldr	r1, [pc, #332]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d010      	beq.n	80077e6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68da      	ldr	r2, [r3, #12]
 80077c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f003 030f 	and.w	r3, r3, #15
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d908      	bls.n	80077e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077d4:	4b4a      	ldr	r3, [pc, #296]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f023 020f 	bic.w	r2, r3, #15
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	4947      	ldr	r1, [pc, #284]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d055      	beq.n	800789e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80077f2:	4b43      	ldr	r3, [pc, #268]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	4940      	ldr	r1, [pc, #256]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 8007800:	4313      	orrs	r3, r2
 8007802:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d107      	bne.n	800781c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800780c:	4b3c      	ldr	r3, [pc, #240]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d121      	bne.n	800785c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e0f6      	b.n	8007a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d107      	bne.n	8007834 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007824:	4b36      	ldr	r3, [pc, #216]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d115      	bne.n	800785c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e0ea      	b.n	8007a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d107      	bne.n	800784c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800783c:	4b30      	ldr	r3, [pc, #192]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007844:	2b00      	cmp	r3, #0
 8007846:	d109      	bne.n	800785c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e0de      	b.n	8007a0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800784c:	4b2c      	ldr	r3, [pc, #176]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e0d6      	b.n	8007a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800785c:	4b28      	ldr	r3, [pc, #160]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f023 0207 	bic.w	r2, r3, #7
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	4925      	ldr	r1, [pc, #148]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800786a:	4313      	orrs	r3, r2
 800786c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800786e:	f7fa fa53 	bl	8001d18 <HAL_GetTick>
 8007872:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007874:	e00a      	b.n	800788c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007876:	f7fa fa4f 	bl	8001d18 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007884:	4293      	cmp	r3, r2
 8007886:	d901      	bls.n	800788c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e0be      	b.n	8007a0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800788c:	4b1c      	ldr	r3, [pc, #112]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	429a      	cmp	r2, r3
 800789c:	d1eb      	bne.n	8007876 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d010      	beq.n	80078cc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	4b14      	ldr	r3, [pc, #80]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d208      	bcs.n	80078cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078ba:	4b11      	ldr	r3, [pc, #68]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	f023 020f 	bic.w	r2, r3, #15
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	490e      	ldr	r1, [pc, #56]	@ (8007900 <HAL_RCC_ClockConfig+0x244>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078cc:	4b0b      	ldr	r3, [pc, #44]	@ (80078fc <HAL_RCC_ClockConfig+0x240>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 030f 	and.w	r3, r3, #15
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d214      	bcs.n	8007904 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078da:	4b08      	ldr	r3, [pc, #32]	@ (80078fc <HAL_RCC_ClockConfig+0x240>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f023 020f 	bic.w	r2, r3, #15
 80078e2:	4906      	ldr	r1, [pc, #24]	@ (80078fc <HAL_RCC_ClockConfig+0x240>)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ea:	4b04      	ldr	r3, [pc, #16]	@ (80078fc <HAL_RCC_ClockConfig+0x240>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d005      	beq.n	8007904 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e086      	b.n	8007a0a <HAL_RCC_ClockConfig+0x34e>
 80078fc:	52002000 	.word	0x52002000
 8007900:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0304 	and.w	r3, r3, #4
 800790c:	2b00      	cmp	r3, #0
 800790e:	d010      	beq.n	8007932 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691a      	ldr	r2, [r3, #16]
 8007914:	4b3f      	ldr	r3, [pc, #252]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800791c:	429a      	cmp	r2, r3
 800791e:	d208      	bcs.n	8007932 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007920:	4b3c      	ldr	r3, [pc, #240]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	4939      	ldr	r1, [pc, #228]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 800792e:	4313      	orrs	r3, r2
 8007930:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d010      	beq.n	8007960 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	695a      	ldr	r2, [r3, #20]
 8007942:	4b34      	ldr	r3, [pc, #208]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800794a:	429a      	cmp	r2, r3
 800794c:	d208      	bcs.n	8007960 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800794e:	4b31      	ldr	r3, [pc, #196]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	492e      	ldr	r1, [pc, #184]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 800795c:	4313      	orrs	r3, r2
 800795e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0310 	and.w	r3, r3, #16
 8007968:	2b00      	cmp	r3, #0
 800796a:	d010      	beq.n	800798e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699a      	ldr	r2, [r3, #24]
 8007970:	4b28      	ldr	r3, [pc, #160]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007978:	429a      	cmp	r2, r3
 800797a:	d208      	bcs.n	800798e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800797c:	4b25      	ldr	r3, [pc, #148]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	4922      	ldr	r1, [pc, #136]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 800798a:	4313      	orrs	r3, r2
 800798c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d010      	beq.n	80079bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69da      	ldr	r2, [r3, #28]
 800799e:	4b1d      	ldr	r3, [pc, #116]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d208      	bcs.n	80079bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80079aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	4917      	ldr	r1, [pc, #92]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80079bc:	f000 f834 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 80079c0:	4602      	mov	r2, r0
 80079c2:	4b14      	ldr	r3, [pc, #80]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	f003 030f 	and.w	r3, r3, #15
 80079cc:	4912      	ldr	r1, [pc, #72]	@ (8007a18 <HAL_RCC_ClockConfig+0x35c>)
 80079ce:	5ccb      	ldrb	r3, [r1, r3]
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	fa22 f303 	lsr.w	r3, r2, r3
 80079d8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80079da:	4b0e      	ldr	r3, [pc, #56]	@ (8007a14 <HAL_RCC_ClockConfig+0x358>)
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	f003 030f 	and.w	r3, r3, #15
 80079e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007a18 <HAL_RCC_ClockConfig+0x35c>)
 80079e4:	5cd3      	ldrb	r3, [r2, r3]
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	fa22 f303 	lsr.w	r3, r2, r3
 80079f0:	4a0a      	ldr	r2, [pc, #40]	@ (8007a1c <HAL_RCC_ClockConfig+0x360>)
 80079f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007a20 <HAL_RCC_ClockConfig+0x364>)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80079fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007a24 <HAL_RCC_ClockConfig+0x368>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fa f940 	bl	8001c84 <HAL_InitTick>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	58024400 	.word	0x58024400
 8007a18:	0800b078 	.word	0x0800b078
 8007a1c:	24000004 	.word	0x24000004
 8007a20:	24000000 	.word	0x24000000
 8007a24:	24000008 	.word	0x24000008

08007a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b089      	sub	sp, #36	@ 0x24
 8007a2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a2e:	4bb3      	ldr	r3, [pc, #716]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a36:	2b18      	cmp	r3, #24
 8007a38:	f200 8155 	bhi.w	8007ce6 <HAL_RCC_GetSysClockFreq+0x2be>
 8007a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007aa9 	.word	0x08007aa9
 8007a48:	08007ce7 	.word	0x08007ce7
 8007a4c:	08007ce7 	.word	0x08007ce7
 8007a50:	08007ce7 	.word	0x08007ce7
 8007a54:	08007ce7 	.word	0x08007ce7
 8007a58:	08007ce7 	.word	0x08007ce7
 8007a5c:	08007ce7 	.word	0x08007ce7
 8007a60:	08007ce7 	.word	0x08007ce7
 8007a64:	08007acf 	.word	0x08007acf
 8007a68:	08007ce7 	.word	0x08007ce7
 8007a6c:	08007ce7 	.word	0x08007ce7
 8007a70:	08007ce7 	.word	0x08007ce7
 8007a74:	08007ce7 	.word	0x08007ce7
 8007a78:	08007ce7 	.word	0x08007ce7
 8007a7c:	08007ce7 	.word	0x08007ce7
 8007a80:	08007ce7 	.word	0x08007ce7
 8007a84:	08007ad5 	.word	0x08007ad5
 8007a88:	08007ce7 	.word	0x08007ce7
 8007a8c:	08007ce7 	.word	0x08007ce7
 8007a90:	08007ce7 	.word	0x08007ce7
 8007a94:	08007ce7 	.word	0x08007ce7
 8007a98:	08007ce7 	.word	0x08007ce7
 8007a9c:	08007ce7 	.word	0x08007ce7
 8007aa0:	08007ce7 	.word	0x08007ce7
 8007aa4:	08007adb 	.word	0x08007adb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aa8:	4b94      	ldr	r3, [pc, #592]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d009      	beq.n	8007ac8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ab4:	4b91      	ldr	r3, [pc, #580]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	08db      	lsrs	r3, r3, #3
 8007aba:	f003 0303 	and.w	r3, r3, #3
 8007abe:	4a90      	ldr	r2, [pc, #576]	@ (8007d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007ac6:	e111      	b.n	8007cec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ac8:	4b8d      	ldr	r3, [pc, #564]	@ (8007d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007aca:	61bb      	str	r3, [r7, #24]
      break;
 8007acc:	e10e      	b.n	8007cec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007ace:	4b8d      	ldr	r3, [pc, #564]	@ (8007d04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ad0:	61bb      	str	r3, [r7, #24]
      break;
 8007ad2:	e10b      	b.n	8007cec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007ad4:	4b8c      	ldr	r3, [pc, #560]	@ (8007d08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007ad6:	61bb      	str	r3, [r7, #24]
      break;
 8007ad8:	e108      	b.n	8007cec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ada:	4b88      	ldr	r3, [pc, #544]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007ae4:	4b85      	ldr	r3, [pc, #532]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae8:	091b      	lsrs	r3, r3, #4
 8007aea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007aee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007af0:	4b82      	ldr	r3, [pc, #520]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007afa:	4b80      	ldr	r3, [pc, #512]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007afe:	08db      	lsrs	r3, r3, #3
 8007b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	fb02 f303 	mul.w	r3, r2, r3
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 80e1 	beq.w	8007ce0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	f000 8083 	beq.w	8007c2c <HAL_RCC_GetSysClockFreq+0x204>
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	f200 80a1 	bhi.w	8007c70 <HAL_RCC_GetSysClockFreq+0x248>
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <HAL_RCC_GetSysClockFreq+0x114>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d056      	beq.n	8007be8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007b3a:	e099      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d02d      	beq.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b48:	4b6c      	ldr	r3, [pc, #432]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	08db      	lsrs	r3, r3, #3
 8007b4e:	f003 0303 	and.w	r3, r3, #3
 8007b52:	4a6b      	ldr	r2, [pc, #428]	@ (8007d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b54:	fa22 f303 	lsr.w	r3, r2, r3
 8007b58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	ee07 3a90 	vmov	s15, r3
 8007b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	ee07 3a90 	vmov	s15, r3
 8007b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b72:	4b62      	ldr	r3, [pc, #392]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b86:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007ba2:	e087      	b.n	8007cb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007d10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb6:	4b51      	ldr	r3, [pc, #324]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007be6:	e065      	b.n	8007cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007d14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfa:	4b40      	ldr	r3, [pc, #256]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c0e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c2a:	e043      	b.n	8007cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c36:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007d18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c52:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c6e:	e021      	b.n	8007cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007d14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c82:	4b1e      	ldr	r3, [pc, #120]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c96:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007cb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007cb4:	4b11      	ldr	r3, [pc, #68]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb8:	0a5b      	lsrs	r3, r3, #9
 8007cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cd8:	ee17 3a90 	vmov	r3, s15
 8007cdc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007cde:	e005      	b.n	8007cec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61bb      	str	r3, [r7, #24]
      break;
 8007ce4:	e002      	b.n	8007cec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007ce6:	4b07      	ldr	r3, [pc, #28]	@ (8007d04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ce8:	61bb      	str	r3, [r7, #24]
      break;
 8007cea:	bf00      	nop
  }

  return sysclockfreq;
 8007cec:	69bb      	ldr	r3, [r7, #24]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3724      	adds	r7, #36	@ 0x24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	58024400 	.word	0x58024400
 8007d00:	03d09000 	.word	0x03d09000
 8007d04:	003d0900 	.word	0x003d0900
 8007d08:	016e3600 	.word	0x016e3600
 8007d0c:	46000000 	.word	0x46000000
 8007d10:	4c742400 	.word	0x4c742400
 8007d14:	4a742400 	.word	0x4a742400
 8007d18:	4bb71b00 	.word	0x4bb71b00

08007d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007d22:	f7ff fe81 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 8007d26:	4602      	mov	r2, r0
 8007d28:	4b10      	ldr	r3, [pc, #64]	@ (8007d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	0a1b      	lsrs	r3, r3, #8
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	490f      	ldr	r1, [pc, #60]	@ (8007d70 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d34:	5ccb      	ldrb	r3, [r1, r3]
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d3e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007d40:	4b0a      	ldr	r3, [pc, #40]	@ (8007d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f003 030f 	and.w	r3, r3, #15
 8007d48:	4a09      	ldr	r2, [pc, #36]	@ (8007d70 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d4a:	5cd3      	ldrb	r3, [r2, r3]
 8007d4c:	f003 031f 	and.w	r3, r3, #31
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	fa22 f303 	lsr.w	r3, r2, r3
 8007d56:	4a07      	ldr	r2, [pc, #28]	@ (8007d74 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d5a:	4a07      	ldr	r2, [pc, #28]	@ (8007d78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007d60:	4b04      	ldr	r3, [pc, #16]	@ (8007d74 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d62:	681b      	ldr	r3, [r3, #0]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	58024400 	.word	0x58024400
 8007d70:	0800b078 	.word	0x0800b078
 8007d74:	24000004 	.word	0x24000004
 8007d78:	24000000 	.word	0x24000000

08007d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007d80:	f7ff ffcc 	bl	8007d1c <HAL_RCC_GetHCLKFreq>
 8007d84:	4602      	mov	r2, r0
 8007d86:	4b06      	ldr	r3, [pc, #24]	@ (8007da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	091b      	lsrs	r3, r3, #4
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	4904      	ldr	r1, [pc, #16]	@ (8007da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d92:	5ccb      	ldrb	r3, [r1, r3]
 8007d94:	f003 031f 	and.w	r3, r3, #31
 8007d98:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	58024400 	.word	0x58024400
 8007da4:	0800b078 	.word	0x0800b078

08007da8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dac:	b0c8      	sub	sp, #288	@ 0x120
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007db4:	2300      	movs	r3, #0
 8007db6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007dcc:	2500      	movs	r5, #0
 8007dce:	ea54 0305 	orrs.w	r3, r4, r5
 8007dd2:	d049      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dde:	d02f      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007de0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007de4:	d828      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007de6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dea:	d01a      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007dec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007df0:	d822      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dfa:	d007      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dfc:	e01c      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dfe:	4ba7      	ldr	r3, [pc, #668]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e02:	4aa6      	ldr	r2, [pc, #664]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e0a:	e01a      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e10:	3308      	adds	r3, #8
 8007e12:	2102      	movs	r1, #2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f002 fa6d 	bl	800a2f4 <RCCEx_PLL2_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e20:	e00f      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e26:	3328      	adds	r3, #40	@ 0x28
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f002 fb14 	bl	800a458 <RCCEx_PLL3_Config>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e36:	e004      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e3e:	e000      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10a      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e4a:	4b94      	ldr	r3, [pc, #592]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e58:	4a90      	ldr	r2, [pc, #576]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e5a:	430b      	orrs	r3, r1
 8007e5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e5e:	e003      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007e74:	f04f 0900 	mov.w	r9, #0
 8007e78:	ea58 0309 	orrs.w	r3, r8, r9
 8007e7c:	d047      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d82a      	bhi.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e88:	a201      	add	r2, pc, #4	@ (adr r2, 8007e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ea5 	.word	0x08007ea5
 8007e94:	08007eb3 	.word	0x08007eb3
 8007e98:	08007ec9 	.word	0x08007ec9
 8007e9c:	08007ee7 	.word	0x08007ee7
 8007ea0:	08007ee7 	.word	0x08007ee7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea4:	4b7d      	ldr	r3, [pc, #500]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea8:	4a7c      	ldr	r2, [pc, #496]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007eb0:	e01a      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f002 fa1a 	bl	800a2f4 <RCCEx_PLL2_Config>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ec6:	e00f      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ecc:	3328      	adds	r3, #40	@ 0x28
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f002 fac1 	bl	800a458 <RCCEx_PLL3_Config>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007edc:	e004      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ee4:	e000      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10a      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef4:	f023 0107 	bic.w	r1, r3, #7
 8007ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007efe:	4a67      	ldr	r2, [pc, #412]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f00:	430b      	orrs	r3, r1
 8007f02:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f04:	e003      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007f1a:	f04f 0b00 	mov.w	fp, #0
 8007f1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007f22:	d054      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007f2e:	d036      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007f30:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007f34:	d82f      	bhi.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f3a:	d032      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f40:	d829      	bhi.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f42:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f44:	d02f      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007f46:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f48:	d825      	bhi.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f4a:	2b80      	cmp	r3, #128	@ 0x80
 8007f4c:	d018      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007f4e:	2b80      	cmp	r3, #128	@ 0x80
 8007f50:	d821      	bhi.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007f56:	2b40      	cmp	r3, #64	@ 0x40
 8007f58:	d007      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007f5a:	e01c      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f60:	4a4e      	ldr	r2, [pc, #312]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007f68:	e01e      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f6e:	3308      	adds	r3, #8
 8007f70:	2100      	movs	r1, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f002 f9be 	bl	800a2f4 <RCCEx_PLL2_Config>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007f7e:	e013      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f84:	3328      	adds	r3, #40	@ 0x28
 8007f86:	2100      	movs	r1, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f002 fa65 	bl	800a458 <RCCEx_PLL3_Config>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007f94:	e008      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f9c:	e004      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007f9e:	bf00      	nop
 8007fa0:	e002      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007fa2:	bf00      	nop
 8007fa4:	e000      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fbe:	4a37      	ldr	r2, [pc, #220]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fc4:	e003      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007fda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007fe4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4313      	orrs	r3, r2
 8007fec:	d05c      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ff4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007ff8:	d03b      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ffa:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007ffe:	d834      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008004:	d037      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800800a:	d82e      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800800c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008010:	d033      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008012:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008016:	d828      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800801c:	d01a      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800801e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008022:	d822      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800802c:	d007      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800802e:	e01c      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008030:	4b1a      	ldr	r3, [pc, #104]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	4a19      	ldr	r2, [pc, #100]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800803a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800803c:	e01e      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800803e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008042:	3308      	adds	r3, #8
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f002 f954 	bl	800a2f4 <RCCEx_PLL2_Config>
 800804c:	4603      	mov	r3, r0
 800804e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008052:	e013      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008058:	3328      	adds	r3, #40	@ 0x28
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f002 f9fb 	bl	800a458 <RCCEx_PLL3_Config>
 8008062:	4603      	mov	r3, r0
 8008064:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008068:	e008      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008070:	e004      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008072:	bf00      	nop
 8008074:	e002      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008076:	bf00      	nop
 8008078:	e000      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800807a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800807c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10d      	bne.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008084:	4b05      	ldr	r3, [pc, #20]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008088:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800808c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008092:	4a02      	ldr	r2, [pc, #8]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008094:	430b      	orrs	r3, r1
 8008096:	6513      	str	r3, [r2, #80]	@ 0x50
 8008098:	e006      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800809a:	bf00      	nop
 800809c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80080a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80080b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80080b8:	2300      	movs	r3, #0
 80080ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80080be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80080c2:	460b      	mov	r3, r1
 80080c4:	4313      	orrs	r3, r2
 80080c6:	d03a      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80080c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ce:	2b30      	cmp	r3, #48	@ 0x30
 80080d0:	d01f      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80080d2:	2b30      	cmp	r3, #48	@ 0x30
 80080d4:	d819      	bhi.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d00c      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80080da:	2b20      	cmp	r3, #32
 80080dc:	d815      	bhi.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d019      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80080e2:	2b10      	cmp	r3, #16
 80080e4:	d111      	bne.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e6:	4bae      	ldr	r3, [pc, #696]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ea:	4aad      	ldr	r2, [pc, #692]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80080f2:	e011      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080f8:	3308      	adds	r3, #8
 80080fa:	2102      	movs	r1, #2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f002 f8f9 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008102:	4603      	mov	r3, r0
 8008104:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008108:	e006      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008110:	e002      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008112:	bf00      	nop
 8008114:	e000      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008118:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10a      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008120:	4b9f      	ldr	r3, [pc, #636]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008124:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800812e:	4a9c      	ldr	r2, [pc, #624]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008130:	430b      	orrs	r3, r1
 8008132:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008134:	e003      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008136:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800813a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800813e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800814a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800814e:	2300      	movs	r3, #0
 8008150:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008154:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008158:	460b      	mov	r3, r1
 800815a:	4313      	orrs	r3, r2
 800815c:	d051      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800815e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008164:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008168:	d035      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800816a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800816e:	d82e      	bhi.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008170:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008174:	d031      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008176:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800817a:	d828      	bhi.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x426>
 800817c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008180:	d01a      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008186:	d822      	bhi.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800818c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008190:	d007      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008192:	e01c      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008194:	4b82      	ldr	r3, [pc, #520]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008198:	4a81      	ldr	r2, [pc, #516]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800819a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800819e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081a0:	e01c      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081a6:	3308      	adds	r3, #8
 80081a8:	2100      	movs	r1, #0
 80081aa:	4618      	mov	r0, r3
 80081ac:	f002 f8a2 	bl	800a2f4 <RCCEx_PLL2_Config>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081b6:	e011      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081bc:	3328      	adds	r3, #40	@ 0x28
 80081be:	2100      	movs	r1, #0
 80081c0:	4618      	mov	r0, r3
 80081c2:	f002 f949 	bl	800a458 <RCCEx_PLL3_Config>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081cc:	e006      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081d4:	e002      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80081d6:	bf00      	nop
 80081d8:	e000      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80081da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10a      	bne.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80081e4:	4b6e      	ldr	r3, [pc, #440]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80081ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081f2:	4a6b      	ldr	r2, [pc, #428]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081f4:	430b      	orrs	r3, r1
 80081f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80081f8:	e003      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800820e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008212:	2300      	movs	r3, #0
 8008214:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008218:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800821c:	460b      	mov	r3, r1
 800821e:	4313      	orrs	r3, r2
 8008220:	d053      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800822c:	d033      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800822e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008232:	d82c      	bhi.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008234:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008238:	d02f      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800823a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800823e:	d826      	bhi.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008240:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008244:	d02b      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008246:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800824a:	d820      	bhi.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800824c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008250:	d012      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008252:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008256:	d81a      	bhi.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d022      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800825c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008260:	d115      	bne.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008266:	3308      	adds	r3, #8
 8008268:	2101      	movs	r1, #1
 800826a:	4618      	mov	r0, r3
 800826c:	f002 f842 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008270:	4603      	mov	r3, r0
 8008272:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008276:	e015      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800827c:	3328      	adds	r3, #40	@ 0x28
 800827e:	2101      	movs	r1, #1
 8008280:	4618      	mov	r0, r3
 8008282:	f002 f8e9 	bl	800a458 <RCCEx_PLL3_Config>
 8008286:	4603      	mov	r3, r0
 8008288:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800828c:	e00a      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008294:	e006      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008296:	bf00      	nop
 8008298:	e004      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800829a:	bf00      	nop
 800829c:	e002      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800829e:	bf00      	nop
 80082a0:	e000      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80082a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80082ac:	4b3c      	ldr	r3, [pc, #240]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80082b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082ba:	4a39      	ldr	r2, [pc, #228]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082bc:	430b      	orrs	r3, r1
 80082be:	6513      	str	r3, [r2, #80]	@ 0x50
 80082c0:	e003      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80082d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082da:	2300      	movs	r3, #0
 80082dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082e0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4313      	orrs	r3, r2
 80082e8:	d060      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80082ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082f2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80082f6:	d039      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80082f8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80082fc:	d832      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80082fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008302:	d035      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008304:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008308:	d82c      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800830a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800830e:	d031      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008314:	d826      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008316:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800831a:	d02d      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800831c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008320:	d820      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008326:	d012      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800832c:	d81a      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800832e:	2b00      	cmp	r3, #0
 8008330:	d024      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008336:	d115      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800833c:	3308      	adds	r3, #8
 800833e:	2101      	movs	r1, #1
 8008340:	4618      	mov	r0, r3
 8008342:	f001 ffd7 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008346:	4603      	mov	r3, r0
 8008348:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800834c:	e017      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800834e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008352:	3328      	adds	r3, #40	@ 0x28
 8008354:	2101      	movs	r1, #1
 8008356:	4618      	mov	r0, r3
 8008358:	f002 f87e 	bl	800a458 <RCCEx_PLL3_Config>
 800835c:	4603      	mov	r3, r0
 800835e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008362:	e00c      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800836a:	e008      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800836c:	bf00      	nop
 800836e:	e006      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008370:	bf00      	nop
 8008372:	e004      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008374:	bf00      	nop
 8008376:	e002      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008378:	bf00      	nop
 800837a:	e000      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800837c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800837e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10e      	bne.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008386:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800838a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800838e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008392:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008396:	4a02      	ldr	r2, [pc, #8]	@ (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008398:	430b      	orrs	r3, r1
 800839a:	6593      	str	r3, [r2, #88]	@ 0x58
 800839c:	e006      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x604>
 800839e:	bf00      	nop
 80083a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80083ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80083b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083bc:	2300      	movs	r3, #0
 80083be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80083c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80083c6:	460b      	mov	r3, r1
 80083c8:	4313      	orrs	r3, r2
 80083ca:	d037      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80083cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083d6:	d00e      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80083d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083dc:	d816      	bhi.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d018      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80083e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083e6:	d111      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e8:	4bc4      	ldr	r3, [pc, #784]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ec:	4ac3      	ldr	r2, [pc, #780]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80083f4:	e00f      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083fa:	3308      	adds	r3, #8
 80083fc:	2101      	movs	r1, #1
 80083fe:	4618      	mov	r0, r3
 8008400:	f001 ff78 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008404:	4603      	mov	r3, r0
 8008406:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800840a:	e004      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008412:	e000      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008416:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800841e:	4bb7      	ldr	r3, [pc, #732]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008422:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800842a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800842c:	4ab3      	ldr	r2, [pc, #716]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800842e:	430b      	orrs	r3, r1
 8008430:	6513      	str	r3, [r2, #80]	@ 0x50
 8008432:	e003      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008434:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008438:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800843c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800844c:	2300      	movs	r3, #0
 800844e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008452:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008456:	460b      	mov	r3, r1
 8008458:	4313      	orrs	r3, r2
 800845a:	d039      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800845c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008462:	2b03      	cmp	r3, #3
 8008464:	d81c      	bhi.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008466:	a201      	add	r2, pc, #4	@ (adr r2, 800846c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	080084a9 	.word	0x080084a9
 8008470:	0800847d 	.word	0x0800847d
 8008474:	0800848b 	.word	0x0800848b
 8008478:	080084a9 	.word	0x080084a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800847c:	4b9f      	ldr	r3, [pc, #636]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800847e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008480:	4a9e      	ldr	r2, [pc, #632]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008488:	e00f      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800848a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800848e:	3308      	adds	r3, #8
 8008490:	2102      	movs	r1, #2
 8008492:	4618      	mov	r0, r3
 8008494:	f001 ff2e 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008498:	4603      	mov	r3, r0
 800849a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800849e:	e004      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084a6:	e000      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80084a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80084b2:	4b92      	ldr	r3, [pc, #584]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084b6:	f023 0103 	bic.w	r1, r3, #3
 80084ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084c0:	4a8e      	ldr	r2, [pc, #568]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084c2:	430b      	orrs	r3, r1
 80084c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80084c6:	e003      	b.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80084dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084e0:	2300      	movs	r3, #0
 80084e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80084ea:	460b      	mov	r3, r1
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f000 8099 	beq.w	8008624 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084f2:	4b83      	ldr	r3, [pc, #524]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a82      	ldr	r2, [pc, #520]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084fe:	f7f9 fc0b 	bl	8001d18 <HAL_GetTick>
 8008502:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008506:	e00b      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008508:	f7f9 fc06 	bl	8001d18 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b64      	cmp	r3, #100	@ 0x64
 8008516:	d903      	bls.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800851e:	e005      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008520:	4b77      	ldr	r3, [pc, #476]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008528:	2b00      	cmp	r3, #0
 800852a:	d0ed      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800852c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008530:	2b00      	cmp	r3, #0
 8008532:	d173      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008534:	4b71      	ldr	r3, [pc, #452]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008536:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800853c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008540:	4053      	eors	r3, r2
 8008542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008546:	2b00      	cmp	r3, #0
 8008548:	d015      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800854a:	4b6c      	ldr	r3, [pc, #432]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800854c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800854e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008552:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008556:	4b69      	ldr	r3, [pc, #420]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800855a:	4a68      	ldr	r2, [pc, #416]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800855c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008560:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008562:	4b66      	ldr	r3, [pc, #408]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008566:	4a65      	ldr	r2, [pc, #404]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800856c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800856e:	4a63      	ldr	r2, [pc, #396]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008574:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800857a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800857e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008582:	d118      	bne.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008584:	f7f9 fbc8 	bl	8001d18 <HAL_GetTick>
 8008588:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800858c:	e00d      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800858e:	f7f9 fbc3 	bl	8001d18 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008598:	1ad2      	subs	r2, r2, r3
 800859a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800859e:	429a      	cmp	r2, r3
 80085a0:	d903      	bls.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80085a8:	e005      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085aa:	4b54      	ldr	r3, [pc, #336]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0eb      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80085b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d129      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085ce:	d10e      	bne.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x846>
 80085d0:	4b4a      	ldr	r3, [pc, #296]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80085d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085e0:	091a      	lsrs	r2, r3, #4
 80085e2:	4b48      	ldr	r3, [pc, #288]	@ (8008704 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	4a45      	ldr	r2, [pc, #276]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085e8:	430b      	orrs	r3, r1
 80085ea:	6113      	str	r3, [r2, #16]
 80085ec:	e005      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x852>
 80085ee:	4b43      	ldr	r3, [pc, #268]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	4a42      	ldr	r2, [pc, #264]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80085f8:	6113      	str	r3, [r2, #16]
 80085fa:	4b40      	ldr	r3, [pc, #256]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80085fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008602:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800860a:	4a3c      	ldr	r2, [pc, #240]	@ (80086fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860c:	430b      	orrs	r3, r1
 800860e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008610:	e008      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008612:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008616:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800861a:	e003      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008620:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f002 0301 	and.w	r3, r2, #1
 8008630:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008634:	2300      	movs	r3, #0
 8008636:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800863a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800863e:	460b      	mov	r3, r1
 8008640:	4313      	orrs	r3, r2
 8008642:	f000 8090 	beq.w	8008766 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800864a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800864e:	2b28      	cmp	r3, #40	@ 0x28
 8008650:	d870      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008652:	a201      	add	r2, pc, #4	@ (adr r2, 8008658 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	0800873d 	.word	0x0800873d
 800865c:	08008735 	.word	0x08008735
 8008660:	08008735 	.word	0x08008735
 8008664:	08008735 	.word	0x08008735
 8008668:	08008735 	.word	0x08008735
 800866c:	08008735 	.word	0x08008735
 8008670:	08008735 	.word	0x08008735
 8008674:	08008735 	.word	0x08008735
 8008678:	08008709 	.word	0x08008709
 800867c:	08008735 	.word	0x08008735
 8008680:	08008735 	.word	0x08008735
 8008684:	08008735 	.word	0x08008735
 8008688:	08008735 	.word	0x08008735
 800868c:	08008735 	.word	0x08008735
 8008690:	08008735 	.word	0x08008735
 8008694:	08008735 	.word	0x08008735
 8008698:	0800871f 	.word	0x0800871f
 800869c:	08008735 	.word	0x08008735
 80086a0:	08008735 	.word	0x08008735
 80086a4:	08008735 	.word	0x08008735
 80086a8:	08008735 	.word	0x08008735
 80086ac:	08008735 	.word	0x08008735
 80086b0:	08008735 	.word	0x08008735
 80086b4:	08008735 	.word	0x08008735
 80086b8:	0800873d 	.word	0x0800873d
 80086bc:	08008735 	.word	0x08008735
 80086c0:	08008735 	.word	0x08008735
 80086c4:	08008735 	.word	0x08008735
 80086c8:	08008735 	.word	0x08008735
 80086cc:	08008735 	.word	0x08008735
 80086d0:	08008735 	.word	0x08008735
 80086d4:	08008735 	.word	0x08008735
 80086d8:	0800873d 	.word	0x0800873d
 80086dc:	08008735 	.word	0x08008735
 80086e0:	08008735 	.word	0x08008735
 80086e4:	08008735 	.word	0x08008735
 80086e8:	08008735 	.word	0x08008735
 80086ec:	08008735 	.word	0x08008735
 80086f0:	08008735 	.word	0x08008735
 80086f4:	08008735 	.word	0x08008735
 80086f8:	0800873d 	.word	0x0800873d
 80086fc:	58024400 	.word	0x58024400
 8008700:	58024800 	.word	0x58024800
 8008704:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800870c:	3308      	adds	r3, #8
 800870e:	2101      	movs	r1, #1
 8008710:	4618      	mov	r0, r3
 8008712:	f001 fdef 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008716:	4603      	mov	r3, r0
 8008718:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800871c:	e00f      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800871e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008722:	3328      	adds	r3, #40	@ 0x28
 8008724:	2101      	movs	r1, #1
 8008726:	4618      	mov	r0, r3
 8008728:	f001 fe96 	bl	800a458 <RCCEx_PLL3_Config>
 800872c:	4603      	mov	r3, r0
 800872e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008732:	e004      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800873a:	e000      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800873c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800873e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10b      	bne.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008746:	4bc0      	ldr	r3, [pc, #768]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800874a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800874e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008756:	4abc      	ldr	r2, [pc, #752]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008758:	430b      	orrs	r3, r1
 800875a:	6553      	str	r3, [r2, #84]	@ 0x54
 800875c:	e003      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800875e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008762:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f002 0302 	and.w	r3, r2, #2
 8008772:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008776:	2300      	movs	r3, #0
 8008778:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800877c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008780:	460b      	mov	r3, r1
 8008782:	4313      	orrs	r3, r2
 8008784:	d043      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800878a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800878e:	2b05      	cmp	r3, #5
 8008790:	d824      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008792:	a201      	add	r2, pc, #4	@ (adr r2, 8008798 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	080087e5 	.word	0x080087e5
 800879c:	080087b1 	.word	0x080087b1
 80087a0:	080087c7 	.word	0x080087c7
 80087a4:	080087e5 	.word	0x080087e5
 80087a8:	080087e5 	.word	0x080087e5
 80087ac:	080087e5 	.word	0x080087e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087b4:	3308      	adds	r3, #8
 80087b6:	2101      	movs	r1, #1
 80087b8:	4618      	mov	r0, r3
 80087ba:	f001 fd9b 	bl	800a2f4 <RCCEx_PLL2_Config>
 80087be:	4603      	mov	r3, r0
 80087c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80087c4:	e00f      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ca:	3328      	adds	r3, #40	@ 0x28
 80087cc:	2101      	movs	r1, #1
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 fe42 	bl	800a458 <RCCEx_PLL3_Config>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80087da:	e004      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087e2:	e000      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80087e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10b      	bne.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80087ee:	4b96      	ldr	r3, [pc, #600]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087f2:	f023 0107 	bic.w	r1, r3, #7
 80087f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fe:	4a92      	ldr	r2, [pc, #584]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008800:	430b      	orrs	r3, r1
 8008802:	6553      	str	r3, [r2, #84]	@ 0x54
 8008804:	e003      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008806:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800880a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800880e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008816:	f002 0304 	and.w	r3, r2, #4
 800881a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800881e:	2300      	movs	r3, #0
 8008820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008824:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008828:	460b      	mov	r3, r1
 800882a:	4313      	orrs	r3, r2
 800882c:	d043      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800882e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008832:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008836:	2b05      	cmp	r3, #5
 8008838:	d824      	bhi.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800883a:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	0800888d 	.word	0x0800888d
 8008844:	08008859 	.word	0x08008859
 8008848:	0800886f 	.word	0x0800886f
 800884c:	0800888d 	.word	0x0800888d
 8008850:	0800888d 	.word	0x0800888d
 8008854:	0800888d 	.word	0x0800888d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800885c:	3308      	adds	r3, #8
 800885e:	2101      	movs	r1, #1
 8008860:	4618      	mov	r0, r3
 8008862:	f001 fd47 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008866:	4603      	mov	r3, r0
 8008868:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800886c:	e00f      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800886e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008872:	3328      	adds	r3, #40	@ 0x28
 8008874:	2101      	movs	r1, #1
 8008876:	4618      	mov	r0, r3
 8008878:	f001 fdee 	bl	800a458 <RCCEx_PLL3_Config>
 800887c:	4603      	mov	r3, r0
 800887e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008882:	e004      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800888a:	e000      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800888c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800888e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008896:	4b6c      	ldr	r3, [pc, #432]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800889a:	f023 0107 	bic.w	r1, r3, #7
 800889e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088a6:	4a68      	ldr	r2, [pc, #416]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088a8:	430b      	orrs	r3, r1
 80088aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80088ac:	e003      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f002 0320 	and.w	r3, r2, #32
 80088c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80088c6:	2300      	movs	r3, #0
 80088c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80088d0:	460b      	mov	r3, r1
 80088d2:	4313      	orrs	r3, r2
 80088d4:	d055      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80088d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088e2:	d033      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80088e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088e8:	d82c      	bhi.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80088ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ee:	d02f      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80088f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088f4:	d826      	bhi.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80088f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088fa:	d02b      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80088fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008900:	d820      	bhi.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008906:	d012      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008908:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800890c:	d81a      	bhi.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d022      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008916:	d115      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800891c:	3308      	adds	r3, #8
 800891e:	2100      	movs	r1, #0
 8008920:	4618      	mov	r0, r3
 8008922:	f001 fce7 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008926:	4603      	mov	r3, r0
 8008928:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800892c:	e015      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800892e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008932:	3328      	adds	r3, #40	@ 0x28
 8008934:	2102      	movs	r1, #2
 8008936:	4618      	mov	r0, r3
 8008938:	f001 fd8e 	bl	800a458 <RCCEx_PLL3_Config>
 800893c:	4603      	mov	r3, r0
 800893e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008942:	e00a      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800894a:	e006      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800894c:	bf00      	nop
 800894e:	e004      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008950:	bf00      	nop
 8008952:	e002      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008954:	bf00      	nop
 8008956:	e000      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10b      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008962:	4b39      	ldr	r3, [pc, #228]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008966:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800896a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800896e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008972:	4a35      	ldr	r2, [pc, #212]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008974:	430b      	orrs	r3, r1
 8008976:	6553      	str	r3, [r2, #84]	@ 0x54
 8008978:	e003      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800897e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800898e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008992:	2300      	movs	r3, #0
 8008994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008998:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800899c:	460b      	mov	r3, r1
 800899e:	4313      	orrs	r3, r2
 80089a0:	d058      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80089a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089aa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80089ae:	d033      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80089b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80089b4:	d82c      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80089b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ba:	d02f      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80089bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089c0:	d826      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80089c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089c6:	d02b      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80089c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089cc:	d820      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80089ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089d2:	d012      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80089d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089d8:	d81a      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d022      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80089de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089e2:	d115      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e8:	3308      	adds	r3, #8
 80089ea:	2100      	movs	r1, #0
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 fc81 	bl	800a2f4 <RCCEx_PLL2_Config>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80089f8:	e015      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089fe:	3328      	adds	r3, #40	@ 0x28
 8008a00:	2102      	movs	r1, #2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 fd28 	bl	800a458 <RCCEx_PLL3_Config>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a0e:	e00a      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a16:	e006      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008a18:	bf00      	nop
 8008a1a:	e004      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008a1c:	bf00      	nop
 8008a1e:	e002      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008a20:	bf00      	nop
 8008a22:	e000      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10e      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a2e:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a32:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a3e:	4a02      	ldr	r2, [pc, #8]	@ (8008a48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a40:	430b      	orrs	r3, r1
 8008a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a44:	e006      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008a46:	bf00      	nop
 8008a48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a64:	2300      	movs	r3, #0
 8008a66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a6a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4313      	orrs	r3, r2
 8008a72:	d055      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a7c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008a80:	d033      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008a82:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008a86:	d82c      	bhi.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a8c:	d02f      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008a8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a92:	d826      	bhi.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008a94:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008a98:	d02b      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008a9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008a9e:	d820      	bhi.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008aa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008aa4:	d012      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008aa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008aaa:	d81a      	bhi.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d022      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008ab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ab4:	d115      	bne.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aba:	3308      	adds	r3, #8
 8008abc:	2100      	movs	r1, #0
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f001 fc18 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008aca:	e015      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ad0:	3328      	adds	r3, #40	@ 0x28
 8008ad2:	2102      	movs	r1, #2
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f001 fcbf 	bl	800a458 <RCCEx_PLL3_Config>
 8008ada:	4603      	mov	r3, r0
 8008adc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ae0:	e00a      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ae8:	e006      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008aea:	bf00      	nop
 8008aec:	e004      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008aee:	bf00      	nop
 8008af0:	e002      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008af2:	bf00      	nop
 8008af4:	e000      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008af8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10b      	bne.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b00:	4ba1      	ldr	r3, [pc, #644]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b04:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b10:	4a9d      	ldr	r2, [pc, #628]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b12:	430b      	orrs	r3, r1
 8008b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b16:	e003      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f002 0308 	and.w	r3, r2, #8
 8008b2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b30:	2300      	movs	r3, #0
 8008b32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	d01e      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b4c:	d10c      	bne.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b52:	3328      	adds	r3, #40	@ 0x28
 8008b54:	2102      	movs	r1, #2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 fc7e 	bl	800a458 <RCCEx_PLL3_Config>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008b68:	4b87      	ldr	r3, [pc, #540]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b78:	4a83      	ldr	r2, [pc, #524]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	f002 0310 	and.w	r3, r2, #16
 8008b8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008b94:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	d01e      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ba2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008baa:	d10c      	bne.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb0:	3328      	adds	r3, #40	@ 0x28
 8008bb2:	2102      	movs	r1, #2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f001 fc4f 	bl	800a458 <RCCEx_PLL3_Config>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008bc6:	4b70      	ldr	r3, [pc, #448]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008bd6:	4a6c      	ldr	r2, [pc, #432]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bd8:	430b      	orrs	r3, r1
 8008bda:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bec:	2300      	movs	r3, #0
 8008bee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008bf2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	d03e      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c08:	d022      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c0e:	d81b      	bhi.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c18:	d00b      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008c1a:	e015      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c20:	3308      	adds	r3, #8
 8008c22:	2100      	movs	r1, #0
 8008c24:	4618      	mov	r0, r3
 8008c26:	f001 fb65 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c30:	e00f      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c36:	3328      	adds	r3, #40	@ 0x28
 8008c38:	2102      	movs	r1, #2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f001 fc0c 	bl	800a458 <RCCEx_PLL3_Config>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c46:	e004      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c4e:	e000      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10b      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c5e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c6a:	4a47      	ldr	r2, [pc, #284]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c70:	e003      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c76:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008c86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c88:	2300      	movs	r3, #0
 8008c8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c8c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008c90:	460b      	mov	r3, r1
 8008c92:	4313      	orrs	r3, r2
 8008c94:	d03b      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ca2:	d01f      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008ca4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ca8:	d818      	bhi.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008caa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cae:	d003      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008cb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cb4:	d007      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008cb6:	e011      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb8:	4b33      	ldr	r3, [pc, #204]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cbc:	4a32      	ldr	r2, [pc, #200]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008cc4:	e00f      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cca:	3328      	adds	r3, #40	@ 0x28
 8008ccc:	2101      	movs	r1, #1
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 fbc2 	bl	800a458 <RCCEx_PLL3_Config>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008cda:	e004      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ce2:	e000      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ce6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10b      	bne.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cee:	4b26      	ldr	r3, [pc, #152]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cfe:	4a22      	ldr	r2, [pc, #136]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d00:	430b      	orrs	r3, r1
 8008d02:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d04:	e003      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008d1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d20:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008d24:	460b      	mov	r3, r1
 8008d26:	4313      	orrs	r3, r2
 8008d28:	d034      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d38:	d007      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008d3a:	e011      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d3c:	4b12      	ldr	r3, [pc, #72]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d40:	4a11      	ldr	r2, [pc, #68]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d48:	e00e      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d4e:	3308      	adds	r3, #8
 8008d50:	2102      	movs	r1, #2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f001 face 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d5e:	e003      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10d      	bne.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008d70:	4b05      	ldr	r3, [pc, #20]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d74:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d7e:	4a02      	ldr	r2, [pc, #8]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d80:	430b      	orrs	r3, r1
 8008d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d84:	e006      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008d86:	bf00      	nop
 8008d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008da0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008da2:	2300      	movs	r3, #0
 8008da4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008da6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008daa:	460b      	mov	r3, r1
 8008dac:	4313      	orrs	r3, r2
 8008dae:	d00c      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db4:	3328      	adds	r3, #40	@ 0x28
 8008db6:	2102      	movs	r1, #2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f001 fb4d 	bl	800a458 <RCCEx_PLL3_Config>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008dd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008dd8:	2300      	movs	r3, #0
 8008dda:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ddc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008de0:	460b      	mov	r3, r1
 8008de2:	4313      	orrs	r3, r2
 8008de4:	d038      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008df2:	d018      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008df4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008df8:	d811      	bhi.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dfe:	d014      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e04:	d80b      	bhi.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d011      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e0e:	d106      	bne.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e10:	4bc3      	ldr	r3, [pc, #780]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e14:	4ac2      	ldr	r2, [pc, #776]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008e1c:	e008      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e24:	e004      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008e26:	bf00      	nop
 8008e28:	e002      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008e2a:	bf00      	nop
 8008e2c:	e000      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10b      	bne.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e38:	4bb9      	ldr	r3, [pc, #740]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e48:	4ab5      	ldr	r2, [pc, #724]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e4a:	430b      	orrs	r3, r1
 8008e4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e4e:	e003      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e54:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008e64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e66:	2300      	movs	r3, #0
 8008e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e6a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4313      	orrs	r3, r2
 8008e72:	d009      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008e74:	4baa      	ldr	r3, [pc, #680]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e82:	4aa7      	ldr	r2, [pc, #668]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e84:	430b      	orrs	r3, r1
 8008e86:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008e94:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e96:	2300      	movs	r3, #0
 8008e98:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	d009      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ea4:	4b9e      	ldr	r3, [pc, #632]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ea8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eb2:	4a9b      	ldr	r2, [pc, #620]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008eb4:	430b      	orrs	r3, r1
 8008eb6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	d009      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008ed4:	4b92      	ldr	r3, [pc, #584]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ed8:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ee2:	4a8f      	ldr	r2, [pc, #572]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008ef4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008efa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008efe:	460b      	mov	r3, r1
 8008f00:	4313      	orrs	r3, r2
 8008f02:	d00e      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f04:	4b86      	ldr	r3, [pc, #536]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	4a85      	ldr	r2, [pc, #532]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f0e:	6113      	str	r3, [r2, #16]
 8008f10:	4b83      	ldr	r3, [pc, #524]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f12:	6919      	ldr	r1, [r3, #16]
 8008f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008f1c:	4a80      	ldr	r2, [pc, #512]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f1e:	430b      	orrs	r3, r1
 8008f20:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f30:	2300      	movs	r3, #0
 8008f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f34:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	d009      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f3e:	4b78      	ldr	r3, [pc, #480]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f4c:	4a74      	ldr	r2, [pc, #464]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f4e:	430b      	orrs	r3, r1
 8008f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f60:	2300      	movs	r3, #0
 8008f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	d00a      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f72:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f7e:	4a68      	ldr	r2, [pc, #416]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f80:	430b      	orrs	r3, r1
 8008f82:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f96:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	d011      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 f9a3 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008fb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	6239      	str	r1, [r7, #32]
 8008fd0:	f003 0302 	and.w	r3, r3, #2
 8008fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fd6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	d011      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f001 f983 	bl	800a2f4 <RCCEx_PLL2_Config>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008ff4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009000:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900c:	2100      	movs	r1, #0
 800900e:	61b9      	str	r1, [r7, #24]
 8009010:	f003 0304 	and.w	r3, r3, #4
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800901a:	460b      	mov	r3, r1
 800901c:	4313      	orrs	r3, r2
 800901e:	d011      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009024:	3308      	adds	r3, #8
 8009026:	2102      	movs	r1, #2
 8009028:	4618      	mov	r0, r3
 800902a:	f001 f963 	bl	800a2f4 <RCCEx_PLL2_Config>
 800902e:	4603      	mov	r3, r0
 8009030:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009034:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009040:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	2100      	movs	r1, #0
 800904e:	6139      	str	r1, [r7, #16]
 8009050:	f003 0308 	and.w	r3, r3, #8
 8009054:	617b      	str	r3, [r7, #20]
 8009056:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800905a:	460b      	mov	r3, r1
 800905c:	4313      	orrs	r3, r2
 800905e:	d011      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009064:	3328      	adds	r3, #40	@ 0x28
 8009066:	2100      	movs	r1, #0
 8009068:	4618      	mov	r0, r3
 800906a:	f001 f9f5 	bl	800a458 <RCCEx_PLL3_Config>
 800906e:	4603      	mov	r3, r0
 8009070:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009074:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800907c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009080:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	2100      	movs	r1, #0
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	f003 0310 	and.w	r3, r3, #16
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800909a:	460b      	mov	r3, r1
 800909c:	4313      	orrs	r3, r2
 800909e:	d011      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090a4:	3328      	adds	r3, #40	@ 0x28
 80090a6:	2101      	movs	r1, #1
 80090a8:	4618      	mov	r0, r3
 80090aa:	f001 f9d5 	bl	800a458 <RCCEx_PLL3_Config>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80090b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80090c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	2100      	movs	r1, #0
 80090ce:	6039      	str	r1, [r7, #0]
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	607b      	str	r3, [r7, #4]
 80090d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80090da:	460b      	mov	r3, r1
 80090dc:	4313      	orrs	r3, r2
 80090de:	d011      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e4:	3328      	adds	r3, #40	@ 0x28
 80090e6:	2102      	movs	r1, #2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f001 f9b5 	bl	800a458 <RCCEx_PLL3_Config>
 80090ee:	4603      	mov	r3, r0
 80090f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80090f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009100:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009104:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	e000      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
}
 8009112:	4618      	mov	r0, r3
 8009114:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009118:	46bd      	mov	sp, r7
 800911a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800911e:	bf00      	nop
 8009120:	58024400 	.word	0x58024400

08009124 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b090      	sub	sp, #64	@ 0x40
 8009128:	af00      	add	r7, sp, #0
 800912a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800912e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009132:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009136:	430b      	orrs	r3, r1
 8009138:	f040 8094 	bne.w	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800913c:	4b97      	ldr	r3, [pc, #604]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800913e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009140:	f003 0307 	and.w	r3, r3, #7
 8009144:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009148:	2b04      	cmp	r3, #4
 800914a:	f200 8087 	bhi.w	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800914e:	a201      	add	r2, pc, #4	@ (adr r2, 8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	08009169 	.word	0x08009169
 8009158:	08009191 	.word	0x08009191
 800915c:	080091b9 	.word	0x080091b9
 8009160:	08009255 	.word	0x08009255
 8009164:	080091e1 	.word	0x080091e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009168:	4b8c      	ldr	r3, [pc, #560]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009170:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009174:	d108      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009176:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800917a:	4618      	mov	r0, r3
 800917c:	f000 ff68 	bl	800a050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009184:	f000 bc97 	b.w	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918c:	f000 bc93 	b.w	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009190:	4b82      	ldr	r3, [pc, #520]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800919c:	d108      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800919e:	f107 0318 	add.w	r3, r7, #24
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fcac 	bl	8009b00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ac:	f000 bc83 	b.w	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091b4:	f000 bc7f 	b.w	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091b8:	4b78      	ldr	r3, [pc, #480]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091c4:	d108      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091c6:	f107 030c 	add.w	r3, r7, #12
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fdec 	bl	8009da8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091d4:	f000 bc6f 	b.w	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091dc:	f000 bc6b 	b.w	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091e0:	4b6e      	ldr	r3, [pc, #440]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091ea:	4b6c      	ldr	r3, [pc, #432]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0304 	and.w	r3, r3, #4
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d10c      	bne.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80091f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d109      	bne.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091fc:	4b67      	ldr	r3, [pc, #412]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	08db      	lsrs	r3, r3, #3
 8009202:	f003 0303 	and.w	r3, r3, #3
 8009206:	4a66      	ldr	r2, [pc, #408]	@ (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009208:	fa22 f303 	lsr.w	r3, r2, r3
 800920c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800920e:	e01f      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009210:	4b62      	ldr	r3, [pc, #392]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800921c:	d106      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800921e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009220:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009224:	d102      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009226:	4b5f      	ldr	r3, [pc, #380]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800922a:	e011      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800922c:	4b5b      	ldr	r3, [pc, #364]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009234:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009238:	d106      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800923a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009240:	d102      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009242:	4b59      	ldr	r3, [pc, #356]	@ (80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009246:	e003      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800924c:	f000 bc33 	b.w	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009250:	f000 bc31 	b.w	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009254:	4b55      	ldr	r3, [pc, #340]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009258:	f000 bc2d 	b.w	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009260:	f000 bc29 	b.w	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8009264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009268:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800926c:	430b      	orrs	r3, r1
 800926e:	f040 809f 	bne.w	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8009272:	4b4a      	ldr	r3, [pc, #296]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009276:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800927a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800927c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009282:	d04d      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800928a:	f200 8084 	bhi.w	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	2bc0      	cmp	r3, #192	@ 0xc0
 8009292:	d07d      	beq.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	2bc0      	cmp	r3, #192	@ 0xc0
 8009298:	d87d      	bhi.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	2b80      	cmp	r3, #128	@ 0x80
 800929e:	d02d      	beq.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80092a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a2:	2b80      	cmp	r3, #128	@ 0x80
 80092a4:	d877      	bhi.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80092a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	2b40      	cmp	r3, #64	@ 0x40
 80092b0:	d012      	beq.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80092b2:	e070      	b.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092b4:	4b39      	ldr	r3, [pc, #228]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092c0:	d107      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fec2 	bl	800a050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d0:	e3f1      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d6:	e3ee      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092d8:	4b30      	ldr	r3, [pc, #192]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092e4:	d107      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092e6:	f107 0318 	add.w	r3, r7, #24
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fc08 	bl	8009b00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f4:	e3df      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092fa:	e3dc      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092fc:	4b27      	ldr	r3, [pc, #156]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009308:	d107      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800930a:	f107 030c 	add.w	r3, r7, #12
 800930e:	4618      	mov	r0, r3
 8009310:	f000 fd4a 	bl	8009da8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009318:	e3cd      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800931e:	e3ca      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009320:	4b1e      	ldr	r3, [pc, #120]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009324:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009328:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800932a:	4b1c      	ldr	r3, [pc, #112]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0304 	and.w	r3, r3, #4
 8009332:	2b04      	cmp	r3, #4
 8009334:	d10c      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8009336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009338:	2b00      	cmp	r3, #0
 800933a:	d109      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800933c:	4b17      	ldr	r3, [pc, #92]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	08db      	lsrs	r3, r3, #3
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	4a16      	ldr	r2, [pc, #88]	@ (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009348:	fa22 f303 	lsr.w	r3, r2, r3
 800934c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800934e:	e01e      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009350:	4b12      	ldr	r3, [pc, #72]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800935c:	d106      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800935e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009364:	d102      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009366:	4b0f      	ldr	r3, [pc, #60]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800936a:	e010      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800936c:	4b0b      	ldr	r3, [pc, #44]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009378:	d106      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800937a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009380:	d102      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009382:	4b09      	ldr	r3, [pc, #36]	@ (80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009386:	e002      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009388:	2300      	movs	r3, #0
 800938a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800938c:	e393      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800938e:	e392      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009390:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009394:	e38f      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800939a:	e38c      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800939c:	58024400 	.word	0x58024400
 80093a0:	03d09000 	.word	0x03d09000
 80093a4:	003d0900 	.word	0x003d0900
 80093a8:	016e3600 	.word	0x016e3600
 80093ac:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80093b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80093b8:	430b      	orrs	r3, r1
 80093ba:	f040 809c 	bne.w	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80093be:	4b9e      	ldr	r3, [pc, #632]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093c2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80093c6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80093c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093ce:	d054      	beq.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80093d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093d6:	f200 808b 	bhi.w	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80093e0:	f000 8083 	beq.w	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80093e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80093ea:	f200 8081 	bhi.w	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80093ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093f4:	d02f      	beq.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80093f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093fc:	d878      	bhi.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8009404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800940a:	d012      	beq.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800940c:	e070      	b.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800940e:	4b8a      	ldr	r3, [pc, #552]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009416:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800941a:	d107      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800941c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009420:	4618      	mov	r0, r3
 8009422:	f000 fe15 	bl	800a050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800942a:	e344      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009430:	e341      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009432:	4b81      	ldr	r3, [pc, #516]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800943a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800943e:	d107      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009440:	f107 0318 	add.w	r3, r7, #24
 8009444:	4618      	mov	r0, r3
 8009446:	f000 fb5b 	bl	8009b00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800944e:	e332      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009454:	e32f      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009456:	4b78      	ldr	r3, [pc, #480]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800945e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009462:	d107      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009464:	f107 030c 	add.w	r3, r7, #12
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fc9d 	bl	8009da8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009472:	e320      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009478:	e31d      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800947a:	4b6f      	ldr	r3, [pc, #444]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800947c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800947e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009482:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009484:	4b6c      	ldr	r3, [pc, #432]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b04      	cmp	r3, #4
 800948e:	d10c      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009492:	2b00      	cmp	r3, #0
 8009494:	d109      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009496:	4b68      	ldr	r3, [pc, #416]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	08db      	lsrs	r3, r3, #3
 800949c:	f003 0303 	and.w	r3, r3, #3
 80094a0:	4a66      	ldr	r2, [pc, #408]	@ (800963c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80094a2:	fa22 f303 	lsr.w	r3, r2, r3
 80094a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094a8:	e01e      	b.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094aa:	4b63      	ldr	r3, [pc, #396]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094b6:	d106      	bne.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80094b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094be:	d102      	bne.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094c0:	4b5f      	ldr	r3, [pc, #380]	@ (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80094c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094c4:	e010      	b.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094c6:	4b5c      	ldr	r3, [pc, #368]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094d2:	d106      	bne.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80094d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094da:	d102      	bne.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094dc:	4b59      	ldr	r3, [pc, #356]	@ (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80094de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094e0:	e002      	b.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80094e6:	e2e6      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80094e8:	e2e5      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094ea:	4b57      	ldr	r3, [pc, #348]	@ (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80094ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ee:	e2e2      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f4:	e2df      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80094f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094fa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80094fe:	430b      	orrs	r3, r1
 8009500:	f040 80a7 	bne.w	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009504:	4b4c      	ldr	r3, [pc, #304]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009508:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800950c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800950e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009510:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009514:	d055      	beq.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8009516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009518:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800951c:	f200 8096 	bhi.w	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009522:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009526:	f000 8084 	beq.w	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800952a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009530:	f200 808c 	bhi.w	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800953a:	d030      	beq.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800953c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009542:	f200 8083 	bhi.w	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009548:	2b00      	cmp	r3, #0
 800954a:	d004      	beq.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800954c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009552:	d012      	beq.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8009554:	e07a      	b.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009556:	4b38      	ldr	r3, [pc, #224]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800955e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009562:	d107      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009568:	4618      	mov	r0, r3
 800956a:	f000 fd71 	bl	800a050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800956e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009572:	e2a0      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009574:	2300      	movs	r3, #0
 8009576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009578:	e29d      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800957a:	4b2f      	ldr	r3, [pc, #188]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009586:	d107      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009588:	f107 0318 	add.w	r3, r7, #24
 800958c:	4618      	mov	r0, r3
 800958e:	f000 fab7 	bl	8009b00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009596:	e28e      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800959c:	e28b      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800959e:	4b26      	ldr	r3, [pc, #152]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095aa:	d107      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095ac:	f107 030c 	add.w	r3, r7, #12
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fbf9 	bl	8009da8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ba:	e27c      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c0:	e279      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80095ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 0304 	and.w	r3, r3, #4
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	d10c      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80095d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d109      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095de:	4b16      	ldr	r3, [pc, #88]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	08db      	lsrs	r3, r3, #3
 80095e4:	f003 0303 	and.w	r3, r3, #3
 80095e8:	4a14      	ldr	r2, [pc, #80]	@ (800963c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80095ea:	fa22 f303 	lsr.w	r3, r2, r3
 80095ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095f0:	e01e      	b.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095f2:	4b11      	ldr	r3, [pc, #68]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095fe:	d106      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009606:	d102      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009608:	4b0d      	ldr	r3, [pc, #52]	@ (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800960a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800960c:	e010      	b.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800960e:	4b0a      	ldr	r3, [pc, #40]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009616:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800961a:	d106      	bne.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800961c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800961e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009622:	d102      	bne.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009624:	4b07      	ldr	r3, [pc, #28]	@ (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009628:	e002      	b.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800962a:	2300      	movs	r3, #0
 800962c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800962e:	e242      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009630:	e241      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009632:	4b05      	ldr	r3, [pc, #20]	@ (8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009636:	e23e      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009638:	58024400 	.word	0x58024400
 800963c:	03d09000 	.word	0x03d09000
 8009640:	003d0900 	.word	0x003d0900
 8009644:	016e3600 	.word	0x016e3600
 8009648:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009650:	e231      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009656:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800965a:	430b      	orrs	r3, r1
 800965c:	f040 8085 	bne.w	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009660:	4b9c      	ldr	r3, [pc, #624]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009664:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009668:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800966a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009670:	d06b      	beq.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009678:	d874      	bhi.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800967a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009680:	d056      	beq.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8009682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009684:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009688:	d86c      	bhi.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800968a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009690:	d03b      	beq.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8009692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009694:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009698:	d864      	bhi.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800969a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096a0:	d021      	beq.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80096a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096a8:	d85c      	bhi.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80096aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d004      	beq.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80096b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096b6:	d004      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80096b8:	e054      	b.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80096ba:	f7fe fb5f 	bl	8007d7c <HAL_RCC_GetPCLK1Freq>
 80096be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096c0:	e1f9      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096c2:	4b84      	ldr	r3, [pc, #528]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096ce:	d107      	bne.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096d0:	f107 0318 	add.w	r3, r7, #24
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 fa13 	bl	8009b00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096de:	e1ea      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e4:	e1e7      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096e6:	4b7b      	ldr	r3, [pc, #492]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096f2:	d107      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096f4:	f107 030c 	add.w	r3, r7, #12
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fb55 	bl	8009da8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009702:	e1d8      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009708:	e1d5      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800970a:	4b72      	ldr	r3, [pc, #456]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0304 	and.w	r3, r3, #4
 8009712:	2b04      	cmp	r3, #4
 8009714:	d109      	bne.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009716:	4b6f      	ldr	r3, [pc, #444]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	08db      	lsrs	r3, r3, #3
 800971c:	f003 0303 	and.w	r3, r3, #3
 8009720:	4a6d      	ldr	r2, [pc, #436]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009722:	fa22 f303 	lsr.w	r3, r2, r3
 8009726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009728:	e1c5      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800972e:	e1c2      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009730:	4b68      	ldr	r3, [pc, #416]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800973c:	d102      	bne.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800973e:	4b67      	ldr	r3, [pc, #412]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009742:	e1b8      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009748:	e1b5      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800974a:	4b62      	ldr	r3, [pc, #392]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009756:	d102      	bne.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8009758:	4b61      	ldr	r3, [pc, #388]	@ (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800975a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800975c:	e1ab      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009762:	e1a8      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009768:	e1a5      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800976a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800976e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009772:	430b      	orrs	r3, r1
 8009774:	d173      	bne.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009776:	4b57      	ldr	r3, [pc, #348]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800977a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800977e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009782:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009786:	d02f      	beq.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8009788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800978e:	d863      	bhi.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009792:	2b00      	cmp	r3, #0
 8009794:	d004      	beq.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800979c:	d012      	beq.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800979e:	e05b      	b.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097a0:	4b4c      	ldr	r3, [pc, #304]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097ac:	d107      	bne.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097ae:	f107 0318 	add.w	r3, r7, #24
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 f9a4 	bl	8009b00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097bc:	e17b      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c2:	e178      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097c4:	4b43      	ldr	r3, [pc, #268]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097d0:	d107      	bne.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097d2:	f107 030c 	add.w	r3, r7, #12
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fae6 	bl	8009da8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097e0:	e169      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e6:	e166      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097e8:	4b3a      	ldr	r3, [pc, #232]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097f0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097f2:	4b38      	ldr	r3, [pc, #224]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d10c      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80097fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009800:	2b00      	cmp	r3, #0
 8009802:	d109      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009804:	4b33      	ldr	r3, [pc, #204]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	08db      	lsrs	r3, r3, #3
 800980a:	f003 0303 	and.w	r3, r3, #3
 800980e:	4a32      	ldr	r2, [pc, #200]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009810:	fa22 f303 	lsr.w	r3, r2, r3
 8009814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009816:	e01e      	b.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009818:	4b2e      	ldr	r3, [pc, #184]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009824:	d106      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8009826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800982c:	d102      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800982e:	4b2b      	ldr	r3, [pc, #172]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009832:	e010      	b.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009834:	4b27      	ldr	r3, [pc, #156]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800983c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009840:	d106      	bne.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8009842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009848:	d102      	bne.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800984a:	4b25      	ldr	r3, [pc, #148]	@ (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800984c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800984e:	e002      	b.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009854:	e12f      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009856:	e12e      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800985c:	e12b      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800985e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009862:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009866:	430b      	orrs	r3, r1
 8009868:	d13c      	bne.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800986a:	4b1a      	ldr	r3, [pc, #104]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800986c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800986e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009872:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009876:	2b00      	cmp	r3, #0
 8009878:	d004      	beq.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800987a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009880:	d012      	beq.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009882:	e023      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009884:	4b13      	ldr	r3, [pc, #76]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800988c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009890:	d107      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fbda 	bl	800a050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800989c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a0:	e109      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a6:	e106      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098a8:	4b0a      	ldr	r3, [pc, #40]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098b4:	d107      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098b6:	f107 0318 	add.w	r3, r7, #24
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 f920 	bl	8009b00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098c4:	e0f7      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ca:	e0f4      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d0:	e0f1      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80098d2:	bf00      	nop
 80098d4:	58024400 	.word	0x58024400
 80098d8:	03d09000 	.word	0x03d09000
 80098dc:	003d0900 	.word	0x003d0900
 80098e0:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80098e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098e8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80098ec:	430b      	orrs	r3, r1
 80098ee:	f040 8091 	bne.w	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80098f2:	4b73      	ldr	r3, [pc, #460]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098f6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80098fa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fe:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009902:	f000 8081 	beq.w	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009908:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800990c:	d87f      	bhi.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800990e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009910:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009914:	d06b      	beq.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8009916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009918:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800991c:	d877      	bhi.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800991e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009924:	d056      	beq.n	80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800992c:	d86f      	bhi.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800992e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009930:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009934:	d03b      	beq.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009938:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800993c:	d867      	bhi.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009944:	d021      	beq.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800994c:	d85f      	bhi.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800994e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009950:	2b00      	cmp	r3, #0
 8009952:	d004      	beq.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800995a:	d004      	beq.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800995c:	e057      	b.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800995e:	f000 f8b9 	bl	8009ad4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009962:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009964:	e0a7      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009966:	4b56      	ldr	r3, [pc, #344]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800996e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009972:	d107      	bne.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009974:	f107 0318 	add.w	r3, r7, #24
 8009978:	4618      	mov	r0, r3
 800997a:	f000 f8c1 	bl	8009b00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009982:	e098      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009984:	2300      	movs	r3, #0
 8009986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009988:	e095      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800998a:	4b4d      	ldr	r3, [pc, #308]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009992:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009996:	d107      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009998:	f107 030c 	add.w	r3, r7, #12
 800999c:	4618      	mov	r0, r3
 800999e:	f000 fa03 	bl	8009da8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099a6:	e086      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ac:	e083      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80099ae:	4b44      	ldr	r3, [pc, #272]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0304 	and.w	r3, r3, #4
 80099b6:	2b04      	cmp	r3, #4
 80099b8:	d109      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099ba:	4b41      	ldr	r3, [pc, #260]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	08db      	lsrs	r3, r3, #3
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	4a3f      	ldr	r2, [pc, #252]	@ (8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80099c6:	fa22 f303 	lsr.w	r3, r2, r3
 80099ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099cc:	e073      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d2:	e070      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80099d4:	4b3a      	ldr	r3, [pc, #232]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099e0:	d102      	bne.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80099e2:	4b39      	ldr	r3, [pc, #228]	@ (8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80099e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099e6:	e066      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ec:	e063      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80099ee:	4b34      	ldr	r3, [pc, #208]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099fa:	d102      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80099fc:	4b33      	ldr	r3, [pc, #204]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80099fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a00:	e059      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a06:	e056      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a08:	4b31      	ldr	r3, [pc, #196]	@ (8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a0c:	e053      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a12:	e050      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a18:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009a1c:	430b      	orrs	r3, r1
 8009a1e:	d148      	bne.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009a20:	4b27      	ldr	r3, [pc, #156]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a30:	d02a      	beq.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a38:	d838      	bhi.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d004      	beq.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a46:	d00d      	beq.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009a48:	e030      	b.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a56:	d102      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009a58:	4b1c      	ldr	r3, [pc, #112]	@ (8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a5c:	e02b      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a62:	e028      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a64:	4b16      	ldr	r3, [pc, #88]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a70:	d107      	bne.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 faea 	bl	800a050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a80:	e019      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a86:	e016      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a88:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a94:	d107      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a96:	f107 0318 	add.w	r3, r7, #24
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 f830 	bl	8009b00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aa4:	e007      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aaa:	e004      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab0:	e001      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3740      	adds	r7, #64	@ 0x40
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	58024400 	.word	0x58024400
 8009ac4:	03d09000 	.word	0x03d09000
 8009ac8:	003d0900 	.word	0x003d0900
 8009acc:	016e3600 	.word	0x016e3600
 8009ad0:	00bb8000 	.word	0x00bb8000

08009ad4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009ad8:	f7fe f920 	bl	8007d1c <HAL_RCC_GetHCLKFreq>
 8009adc:	4602      	mov	r2, r0
 8009ade:	4b06      	ldr	r3, [pc, #24]	@ (8009af8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	091b      	lsrs	r3, r3, #4
 8009ae4:	f003 0307 	and.w	r3, r3, #7
 8009ae8:	4904      	ldr	r1, [pc, #16]	@ (8009afc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009aea:	5ccb      	ldrb	r3, [r1, r3]
 8009aec:	f003 031f 	and.w	r3, r3, #31
 8009af0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	58024400 	.word	0x58024400
 8009afc:	0800b078 	.word	0x0800b078

08009b00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b089      	sub	sp, #36	@ 0x24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b08:	4ba1      	ldr	r3, [pc, #644]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0c:	f003 0303 	and.w	r3, r3, #3
 8009b10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009b12:	4b9f      	ldr	r3, [pc, #636]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b16:	0b1b      	lsrs	r3, r3, #12
 8009b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b1e:	4b9c      	ldr	r3, [pc, #624]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b22:	091b      	lsrs	r3, r3, #4
 8009b24:	f003 0301 	and.w	r3, r3, #1
 8009b28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009b2a:	4b99      	ldr	r3, [pc, #612]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b2e:	08db      	lsrs	r3, r3, #3
 8009b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	fb02 f303 	mul.w	r3, r2, r3
 8009b3a:	ee07 3a90 	vmov	s15, r3
 8009b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 8111 	beq.w	8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	f000 8083 	beq.w	8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	f200 80a1 	bhi.w	8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d056      	beq.n	8009c18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009b6a:	e099      	b.n	8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b6c:	4b88      	ldr	r3, [pc, #544]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0320 	and.w	r3, r3, #32
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d02d      	beq.n	8009bd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b78:	4b85      	ldr	r3, [pc, #532]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	08db      	lsrs	r3, r3, #3
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	4a84      	ldr	r2, [pc, #528]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b84:	fa22 f303 	lsr.w	r3, r2, r3
 8009b88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	ee07 3a90 	vmov	s15, r3
 8009b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	ee07 3a90 	vmov	s15, r3
 8009b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009bd2:	e087      	b.n	8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be6:	4b6a      	ldr	r3, [pc, #424]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bfa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c16:	e065      	b.n	8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c2a:	4b59      	ldr	r3, [pc, #356]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c5a:	e043      	b.n	8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009da4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c6e:	4b48      	ldr	r3, [pc, #288]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c9e:	e021      	b.n	8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009caa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb2:	4b37      	ldr	r3, [pc, #220]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ce2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce8:	0a5b      	lsrs	r3, r3, #9
 8009cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d0a:	ee17 2a90 	vmov	r2, s15
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009d12:	4b1f      	ldr	r3, [pc, #124]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d16:	0c1b      	lsrs	r3, r3, #16
 8009d18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d1c:	ee07 3a90 	vmov	s15, r3
 8009d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d38:	ee17 2a90 	vmov	r2, s15
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009d40:	4b13      	ldr	r3, [pc, #76]	@ (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d44:	0e1b      	lsrs	r3, r3, #24
 8009d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d66:	ee17 2a90 	vmov	r2, s15
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d6e:	e008      	b.n	8009d82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	609a      	str	r2, [r3, #8]
}
 8009d82:	bf00      	nop
 8009d84:	3724      	adds	r7, #36	@ 0x24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	58024400 	.word	0x58024400
 8009d94:	03d09000 	.word	0x03d09000
 8009d98:	46000000 	.word	0x46000000
 8009d9c:	4c742400 	.word	0x4c742400
 8009da0:	4a742400 	.word	0x4a742400
 8009da4:	4bb71b00 	.word	0x4bb71b00

08009da8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b089      	sub	sp, #36	@ 0x24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009db0:	4ba1      	ldr	r3, [pc, #644]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db4:	f003 0303 	and.w	r3, r3, #3
 8009db8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009dba:	4b9f      	ldr	r3, [pc, #636]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dbe:	0d1b      	lsrs	r3, r3, #20
 8009dc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009dc6:	4b9c      	ldr	r3, [pc, #624]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dca:	0a1b      	lsrs	r3, r3, #8
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009dd2:	4b99      	ldr	r3, [pc, #612]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dd6:	08db      	lsrs	r3, r3, #3
 8009dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	fb02 f303 	mul.w	r3, r2, r3
 8009de2:	ee07 3a90 	vmov	s15, r3
 8009de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 8111 	beq.w	800a018 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	f000 8083 	beq.w	8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	f200 80a1 	bhi.w	8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d003      	beq.n	8009e14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d056      	beq.n	8009ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e12:	e099      	b.n	8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e14:	4b88      	ldr	r3, [pc, #544]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0320 	and.w	r3, r3, #32
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d02d      	beq.n	8009e7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e20:	4b85      	ldr	r3, [pc, #532]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	08db      	lsrs	r3, r3, #3
 8009e26:	f003 0303 	and.w	r3, r3, #3
 8009e2a:	4a84      	ldr	r2, [pc, #528]	@ (800a03c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	ee07 3a90 	vmov	s15, r3
 8009e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4a:	4b7b      	ldr	r3, [pc, #492]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e7a:	e087      	b.n	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a044 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e8e:	4b6a      	ldr	r3, [pc, #424]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ebe:	e065      	b.n	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ed2:	4b59      	ldr	r3, [pc, #356]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ee6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f02:	e043      	b.n	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a04c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f16:	4b48      	ldr	r3, [pc, #288]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f46:	e021      	b.n	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f5a:	4b37      	ldr	r3, [pc, #220]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009f8c:	4b2a      	ldr	r3, [pc, #168]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f90:	0a5b      	lsrs	r3, r3, #9
 8009f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f96:	ee07 3a90 	vmov	s15, r3
 8009f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fb2:	ee17 2a90 	vmov	r2, s15
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009fba:	4b1f      	ldr	r3, [pc, #124]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fbe:	0c1b      	lsrs	r3, r3, #16
 8009fc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fc4:	ee07 3a90 	vmov	s15, r3
 8009fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fe0:	ee17 2a90 	vmov	r2, s15
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009fe8:	4b13      	ldr	r3, [pc, #76]	@ (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fec:	0e1b      	lsrs	r3, r3, #24
 8009fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a002:	edd7 6a07 	vldr	s13, [r7, #28]
 800a006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a00a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a00e:	ee17 2a90 	vmov	r2, s15
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a016:	e008      	b.n	800a02a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	609a      	str	r2, [r3, #8]
}
 800a02a:	bf00      	nop
 800a02c:	3724      	adds	r7, #36	@ 0x24
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	58024400 	.word	0x58024400
 800a03c:	03d09000 	.word	0x03d09000
 800a040:	46000000 	.word	0x46000000
 800a044:	4c742400 	.word	0x4c742400
 800a048:	4a742400 	.word	0x4a742400
 800a04c:	4bb71b00 	.word	0x4bb71b00

0800a050 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a050:	b480      	push	{r7}
 800a052:	b089      	sub	sp, #36	@ 0x24
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a058:	4ba0      	ldr	r3, [pc, #640]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05c:	f003 0303 	and.w	r3, r3, #3
 800a060:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a062:	4b9e      	ldr	r3, [pc, #632]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a066:	091b      	lsrs	r3, r3, #4
 800a068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a06c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a06e:	4b9b      	ldr	r3, [pc, #620]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a078:	4b98      	ldr	r3, [pc, #608]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a07a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a07c:	08db      	lsrs	r3, r3, #3
 800a07e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	fb02 f303 	mul.w	r3, r2, r3
 800a088:	ee07 3a90 	vmov	s15, r3
 800a08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a090:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 8111 	beq.w	800a2be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	f000 8083 	beq.w	800a1aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	f200 80a1 	bhi.w	800a1ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d056      	beq.n	800a166 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a0b8:	e099      	b.n	800a1ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ba:	4b88      	ldr	r3, [pc, #544]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0320 	and.w	r3, r3, #32
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d02d      	beq.n	800a122 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0c6:	4b85      	ldr	r3, [pc, #532]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	08db      	lsrs	r3, r3, #3
 800a0cc:	f003 0303 	and.w	r3, r3, #3
 800a0d0:	4a83      	ldr	r2, [pc, #524]	@ (800a2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	ee07 3a90 	vmov	s15, r3
 800a0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0f0:	4b7a      	ldr	r3, [pc, #488]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f8:	ee07 3a90 	vmov	s15, r3
 800a0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a100:	ed97 6a03 	vldr	s12, [r7, #12]
 800a104:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a10c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a11c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a120:	e087      	b.n	800a232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	ee07 3a90 	vmov	s15, r3
 800a128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a12c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a134:	4b69      	ldr	r3, [pc, #420]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a13c:	ee07 3a90 	vmov	s15, r3
 800a140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a144:	ed97 6a03 	vldr	s12, [r7, #12]
 800a148:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a14c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a154:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a15c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a164:	e065      	b.n	800a232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	ee07 3a90 	vmov	s15, r3
 800a16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a170:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a2ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a178:	4b58      	ldr	r3, [pc, #352]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a17a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a180:	ee07 3a90 	vmov	s15, r3
 800a184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a188:	ed97 6a03 	vldr	s12, [r7, #12]
 800a18c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a198:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a19c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1a8:	e043      	b.n	800a232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	ee07 3a90 	vmov	s15, r3
 800a1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a1b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1bc:	4b47      	ldr	r3, [pc, #284]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1c4:	ee07 3a90 	vmov	s15, r3
 800a1c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1d0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1ec:	e021      	b.n	800a232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	ee07 3a90 	vmov	s15, r3
 800a1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a1fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a200:	4b36      	ldr	r3, [pc, #216]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a208:	ee07 3a90 	vmov	s15, r3
 800a20c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a210:	ed97 6a03 	vldr	s12, [r7, #12]
 800a214:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a21c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a22c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a230:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a232:	4b2a      	ldr	r3, [pc, #168]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a236:	0a5b      	lsrs	r3, r3, #9
 800a238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a23c:	ee07 3a90 	vmov	s15, r3
 800a240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a244:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a24c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a258:	ee17 2a90 	vmov	r2, s15
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a260:	4b1e      	ldr	r3, [pc, #120]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a264:	0c1b      	lsrs	r3, r3, #16
 800a266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a272:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a286:	ee17 2a90 	vmov	r2, s15
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a28e:	4b13      	ldr	r3, [pc, #76]	@ (800a2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a292:	0e1b      	lsrs	r3, r3, #24
 800a294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a298:	ee07 3a90 	vmov	s15, r3
 800a29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b4:	ee17 2a90 	vmov	r2, s15
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a2bc:	e008      	b.n	800a2d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	609a      	str	r2, [r3, #8]
}
 800a2d0:	bf00      	nop
 800a2d2:	3724      	adds	r7, #36	@ 0x24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	58024400 	.word	0x58024400
 800a2e0:	03d09000 	.word	0x03d09000
 800a2e4:	46000000 	.word	0x46000000
 800a2e8:	4c742400 	.word	0x4c742400
 800a2ec:	4a742400 	.word	0x4a742400
 800a2f0:	4bb71b00 	.word	0x4bb71b00

0800a2f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a302:	4b53      	ldr	r3, [pc, #332]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d101      	bne.n	800a312 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	e099      	b.n	800a446 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a312:	4b4f      	ldr	r3, [pc, #316]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a4e      	ldr	r2, [pc, #312]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a318:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a31e:	f7f7 fcfb 	bl	8001d18 <HAL_GetTick>
 800a322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a324:	e008      	b.n	800a338 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a326:	f7f7 fcf7 	bl	8001d18 <HAL_GetTick>
 800a32a:	4602      	mov	r2, r0
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	2b02      	cmp	r3, #2
 800a332:	d901      	bls.n	800a338 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a334:	2303      	movs	r3, #3
 800a336:	e086      	b.n	800a446 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a338:	4b45      	ldr	r3, [pc, #276]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1f0      	bne.n	800a326 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a344:	4b42      	ldr	r3, [pc, #264]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a348:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	031b      	lsls	r3, r3, #12
 800a352:	493f      	ldr	r1, [pc, #252]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a354:	4313      	orrs	r3, r2
 800a356:	628b      	str	r3, [r1, #40]	@ 0x28
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	3b01      	subs	r3, #1
 800a368:	025b      	lsls	r3, r3, #9
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	431a      	orrs	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	3b01      	subs	r3, #1
 800a374:	041b      	lsls	r3, r3, #16
 800a376:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a37a:	431a      	orrs	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	3b01      	subs	r3, #1
 800a382:	061b      	lsls	r3, r3, #24
 800a384:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a388:	4931      	ldr	r1, [pc, #196]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a38e:	4b30      	ldr	r3, [pc, #192]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a392:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	492d      	ldr	r1, [pc, #180]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a3a0:	4b2b      	ldr	r3, [pc, #172]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a4:	f023 0220 	bic.w	r2, r3, #32
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	4928      	ldr	r1, [pc, #160]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a3b2:	4b27      	ldr	r3, [pc, #156]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b6:	4a26      	ldr	r2, [pc, #152]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3b8:	f023 0310 	bic.w	r3, r3, #16
 800a3bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a3be:	4b24      	ldr	r3, [pc, #144]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3c2:	4b24      	ldr	r3, [pc, #144]	@ (800a454 <RCCEx_PLL2_Config+0x160>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	69d2      	ldr	r2, [r2, #28]
 800a3ca:	00d2      	lsls	r2, r2, #3
 800a3cc:	4920      	ldr	r1, [pc, #128]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a3d2:	4b1f      	ldr	r3, [pc, #124]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d6:	4a1e      	ldr	r2, [pc, #120]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3d8:	f043 0310 	orr.w	r3, r3, #16
 800a3dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d106      	bne.n	800a3f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a3e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e8:	4a19      	ldr	r2, [pc, #100]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a3ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a3f0:	e00f      	b.n	800a412 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d106      	bne.n	800a406 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a3f8:	4b15      	ldr	r3, [pc, #84]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3fc:	4a14      	ldr	r2, [pc, #80]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a3fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a402:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a404:	e005      	b.n	800a412 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a406:	4b12      	ldr	r3, [pc, #72]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40a:	4a11      	ldr	r2, [pc, #68]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a40c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a410:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a412:	4b0f      	ldr	r3, [pc, #60]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a0e      	ldr	r2, [pc, #56]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a418:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a41c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a41e:	f7f7 fc7b 	bl	8001d18 <HAL_GetTick>
 800a422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a424:	e008      	b.n	800a438 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a426:	f7f7 fc77 	bl	8001d18 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	2b02      	cmp	r3, #2
 800a432:	d901      	bls.n	800a438 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e006      	b.n	800a446 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a438:	4b05      	ldr	r3, [pc, #20]	@ (800a450 <RCCEx_PLL2_Config+0x15c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d0f0      	beq.n	800a426 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a444:	7bfb      	ldrb	r3, [r7, #15]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	58024400 	.word	0x58024400
 800a454:	ffff0007 	.word	0xffff0007

0800a458 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a466:	4b53      	ldr	r3, [pc, #332]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a46a:	f003 0303 	and.w	r3, r3, #3
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d101      	bne.n	800a476 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e099      	b.n	800a5aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a476:	4b4f      	ldr	r3, [pc, #316]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a4e      	ldr	r2, [pc, #312]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a47c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a482:	f7f7 fc49 	bl	8001d18 <HAL_GetTick>
 800a486:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a488:	e008      	b.n	800a49c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a48a:	f7f7 fc45 	bl	8001d18 <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	2b02      	cmp	r3, #2
 800a496:	d901      	bls.n	800a49c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a498:	2303      	movs	r3, #3
 800a49a:	e086      	b.n	800a5aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a49c:	4b45      	ldr	r3, [pc, #276]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1f0      	bne.n	800a48a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a4a8:	4b42      	ldr	r3, [pc, #264]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	051b      	lsls	r3, r3, #20
 800a4b6:	493f      	ldr	r1, [pc, #252]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	025b      	lsls	r3, r3, #9
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	431a      	orrs	r2, r3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	041b      	lsls	r3, r3, #16
 800a4da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a4de:	431a      	orrs	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	061b      	lsls	r3, r3, #24
 800a4e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a4ec:	4931      	ldr	r1, [pc, #196]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a4f2:	4b30      	ldr	r3, [pc, #192]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	492d      	ldr	r1, [pc, #180]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a500:	4313      	orrs	r3, r2
 800a502:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a504:	4b2b      	ldr	r3, [pc, #172]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a508:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	4928      	ldr	r1, [pc, #160]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a512:	4313      	orrs	r3, r2
 800a514:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a516:	4b27      	ldr	r3, [pc, #156]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a51a:	4a26      	ldr	r2, [pc, #152]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a51c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a520:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a522:	4b24      	ldr	r3, [pc, #144]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a526:	4b24      	ldr	r3, [pc, #144]	@ (800a5b8 <RCCEx_PLL3_Config+0x160>)
 800a528:	4013      	ands	r3, r2
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	69d2      	ldr	r2, [r2, #28]
 800a52e:	00d2      	lsls	r2, r2, #3
 800a530:	4920      	ldr	r1, [pc, #128]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a532:	4313      	orrs	r3, r2
 800a534:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a536:	4b1f      	ldr	r3, [pc, #124]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53a:	4a1e      	ldr	r2, [pc, #120]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a53c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a540:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d106      	bne.n	800a556 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a548:	4b1a      	ldr	r3, [pc, #104]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54c:	4a19      	ldr	r2, [pc, #100]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a54e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a552:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a554:	e00f      	b.n	800a576 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d106      	bne.n	800a56a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a55c:	4b15      	ldr	r3, [pc, #84]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a560:	4a14      	ldr	r2, [pc, #80]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a562:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a566:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a568:	e005      	b.n	800a576 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a56a:	4b12      	ldr	r3, [pc, #72]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a56e:	4a11      	ldr	r2, [pc, #68]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a570:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a574:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a576:	4b0f      	ldr	r3, [pc, #60]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a0e      	ldr	r2, [pc, #56]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a57c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a582:	f7f7 fbc9 	bl	8001d18 <HAL_GetTick>
 800a586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a588:	e008      	b.n	800a59c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a58a:	f7f7 fbc5 	bl	8001d18 <HAL_GetTick>
 800a58e:	4602      	mov	r2, r0
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	2b02      	cmp	r3, #2
 800a596:	d901      	bls.n	800a59c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a598:	2303      	movs	r3, #3
 800a59a:	e006      	b.n	800a5aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a59c:	4b05      	ldr	r3, [pc, #20]	@ (800a5b4 <RCCEx_PLL3_Config+0x15c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d0f0      	beq.n	800a58a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	58024400 	.word	0x58024400
 800a5b8:	ffff0007 	.word	0xffff0007

0800a5bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e049      	b.n	800a662 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7f7 f862 	bl	80016ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	f000 fae0 	bl	800abc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d001      	beq.n	800a684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e054      	b.n	800a72e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2202      	movs	r2, #2
 800a688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68da      	ldr	r2, [r3, #12]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f042 0201 	orr.w	r2, r2, #1
 800a69a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a26      	ldr	r2, [pc, #152]	@ (800a73c <HAL_TIM_Base_Start_IT+0xd0>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d022      	beq.n	800a6ec <HAL_TIM_Base_Start_IT+0x80>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6ae:	d01d      	beq.n	800a6ec <HAL_TIM_Base_Start_IT+0x80>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a22      	ldr	r2, [pc, #136]	@ (800a740 <HAL_TIM_Base_Start_IT+0xd4>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d018      	beq.n	800a6ec <HAL_TIM_Base_Start_IT+0x80>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a21      	ldr	r2, [pc, #132]	@ (800a744 <HAL_TIM_Base_Start_IT+0xd8>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d013      	beq.n	800a6ec <HAL_TIM_Base_Start_IT+0x80>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a1f      	ldr	r2, [pc, #124]	@ (800a748 <HAL_TIM_Base_Start_IT+0xdc>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d00e      	beq.n	800a6ec <HAL_TIM_Base_Start_IT+0x80>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a1e      	ldr	r2, [pc, #120]	@ (800a74c <HAL_TIM_Base_Start_IT+0xe0>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d009      	beq.n	800a6ec <HAL_TIM_Base_Start_IT+0x80>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a1c      	ldr	r2, [pc, #112]	@ (800a750 <HAL_TIM_Base_Start_IT+0xe4>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d004      	beq.n	800a6ec <HAL_TIM_Base_Start_IT+0x80>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a1b      	ldr	r2, [pc, #108]	@ (800a754 <HAL_TIM_Base_Start_IT+0xe8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d115      	bne.n	800a718 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	4b19      	ldr	r3, [pc, #100]	@ (800a758 <HAL_TIM_Base_Start_IT+0xec>)
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b06      	cmp	r3, #6
 800a6fc:	d015      	beq.n	800a72a <HAL_TIM_Base_Start_IT+0xbe>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a704:	d011      	beq.n	800a72a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f042 0201 	orr.w	r2, r2, #1
 800a714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a716:	e008      	b.n	800a72a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f042 0201 	orr.w	r2, r2, #1
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	e000      	b.n	800a72c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a72a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3714      	adds	r7, #20
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	40010000 	.word	0x40010000
 800a740:	40000400 	.word	0x40000400
 800a744:	40000800 	.word	0x40000800
 800a748:	40000c00 	.word	0x40000c00
 800a74c:	40010400 	.word	0x40010400
 800a750:	40001800 	.word	0x40001800
 800a754:	40014000 	.word	0x40014000
 800a758:	00010007 	.word	0x00010007

0800a75c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d020      	beq.n	800a7c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f003 0302 	and.w	r3, r3, #2
 800a784:	2b00      	cmp	r3, #0
 800a786:	d01b      	beq.n	800a7c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f06f 0202 	mvn.w	r2, #2
 800a790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	f003 0303 	and.w	r3, r3, #3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d003      	beq.n	800a7ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f9ec 	bl	800ab84 <HAL_TIM_IC_CaptureCallback>
 800a7ac:	e005      	b.n	800a7ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f9de 	bl	800ab70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f9ef 	bl	800ab98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	f003 0304 	and.w	r3, r3, #4
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d020      	beq.n	800a80c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f003 0304 	and.w	r3, r3, #4
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d01b      	beq.n	800a80c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f06f 0204 	mvn.w	r2, #4
 800a7dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f9c6 	bl	800ab84 <HAL_TIM_IC_CaptureCallback>
 800a7f8:	e005      	b.n	800a806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f9b8 	bl	800ab70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f9c9 	bl	800ab98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	f003 0308 	and.w	r3, r3, #8
 800a812:	2b00      	cmp	r3, #0
 800a814:	d020      	beq.n	800a858 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f003 0308 	and.w	r3, r3, #8
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01b      	beq.n	800a858 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f06f 0208 	mvn.w	r2, #8
 800a828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2204      	movs	r2, #4
 800a82e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	69db      	ldr	r3, [r3, #28]
 800a836:	f003 0303 	and.w	r3, r3, #3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f9a0 	bl	800ab84 <HAL_TIM_IC_CaptureCallback>
 800a844:	e005      	b.n	800a852 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f992 	bl	800ab70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f9a3 	bl	800ab98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f003 0310 	and.w	r3, r3, #16
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d020      	beq.n	800a8a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f003 0310 	and.w	r3, r3, #16
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01b      	beq.n	800a8a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f06f 0210 	mvn.w	r2, #16
 800a874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2208      	movs	r2, #8
 800a87a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f97a 	bl	800ab84 <HAL_TIM_IC_CaptureCallback>
 800a890:	e005      	b.n	800a89e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f96c 	bl	800ab70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f97d 	bl	800ab98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00c      	beq.n	800a8c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d007      	beq.n	800a8c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f06f 0201 	mvn.w	r2, #1
 800a8c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f94a 	bl	800ab5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d104      	bne.n	800a8dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00c      	beq.n	800a8f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d007      	beq.n	800a8f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a8ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 fb41 	bl	800af78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00c      	beq.n	800a91a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a906:	2b00      	cmp	r3, #0
 800a908:	d007      	beq.n	800a91a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fb39 	bl	800af8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00c      	beq.n	800a93e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d007      	beq.n	800a93e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f937 	bl	800abac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f003 0320 	and.w	r3, r3, #32
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00c      	beq.n	800a962 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f003 0320 	and.w	r3, r3, #32
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d007      	beq.n	800a962 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f06f 0220 	mvn.w	r2, #32
 800a95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fb01 	bl	800af64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
	...

0800a96c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a980:	2b01      	cmp	r3, #1
 800a982:	d101      	bne.n	800a988 <HAL_TIM_ConfigClockSource+0x1c>
 800a984:	2302      	movs	r3, #2
 800a986:	e0dc      	b.n	800ab42 <HAL_TIM_ConfigClockSource+0x1d6>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	4b6a      	ldr	r3, [pc, #424]	@ (800ab4c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a64      	ldr	r2, [pc, #400]	@ (800ab50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	f000 80a9 	beq.w	800ab16 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9c4:	4a62      	ldr	r2, [pc, #392]	@ (800ab50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	f200 80ae 	bhi.w	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9cc:	4a61      	ldr	r2, [pc, #388]	@ (800ab54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	f000 80a1 	beq.w	800ab16 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9d4:	4a5f      	ldr	r2, [pc, #380]	@ (800ab54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	f200 80a6 	bhi.w	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9dc:	4a5e      	ldr	r2, [pc, #376]	@ (800ab58 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	f000 8099 	beq.w	800ab16 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9e4:	4a5c      	ldr	r2, [pc, #368]	@ (800ab58 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	f200 809e 	bhi.w	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9f0:	f000 8091 	beq.w	800ab16 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9f8:	f200 8096 	bhi.w	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa00:	f000 8089 	beq.w	800ab16 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa08:	f200 808e 	bhi.w	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa10:	d03e      	beq.n	800aa90 <HAL_TIM_ConfigClockSource+0x124>
 800aa12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa16:	f200 8087 	bhi.w	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa1e:	f000 8086 	beq.w	800ab2e <HAL_TIM_ConfigClockSource+0x1c2>
 800aa22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa26:	d87f      	bhi.n	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa28:	2b70      	cmp	r3, #112	@ 0x70
 800aa2a:	d01a      	beq.n	800aa62 <HAL_TIM_ConfigClockSource+0xf6>
 800aa2c:	2b70      	cmp	r3, #112	@ 0x70
 800aa2e:	d87b      	bhi.n	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa30:	2b60      	cmp	r3, #96	@ 0x60
 800aa32:	d050      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x16a>
 800aa34:	2b60      	cmp	r3, #96	@ 0x60
 800aa36:	d877      	bhi.n	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa38:	2b50      	cmp	r3, #80	@ 0x50
 800aa3a:	d03c      	beq.n	800aab6 <HAL_TIM_ConfigClockSource+0x14a>
 800aa3c:	2b50      	cmp	r3, #80	@ 0x50
 800aa3e:	d873      	bhi.n	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa40:	2b40      	cmp	r3, #64	@ 0x40
 800aa42:	d058      	beq.n	800aaf6 <HAL_TIM_ConfigClockSource+0x18a>
 800aa44:	2b40      	cmp	r3, #64	@ 0x40
 800aa46:	d86f      	bhi.n	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa48:	2b30      	cmp	r3, #48	@ 0x30
 800aa4a:	d064      	beq.n	800ab16 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa4c:	2b30      	cmp	r3, #48	@ 0x30
 800aa4e:	d86b      	bhi.n	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa50:	2b20      	cmp	r3, #32
 800aa52:	d060      	beq.n	800ab16 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa54:	2b20      	cmp	r3, #32
 800aa56:	d867      	bhi.n	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d05c      	beq.n	800ab16 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa5c:	2b10      	cmp	r3, #16
 800aa5e:	d05a      	beq.n	800ab16 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa60:	e062      	b.n	800ab28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa72:	f000 f9c9 	bl	800ae08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	609a      	str	r2, [r3, #8]
      break;
 800aa8e:	e04f      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aaa0:	f000 f9b2 	bl	800ae08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	689a      	ldr	r2, [r3, #8]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aab2:	609a      	str	r2, [r3, #8]
      break;
 800aab4:	e03c      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aac2:	461a      	mov	r2, r3
 800aac4:	f000 f922 	bl	800ad0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2150      	movs	r1, #80	@ 0x50
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 f97c 	bl	800adcc <TIM_ITRx_SetConfig>
      break;
 800aad4:	e02c      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aae2:	461a      	mov	r2, r3
 800aae4:	f000 f941 	bl	800ad6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2160      	movs	r1, #96	@ 0x60
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 f96c 	bl	800adcc <TIM_ITRx_SetConfig>
      break;
 800aaf4:	e01c      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab02:	461a      	mov	r2, r3
 800ab04:	f000 f902 	bl	800ad0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2140      	movs	r1, #64	@ 0x40
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 f95c 	bl	800adcc <TIM_ITRx_SetConfig>
      break;
 800ab14:	e00c      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	4610      	mov	r0, r2
 800ab22:	f000 f953 	bl	800adcc <TIM_ITRx_SetConfig>
      break;
 800ab26:	e003      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab2c:	e000      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ab2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	ffceff88 	.word	0xffceff88
 800ab50:	00100040 	.word	0x00100040
 800ab54:	00100030 	.word	0x00100030
 800ab58:	00100020 	.word	0x00100020

0800ab5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a46      	ldr	r2, [pc, #280]	@ (800acec <TIM_Base_SetConfig+0x12c>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d013      	beq.n	800ac00 <TIM_Base_SetConfig+0x40>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abde:	d00f      	beq.n	800ac00 <TIM_Base_SetConfig+0x40>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a43      	ldr	r2, [pc, #268]	@ (800acf0 <TIM_Base_SetConfig+0x130>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d00b      	beq.n	800ac00 <TIM_Base_SetConfig+0x40>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a42      	ldr	r2, [pc, #264]	@ (800acf4 <TIM_Base_SetConfig+0x134>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d007      	beq.n	800ac00 <TIM_Base_SetConfig+0x40>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a41      	ldr	r2, [pc, #260]	@ (800acf8 <TIM_Base_SetConfig+0x138>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d003      	beq.n	800ac00 <TIM_Base_SetConfig+0x40>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a40      	ldr	r2, [pc, #256]	@ (800acfc <TIM_Base_SetConfig+0x13c>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d108      	bne.n	800ac12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a35      	ldr	r2, [pc, #212]	@ (800acec <TIM_Base_SetConfig+0x12c>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d01f      	beq.n	800ac5a <TIM_Base_SetConfig+0x9a>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac20:	d01b      	beq.n	800ac5a <TIM_Base_SetConfig+0x9a>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a32      	ldr	r2, [pc, #200]	@ (800acf0 <TIM_Base_SetConfig+0x130>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d017      	beq.n	800ac5a <TIM_Base_SetConfig+0x9a>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a31      	ldr	r2, [pc, #196]	@ (800acf4 <TIM_Base_SetConfig+0x134>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d013      	beq.n	800ac5a <TIM_Base_SetConfig+0x9a>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a30      	ldr	r2, [pc, #192]	@ (800acf8 <TIM_Base_SetConfig+0x138>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d00f      	beq.n	800ac5a <TIM_Base_SetConfig+0x9a>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a2f      	ldr	r2, [pc, #188]	@ (800acfc <TIM_Base_SetConfig+0x13c>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d00b      	beq.n	800ac5a <TIM_Base_SetConfig+0x9a>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a2e      	ldr	r2, [pc, #184]	@ (800ad00 <TIM_Base_SetConfig+0x140>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d007      	beq.n	800ac5a <TIM_Base_SetConfig+0x9a>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a2d      	ldr	r2, [pc, #180]	@ (800ad04 <TIM_Base_SetConfig+0x144>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d003      	beq.n	800ac5a <TIM_Base_SetConfig+0x9a>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a2c      	ldr	r2, [pc, #176]	@ (800ad08 <TIM_Base_SetConfig+0x148>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d108      	bne.n	800ac6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	689a      	ldr	r2, [r3, #8]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a16      	ldr	r2, [pc, #88]	@ (800acec <TIM_Base_SetConfig+0x12c>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d00f      	beq.n	800acb8 <TIM_Base_SetConfig+0xf8>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a18      	ldr	r2, [pc, #96]	@ (800acfc <TIM_Base_SetConfig+0x13c>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d00b      	beq.n	800acb8 <TIM_Base_SetConfig+0xf8>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a17      	ldr	r2, [pc, #92]	@ (800ad00 <TIM_Base_SetConfig+0x140>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d007      	beq.n	800acb8 <TIM_Base_SetConfig+0xf8>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a16      	ldr	r2, [pc, #88]	@ (800ad04 <TIM_Base_SetConfig+0x144>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d003      	beq.n	800acb8 <TIM_Base_SetConfig+0xf8>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a15      	ldr	r2, [pc, #84]	@ (800ad08 <TIM_Base_SetConfig+0x148>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d103      	bne.n	800acc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	691a      	ldr	r2, [r3, #16]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d105      	bne.n	800acde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	f023 0201 	bic.w	r2, r3, #1
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	611a      	str	r2, [r3, #16]
  }
}
 800acde:	bf00      	nop
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	40010000 	.word	0x40010000
 800acf0:	40000400 	.word	0x40000400
 800acf4:	40000800 	.word	0x40000800
 800acf8:	40000c00 	.word	0x40000c00
 800acfc:	40010400 	.word	0x40010400
 800ad00:	40014000 	.word	0x40014000
 800ad04:	40014400 	.word	0x40014400
 800ad08:	40014800 	.word	0x40014800

0800ad0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b087      	sub	sp, #28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6a1b      	ldr	r3, [r3, #32]
 800ad1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	f023 0201 	bic.w	r2, r3, #1
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	699b      	ldr	r3, [r3, #24]
 800ad2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	011b      	lsls	r3, r3, #4
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f023 030a 	bic.w	r3, r3, #10
 800ad48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	621a      	str	r2, [r3, #32]
}
 800ad5e:	bf00      	nop
 800ad60:	371c      	adds	r7, #28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b087      	sub	sp, #28
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	60f8      	str	r0, [r7, #12]
 800ad72:	60b9      	str	r1, [r7, #8]
 800ad74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6a1b      	ldr	r3, [r3, #32]
 800ad80:	f023 0210 	bic.w	r2, r3, #16
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	031b      	lsls	r3, r3, #12
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ada6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	011b      	lsls	r3, r3, #4
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	4313      	orrs	r3, r2
 800adb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	621a      	str	r2, [r3, #32]
}
 800adbe:	bf00      	nop
 800adc0:	371c      	adds	r7, #28
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
	...

0800adcc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	4b09      	ldr	r3, [pc, #36]	@ (800ae04 <TIM_ITRx_SetConfig+0x38>)
 800ade0:	4013      	ands	r3, r2
 800ade2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ade4:	683a      	ldr	r2, [r7, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	4313      	orrs	r3, r2
 800adea:	f043 0307 	orr.w	r3, r3, #7
 800adee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	609a      	str	r2, [r3, #8]
}
 800adf6:	bf00      	nop
 800adf8:	3714      	adds	r7, #20
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	ffcfff8f 	.word	0xffcfff8f

0800ae08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	021a      	lsls	r2, r3, #8
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	609a      	str	r2, [r3, #8]
}
 800ae3c:	bf00      	nop
 800ae3e:	371c      	adds	r7, #28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d101      	bne.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	e06d      	b.n	800af3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a30      	ldr	r2, [pc, #192]	@ (800af48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d004      	beq.n	800ae94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a2f      	ldr	r2, [pc, #188]	@ (800af4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d108      	bne.n	800aea6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ae9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a20      	ldr	r2, [pc, #128]	@ (800af48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d022      	beq.n	800af10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aed2:	d01d      	beq.n	800af10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a1d      	ldr	r2, [pc, #116]	@ (800af50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d018      	beq.n	800af10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a1c      	ldr	r2, [pc, #112]	@ (800af54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d013      	beq.n	800af10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a1a      	ldr	r2, [pc, #104]	@ (800af58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d00e      	beq.n	800af10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a15      	ldr	r2, [pc, #84]	@ (800af4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d009      	beq.n	800af10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a16      	ldr	r2, [pc, #88]	@ (800af5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d004      	beq.n	800af10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a15      	ldr	r2, [pc, #84]	@ (800af60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d10c      	bne.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	4313      	orrs	r3, r2
 800af20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	40010000 	.word	0x40010000
 800af4c:	40010400 	.word	0x40010400
 800af50:	40000400 	.word	0x40000400
 800af54:	40000800 	.word	0x40000800
 800af58:	40000c00 	.word	0x40000c00
 800af5c:	40001800 	.word	0x40001800
 800af60:	40014000 	.word	0x40014000

0800af64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <memset>:
 800afa0:	4402      	add	r2, r0
 800afa2:	4603      	mov	r3, r0
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d100      	bne.n	800afaa <memset+0xa>
 800afa8:	4770      	bx	lr
 800afaa:	f803 1b01 	strb.w	r1, [r3], #1
 800afae:	e7f9      	b.n	800afa4 <memset+0x4>

0800afb0 <__libc_init_array>:
 800afb0:	b570      	push	{r4, r5, r6, lr}
 800afb2:	4d0d      	ldr	r5, [pc, #52]	@ (800afe8 <__libc_init_array+0x38>)
 800afb4:	4c0d      	ldr	r4, [pc, #52]	@ (800afec <__libc_init_array+0x3c>)
 800afb6:	1b64      	subs	r4, r4, r5
 800afb8:	10a4      	asrs	r4, r4, #2
 800afba:	2600      	movs	r6, #0
 800afbc:	42a6      	cmp	r6, r4
 800afbe:	d109      	bne.n	800afd4 <__libc_init_array+0x24>
 800afc0:	4d0b      	ldr	r5, [pc, #44]	@ (800aff0 <__libc_init_array+0x40>)
 800afc2:	4c0c      	ldr	r4, [pc, #48]	@ (800aff4 <__libc_init_array+0x44>)
 800afc4:	f000 f826 	bl	800b014 <_init>
 800afc8:	1b64      	subs	r4, r4, r5
 800afca:	10a4      	asrs	r4, r4, #2
 800afcc:	2600      	movs	r6, #0
 800afce:	42a6      	cmp	r6, r4
 800afd0:	d105      	bne.n	800afde <__libc_init_array+0x2e>
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd8:	4798      	blx	r3
 800afda:	3601      	adds	r6, #1
 800afdc:	e7ee      	b.n	800afbc <__libc_init_array+0xc>
 800afde:	f855 3b04 	ldr.w	r3, [r5], #4
 800afe2:	4798      	blx	r3
 800afe4:	3601      	adds	r6, #1
 800afe6:	e7f2      	b.n	800afce <__libc_init_array+0x1e>
 800afe8:	0800b0a0 	.word	0x0800b0a0
 800afec:	0800b0a0 	.word	0x0800b0a0
 800aff0:	0800b0a0 	.word	0x0800b0a0
 800aff4:	0800b0a4 	.word	0x0800b0a4

0800aff8 <memcpy>:
 800aff8:	440a      	add	r2, r1
 800affa:	4291      	cmp	r1, r2
 800affc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b000:	d100      	bne.n	800b004 <memcpy+0xc>
 800b002:	4770      	bx	lr
 800b004:	b510      	push	{r4, lr}
 800b006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b00a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b00e:	4291      	cmp	r1, r2
 800b010:	d1f9      	bne.n	800b006 <memcpy+0xe>
 800b012:	bd10      	pop	{r4, pc}

0800b014 <_init>:
 800b014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b016:	bf00      	nop
 800b018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01a:	bc08      	pop	{r3}
 800b01c:	469e      	mov	lr, r3
 800b01e:	4770      	bx	lr

0800b020 <_fini>:
 800b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b022:	bf00      	nop
 800b024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b026:	bc08      	pop	{r3}
 800b028:	469e      	mov	lr, r3
 800b02a:	4770      	bx	lr

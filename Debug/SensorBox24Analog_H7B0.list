
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac34  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800aee0  0800aee0  0000bee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800afc4  0800afc4  0000bfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800afc8  0800afc8  0000bfc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800afcc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000092c  24000010  0800afdc  0000c010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400093c  0800afdc  0000c93c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c852  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000309f  00000000  00000000  00028890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018d0  00000000  00000000  0002b92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000135b  00000000  00000000  0002d1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003408e  00000000  00000000  0002e55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f6b1  00000000  00000000  000625e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a83d  00000000  00000000  00081c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001dc4d6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006d54  00000000  00000000  001dc51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800aec8 	.word	0x0800aec8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800aec8 	.word	0x0800aec8

080002ec <Config_Setup>:
#include "config.h"

#define ID 1


void Config_Setup(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
#if ID == 1
    Config_1();
 80002f0:	f000 f802 	bl	80002f8 <Config_1>
#elif ID == 2
    Config_2();
#elif ID == 3
    Config_3();
#endif
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Config_1>:

void Config_1(void) {
 80002f8:	b490      	push	{r4, r7}
 80002fa:	b09e      	sub	sp, #120	@ 0x78
 80002fc:	af00      	add	r7, sp, #0

	//initialize the sensors
	for (int i = 0; i < 16; i++) {
 80002fe:	2300      	movs	r3, #0
 8000300:	677b      	str	r3, [r7, #116]	@ 0x74
 8000302:	e026      	b.n	8000352 <Config_1+0x5a>
		sensors[i].transfer_function = TF_3V3;
 8000304:	4a52      	ldr	r2, [pc, #328]	@ (8000450 <Config_1+0x158>)
 8000306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000308:	011b      	lsls	r3, r3, #4
 800030a:	4413      	add	r3, r2
 800030c:	4a51      	ldr	r2, [pc, #324]	@ (8000454 <Config_1+0x15c>)
 800030e:	601a      	str	r2, [r3, #0]
		sensors[i].CAN_ID = 0;
 8000310:	4a4f      	ldr	r2, [pc, #316]	@ (8000450 <Config_1+0x158>)
 8000312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000314:	011b      	lsls	r3, r3, #4
 8000316:	4413      	add	r3, r2
 8000318:	3304      	adds	r3, #4
 800031a:	2200      	movs	r2, #0
 800031c:	801a      	strh	r2, [r3, #0]
		sensors[i].CAN_interval = 100;
 800031e:	4a4c      	ldr	r2, [pc, #304]	@ (8000450 <Config_1+0x158>)
 8000320:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000322:	011b      	lsls	r3, r3, #4
 8000324:	4413      	add	r3, r2
 8000326:	3306      	adds	r3, #6
 8000328:	2264      	movs	r2, #100	@ 0x64
 800032a:	801a      	strh	r2, [r3, #0]
		sensors[i].averages = 0;
 800032c:	4a48      	ldr	r2, [pc, #288]	@ (8000450 <Config_1+0x158>)
 800032e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	4413      	add	r3, r2
 8000334:	3308      	adds	r3, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
		sensors[i].pin = i;
 800033a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800033c:	b2d9      	uxtb	r1, r3
 800033e:	4a44      	ldr	r2, [pc, #272]	@ (8000450 <Config_1+0x158>)
 8000340:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000342:	011b      	lsls	r3, r3, #4
 8000344:	4413      	add	r3, r2
 8000346:	330c      	adds	r3, #12
 8000348:	460a      	mov	r2, r1
 800034a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 800034c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800034e:	3301      	adds	r3, #1
 8000350:	677b      	str	r3, [r7, #116]	@ 0x74
 8000352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000354:	2b0f      	cmp	r3, #15
 8000356:	ddd5      	ble.n	8000304 <Config_1+0xc>
	}

	// Sensor definitions
	Sensor APPS1 = {TF_APPS, 0x21, 100, 0, V24_in1};
 8000358:	4b3f      	ldr	r3, [pc, #252]	@ (8000458 <Config_1+0x160>)
 800035a:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 800035e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor APPS2 = {TF_APPS, 0x22, 100, 0, V5_in0};
 8000364:	4b3d      	ldr	r3, [pc, #244]	@ (800045c <Config_1+0x164>)
 8000366:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800036a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800036c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor BPPS = {TF_BPPS, 0x23, 100, 0, V5_in2};
 8000370:	4b3b      	ldr	r3, [pc, #236]	@ (8000460 <Config_1+0x168>)
 8000372:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor ANGLE_GEAR = {TF_ANGLE_GEAR, 0x24, 100, 0, V24_in0};
 800037c:	4b39      	ldr	r3, [pc, #228]	@ (8000464 <Config_1+0x16c>)
 800037e:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor BTN1 = {TF_BTN, 0x25, 100, 0, V5_in3};
 8000388:	4b37      	ldr	r3, [pc, #220]	@ (8000468 <Config_1+0x170>)
 800038a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800038e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor BTN2 = {TF_BTN, 0x26, 100, 0, V5_in4};
 8000394:	4b35      	ldr	r3, [pc, #212]	@ (800046c <Config_1+0x174>)
 8000396:	f107 0414 	add.w	r4, r7, #20
 800039a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800039c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor BTN3 = {TF_BTN, 0x27, 100, 0, V5_in5};
 80003a0:	4b33      	ldr	r3, [pc, #204]	@ (8000470 <Config_1+0x178>)
 80003a2:	1d3c      	adds	r4, r7, #4
 80003a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    sensors[APPS1.pin] = APPS1;
 80003aa:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80003ae:	4a28      	ldr	r2, [pc, #160]	@ (8000450 <Config_1+0x158>)
 80003b0:	011b      	lsls	r3, r3, #4
 80003b2:	4413      	add	r3, r2
 80003b4:	461c      	mov	r4, r3
 80003b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80003ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[APPS2.pin] = APPS2;
 80003c0:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80003c4:	4a22      	ldr	r2, [pc, #136]	@ (8000450 <Config_1+0x158>)
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	4413      	add	r3, r2
 80003ca:	461c      	mov	r4, r3
 80003cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[BPPS.pin] = BPPS;
 80003d6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80003da:	4a1d      	ldr	r2, [pc, #116]	@ (8000450 <Config_1+0x158>)
 80003dc:	011b      	lsls	r3, r3, #4
 80003de:	4413      	add	r3, r2
 80003e0:	461c      	mov	r4, r3
 80003e2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80003e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[ANGLE_GEAR.pin] = ANGLE_GEAR;
 80003ec:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80003f0:	4a17      	ldr	r2, [pc, #92]	@ (8000450 <Config_1+0x158>)
 80003f2:	011b      	lsls	r3, r3, #4
 80003f4:	4413      	add	r3, r2
 80003f6:	461c      	mov	r4, r3
 80003f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80003fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN1.pin] = BTN1;
 8000402:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000406:	4a12      	ldr	r2, [pc, #72]	@ (8000450 <Config_1+0x158>)
 8000408:	011b      	lsls	r3, r3, #4
 800040a:	4413      	add	r3, r2
 800040c:	461c      	mov	r4, r3
 800040e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN2.pin] = BTN2;
 8000418:	f897 3020 	ldrb.w	r3, [r7, #32]
 800041c:	4a0c      	ldr	r2, [pc, #48]	@ (8000450 <Config_1+0x158>)
 800041e:	011b      	lsls	r3, r3, #4
 8000420:	4413      	add	r3, r2
 8000422:	461c      	mov	r4, r3
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800042a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN3.pin] = BTN3;
 800042e:	7c3b      	ldrb	r3, [r7, #16]
 8000430:	4a07      	ldr	r2, [pc, #28]	@ (8000450 <Config_1+0x158>)
 8000432:	011b      	lsls	r3, r3, #4
 8000434:	4413      	add	r3, r2
 8000436:	461c      	mov	r4, r3
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800043c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	

    CAN_interval = 100;
 8000440:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <Config_1+0x17c>)
 8000442:	2264      	movs	r2, #100	@ 0x64
 8000444:	801a      	strh	r2, [r3, #0]
}
 8000446:	bf00      	nop
 8000448:	3778      	adds	r7, #120	@ 0x78
 800044a:	46bd      	mov	sp, r7
 800044c:	bc90      	pop	{r4, r7}
 800044e:	4770      	bx	lr
 8000450:	240003a0 	.word	0x240003a0
 8000454:	080018e9 	.word	0x080018e9
 8000458:	0800aee0 	.word	0x0800aee0
 800045c:	0800aef0 	.word	0x0800aef0
 8000460:	0800af00 	.word	0x0800af00
 8000464:	0800af10 	.word	0x0800af10
 8000468:	0800af20 	.word	0x0800af20
 800046c:	0800af30 	.word	0x0800af30
 8000470:	0800af40 	.word	0x0800af40
 8000474:	240008c2 	.word	0x240008c2

08000478 <CanSend>:

uint8_t TxData[8];
uint8_t RxData[8];


void CanSend(uint8_t *TxData){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000480:	e001      	b.n	8000486 <CanSend+0xe>
		Error_Handler();
 8000482:	f000 fe13 	bl	80010ac <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000486:	4809      	ldr	r0, [pc, #36]	@ (80004ac <CanSend+0x34>)
 8000488:	f005 fb66 	bl	8005b58 <HAL_FDCAN_GetTxFifoFreeLevel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d007      	beq.n	80004a2 <CanSend+0x2a>
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	4906      	ldr	r1, [pc, #24]	@ (80004b0 <CanSend+0x38>)
 8000496:	4805      	ldr	r0, [pc, #20]	@ (80004ac <CanSend+0x34>)
 8000498:	f005 f997 	bl	80057ca <HAL_FDCAN_AddMessageToTxFifoQ>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d1ef      	bne.n	8000482 <CanSend+0xa>
	}
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	24000118 	.word	0x24000118
 80004b0:	240008e8 	.word	0x240008e8

080004b4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d017      	beq.n	80004f8 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80004c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000500 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80004ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000504 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80004cc:	2140      	movs	r1, #64	@ 0x40
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f005 f9d6 	bl	8005880 <HAL_FDCAN_GetRxMessage>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d002      	beq.n	80004e0 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 80004da:	f000 fde7 	bl	80010ac <Error_Handler>
 80004de:	e001      	b.n	80004e4 <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 80004e0:	f000 f848 	bl	8000574 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80004e4:	2200      	movs	r2, #0
 80004e6:	2101      	movs	r1, #1
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f005 fb47 	bl	8005b7c <HAL_FDCAN_ActivateNotification>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 80004f4:	f000 fdda 	bl	80010ac <Error_Handler>
		}
	}
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	24000034 	.word	0x24000034
 8000504:	2400090c 	.word	0x2400090c

08000508 <print>:



void print(uint16_t select){
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
		//uint16_t Data = TF_Select(1,averages[select],transfer_functions[select]);
		uint16_t Data = sensors[select].transfer_function(1,sensors[select].averages);
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	4a14      	ldr	r2, [pc, #80]	@ (8000568 <print+0x60>)
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	4413      	add	r3, r2
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	88fa      	ldrh	r2, [r7, #6]
 800051e:	4912      	ldr	r1, [pc, #72]	@ (8000568 <print+0x60>)
 8000520:	0112      	lsls	r2, r2, #4
 8000522:	440a      	add	r2, r1
 8000524:	3208      	adds	r2, #8
 8000526:	6812      	ldr	r2, [r2, #0]
 8000528:	4611      	mov	r1, r2
 800052a:	2001      	movs	r0, #1
 800052c:	4798      	blx	r3
 800052e:	4603      	mov	r3, r0
 8000530:	81fb      	strh	r3, [r7, #14]
		TxData[0] = Data;
 8000532:	89fb      	ldrh	r3, [r7, #14]
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <print+0x64>)
 8000538:	701a      	strb	r2, [r3, #0]
		TxData[1] = Data >> 8;
 800053a:	89fb      	ldrh	r3, [r7, #14]
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	b29b      	uxth	r3, r3
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <print+0x64>)
 8000544:	705a      	strb	r2, [r3, #1]
		TxHeader.Identifier = sensors[select].CAN_ID;
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <print+0x60>)
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	4413      	add	r3, r2
 800054e:	3304      	adds	r3, #4
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <print+0x68>)
 8000556:	601a      	str	r2, [r3, #0]

		CanSend(TxData);
 8000558:	4804      	ldr	r0, [pc, #16]	@ (800056c <print+0x64>)
 800055a:	f7ff ff8d 	bl	8000478 <CanSend>
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	240003a0 	.word	0x240003a0
 800056c:	2400002c 	.word	0x2400002c
 8000570:	240008e8 	.word	0x240008e8

08000574 <decode>:

void decode(){
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	switch(TxData[0]){
	
	}
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800058a:	f001 fa65 	bl	8001a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f87b 	bl	8000688 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Config_Setup();
 8000592:	f7ff feab 	bl	80002ec <Config_Setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 fc95 	bl	8000ec4 <MX_GPIO_Init>
  MX_DMA_Init();
 800059a:	f000 fc73 	bl	8000e84 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800059e:	f000 fa57 	bl	8000a50 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80005a2:	f000 fadb 	bl	8000b5c <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80005a6:	f000 fb5f 	bl	8000c68 <MX_I2C1_Init>
  MX_I2C3_Init();
 80005aa:	f000 fb9d 	bl	8000ce8 <MX_I2C3_Init>
  MX_ADC1_Init();
 80005ae:	f000 f8d9 	bl	8000764 <MX_ADC1_Init>
  MX_I2C4_Init();
 80005b2:	f000 fbd9 	bl	8000d68 <MX_I2C4_Init>
  MX_TIM3_Init();
 80005b6:	f000 fc17 	bl	8000de8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 80005ba:	482a      	ldr	r0, [pc, #168]	@ (8000664 <main+0xe0>)
 80005bc:	f009 ffb0 	bl	800a520 <HAL_TIM_Base_Start_IT>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <main+0x46>
 80005c6:	f000 fd71 	bl	80010ac <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <main+0xe4>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4926      	ldr	r1, [pc, #152]	@ (800066c <main+0xe8>)
 80005d2:	4825      	ldr	r0, [pc, #148]	@ (8000668 <main+0xe4>)
 80005d4:	f001 fe14 	bl	8002200 <HAL_ADC_Start_DMA>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <main+0x5e>
 80005de:	f000 fd65 	bl	80010ac <Error_Handler>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 80005e2:	4823      	ldr	r0, [pc, #140]	@ (8000670 <main+0xec>)
 80005e4:	f005 f8c6 	bl	8005774 <HAL_FDCAN_Start>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <main+0x70>
 80005ee:	f000 fd5d 	bl	80010ac <Error_Handler>
 80005f2:	e008      	b.n	8000606 <main+0x82>
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005fa:	481e      	ldr	r0, [pc, #120]	@ (8000674 <main+0xf0>)
 80005fc:	f006 f9e4 	bl	80069c8 <HAL_GPIO_WritePin>
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <main+0xf4>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000606:	2200      	movs	r2, #0
 8000608:	2101      	movs	r1, #1
 800060a:	4819      	ldr	r0, [pc, #100]	@ (8000670 <main+0xec>)
 800060c:	f005 fab6 	bl	8005b7c <HAL_FDCAN_ActivateNotification>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <main+0x96>
 8000616:	f000 fd49 	bl	80010ac <Error_Handler>


  uint8_t counter = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <main+0xf4>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d1fb      	bne.n	800061e <main+0x9a>
		  if(millis % CAN_interval == 0){
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <main+0xf8>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	4a15      	ldr	r2, [pc, #84]	@ (8000680 <main+0xfc>)
 800062c:	8812      	ldrh	r2, [r2, #0]
 800062e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000632:	fb01 f202 	mul.w	r2, r1, r2
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	b29b      	uxth	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1ef      	bne.n	800061e <main+0x9a>
			  print(counter);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	b29b      	uxth	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ff60 	bl	8000508 <print>
			  counter++;
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	3301      	adds	r3, #1
 800064c:	71fb      	strb	r3, [r7, #7]
			  if(counter == 16){
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b10      	cmp	r3, #16
 8000652:	d1e4      	bne.n	800061e <main+0x9a>
				  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8000654:	2140      	movs	r1, #64	@ 0x40
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <main+0x100>)
 8000658:	f006 f9cf 	bl	80069fa <HAL_GPIO_TogglePin>
				  counter = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 8000660:	e7dd      	b.n	800061e <main+0x9a>
 8000662:	bf00      	nop
 8000664:	24000354 	.word	0x24000354
 8000668:	2400003c 	.word	0x2400003c
 800066c:	240004a0 	.word	0x240004a0
 8000670:	24000118 	.word	0x24000118
 8000674:	58020400 	.word	0x58020400
 8000678:	240008e6 	.word	0x240008e6
 800067c:	240008e4 	.word	0x240008e4
 8000680:	240008c2 	.word	0x240008c2
 8000684:	58020800 	.word	0x58020800

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09c      	sub	sp, #112	@ 0x70
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000692:	224c      	movs	r2, #76	@ 0x4c
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f00a fbdc 	bl	800ae54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2220      	movs	r2, #32
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00a fbd6 	bl	800ae54 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006a8:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <SystemClock_Config+0xd4>)
 80006aa:	f04f 32ff 	mov.w	r2, #4294967295
 80006ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006b2:	2002      	movs	r0, #2
 80006b4:	f006 faf0 	bl	8006c98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <SystemClock_Config+0xd8>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <SystemClock_Config+0xd8>)
 80006c2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <SystemClock_Config+0xd8>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006d4:	bf00      	nop
 80006d6:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <SystemClock_Config+0xd8>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006e2:	d1f8      	bne.n	80006d6 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006e4:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <SystemClock_Config+0xd4>)
 80006e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006e8:	f023 0303 	bic.w	r3, r3, #3
 80006ec:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <SystemClock_Config+0xd4>)
 80006ee:	f043 0302 	orr.w	r3, r3, #2
 80006f2:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006f4:	2303      	movs	r3, #3
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006fe:	2301      	movs	r3, #1
 8000700:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000702:	2340      	movs	r3, #64	@ 0x40
 8000704:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000706:	2300      	movs	r3, #0
 8000708:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070e:	4618      	mov	r0, r3
 8000710:	f006 fafc 	bl	8006d0c <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800071a:	f000 fcc7 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	233f      	movs	r3, #63	@ 0x3f
 8000720:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072e:	2340      	movs	r3, #64	@ 0x40
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000732:	2340      	movs	r3, #64	@ 0x40
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073c:	2340      	movs	r3, #64	@ 0x40
 800073e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2102      	movs	r1, #2
 8000744:	4618      	mov	r0, r3
 8000746:	f006 ff13 	bl	8007570 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000750:	f000 fcac 	bl	80010ac <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3770      	adds	r7, #112	@ 0x70
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58024400 	.word	0x58024400
 8000760:	58024800 	.word	0x58024800

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]
 8000786:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000788:	4b9f      	ldr	r3, [pc, #636]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800078a:	4aa0      	ldr	r2, [pc, #640]	@ (8000a0c <MX_ADC1_Init+0x2a8>)
 800078c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800078e:	4b9e      	ldr	r3, [pc, #632]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000790:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000794:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000796:	4b9c      	ldr	r3, [pc, #624]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000798:	2208      	movs	r2, #8
 800079a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800079c:	4b9a      	ldr	r3, [pc, #616]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800079e:	2201      	movs	r2, #1
 80007a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a2:	4b99      	ldr	r3, [pc, #612]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a8:	4b97      	ldr	r3, [pc, #604]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ae:	4b96      	ldr	r3, [pc, #600]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 80007b4:	4b94      	ldr	r3, [pc, #592]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007b6:	2210      	movs	r2, #16
 80007b8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ba:	4b93      	ldr	r3, [pc, #588]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c0:	4b91      	ldr	r3, [pc, #580]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c6:	4b90      	ldr	r3, [pc, #576]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007cc:	4b8e      	ldr	r3, [pc, #568]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007ce:	2203      	movs	r2, #3
 80007d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d2:	4b8d      	ldr	r3, [pc, #564]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007d8:	4b8b      	ldr	r3, [pc, #556]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007de:	4b8a      	ldr	r3, [pc, #552]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e6:	4888      	ldr	r0, [pc, #544]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007e8:	f001 fbb0 	bl	8001f4c <HAL_ADC_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007f2:	f000 fc5b 	bl	80010ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4881      	ldr	r0, [pc, #516]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000802:	f002 fab3 	bl	8002d6c <HAL_ADCEx_MultiModeConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800080c:	f000 fc4e 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000810:	4b7f      	ldr	r3, [pc, #508]	@ (8000a10 <MX_ADC1_Init+0x2ac>)
 8000812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000814:	2306      	movs	r3, #6
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000818:	2307      	movs	r3, #7
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800081c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000820:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000822:	2304      	movs	r3, #4
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	4875      	ldr	r0, [pc, #468]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000834:	f001 fdac 	bl	8002390 <HAL_ADC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800083e:	f000 fc35 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000842:	4b74      	ldr	r3, [pc, #464]	@ (8000a14 <MX_ADC1_Init+0x2b0>)
 8000844:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000846:	230c      	movs	r3, #12
 8000848:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4619      	mov	r1, r3
 800084e:	486e      	ldr	r0, [pc, #440]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000850:	f001 fd9e 	bl	8002390 <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800085a:	f000 fc27 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800085e:	4b6e      	ldr	r3, [pc, #440]	@ (8000a18 <MX_ADC1_Init+0x2b4>)
 8000860:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000862:	2312      	movs	r3, #18
 8000864:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4867      	ldr	r0, [pc, #412]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800086c:	f001 fd90 	bl	8002390 <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000876:	f000 fc19 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800087a:	4b68      	ldr	r3, [pc, #416]	@ (8000a1c <MX_ADC1_Init+0x2b8>)
 800087c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800087e:	2318      	movs	r3, #24
 8000880:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4860      	ldr	r0, [pc, #384]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000888:	f001 fd82 	bl	8002390 <HAL_ADC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000892:	f000 fc0b 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000896:	4b62      	ldr	r3, [pc, #392]	@ (8000a20 <MX_ADC1_Init+0x2bc>)
 8000898:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800089a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800089e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	4619      	mov	r1, r3
 80008a4:	4858      	ldr	r0, [pc, #352]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80008a6:	f001 fd73 	bl	8002390 <HAL_ADC_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80008b0:	f000 fbfc 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008b4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a24 <MX_ADC1_Init+0x2c0>)
 80008b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008b8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80008bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	4851      	ldr	r0, [pc, #324]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80008c4:	f001 fd64 	bl	8002390 <HAL_ADC_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80008ce:	f000 fbed 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008d2:	4b55      	ldr	r3, [pc, #340]	@ (8000a28 <MX_ADC1_Init+0x2c4>)
 80008d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80008d6:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80008da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4849      	ldr	r0, [pc, #292]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80008e2:	f001 fd55 	bl	8002390 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80008ec:	f000 fbde 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008f0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a2c <MX_ADC1_Init+0x2c8>)
 80008f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008f4:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80008f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4842      	ldr	r0, [pc, #264]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000900:	f001 fd46 	bl	8002390 <HAL_ADC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 800090a:	f000 fbcf 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800090e:	4b48      	ldr	r3, [pc, #288]	@ (8000a30 <MX_ADC1_Init+0x2cc>)
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000912:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	483a      	ldr	r0, [pc, #232]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800091e:	f001 fd37 	bl	8002390 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 8000928:	f000 fbc0 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800092c:	4b41      	ldr	r3, [pc, #260]	@ (8000a34 <MX_ADC1_Init+0x2d0>)
 800092e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000934:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	4833      	ldr	r0, [pc, #204]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800093c:	f001 fd28 	bl	8002390 <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8000946:	f000 fbb1 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800094a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a38 <MX_ADC1_Init+0x2d4>)
 800094c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800094e:	f240 2306 	movw	r3, #518	@ 0x206
 8000952:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	482b      	ldr	r0, [pc, #172]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800095a:	f001 fd19 	bl	8002390 <HAL_ADC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 8000964:	f000 fba2 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000968:	4b34      	ldr	r3, [pc, #208]	@ (8000a3c <MX_ADC1_Init+0x2d8>)
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800096c:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4824      	ldr	r0, [pc, #144]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000978:	f001 fd0a 	bl	8002390 <HAL_ADC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 8000982:	f000 fb93 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000986:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <MX_ADC1_Init+0x2dc>)
 8000988:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800098a:	f240 2312 	movw	r3, #530	@ 0x212
 800098e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	4619      	mov	r1, r3
 8000994:	481c      	ldr	r0, [pc, #112]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000996:	f001 fcfb 	bl	8002390 <HAL_ADC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 80009a0:	f000 fb84 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80009a4:	4b27      	ldr	r3, [pc, #156]	@ (8000a44 <MX_ADC1_Init+0x2e0>)
 80009a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80009a8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80009ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4815      	ldr	r0, [pc, #84]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80009b4:	f001 fcec 	bl	8002390 <HAL_ADC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 80009be:	f000 fb75 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80009c2:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <MX_ADC1_Init+0x2e4>)
 80009c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80009c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80009d2:	f001 fcdd 	bl	8002390 <HAL_ADC_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 80009dc:	f000 fb66 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <MX_ADC1_Init+0x2e8>)
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80009e4:	f240 3306 	movw	r3, #774	@ 0x306
 80009e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80009f0:	f001 fcce 	bl	8002390 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 80009fa:	f000 fb57 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2400003c 	.word	0x2400003c
 8000a0c:	40022000 	.word	0x40022000
 8000a10:	0c900008 	.word	0x0c900008
 8000a14:	10c00010 	.word	0x10c00010
 8000a18:	14f00020 	.word	0x14f00020
 8000a1c:	1d500080 	.word	0x1d500080
 8000a20:	21800100 	.word	0x21800100
 8000a24:	25b00200 	.word	0x25b00200
 8000a28:	2a000400 	.word	0x2a000400
 8000a2c:	2e300800 	.word	0x2e300800
 8000a30:	32601000 	.word	0x32601000
 8000a34:	36902000 	.word	0x36902000
 8000a38:	3ac04000 	.word	0x3ac04000
 8000a3c:	3ef08000 	.word	0x3ef08000
 8000a40:	43210000 	.word	0x43210000
 8000a44:	47520000 	.word	0x47520000
 8000a48:	4b840000 	.word	0x4b840000
 8000a4c:	4fb80000 	.word	0x4fb80000

08000a50 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a54:	4b3d      	ldr	r3, [pc, #244]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a56:	4a3e      	ldr	r2, [pc, #248]	@ (8000b50 <MX_FDCAN1_Init+0x100>)
 8000a58:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a60:	4b3a      	ldr	r3, [pc, #232]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000a66:	4b39      	ldr	r3, [pc, #228]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a6c:	4b37      	ldr	r3, [pc, #220]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a72:	4b36      	ldr	r3, [pc, #216]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a78:	4b34      	ldr	r3, [pc, #208]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a7e:	4b33      	ldr	r3, [pc, #204]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 22;
 8000a84:	4b31      	ldr	r3, [pc, #196]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a86:	2216      	movs	r2, #22
 8000a88:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a8a:	4b30      	ldr	r3, [pc, #192]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a90:	4b2e      	ldr	r3, [pc, #184]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a96:	4b2d      	ldr	r3, [pc, #180]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 28;
 8000aae:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ab0:	221c      	movs	r2, #28
 8000ab2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ab4:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000aba:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ace:	2204      	movs	r2, #4
 8000ad0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000af8:	2204      	movs	r2, #4
 8000afa:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000afc:	4813      	ldr	r0, [pc, #76]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000afe:	f004 fc5b 	bl	80053b8 <HAL_FDCAN_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b08:	f000 fad0 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_FDCAN1_Init+0x104>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b14:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	24000118 	.word	0x24000118
 8000b50:	4000a000 	.word	0x4000a000
 8000b54:	240008c4 	.word	0x240008c4
 8000b58:	240008e8 	.word	0x240008e8

08000b5c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b60:	4b3d      	ldr	r3, [pc, #244]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b62:	4a3e      	ldr	r2, [pc, #248]	@ (8000c5c <MX_FDCAN2_Init+0x100>)
 8000b64:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b66:	4b3c      	ldr	r3, [pc, #240]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000b72:	4b39      	ldr	r3, [pc, #228]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b78:	4b37      	ldr	r3, [pc, #220]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b7e:	4b36      	ldr	r3, [pc, #216]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000b84:	4b34      	ldr	r3, [pc, #208]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b8a:	4b33      	ldr	r3, [pc, #204]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 22;
 8000b90:	4b31      	ldr	r3, [pc, #196]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b92:	2216      	movs	r2, #22
 8000b94:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000b96:	4b30      	ldr	r3, [pc, #192]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000bae:	4b2a      	ldr	r3, [pc, #168]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000bb4:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000bc0:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000bc6:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bda:	2204      	movs	r2, #4
 8000bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000c04:	2204      	movs	r2, #4
 8000c06:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c08:	4813      	ldr	r0, [pc, #76]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000c0a:	f004 fbd5 	bl	80053b8 <HAL_FDCAN_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c14:	f000 fa4a 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_FDCAN2_Init+0x104>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c20:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	240001b8 	.word	0x240001b8
 8000c5c:	4000a400 	.word	0x4000a400
 8000c60:	240008c4 	.word	0x240008c4
 8000c64:	240008e8 	.word	0x240008e8

08000c68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <MX_I2C1_Init+0x78>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce4 <MX_I2C1_Init+0x7c>)
 8000c76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca2:	480e      	ldr	r0, [pc, #56]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000ca4:	f005 fec4 	bl	8006a30 <HAL_I2C_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cae:	f000 f9fd 	bl	80010ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000cb6:	f005 ff57 	bl	8006b68 <HAL_I2CEx_ConfigAnalogFilter>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cc0:	f000 f9f4 	bl	80010ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000cc8:	f005 ff99 	bl	8006bfe <HAL_I2CEx_ConfigDigitalFilter>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cd2:	f000 f9eb 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	24000258 	.word	0x24000258
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	00707cbb 	.word	0x00707cbb

08000ce8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000cee:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <MX_I2C3_Init+0x78>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d64 <MX_I2C3_Init+0x7c>)
 8000cf6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d22:	480e      	ldr	r0, [pc, #56]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d24:	f005 fe84 	bl	8006a30 <HAL_I2C_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d2e:	f000 f9bd 	bl	80010ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d36:	f005 ff17 	bl	8006b68 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d40:	f000 f9b4 	bl	80010ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d48:	f005 ff59 	bl	8006bfe <HAL_I2CEx_ConfigDigitalFilter>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 f9ab 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	240002ac 	.word	0x240002ac
 8000d60:	40005c00 	.word	0x40005c00
 8000d64:	00707cbb 	.word	0x00707cbb

08000d68 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <MX_I2C4_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d74:	4a1b      	ldr	r2, [pc, #108]	@ (8000de4 <MX_I2C4_Init+0x7c>)
 8000d76:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000da2:	480e      	ldr	r0, [pc, #56]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000da4:	f005 fe44 	bl	8006a30 <HAL_I2C_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000dae:	f000 f97d 	bl	80010ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4809      	ldr	r0, [pc, #36]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000db6:	f005 fed7 	bl	8006b68 <HAL_I2CEx_ConfigAnalogFilter>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000dc0:	f000 f974 	bl	80010ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000dc8:	f005 ff19 	bl	8006bfe <HAL_I2CEx_ConfigDigitalFilter>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000dd2:	f000 f96b 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	24000300 	.word	0x24000300
 8000de0:	58001c00 	.word	0x58001c00
 8000de4:	00707cbb 	.word	0x00707cbb

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e08:	4a1d      	ldr	r2, [pc, #116]	@ (8000e80 <MX_TIM3_Init+0x98>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e0e:	223f      	movs	r2, #63	@ 0x3f
 8000e10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2c:	4813      	ldr	r0, [pc, #76]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e2e:	f009 fb1f 	bl	800a470 <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e38:	f000 f938 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4619      	mov	r1, r3
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e4a:	f009 fce9 	bl	800a820 <HAL_TIM_ConfigClockSource>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e54:	f000 f92a 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e66:	f009 ff49 	bl	800acfc <HAL_TIMEx_MasterConfigSynchronization>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e70:	f000 f91c 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000354 	.word	0x24000354
 8000e80:	40000400 	.word	0x40000400

08000e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <MX_DMA_Init+0x3c>)
 8000e8c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <MX_DMA_Init+0x3c>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <MX_DMA_Init+0x3c>)
 8000e9c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	200b      	movs	r0, #11
 8000eae:	f002 f8d4 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eb2:	200b      	movs	r0, #11
 8000eb4:	f002 f8eb 	bl	800308e <HAL_NVIC_EnableIRQ>

}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	58024400 	.word	0x58024400

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	4b34      	ldr	r3, [pc, #208]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee0:	4a32      	ldr	r2, [pc, #200]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000eea:	4b30      	ldr	r3, [pc, #192]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000eec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000efe:	4a2b      	ldr	r2, [pc, #172]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f08:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f1c:	4a23      	ldr	r2, [pc, #140]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f44:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f58:	4815      	ldr	r0, [pc, #84]	@ (8000fb0 <MX_GPIO_Init+0xec>)
 8000f5a:	f005 fd35 	bl	80069c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2140      	movs	r1, #64	@ 0x40
 8000f62:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <MX_GPIO_Init+0xf0>)
 8000f64:	f005 fd30 	bl	80069c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480b      	ldr	r0, [pc, #44]	@ (8000fb0 <MX_GPIO_Init+0xec>)
 8000f82:	f005 fb71 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000f86:	2340      	movs	r3, #64	@ 0x40
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_GPIO_Init+0xf0>)
 8000f9e:	f005 fb63 	bl	8006668 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	@ 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	58020400 	.word	0x58020400
 8000fb4:	58020800 	.word	0x58020800

08000fb8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a34      	ldr	r2, [pc, #208]	@ (8001098 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d15f      	bne.n	800108a <HAL_ADC_ConvCpltCallback+0xd2>
		if(AVE_POS < ROLLING_AVE){
 8000fca:	4b34      	ldr	r3, [pc, #208]	@ (800109c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b1f      	cmp	r3, #31
 8000fd0:	d806      	bhi.n	8000fe0 <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 8000fd2:	4b32      	ldr	r3, [pc, #200]	@ (800109c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b30      	ldr	r3, [pc, #192]	@ (800109c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	e03b      	b.n	8001058 <HAL_ADC_ConvCpltCallback+0xa0>
		}
		else{
			AVE_POS = 0;
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e030      	b.n	800104e <HAL_ADC_ConvCpltCallback+0x96>
				for(int z = 0; z < ROLLING_AVE;z++){
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	e027      	b.n	8001042 <HAL_ADC_ConvCpltCallback+0x8a>
					if(z == 0){
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10c      	bne.n	8001012 <HAL_ADC_ConvCpltCallback+0x5a>
						//averages[i] = all_raw_data[i][0];
            sensors[i].averages = all_raw_data[i][0];
 8000ff8:	4a29      	ldr	r2, [pc, #164]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	4413      	add	r3, r2
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	4a27      	ldr	r2, [pc, #156]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0xec>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	4413      	add	r3, r2
 800100c:	3308      	adds	r3, #8
 800100e:	6019      	str	r1, [r3, #0]
 8001010:	e014      	b.n	800103c <HAL_ADC_ConvCpltCallback+0x84>
					}else{
						//averages[i]=(averages[i] + all_raw_data[i][z])/2;
            sensors[i].averages = (sensors[i].averages + all_raw_data[i][z])/2;
 8001012:	4a24      	ldr	r2, [pc, #144]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0xec>)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	4413      	add	r3, r2
 800101a:	3308      	adds	r3, #8
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4820      	ldr	r0, [pc, #128]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	0151      	lsls	r1, r2, #5
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	440a      	add	r2, r1
 8001028:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800102c:	4413      	add	r3, r2
 800102e:	085a      	lsrs	r2, r3, #1
 8001030:	491c      	ldr	r1, [pc, #112]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0xec>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	440b      	add	r3, r1
 8001038:	3308      	adds	r3, #8
 800103a:	601a      	str	r2, [r3, #0]
				for(int z = 0; z < ROLLING_AVE;z++){
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	3301      	adds	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	2b1f      	cmp	r3, #31
 8001046:	ddd4      	ble.n	8000ff2 <HAL_ADC_ConvCpltCallback+0x3a>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3301      	adds	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699a      	ldr	r2, [r3, #24]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8c9      	bhi.n	8000fec <HAL_ADC_ConvCpltCallback+0x34>
					}
				}
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e010      	b.n	8001080 <HAL_ADC_ConvCpltCallback+0xc8>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	3b01      	subs	r3, #1
 8001064:	4910      	ldr	r1, [pc, #64]	@ (80010a8 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 800106c:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0xe8>)
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	0152      	lsls	r2, r2, #5
 8001072:	4413      	add	r3, r2
 8001074:	4602      	mov	r2, r0
 8001076:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	699a      	ldr	r2, [r3, #24]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	429a      	cmp	r2, r3
 8001088:	d8e9      	bhi.n	800105e <HAL_ADC_ConvCpltCallback+0xa6>
		}
	}
}
 800108a:	bf00      	nop
 800108c:	371c      	adds	r7, #28
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40022000 	.word	0x40022000
 800109c:	240008c0 	.word	0x240008c0
 80010a0:	240004c0 	.word	0x240004c0
 80010a4:	240003a0 	.word	0x240003a0
 80010a8:	240004a0 	.word	0x240004a0

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <Error_Handler+0x8>

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <HAL_MspInit+0x3c>)
 80010c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010c4:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <HAL_MspInit+0x3c>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <HAL_MspInit+0x3c>)
 80010d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	2005      	movs	r0, #5
 80010e2:	f001 ffba 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010e6:	2005      	movs	r0, #5
 80010e8:	f001 ffd1 	bl	800308e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	58024400 	.word	0x58024400

080010f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0bc      	sub	sp, #240	@ 0xf0
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 0318 	add.w	r3, r7, #24
 8001114:	22c0      	movs	r2, #192	@ 0xc0
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f009 fe9b 	bl	800ae54 <memset>
  if(hadc->Instance==ADC1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a62      	ldr	r2, [pc, #392]	@ (80012ac <HAL_ADC_MspInit+0x1b4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	f040 80bc 	bne.w	80012a2 <HAL_ADC_MspInit+0x1aa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800112a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001136:	2302      	movs	r3, #2
 8001138:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 800113a:	2320      	movs	r3, #32
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 800113e:	2308      	movs	r3, #8
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 25;
 8001142:	2319      	movs	r3, #25
 8001144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001146:	2302      	movs	r3, #2
 8001148:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800114a:	23c0      	movs	r3, #192	@ 0xc0
 800114c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800114e:	2300      	movs	r3, #0
 8001150:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	4618      	mov	r0, r3
 8001162:	f006 fd7b 	bl	8007c5c <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800116c:	f7ff ff9e 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001170:	4b4f      	ldr	r3, [pc, #316]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 8001172:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001176:	4a4e      	ldr	r2, [pc, #312]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001180:	4b4b      	ldr	r3, [pc, #300]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 8001182:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b48      	ldr	r3, [pc, #288]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 8001190:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001194:	4a46      	ldr	r2, [pc, #280]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800119e:	4b44      	ldr	r3, [pc, #272]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b40      	ldr	r3, [pc, #256]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011b2:	4a3f      	ldr	r2, [pc, #252]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011bc:	4b3c      	ldr	r3, [pc, #240]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b39      	ldr	r3, [pc, #228]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011d0:	4a37      	ldr	r2, [pc, #220]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011da:	4b35      	ldr	r3, [pc, #212]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011e8:	233f      	movs	r3, #63	@ 0x3f
 80011ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ee:	2303      	movs	r3, #3
 80011f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011fe:	4619      	mov	r1, r3
 8001200:	482c      	ldr	r0, [pc, #176]	@ (80012b4 <HAL_ADC_MspInit+0x1bc>)
 8001202:	f005 fa31 	bl	8006668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001206:	23ff      	movs	r3, #255	@ 0xff
 8001208:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120c:	2303      	movs	r3, #3
 800120e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800121c:	4619      	mov	r1, r3
 800121e:	4826      	ldr	r0, [pc, #152]	@ (80012b8 <HAL_ADC_MspInit+0x1c0>)
 8001220:	f005 fa22 	bl	8006668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001224:	2303      	movs	r3, #3
 8001226:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122a:	2303      	movs	r3, #3
 800122c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800123a:	4619      	mov	r1, r3
 800123c:	481f      	ldr	r0, [pc, #124]	@ (80012bc <HAL_ADC_MspInit+0x1c4>)
 800123e:	f005 fa13 	bl	8006668 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001242:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001244:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <HAL_ADC_MspInit+0x1cc>)
 8001246:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001248:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800124a:	2209      	movs	r2, #9
 800124c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001254:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800125a:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800125c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001260:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001264:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001268:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800126c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001270:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001274:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001278:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001286:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001288:	f001 ff1c 	bl	80030c4 <HAL_DMA_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 8001292:	f7ff ff0b 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a09      	ldr	r2, [pc, #36]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800129a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800129c:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	37f0      	adds	r7, #240	@ 0xf0
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40022000 	.word	0x40022000
 80012b0:	58024400 	.word	0x58024400
 80012b4:	58020800 	.word	0x58020800
 80012b8:	58020000 	.word	0x58020000
 80012bc:	58020400 	.word	0x58020400
 80012c0:	240000a0 	.word	0x240000a0
 80012c4:	40020010 	.word	0x40020010

080012c8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0bc      	sub	sp, #240	@ 0xf0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	22c0      	movs	r2, #192	@ 0xc0
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f009 fdb3 	bl	800ae54 <memset>
  if(hfdcan->Instance==FDCAN1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a5a      	ldr	r2, [pc, #360]	@ (800145c <HAL_FDCAN_MspInit+0x194>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d158      	bne.n	80013aa <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	4618      	mov	r0, r3
 8001310:	f006 fca4 	bl	8007c5c <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800131a:	f7ff fec7 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800131e:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a4e      	ldr	r2, [pc, #312]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 8001326:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001328:	4b4d      	ldr	r3, [pc, #308]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d10e      	bne.n	800134e <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001330:	4b4c      	ldr	r3, [pc, #304]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001332:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001336:	4a4b      	ldr	r2, [pc, #300]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800133c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001340:	4b48      	ldr	r3, [pc, #288]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001342:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001350:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001354:	4a43      	ldr	r2, [pc, #268]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800135e:	4b41      	ldr	r3, [pc, #260]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001360:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800136c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001370:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001386:	2309      	movs	r3, #9
 8001388:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001390:	4619      	mov	r1, r3
 8001392:	4835      	ldr	r0, [pc, #212]	@ (8001468 <HAL_FDCAN_MspInit+0x1a0>)
 8001394:	f005 f968 	bl	8006668 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2013      	movs	r0, #19
 800139e:	f001 fe5c 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80013a2:	2013      	movs	r0, #19
 80013a4:	f001 fe73 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80013a8:	e054      	b.n	8001454 <HAL_FDCAN_MspInit+0x18c>
  else if(hfdcan->Instance==FDCAN2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a2f      	ldr	r2, [pc, #188]	@ (800146c <HAL_FDCAN_MspInit+0x1a4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d14f      	bne.n	8001454 <HAL_FDCAN_MspInit+0x18c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80013b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 fc46 	bl	8007c5c <HAL_RCCEx_PeriphCLKConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_FDCAN_MspInit+0x112>
      Error_Handler();
 80013d6:	f7ff fe69 	bl	80010ac <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80013da:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 80013e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80013e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10e      	bne.n	800140a <HAL_FDCAN_MspInit+0x142>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80013ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 80013ee:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f8:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 80013fe:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 800140c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 800141c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001428:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800142c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001442:	2309      	movs	r3, #9
 8001444:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800144c:	4619      	mov	r1, r3
 800144e:	4808      	ldr	r0, [pc, #32]	@ (8001470 <HAL_FDCAN_MspInit+0x1a8>)
 8001450:	f005 f90a 	bl	8006668 <HAL_GPIO_Init>
}
 8001454:	bf00      	nop
 8001456:	37f0      	adds	r7, #240	@ 0xf0
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	4000a000 	.word	0x4000a000
 8001460:	24000934 	.word	0x24000934
 8001464:	58024400 	.word	0x58024400
 8001468:	58020000 	.word	0x58020000
 800146c:	4000a400 	.word	0x4000a400
 8001470:	58020400 	.word	0x58020400

08001474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0c0      	sub	sp, #256	@ 0x100
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800148c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001490:	22c0      	movs	r2, #192	@ 0xc0
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f009 fcdd 	bl	800ae54 <memset>
  if(hi2c->Instance==I2C1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a86      	ldr	r2, [pc, #536]	@ (80016b8 <HAL_I2C_MspInit+0x244>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d146      	bne.n	8001532 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014a4:	f04f 0208 	mov.w	r2, #8
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ba:	4618      	mov	r0, r3
 80014bc:	f006 fbce 	bl	8007c5c <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014c6:	f7ff fdf1 	bl	80010ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b7c      	ldr	r3, [pc, #496]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80014cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014d0:	4a7a      	ldr	r2, [pc, #488]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014da:	4b78      	ldr	r3, [pc, #480]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80014dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014e8:	23c0      	movs	r3, #192	@ 0xc0
 80014ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ee:	2312      	movs	r3, #18
 80014f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001500:	2304      	movs	r3, #4
 8001502:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800150a:	4619      	mov	r1, r3
 800150c:	486c      	ldr	r0, [pc, #432]	@ (80016c0 <HAL_I2C_MspInit+0x24c>)
 800150e:	f005 f8ab 	bl	8006668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001512:	4b6a      	ldr	r3, [pc, #424]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001514:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001518:	4a68      	ldr	r2, [pc, #416]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 800151a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800151e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001522:	4b66      	ldr	r3, [pc, #408]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001524:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152c:	623b      	str	r3, [r7, #32]
 800152e:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001530:	e0bd      	b.n	80016ae <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a63      	ldr	r2, [pc, #396]	@ (80016c4 <HAL_I2C_MspInit+0x250>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d16c      	bne.n	8001616 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800153c:	f04f 0208 	mov.w	r2, #8
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001552:	4618      	mov	r0, r3
 8001554:	f006 fb82 	bl	8007c5c <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800155e:	f7ff fda5 	bl	80010ac <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b56      	ldr	r3, [pc, #344]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001564:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001568:	4a54      	ldr	r2, [pc, #336]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001572:	4b52      	ldr	r3, [pc, #328]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001574:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b4e      	ldr	r3, [pc, #312]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001582:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001586:	4a4d      	ldr	r2, [pc, #308]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001590:	4b4a      	ldr	r3, [pc, #296]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001592:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a6:	2312      	movs	r3, #18
 80015a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015b8:	2304      	movs	r3, #4
 80015ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015c2:	4619      	mov	r1, r3
 80015c4:	4840      	ldr	r0, [pc, #256]	@ (80016c8 <HAL_I2C_MspInit+0x254>)
 80015c6:	f005 f84f 	bl	8006668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d2:	2312      	movs	r3, #18
 80015d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015e4:	2304      	movs	r3, #4
 80015e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015ee:	4619      	mov	r1, r3
 80015f0:	4836      	ldr	r0, [pc, #216]	@ (80016cc <HAL_I2C_MspInit+0x258>)
 80015f2:	f005 f839 	bl	8006668 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80015f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015fc:	4a2f      	ldr	r2, [pc, #188]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80015fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001602:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001608:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800160c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
}
 8001614:	e04b      	b.n	80016ae <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a2d      	ldr	r2, [pc, #180]	@ (80016d0 <HAL_I2C_MspInit+0x25c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d146      	bne.n	80016ae <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001620:	f04f 0210 	mov.w	r2, #16
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001632:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001636:	4618      	mov	r0, r3
 8001638:	f006 fb10 	bl	8007c5c <HAL_RCCEx_PeriphCLKConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8001642:	f7ff fd33 	bl	80010ac <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001648:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800164c:	4a1b      	ldr	r2, [pc, #108]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001658:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001664:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166c:	2312      	movs	r3, #18
 800166e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800167e:	2306      	movs	r3, #6
 8001680:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001688:	4619      	mov	r1, r3
 800168a:	480d      	ldr	r0, [pc, #52]	@ (80016c0 <HAL_I2C_MspInit+0x24c>)
 800168c:	f004 ffec 	bl	8006668 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001690:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001692:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001696:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80016a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80016a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
}
 80016ae:	bf00      	nop
 80016b0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40005400 	.word	0x40005400
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58020400 	.word	0x58020400
 80016c4:	40005c00 	.word	0x40005c00
 80016c8:	58020800 	.word	0x58020800
 80016cc:	58020000 	.word	0x58020000
 80016d0:	58001c00 	.word	0x58001c00

080016d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0e      	ldr	r2, [pc, #56]	@ (800171c <HAL_TIM_Base_MspInit+0x48>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d116      	bne.n	8001714 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_TIM_Base_MspInit+0x4c>)
 80016e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001720 <HAL_TIM_Base_MspInit+0x4c>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_TIM_Base_MspInit+0x4c>)
 80016f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	201d      	movs	r0, #29
 800170a:	f001 fca6 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800170e:	201d      	movs	r0, #29
 8001710:	f001 fcbd 	bl	800308e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40000400 	.word	0x40000400
 8001720:	58024400 	.word	0x58024400

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f000 f9df 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}

08001782 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001796:	f002 fa8d 	bl	8003cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	240000a0 	.word	0x240000a0

080017a4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <FDCAN1_IT0_IRQHandler+0x10>)
 80017aa:	f004 fa61 	bl	8005c70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	24000118 	.word	0x24000118

080017b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <TIM3_IRQHandler+0x2c>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <TIM3_IRQHandler+0x2c>)
 80017c6:	801a      	strh	r2, [r3, #0]
	if(millis == 1000){
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <TIM3_IRQHandler+0x2c>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017d0:	d102      	bne.n	80017d8 <TIM3_IRQHandler+0x20>
		CAN_enable = 1;
 80017d2:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <TIM3_IRQHandler+0x30>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <TIM3_IRQHandler+0x34>)
 80017da:	f008 ff19 	bl	800a610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	240008e4 	.word	0x240008e4
 80017e8:	240008e6 	.word	0x240008e6
 80017ec:	24000354 	.word	0x24000354

080017f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017f4:	4b34      	ldr	r3, [pc, #208]	@ (80018c8 <SystemInit+0xd8>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fa:	4a33      	ldr	r2, [pc, #204]	@ (80018c8 <SystemInit+0xd8>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001804:	4b31      	ldr	r3, [pc, #196]	@ (80018cc <SystemInit+0xdc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	2b02      	cmp	r3, #2
 800180e:	d807      	bhi.n	8001820 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001810:	4b2e      	ldr	r3, [pc, #184]	@ (80018cc <SystemInit+0xdc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 030f 	bic.w	r3, r3, #15
 8001818:	4a2c      	ldr	r2, [pc, #176]	@ (80018cc <SystemInit+0xdc>)
 800181a:	f043 0303 	orr.w	r3, r3, #3
 800181e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001820:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <SystemInit+0xe0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a2a      	ldr	r2, [pc, #168]	@ (80018d0 <SystemInit+0xe0>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800182c:	4b28      	ldr	r3, [pc, #160]	@ (80018d0 <SystemInit+0xe0>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001832:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <SystemInit+0xe0>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4926      	ldr	r1, [pc, #152]	@ (80018d0 <SystemInit+0xe0>)
 8001838:	4b26      	ldr	r3, [pc, #152]	@ (80018d4 <SystemInit+0xe4>)
 800183a:	4013      	ands	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800183e:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <SystemInit+0xdc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <SystemInit+0xdc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 030f 	bic.w	r3, r3, #15
 8001852:	4a1e      	ldr	r2, [pc, #120]	@ (80018cc <SystemInit+0xdc>)
 8001854:	f043 0303 	orr.w	r3, r3, #3
 8001858:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800185a:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <SystemInit+0xe0>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <SystemInit+0xe0>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001866:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <SystemInit+0xe0>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <SystemInit+0xe0>)
 800186e:	4a1a      	ldr	r2, [pc, #104]	@ (80018d8 <SystemInit+0xe8>)
 8001870:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <SystemInit+0xe0>)
 8001874:	4a19      	ldr	r2, [pc, #100]	@ (80018dc <SystemInit+0xec>)
 8001876:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <SystemInit+0xe0>)
 800187a:	4a19      	ldr	r2, [pc, #100]	@ (80018e0 <SystemInit+0xf0>)
 800187c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800187e:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <SystemInit+0xe0>)
 8001880:	2200      	movs	r2, #0
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <SystemInit+0xe0>)
 8001886:	4a16      	ldr	r2, [pc, #88]	@ (80018e0 <SystemInit+0xf0>)
 8001888:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <SystemInit+0xe0>)
 800188c:	2200      	movs	r2, #0
 800188e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <SystemInit+0xe0>)
 8001892:	4a13      	ldr	r2, [pc, #76]	@ (80018e0 <SystemInit+0xf0>)
 8001894:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <SystemInit+0xe0>)
 8001898:	2200      	movs	r2, #0
 800189a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <SystemInit+0xe0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0b      	ldr	r2, [pc, #44]	@ (80018d0 <SystemInit+0xe0>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018a8:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <SystemInit+0xe0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018ae:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <SystemInit+0xf4>)
 80018b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80018b6:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <SystemInit+0xd8>)
 80018b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018bc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00
 80018cc:	52002000 	.word	0x52002000
 80018d0:	58024400 	.word	0x58024400
 80018d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80018d8:	02020200 	.word	0x02020200
 80018dc:	01ff0000 	.word	0x01ff0000
 80018e0:	01010280 	.word	0x01010280
 80018e4:	52004000 	.word	0x52004000

080018e8 <TF_3V3>:
#include "transfer_functions.h"
#include "functions.h"
#include "main.h"
#include "config.h"

uint16_t TF_3V3(uint8_t bytes, uint32_t raw){
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 3300;
 80018f4:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80018f8:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	fb03 f202 	mul.w	r2, r3, r2
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <TF_3V3+0x38>)
 8001904:	fba3 1302 	umull	r1, r3, r3, r2
 8001908:	1ad2      	subs	r2, r2, r3
 800190a:	0852      	lsrs	r2, r2, #1
 800190c:	4413      	add	r3, r2
 800190e:	0adb      	lsrs	r3, r3, #11
 8001910:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001912:	89bb      	ldrh	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	00100101 	.word	0x00100101

08001924 <TF_BPPS>:
	uint16_t max_volt = 24000;

	uint16_t voltage = raw*max_volt / 4095;
	return voltage;
}
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw){ //brake pedal position sensor
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
	uint16_t max_brake_pres = 200;
 8001930:	23c8      	movs	r3, #200	@ 0xc8
 8001932:	81fb      	strh	r3, [r7, #14]

	uint16_t brake_pres = raw*max_brake_pres / 4095;
 8001934:	89fb      	ldrh	r3, [r7, #14]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	fb03 f202 	mul.w	r2, r3, r2
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <TF_BPPS+0x38>)
 800193e:	fba3 1302 	umull	r1, r3, r3, r2
 8001942:	1ad2      	subs	r2, r2, r3
 8001944:	0852      	lsrs	r2, r2, #1
 8001946:	4413      	add	r3, r2
 8001948:	0adb      	lsrs	r3, r3, #11
 800194a:	81bb      	strh	r3, [r7, #12]
	return brake_pres;
 800194c:	89bb      	ldrh	r3, [r7, #12]

}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	00100101 	.word	0x00100101

08001960 <TF_APPS>:
uint16_t TF_APPS(uint8_t bytes, uint32_t raw){
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 800196c:	2364      	movs	r3, #100	@ 0x64
 800196e:	81fb      	strh	r3, [r7, #14]

	uint16_t apps = raw*max_pos / 4095;
 8001970:	89fb      	ldrh	r3, [r7, #14]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	fb03 f202 	mul.w	r2, r3, r2
 8001978:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <TF_APPS+0x38>)
 800197a:	fba3 1302 	umull	r1, r3, r3, r2
 800197e:	1ad2      	subs	r2, r2, r3
 8001980:	0852      	lsrs	r2, r2, #1
 8001982:	4413      	add	r3, r2
 8001984:	0adb      	lsrs	r3, r3, #11
 8001986:	81bb      	strh	r3, [r7, #12]
	return apps;
 8001988:	89bb      	ldrh	r3, [r7, #12]

}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	00100101 	.word	0x00100101

0800199c <TF_BTN>:

uint16_t TF_BTN(uint8_t bytes, uint32_t raw){
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
		uint16_t max_volt = 5000;
 80019a8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80019ac:	81fb      	strh	r3, [r7, #14]

		uint16_t voltage = raw*max_volt / 4095;
 80019ae:	89fb      	ldrh	r3, [r7, #14]
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	fb03 f202 	mul.w	r2, r3, r2
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <TF_BTN+0x48>)
 80019b8:	fba3 1302 	umull	r1, r3, r3, r2
 80019bc:	1ad2      	subs	r2, r2, r3
 80019be:	0852      	lsrs	r2, r2, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	0adb      	lsrs	r3, r3, #11
 80019c4:	81bb      	strh	r3, [r7, #12]

		if(voltage < 3000)
 80019c6:	89bb      	ldrh	r3, [r7, #12]
 80019c8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d801      	bhi.n	80019d4 <TF_BTN+0x38>
			return 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e000      	b.n	80019d6 <TF_BTN+0x3a>
		else
			return 1;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	00100101 	.word	0x00100101

080019e8 <TF_ANGLE_GEAR>:

}
uint16_t TF_TYRE_TEMP(uint8_t bytes, uint32_t raw){

}
uint16_t TF_ANGLE_GEAR(uint8_t bytes, uint32_t raw){
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]

}
 80019f4:	bf00      	nop
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <Reset_Handler>:
 8001a04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a3c <LoopFillZerobss+0xe>
 8001a08:	f7ff fef2 	bl	80017f0 <SystemInit>
 8001a0c:	480c      	ldr	r0, [pc, #48]	@ (8001a40 <LoopFillZerobss+0x12>)
 8001a0e:	490d      	ldr	r1, [pc, #52]	@ (8001a44 <LoopFillZerobss+0x16>)
 8001a10:	4a0d      	ldr	r2, [pc, #52]	@ (8001a48 <LoopFillZerobss+0x1a>)
 8001a12:	2300      	movs	r3, #0
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:
 8001a16:	58d4      	ldr	r4, [r2, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:
 8001a1c:	18c4      	adds	r4, r0, r3
 8001a1e:	428c      	cmp	r4, r1
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
 8001a22:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <LoopFillZerobss+0x1e>)
 8001a24:	4c0a      	ldr	r4, [pc, #40]	@ (8001a50 <LoopFillZerobss+0x22>)
 8001a26:	2300      	movs	r3, #0
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:
 8001a2e:	42a2      	cmp	r2, r4
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>
 8001a32:	f009 fa17 	bl	800ae64 <__libc_init_array>
 8001a36:	f7fe fda5 	bl	8000584 <main>
 8001a3a:	4770      	bx	lr
 8001a3c:	24100000 	.word	0x24100000
 8001a40:	24000000 	.word	0x24000000
 8001a44:	24000010 	.word	0x24000010
 8001a48:	0800afcc 	.word	0x0800afcc
 8001a4c:	24000010 	.word	0x24000010
 8001a50:	2400093c 	.word	0x2400093c

08001a54 <ADC_IRQHandler>:
 8001a54:	e7fe      	b.n	8001a54 <ADC_IRQHandler>
	...

08001a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5e:	2003      	movs	r0, #3
 8001a60:	f001 faf0 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001a64:	f005 ff3a 	bl	80078dc <HAL_RCC_GetSysClockFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <HAL_Init+0x68>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	4913      	ldr	r1, [pc, #76]	@ (8001ac4 <HAL_Init+0x6c>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a80:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <HAL_Init+0x68>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac4 <HAL_Init+0x6c>)
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
 8001a98:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac8 <HAL_Init+0x70>)
 8001a9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001acc <HAL_Init+0x74>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa2:	200f      	movs	r0, #15
 8001aa4:	f000 f814 	bl	8001ad0 <HAL_InitTick>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e002      	b.n	8001ab8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab2:	f7ff fb01 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	58024400 	.word	0x58024400
 8001ac4:	0800af9c 	.word	0x0800af9c
 8001ac8:	24000004 	.word	0x24000004
 8001acc:	24000000 	.word	0x24000000

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ad8:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <HAL_InitTick+0x60>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e021      	b.n	8001b28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <HAL_InitTick+0x64>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_InitTick+0x60>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fad5 	bl	80030aa <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00e      	b.n	8001b28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d80a      	bhi.n	8001b26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f001 fa9f 	bl	800305a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b1c:	4a06      	ldr	r2, [pc, #24]	@ (8001b38 <HAL_InitTick+0x68>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	2400000c 	.word	0x2400000c
 8001b34:	24000000 	.word	0x24000000
 8001b38:	24000008 	.word	0x24000008

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2400000c 	.word	0x2400000c
 8001b60:	24000938 	.word	0x24000938

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	24000938 	.word	0x24000938

08001b7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	609a      	str	r2, [r3, #8]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3360      	adds	r3, #96	@ 0x60
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	431a      	orrs	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001c18:	bf00      	nop
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	431a      	orrs	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	611a      	str	r2, [r3, #16]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b087      	sub	sp, #28
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3360      	adds	r3, #96	@ 0x60
 8001c66:	461a      	mov	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	601a      	str	r2, [r3, #0]
  }
}
 8001c80:	bf00      	nop
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b087      	sub	sp, #28
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3330      	adds	r3, #48	@ 0x30
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	4413      	add	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	211f      	movs	r1, #31
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0e9b      	lsrs	r3, r3, #26
 8001cea:	f003 011f 	and.w	r1, r3, #31
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cfe:	bf00      	nop
 8001d00:	371c      	adds	r7, #28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f023 0203 	bic.w	r2, r3, #3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3314      	adds	r3, #20
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	0e5b      	lsrs	r3, r3, #25
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	4413      	add	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	0d1b      	lsrs	r3, r3, #20
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	2107      	movs	r1, #7
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	401a      	ands	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	0d1b      	lsrs	r3, r3, #20
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	431a      	orrs	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d7a:	bf00      	nop
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0318 	and.w	r3, r3, #24
 8001daa:	4908      	ldr	r1, [pc, #32]	@ (8001dcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dac:	40d9      	lsrs	r1, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	400b      	ands	r3, r1
 8001db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001db6:	431a      	orrs	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	000fffff 	.word	0x000fffff

08001dd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6093      	str	r3, [r2, #8]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	5fffffc0 	.word	0x5fffffc0

08001e10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e24:	d101      	bne.n	8001e2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <LL_ADC_EnableInternalRegulator+0x24>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	6fffffc0 	.word	0x6fffffc0

08001e60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e74:	d101      	bne.n	8001e7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <LL_ADC_Enable+0x24>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	f043 0201 	orr.w	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	7fffffc0 	.word	0x7fffffc0

08001eb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <LL_ADC_IsEnabled+0x18>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_ADC_IsEnabled+0x1a>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <LL_ADC_REG_StartConversion+0x24>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	f043 0204 	orr.w	r2, r3, #4
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	7fffffc0 	.word	0x7fffffc0

08001f00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d101      	bne.n	8001f18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d101      	bne.n	8001f3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b089      	sub	sp, #36	@ 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e138      	b.n	80021d8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff f8bf 	bl	80010f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff3f 	bl	8001e10 <LL_ADC_IsDeepPowerDownEnabled>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff25 	bl	8001dec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff5a 	bl	8001e60 <LL_ADC_IsInternalRegulatorEnabled>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d114      	bne.n	8001fdc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff3e 	bl	8001e38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fbc:	4b88      	ldr	r3, [pc, #544]	@ (80021e0 <HAL_ADC_Init+0x294>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	4a88      	ldr	r2, [pc, #544]	@ (80021e4 <HAL_ADC_Init+0x298>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fce:	e002      	b.n	8001fd6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f9      	bne.n	8001fd0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff3d 	bl	8001e60 <LL_ADC_IsInternalRegulatorEnabled>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10d      	bne.n	8002008 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff0:	f043 0210 	orr.w	r2, r3, #16
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff77 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 8002012:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	f040 80d2 	bne.w	80021c6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b00      	cmp	r3, #0
 8002026:	f040 80ce 	bne.w	80021c6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002032:	f043 0202 	orr.w	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff36 	bl	8001eb0 <LL_ADC_IsEnabled>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d110      	bne.n	800206c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800204a:	4867      	ldr	r0, [pc, #412]	@ (80021e8 <HAL_ADC_Init+0x29c>)
 800204c:	f7ff ff30 	bl	8001eb0 <LL_ADC_IsEnabled>
 8002050:	4604      	mov	r4, r0
 8002052:	4866      	ldr	r0, [pc, #408]	@ (80021ec <HAL_ADC_Init+0x2a0>)
 8002054:	f7ff ff2c 	bl	8001eb0 <LL_ADC_IsEnabled>
 8002058:	4603      	mov	r3, r0
 800205a:	4323      	orrs	r3, r4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4619      	mov	r1, r3
 8002066:	4862      	ldr	r0, [pc, #392]	@ (80021f0 <HAL_ADC_Init+0x2a4>)
 8002068:	f7ff fd88 	bl	8001b7c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7d5b      	ldrb	r3, [r3, #21]
 8002070:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002076:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800207c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7f1b      	ldrb	r3, [r3, #28]
 8002082:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7f1b      	ldrb	r3, [r3, #28]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d106      	bne.n	800209e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	3b01      	subs	r3, #1
 8002096:	045b      	lsls	r3, r3, #17
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4b4c      	ldr	r3, [pc, #304]	@ (80021f4 <HAL_ADC_Init+0x2a8>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	69b9      	ldr	r1, [r7, #24]
 80020ca:	430b      	orrs	r3, r1
 80020cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff14 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 80020d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff21 	bl	8001f26 <LL_ADC_INJ_IsConversionOngoing>
 80020e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d14a      	bne.n	8002182 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d147      	bne.n	8002182 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7d1b      	ldrb	r3, [r3, #20]
 80020f6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	4b3c      	ldr	r3, [pc, #240]	@ (80021f8 <HAL_ADC_Init+0x2ac>)
 8002108:	4013      	ands	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	69b9      	ldr	r1, [r7, #24]
 8002110:	430b      	orrs	r3, r1
 8002112:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800211a:	2b01      	cmp	r3, #1
 800211c:	d11b      	bne.n	8002156 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	4b34      	ldr	r3, [pc, #208]	@ (80021fc <HAL_ADC_Init+0x2b0>)
 800212c:	4013      	ands	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002132:	3a01      	subs	r2, #1
 8002134:	0411      	lsls	r1, r2, #16
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002140:	4311      	orrs	r1, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002146:	430a      	orrs	r2, r1
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	611a      	str	r2, [r3, #16]
 8002154:	e007      	b.n	8002166 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fd01 	bl	8002b84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10c      	bne.n	80021a4 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002190:	f023 010f 	bic.w	r1, r3, #15
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80021a2:	e007      	b.n	80021b4 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 020f 	bic.w	r2, r2, #15
 80021b2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b8:	f023 0303 	bic.w	r3, r3, #3
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80021c4:	e007      	b.n	80021d6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ca:	f043 0210 	orr.w	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3724      	adds	r7, #36	@ 0x24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	24000000 	.word	0x24000000
 80021e4:	053e2d63 	.word	0x053e2d63
 80021e8:	40022000 	.word	0x40022000
 80021ec:	40022100 	.word	0x40022100
 80021f0:	40022300 	.word	0x40022300
 80021f4:	fff0c003 	.word	0xfff0c003
 80021f8:	ffffbffc 	.word	0xffffbffc
 80021fc:	fc00f81e 	.word	0xfc00f81e

08002200 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800220c:	484f      	ldr	r0, [pc, #316]	@ (800234c <HAL_ADC_Start_DMA+0x14c>)
 800220e:	f7ff fddf 	bl	8001dd0 <LL_ADC_GetMultimode>
 8002212:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fe71 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 808c 	bne.w	800233e <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_ADC_Start_DMA+0x34>
 8002230:	2302      	movs	r3, #2
 8002232:	e087      	b.n	8002344 <HAL_ADC_Start_DMA+0x144>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b05      	cmp	r3, #5
 8002246:	d002      	beq.n	800224e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b09      	cmp	r3, #9
 800224c:	d170      	bne.n	8002330 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fb88 	bl	8002964 <ADC_Enable>
 8002254:	4603      	mov	r3, r0
 8002256:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d163      	bne.n	8002326 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002262:	4b3b      	ldr	r3, [pc, #236]	@ (8002350 <HAL_ADC_Start_DMA+0x150>)
 8002264:	4013      	ands	r3, r2
 8002266:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a38      	ldr	r2, [pc, #224]	@ (8002354 <HAL_ADC_Start_DMA+0x154>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d002      	beq.n	800227e <HAL_ADC_Start_DMA+0x7e>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	e000      	b.n	8002280 <HAL_ADC_Start_DMA+0x80>
 800227e:	4b36      	ldr	r3, [pc, #216]	@ (8002358 <HAL_ADC_Start_DMA+0x158>)
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	4293      	cmp	r3, r2
 8002286:	d002      	beq.n	800228e <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d105      	bne.n	800229a <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002292:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	f023 0206 	bic.w	r2, r3, #6
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80022b2:	e002      	b.n	80022ba <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022be:	4a27      	ldr	r2, [pc, #156]	@ (800235c <HAL_ADC_Start_DMA+0x15c>)
 80022c0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	4a26      	ldr	r2, [pc, #152]	@ (8002360 <HAL_ADC_Start_DMA+0x160>)
 80022c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	4a25      	ldr	r2, [pc, #148]	@ (8002364 <HAL_ADC_Start_DMA+0x164>)
 80022d0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	221c      	movs	r2, #28
 80022d8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0210 	orr.w	r2, r2, #16
 80022f0:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	4619      	mov	r1, r3
 80022fc:	4610      	mov	r0, r2
 80022fe:	f7ff fd04 	bl	8001d0a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3340      	adds	r3, #64	@ 0x40
 800230c:	4619      	mov	r1, r3
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f001 fa65 	bl	80037e0 <HAL_DMA_Start_IT>
 8002316:	4603      	mov	r3, r0
 8002318:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fdda 	bl	8001ed8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002324:	e00d      	b.n	8002342 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800232e:	e008      	b.n	8002342 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800233c:	e001      	b.n	8002342 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800233e:	2302      	movs	r3, #2
 8002340:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002342:	7dfb      	ldrb	r3, [r7, #23]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40022300 	.word	0x40022300
 8002350:	fffff0fe 	.word	0xfffff0fe
 8002354:	40022100 	.word	0x40022100
 8002358:	40022000 	.word	0x40022000
 800235c:	08002a5d 	.word	0x08002a5d
 8002360:	08002b35 	.word	0x08002b35
 8002364:	08002b51 	.word	0x08002b51

08002368 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b0a1      	sub	sp, #132	@ 0x84
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a95      	ldr	r2, [pc, #596]	@ (8002600 <HAL_ADC_ConfigChannel+0x270>)
 80023aa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x2a>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e2c0      	b.n	800293c <HAL_ADC_ConfigChannel+0x5ac>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fd9a 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 82a5 	bne.w	800291e <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db2c      	blt.n	8002436 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d108      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x6a>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2201      	movs	r2, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	e016      	b.n	8002428 <HAL_ADC_ConfigChannel+0x98>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002408:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800240a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800240c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002412:	2320      	movs	r3, #32
 8002414:	e003      	b.n	800241e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002416:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2201      	movs	r2, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	69d1      	ldr	r1, [r2, #28]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	430b      	orrs	r3, r1
 8002434:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	f7ff fc35 	bl	8001cb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fd57 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 8002452:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fd64 	bl	8001f26 <LL_ADC_INJ_IsConversionOngoing>
 800245e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 80a0 	bne.w	80025a8 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002468:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 809c 	bne.w	80025a8 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	461a      	mov	r2, r3
 800247e:	f7ff fc57 	bl	8001d30 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x118>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	e00a      	b.n	80024be <HAL_ADC_ConfigChannel+0x12e>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d027      	beq.n	8002518 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6919      	ldr	r1, [r3, #16]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024d6:	f7ff fb85 	bl	8001be4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6919      	ldr	r1, [r3, #16]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	7e5b      	ldrb	r3, [r3, #25]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d102      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x160>
 80024ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80024ee:	e000      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x162>
 80024f0:	2300      	movs	r3, #0
 80024f2:	461a      	mov	r2, r3
 80024f4:	f7ff fbaf 	bl	8001c56 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6919      	ldr	r1, [r3, #16]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	7e1b      	ldrb	r3, [r3, #24]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d102      	bne.n	800250e <HAL_ADC_ConfigChannel+0x17e>
 8002508:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800250c:	e000      	b.n	8002510 <HAL_ADC_ConfigChannel+0x180>
 800250e:	2300      	movs	r3, #0
 8002510:	461a      	mov	r2, r3
 8002512:	f7ff fb87 	bl	8001c24 <LL_ADC_SetDataRightShift>
 8002516:	e047      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	069b      	lsls	r3, r3, #26
 8002528:	429a      	cmp	r2, r3
 800252a:	d107      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800253a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	069b      	lsls	r3, r3, #26
 800254c:	429a      	cmp	r2, r3
 800254e:	d107      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800255e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	429a      	cmp	r2, r3
 8002572:	d107      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002582:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800258a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	069b      	lsls	r3, r3, #26
 8002594:	429a      	cmp	r2, r3
 8002596:	d107      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025a6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fc7f 	bl	8001eb0 <LL_ADC_IsEnabled>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 81bb 	bne.w	8002930 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f7ff fbde 	bl	8001d88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002600 <HAL_ADC_ConfigChannel+0x270>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	f040 8130 	bne.w	8002838 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10d      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x274>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2b09      	cmp	r3, #9
 80025f6:	bf94      	ite	ls
 80025f8:	2301      	movls	r3, #1
 80025fa:	2300      	movhi	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	e01b      	b.n	8002638 <HAL_ADC_ConfigChannel+0x2a8>
 8002600:	47ff0000 	.word	0x47ff0000
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002614:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 800261c:	2320      	movs	r3, #32
 800261e:	e003      	b.n	8002628 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002620:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2b09      	cmp	r3, #9
 8002630:	bf94      	ite	ls
 8002632:	2301      	movls	r3, #1
 8002634:	2300      	movhi	r3, #0
 8002636:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002638:	2b00      	cmp	r3, #0
 800263a:	d079      	beq.n	8002730 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x2c8>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	3301      	adds	r3, #1
 8002650:	069b      	lsls	r3, r3, #26
 8002652:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002656:	e015      	b.n	8002684 <HAL_ADC_ConfigChannel+0x2f4>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002668:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800266a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002670:	2320      	movs	r3, #32
 8002672:	e003      	b.n	800267c <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3301      	adds	r3, #1
 800267e:	069b      	lsls	r3, r3, #26
 8002680:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x314>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0e9b      	lsrs	r3, r3, #26
 8002696:	3301      	adds	r3, #1
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	2101      	movs	r1, #1
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	e017      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x344>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80026b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80026b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e003      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 80026c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	ea42 0103 	orr.w	r1, r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10a      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x36a>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0e9b      	lsrs	r3, r3, #26
 80026ea:	3301      	adds	r3, #1
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	051b      	lsls	r3, r3, #20
 80026f8:	e018      	b.n	800272c <HAL_ADC_ConfigChannel+0x39c>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800270c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e003      	b.n	800271e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800272c:	430b      	orrs	r3, r1
 800272e:	e07e      	b.n	800282e <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <HAL_ADC_ConfigChannel+0x3bc>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0e9b      	lsrs	r3, r3, #26
 8002742:	3301      	adds	r3, #1
 8002744:	069b      	lsls	r3, r3, #26
 8002746:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800274a:	e015      	b.n	8002778 <HAL_ADC_ConfigChannel+0x3e8>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800275a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800275e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	e003      	b.n	8002770 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3301      	adds	r3, #1
 8002772:	069b      	lsls	r3, r3, #26
 8002774:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x408>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	3301      	adds	r3, #1
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	e017      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x438>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	61bb      	str	r3, [r7, #24]
  return result;
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 80027b0:	2320      	movs	r3, #32
 80027b2:	e003      	b.n	80027bc <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	2101      	movs	r1, #1
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	ea42 0103 	orr.w	r1, r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10d      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x464>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	3301      	adds	r3, #1
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	3b1e      	subs	r3, #30
 80027ec:	051b      	lsls	r3, r3, #20
 80027ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	e01b      	b.n	800282c <HAL_ADC_ConfigChannel+0x49c>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	60fb      	str	r3, [r7, #12]
  return result;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	f003 021f 	and.w	r2, r3, #31
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	3b1e      	subs	r3, #30
 8002826:	051b      	lsls	r3, r3, #20
 8002828:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800282c:	430b      	orrs	r3, r1
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	6892      	ldr	r2, [r2, #8]
 8002832:	4619      	mov	r1, r3
 8002834:	f7ff fa7c 	bl	8001d30 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	da77      	bge.n	8002930 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002840:	4840      	ldr	r0, [pc, #256]	@ (8002944 <HAL_ADC_ConfigChannel+0x5b4>)
 8002842:	f7ff f9c1 	bl	8001bc8 <LL_ADC_GetCommonPathInternalCh>
 8002846:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002848:	483f      	ldr	r0, [pc, #252]	@ (8002948 <HAL_ADC_ConfigChannel+0x5b8>)
 800284a:	f7ff fb31 	bl	8001eb0 <LL_ADC_IsEnabled>
 800284e:	4604      	mov	r4, r0
 8002850:	483e      	ldr	r0, [pc, #248]	@ (800294c <HAL_ADC_ConfigChannel+0x5bc>)
 8002852:	f7ff fb2d 	bl	8001eb0 <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	4323      	orrs	r3, r4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d155      	bne.n	800290a <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a3b      	ldr	r2, [pc, #236]	@ (8002950 <HAL_ADC_ConfigChannel+0x5c0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d122      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x51e>
 8002868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800286a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d11d      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a35      	ldr	r2, [pc, #212]	@ (800294c <HAL_ADC_ConfigChannel+0x5bc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d159      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800287c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800287e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002882:	4619      	mov	r1, r3
 8002884:	482f      	ldr	r0, [pc, #188]	@ (8002944 <HAL_ADC_ConfigChannel+0x5b4>)
 8002886:	f7ff f98c 	bl	8001ba2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800288a:	4b32      	ldr	r3, [pc, #200]	@ (8002954 <HAL_ADC_ConfigChannel+0x5c4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	099b      	lsrs	r3, r3, #6
 8002890:	4a31      	ldr	r2, [pc, #196]	@ (8002958 <HAL_ADC_ConfigChannel+0x5c8>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	3301      	adds	r3, #1
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800289e:	e002      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f9      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ac:	e040      	b.n	8002930 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2a      	ldr	r2, [pc, #168]	@ (800295c <HAL_ADC_ConfigChannel+0x5cc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d111      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x54c>
 80028b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a21      	ldr	r2, [pc, #132]	@ (800294c <HAL_ADC_ConfigChannel+0x5bc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d131      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	4619      	mov	r1, r3
 80028d4:	481b      	ldr	r0, [pc, #108]	@ (8002944 <HAL_ADC_ConfigChannel+0x5b4>)
 80028d6:	f7ff f964 	bl	8001ba2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028da:	e029      	b.n	8002930 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002960 <HAL_ADC_ConfigChannel+0x5d0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d124      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x5a0>
 80028e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d11f      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a15      	ldr	r2, [pc, #84]	@ (800294c <HAL_ADC_ConfigChannel+0x5bc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d11a      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002900:	4619      	mov	r1, r3
 8002902:	4810      	ldr	r0, [pc, #64]	@ (8002944 <HAL_ADC_ConfigChannel+0x5b4>)
 8002904:	f7ff f94d 	bl	8001ba2 <LL_ADC_SetCommonPathInternalCh>
 8002908:	e012      	b.n	8002930 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290e:	f043 0220 	orr.w	r2, r3, #32
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800291c:	e008      	b.n	8002930 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	f043 0220 	orr.w	r2, r3, #32
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002938:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800293c:	4618      	mov	r0, r3
 800293e:	3784      	adds	r7, #132	@ 0x84
 8002940:	46bd      	mov	sp, r7
 8002942:	bd90      	pop	{r4, r7, pc}
 8002944:	40022300 	.word	0x40022300
 8002948:	40022000 	.word	0x40022000
 800294c:	40022100 	.word	0x40022100
 8002950:	cb840000 	.word	0xcb840000
 8002954:	24000000 	.word	0x24000000
 8002958:	053e2d63 	.word	0x053e2d63
 800295c:	bac04000 	.word	0xbac04000
 8002960:	cfb80000 	.word	0xcfb80000

08002964 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fa9d 	bl	8001eb0 <LL_ADC_IsEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d161      	bne.n	8002a40 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	4b32      	ldr	r3, [pc, #200]	@ (8002a4c <ADC_Enable+0xe8>)
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298e:	f043 0210 	orr.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e04d      	b.n	8002a42 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fa6c 	bl	8001e88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029b0:	f7ff f8d8 	bl	8001b64 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029b6:	4826      	ldr	r0, [pc, #152]	@ (8002a50 <ADC_Enable+0xec>)
 80029b8:	f7ff fa0a 	bl	8001dd0 <LL_ADC_GetMultimode>
 80029bc:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a24      	ldr	r2, [pc, #144]	@ (8002a54 <ADC_Enable+0xf0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d002      	beq.n	80029ce <ADC_Enable+0x6a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	e000      	b.n	80029d0 <ADC_Enable+0x6c>
 80029ce:	4b22      	ldr	r3, [pc, #136]	@ (8002a58 <ADC_Enable+0xf4>)
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d02c      	beq.n	8002a32 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d130      	bne.n	8002a40 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029de:	e028      	b.n	8002a32 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fa63 	bl	8001eb0 <LL_ADC_IsEnabled>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fa47 	bl	8001e88 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029fa:	f7ff f8b3 	bl	8001b64 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d914      	bls.n	8002a32 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d00d      	beq.n	8002a32 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e007      	b.n	8002a42 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d1cf      	bne.n	80029e0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	8000003f 	.word	0x8000003f
 8002a50:	40022300 	.word	0x40022300
 8002a54:	40022100 	.word	0x40022100
 8002a58:	40022000 	.word	0x40022000

08002a5c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d14b      	bne.n	8002b0e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d021      	beq.n	8002ad4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff f8f9 	bl	8001c8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d032      	beq.n	8002b06 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d12b      	bne.n	8002b06 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d11f      	bne.n	8002b06 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ad2:	e018      	b.n	8002b06 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d111      	bne.n	8002b06 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afe:	f043 0201 	orr.w	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f7fe fa56 	bl	8000fb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b0c:	e00e      	b.n	8002b2c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff fc2e 	bl	800237c <HAL_ADC_ErrorCallback>
}
 8002b20:	e004      	b.n	8002b2c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff fc10 	bl	8002368 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6e:	f043 0204 	orr.w	r2, r3, #4
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f7ff fc00 	bl	800237c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b8c:	4b60      	ldr	r3, [pc, #384]	@ (8002d10 <ADC_ConfigureBoostMode+0x18c>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01c      	beq.n	8002bd2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b98:	f005 f81a 	bl	8007bd0 <HAL_RCC_GetHCLKFreq>
 8002b9c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ba6:	d010      	beq.n	8002bca <ADC_ConfigureBoostMode+0x46>
 8002ba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002bac:	d873      	bhi.n	8002c96 <ADC_ConfigureBoostMode+0x112>
 8002bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb2:	d002      	beq.n	8002bba <ADC_ConfigureBoostMode+0x36>
 8002bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bb8:	d16d      	bne.n	8002c96 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	60fb      	str	r3, [r7, #12]
        break;
 8002bc8:	e068      	b.n	8002c9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	60fb      	str	r3, [r7, #12]
        break;
 8002bd0:	e064      	b.n	8002c9c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002bd2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	f006 f9fd 	bl	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002bde:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002be8:	d051      	beq.n	8002c8e <ADC_ConfigureBoostMode+0x10a>
 8002bea:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002bee:	d854      	bhi.n	8002c9a <ADC_ConfigureBoostMode+0x116>
 8002bf0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002bf4:	d047      	beq.n	8002c86 <ADC_ConfigureBoostMode+0x102>
 8002bf6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002bfa:	d84e      	bhi.n	8002c9a <ADC_ConfigureBoostMode+0x116>
 8002bfc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c00:	d03d      	beq.n	8002c7e <ADC_ConfigureBoostMode+0xfa>
 8002c02:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c06:	d848      	bhi.n	8002c9a <ADC_ConfigureBoostMode+0x116>
 8002c08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c0c:	d033      	beq.n	8002c76 <ADC_ConfigureBoostMode+0xf2>
 8002c0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c12:	d842      	bhi.n	8002c9a <ADC_ConfigureBoostMode+0x116>
 8002c14:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c18:	d029      	beq.n	8002c6e <ADC_ConfigureBoostMode+0xea>
 8002c1a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c1e:	d83c      	bhi.n	8002c9a <ADC_ConfigureBoostMode+0x116>
 8002c20:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c24:	d01a      	beq.n	8002c5c <ADC_ConfigureBoostMode+0xd8>
 8002c26:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c2a:	d836      	bhi.n	8002c9a <ADC_ConfigureBoostMode+0x116>
 8002c2c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c30:	d014      	beq.n	8002c5c <ADC_ConfigureBoostMode+0xd8>
 8002c32:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c36:	d830      	bhi.n	8002c9a <ADC_ConfigureBoostMode+0x116>
 8002c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c3c:	d00e      	beq.n	8002c5c <ADC_ConfigureBoostMode+0xd8>
 8002c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c42:	d82a      	bhi.n	8002c9a <ADC_ConfigureBoostMode+0x116>
 8002c44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c48:	d008      	beq.n	8002c5c <ADC_ConfigureBoostMode+0xd8>
 8002c4a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c4e:	d824      	bhi.n	8002c9a <ADC_ConfigureBoostMode+0x116>
 8002c50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c54:	d002      	beq.n	8002c5c <ADC_ConfigureBoostMode+0xd8>
 8002c56:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c5a:	d11e      	bne.n	8002c9a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0c9b      	lsrs	r3, r3, #18
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	60fb      	str	r3, [r7, #12]
        break;
 8002c6c:	e016      	b.n	8002c9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	60fb      	str	r3, [r7, #12]
        break;
 8002c74:	e012      	b.n	8002c9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	60fb      	str	r3, [r7, #12]
        break;
 8002c7c:	e00e      	b.n	8002c9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	099b      	lsrs	r3, r3, #6
 8002c82:	60fb      	str	r3, [r7, #12]
        break;
 8002c84:	e00a      	b.n	8002c9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	09db      	lsrs	r3, r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]
        break;
 8002c8c:	e006      	b.n	8002c9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	60fb      	str	r3, [r7, #12]
        break;
 8002c94:	e002      	b.n	8002c9c <ADC_ConfigureBoostMode+0x118>
        break;
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002c9a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d14 <ADC_ConfigureBoostMode+0x190>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d808      	bhi.n	8002cbc <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002cb8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002cba:	e025      	b.n	8002d08 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a16      	ldr	r2, [pc, #88]	@ (8002d18 <ADC_ConfigureBoostMode+0x194>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d80a      	bhi.n	8002cda <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cd6:	609a      	str	r2, [r3, #8]
}
 8002cd8:	e016      	b.n	8002d08 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a0f      	ldr	r2, [pc, #60]	@ (8002d1c <ADC_ConfigureBoostMode+0x198>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d80a      	bhi.n	8002cf8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf4:	609a      	str	r2, [r3, #8]
}
 8002cf6:	e007      	b.n	8002d08 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002d06:	609a      	str	r2, [r3, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40022300 	.word	0x40022300
 8002d14:	005f5e10 	.word	0x005f5e10
 8002d18:	00bebc20 	.word	0x00bebc20
 8002d1c:	017d7840 	.word	0x017d7840

08002d20 <LL_ADC_IsEnabled>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <LL_ADC_IsEnabled+0x18>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <LL_ADC_IsEnabled+0x1a>
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d101      	bne.n	8002d5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b09f      	sub	sp, #124	@ 0x7c
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e080      	b.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d102      	bne.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002da4:	4b3c      	ldr	r3, [pc, #240]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	e001      	b.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e05f      	b.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ffb9 	bl	8002d46 <LL_ADC_REG_IsConversionOngoing>
 8002dd4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ffb3 	bl	8002d46 <LL_ADC_REG_IsConversionOngoing>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d141      	bne.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002de6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d13e      	bne.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dec:	4b2b      	ldr	r3, [pc, #172]	@ (8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002dee:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e08:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e0a:	4822      	ldr	r0, [pc, #136]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002e0c:	f7ff ff88 	bl	8002d20 <LL_ADC_IsEnabled>
 8002e10:	4604      	mov	r4, r0
 8002e12:	4821      	ldr	r0, [pc, #132]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e14:	f7ff ff84 	bl	8002d20 <LL_ADC_IsEnabled>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4323      	orrs	r3, r4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d12e      	bne.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	6811      	ldr	r1, [r2, #0]
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	6892      	ldr	r2, [r2, #8]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	431a      	orrs	r2, r3
 8002e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e36:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e38:	e021      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e44:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e46:	4813      	ldr	r0, [pc, #76]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002e48:	f7ff ff6a 	bl	8002d20 <LL_ADC_IsEnabled>
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	4812      	ldr	r0, [pc, #72]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e50:	f7ff ff66 	bl	8002d20 <LL_ADC_IsEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4323      	orrs	r3, r4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d110      	bne.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e66:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e68:	e009      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6e:	f043 0220 	orr.w	r2, r3, #32
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e7c:	e000      	b.n	8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e7e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e88:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	377c      	adds	r7, #124	@ 0x7c
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	40022000 	.word	0x40022000
 8002e98:	40022100 	.word	0x40022100
 8002e9c:	40022300 	.word	0x40022300
 8002ea0:	fffff0e0 	.word	0xfffff0e0

08002ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ecc:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed2:	4a04      	ldr	r2, [pc, #16]	@ (8002ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	60d3      	str	r3, [r2, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00
 8002ee8:	05fa0000 	.word	0x05fa0000

08002eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef0:	4b04      	ldr	r3, [pc, #16]	@ (8002f04 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	f003 0307 	and.w	r3, r3, #7
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	db0b      	blt.n	8002f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4907      	ldr	r1, [pc, #28]	@ (8002f40 <__NVIC_EnableIRQ+0x38>)
 8002f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2001      	movs	r0, #1
 8002f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e100 	.word	0xe000e100

08002f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db0a      	blt.n	8002f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	490c      	ldr	r1, [pc, #48]	@ (8002f90 <__NVIC_SetPriority+0x4c>)
 8002f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f6c:	e00a      	b.n	8002f84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4908      	ldr	r1, [pc, #32]	@ (8002f94 <__NVIC_SetPriority+0x50>)
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	761a      	strb	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	@ 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	bf28      	it	cs
 8002fb6:	2304      	movcs	r3, #4
 8002fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d902      	bls.n	8002fc8 <NVIC_EncodePriority+0x30>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	e000      	b.n	8002fca <NVIC_EncodePriority+0x32>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	401a      	ands	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43d9      	mvns	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	4313      	orrs	r3, r2
         );
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	@ 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f7ff ff8e 	bl	8002f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff29 	bl	8002ea4 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003068:	f7ff ff40 	bl	8002eec <__NVIC_GetPriorityGrouping>
 800306c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	6978      	ldr	r0, [r7, #20]
 8003074:	f7ff ff90 	bl	8002f98 <NVIC_EncodePriority>
 8003078:	4602      	mov	r2, r0
 800307a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff5f 	bl	8002f44 <__NVIC_SetPriority>
}
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff33 	bl	8002f08 <__NVIC_EnableIRQ>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ffa4 	bl	8003000 <SysTick_Config>
 80030b8:	4603      	mov	r3, r0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7fe fd4a 	bl	8001b64 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e37d      	b.n	80037d8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a66      	ldr	r2, [pc, #408]	@ (800327c <HAL_DMA_Init+0x1b8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d04a      	beq.n	800317c <HAL_DMA_Init+0xb8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a65      	ldr	r2, [pc, #404]	@ (8003280 <HAL_DMA_Init+0x1bc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d045      	beq.n	800317c <HAL_DMA_Init+0xb8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a63      	ldr	r2, [pc, #396]	@ (8003284 <HAL_DMA_Init+0x1c0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d040      	beq.n	800317c <HAL_DMA_Init+0xb8>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a62      	ldr	r2, [pc, #392]	@ (8003288 <HAL_DMA_Init+0x1c4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d03b      	beq.n	800317c <HAL_DMA_Init+0xb8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a60      	ldr	r2, [pc, #384]	@ (800328c <HAL_DMA_Init+0x1c8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d036      	beq.n	800317c <HAL_DMA_Init+0xb8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a5f      	ldr	r2, [pc, #380]	@ (8003290 <HAL_DMA_Init+0x1cc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d031      	beq.n	800317c <HAL_DMA_Init+0xb8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a5d      	ldr	r2, [pc, #372]	@ (8003294 <HAL_DMA_Init+0x1d0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d02c      	beq.n	800317c <HAL_DMA_Init+0xb8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5c      	ldr	r2, [pc, #368]	@ (8003298 <HAL_DMA_Init+0x1d4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d027      	beq.n	800317c <HAL_DMA_Init+0xb8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5a      	ldr	r2, [pc, #360]	@ (800329c <HAL_DMA_Init+0x1d8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d022      	beq.n	800317c <HAL_DMA_Init+0xb8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a59      	ldr	r2, [pc, #356]	@ (80032a0 <HAL_DMA_Init+0x1dc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d01d      	beq.n	800317c <HAL_DMA_Init+0xb8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a57      	ldr	r2, [pc, #348]	@ (80032a4 <HAL_DMA_Init+0x1e0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d018      	beq.n	800317c <HAL_DMA_Init+0xb8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a56      	ldr	r2, [pc, #344]	@ (80032a8 <HAL_DMA_Init+0x1e4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <HAL_DMA_Init+0xb8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a54      	ldr	r2, [pc, #336]	@ (80032ac <HAL_DMA_Init+0x1e8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00e      	beq.n	800317c <HAL_DMA_Init+0xb8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a53      	ldr	r2, [pc, #332]	@ (80032b0 <HAL_DMA_Init+0x1ec>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d009      	beq.n	800317c <HAL_DMA_Init+0xb8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a51      	ldr	r2, [pc, #324]	@ (80032b4 <HAL_DMA_Init+0x1f0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d004      	beq.n	800317c <HAL_DMA_Init+0xb8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a50      	ldr	r2, [pc, #320]	@ (80032b8 <HAL_DMA_Init+0x1f4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <HAL_DMA_Init+0xbc>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_DMA_Init+0xbe>
 8003180:	2300      	movs	r3, #0
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 813c 	beq.w	8003400 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a37      	ldr	r2, [pc, #220]	@ (800327c <HAL_DMA_Init+0x1b8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d04a      	beq.n	8003238 <HAL_DMA_Init+0x174>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a36      	ldr	r2, [pc, #216]	@ (8003280 <HAL_DMA_Init+0x1bc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d045      	beq.n	8003238 <HAL_DMA_Init+0x174>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a34      	ldr	r2, [pc, #208]	@ (8003284 <HAL_DMA_Init+0x1c0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d040      	beq.n	8003238 <HAL_DMA_Init+0x174>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a33      	ldr	r2, [pc, #204]	@ (8003288 <HAL_DMA_Init+0x1c4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d03b      	beq.n	8003238 <HAL_DMA_Init+0x174>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a31      	ldr	r2, [pc, #196]	@ (800328c <HAL_DMA_Init+0x1c8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d036      	beq.n	8003238 <HAL_DMA_Init+0x174>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a30      	ldr	r2, [pc, #192]	@ (8003290 <HAL_DMA_Init+0x1cc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d031      	beq.n	8003238 <HAL_DMA_Init+0x174>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003294 <HAL_DMA_Init+0x1d0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d02c      	beq.n	8003238 <HAL_DMA_Init+0x174>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003298 <HAL_DMA_Init+0x1d4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d027      	beq.n	8003238 <HAL_DMA_Init+0x174>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	@ (800329c <HAL_DMA_Init+0x1d8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d022      	beq.n	8003238 <HAL_DMA_Init+0x174>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2a      	ldr	r2, [pc, #168]	@ (80032a0 <HAL_DMA_Init+0x1dc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d01d      	beq.n	8003238 <HAL_DMA_Init+0x174>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a28      	ldr	r2, [pc, #160]	@ (80032a4 <HAL_DMA_Init+0x1e0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d018      	beq.n	8003238 <HAL_DMA_Init+0x174>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a27      	ldr	r2, [pc, #156]	@ (80032a8 <HAL_DMA_Init+0x1e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_DMA_Init+0x174>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a25      	ldr	r2, [pc, #148]	@ (80032ac <HAL_DMA_Init+0x1e8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_DMA_Init+0x174>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a24      	ldr	r2, [pc, #144]	@ (80032b0 <HAL_DMA_Init+0x1ec>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_DMA_Init+0x174>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a22      	ldr	r2, [pc, #136]	@ (80032b4 <HAL_DMA_Init+0x1f0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_DMA_Init+0x174>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a21      	ldr	r2, [pc, #132]	@ (80032b8 <HAL_DMA_Init+0x1f4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d108      	bne.n	800324a <HAL_DMA_Init+0x186>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e007      	b.n	800325a <HAL_DMA_Init+0x196>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800325a:	e02f      	b.n	80032bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800325c:	f7fe fc82 	bl	8001b64 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b05      	cmp	r3, #5
 8003268:	d928      	bls.n	80032bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2203      	movs	r2, #3
 8003274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e2ad      	b.n	80037d8 <HAL_DMA_Init+0x714>
 800327c:	40020010 	.word	0x40020010
 8003280:	40020028 	.word	0x40020028
 8003284:	40020040 	.word	0x40020040
 8003288:	40020058 	.word	0x40020058
 800328c:	40020070 	.word	0x40020070
 8003290:	40020088 	.word	0x40020088
 8003294:	400200a0 	.word	0x400200a0
 8003298:	400200b8 	.word	0x400200b8
 800329c:	40020410 	.word	0x40020410
 80032a0:	40020428 	.word	0x40020428
 80032a4:	40020440 	.word	0x40020440
 80032a8:	40020458 	.word	0x40020458
 80032ac:	40020470 	.word	0x40020470
 80032b0:	40020488 	.word	0x40020488
 80032b4:	400204a0 	.word	0x400204a0
 80032b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1c8      	bne.n	800325c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4b73      	ldr	r3, [pc, #460]	@ (80034a4 <HAL_DMA_Init+0x3e0>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80032e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	2b04      	cmp	r3, #4
 800330e:	d107      	bne.n	8003320 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	4313      	orrs	r3, r2
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b28      	cmp	r3, #40	@ 0x28
 8003326:	d903      	bls.n	8003330 <HAL_DMA_Init+0x26c>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b2e      	cmp	r3, #46	@ 0x2e
 800332e:	d91f      	bls.n	8003370 <HAL_DMA_Init+0x2ac>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b3e      	cmp	r3, #62	@ 0x3e
 8003336:	d903      	bls.n	8003340 <HAL_DMA_Init+0x27c>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b42      	cmp	r3, #66	@ 0x42
 800333e:	d917      	bls.n	8003370 <HAL_DMA_Init+0x2ac>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b46      	cmp	r3, #70	@ 0x46
 8003346:	d903      	bls.n	8003350 <HAL_DMA_Init+0x28c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b48      	cmp	r3, #72	@ 0x48
 800334e:	d90f      	bls.n	8003370 <HAL_DMA_Init+0x2ac>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b4e      	cmp	r3, #78	@ 0x4e
 8003356:	d903      	bls.n	8003360 <HAL_DMA_Init+0x29c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b52      	cmp	r3, #82	@ 0x52
 800335e:	d907      	bls.n	8003370 <HAL_DMA_Init+0x2ac>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b73      	cmp	r3, #115	@ 0x73
 8003366:	d905      	bls.n	8003374 <HAL_DMA_Init+0x2b0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b77      	cmp	r3, #119	@ 0x77
 800336e:	d801      	bhi.n	8003374 <HAL_DMA_Init+0x2b0>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <HAL_DMA_Init+0x2b2>
 8003374:	2300      	movs	r3, #0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003380:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f023 0307 	bic.w	r3, r3, #7
 8003398:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d117      	bne.n	80033dc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00e      	beq.n	80033dc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f001 fe70 	bl	80050a4 <DMA_CheckFifoParam>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2240      	movs	r2, #64	@ 0x40
 80033ce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e1fd      	b.n	80037d8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f001 fdab 	bl	8004f40 <DMA_CalcBaseAndBitshift>
 80033ea:	4603      	mov	r3, r0
 80033ec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	223f      	movs	r2, #63	@ 0x3f
 80033f8:	409a      	lsls	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	e0fd      	b.n	80035fc <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a28      	ldr	r2, [pc, #160]	@ (80034a8 <HAL_DMA_Init+0x3e4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d04a      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a27      	ldr	r2, [pc, #156]	@ (80034ac <HAL_DMA_Init+0x3e8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d045      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a25      	ldr	r2, [pc, #148]	@ (80034b0 <HAL_DMA_Init+0x3ec>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d040      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a24      	ldr	r2, [pc, #144]	@ (80034b4 <HAL_DMA_Init+0x3f0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d03b      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a22      	ldr	r2, [pc, #136]	@ (80034b8 <HAL_DMA_Init+0x3f4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d036      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a21      	ldr	r2, [pc, #132]	@ (80034bc <HAL_DMA_Init+0x3f8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d031      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1f      	ldr	r2, [pc, #124]	@ (80034c0 <HAL_DMA_Init+0x3fc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d02c      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1e      	ldr	r2, [pc, #120]	@ (80034c4 <HAL_DMA_Init+0x400>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d027      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1c      	ldr	r2, [pc, #112]	@ (80034c8 <HAL_DMA_Init+0x404>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d022      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1b      	ldr	r2, [pc, #108]	@ (80034cc <HAL_DMA_Init+0x408>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d01d      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a19      	ldr	r2, [pc, #100]	@ (80034d0 <HAL_DMA_Init+0x40c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d018      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a18      	ldr	r2, [pc, #96]	@ (80034d4 <HAL_DMA_Init+0x410>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d013      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a16      	ldr	r2, [pc, #88]	@ (80034d8 <HAL_DMA_Init+0x414>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00e      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a15      	ldr	r2, [pc, #84]	@ (80034dc <HAL_DMA_Init+0x418>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d009      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a13      	ldr	r2, [pc, #76]	@ (80034e0 <HAL_DMA_Init+0x41c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d004      	beq.n	80034a0 <HAL_DMA_Init+0x3dc>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a12      	ldr	r2, [pc, #72]	@ (80034e4 <HAL_DMA_Init+0x420>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d123      	bne.n	80034e8 <HAL_DMA_Init+0x424>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e022      	b.n	80034ea <HAL_DMA_Init+0x426>
 80034a4:	fe10803f 	.word	0xfe10803f
 80034a8:	48022c08 	.word	0x48022c08
 80034ac:	48022c1c 	.word	0x48022c1c
 80034b0:	48022c30 	.word	0x48022c30
 80034b4:	48022c44 	.word	0x48022c44
 80034b8:	48022c58 	.word	0x48022c58
 80034bc:	48022c6c 	.word	0x48022c6c
 80034c0:	48022c80 	.word	0x48022c80
 80034c4:	48022c94 	.word	0x48022c94
 80034c8:	58025408 	.word	0x58025408
 80034cc:	5802541c 	.word	0x5802541c
 80034d0:	58025430 	.word	0x58025430
 80034d4:	58025444 	.word	0x58025444
 80034d8:	58025458 	.word	0x58025458
 80034dc:	5802546c 	.word	0x5802546c
 80034e0:	58025480 	.word	0x58025480
 80034e4:	58025494 	.word	0x58025494
 80034e8:	2300      	movs	r3, #0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d07d      	beq.n	80035ea <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7f      	ldr	r2, [pc, #508]	@ (80036f0 <HAL_DMA_Init+0x62c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d021      	beq.n	800353c <HAL_DMA_Init+0x478>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a7d      	ldr	r2, [pc, #500]	@ (80036f4 <HAL_DMA_Init+0x630>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01c      	beq.n	800353c <HAL_DMA_Init+0x478>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a7c      	ldr	r2, [pc, #496]	@ (80036f8 <HAL_DMA_Init+0x634>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d017      	beq.n	800353c <HAL_DMA_Init+0x478>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a7a      	ldr	r2, [pc, #488]	@ (80036fc <HAL_DMA_Init+0x638>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d012      	beq.n	800353c <HAL_DMA_Init+0x478>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a79      	ldr	r2, [pc, #484]	@ (8003700 <HAL_DMA_Init+0x63c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00d      	beq.n	800353c <HAL_DMA_Init+0x478>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a77      	ldr	r2, [pc, #476]	@ (8003704 <HAL_DMA_Init+0x640>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d008      	beq.n	800353c <HAL_DMA_Init+0x478>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a76      	ldr	r2, [pc, #472]	@ (8003708 <HAL_DMA_Init+0x644>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <HAL_DMA_Init+0x478>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a74      	ldr	r2, [pc, #464]	@ (800370c <HAL_DMA_Init+0x648>)
 800353a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4b6e      	ldr	r3, [pc, #440]	@ (8003710 <HAL_DMA_Init+0x64c>)
 8003558:	4013      	ands	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b40      	cmp	r3, #64	@ 0x40
 8003562:	d008      	beq.n	8003576 <HAL_DMA_Init+0x4b2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b80      	cmp	r3, #128	@ 0x80
 800356a:	d102      	bne.n	8003572 <HAL_DMA_Init+0x4ae>
 800356c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003570:	e002      	b.n	8003578 <HAL_DMA_Init+0x4b4>
 8003572:	2300      	movs	r3, #0
 8003574:	e000      	b.n	8003578 <HAL_DMA_Init+0x4b4>
 8003576:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68d2      	ldr	r2, [r2, #12]
 800357c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800357e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003586:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800358e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003596:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800359e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035a6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b55      	ldr	r3, [pc, #340]	@ (8003714 <HAL_DMA_Init+0x650>)
 80035be:	4413      	add	r3, r2
 80035c0:	4a55      	ldr	r2, [pc, #340]	@ (8003718 <HAL_DMA_Init+0x654>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	009a      	lsls	r2, r3, #2
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f001 fcb6 	bl	8004f40 <DMA_CalcBaseAndBitshift>
 80035d4:	4603      	mov	r3, r0
 80035d6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	2201      	movs	r2, #1
 80035e2:	409a      	lsls	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	e008      	b.n	80035fc <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2240      	movs	r2, #64	@ 0x40
 80035ee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2203      	movs	r2, #3
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0ed      	b.n	80037d8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a46      	ldr	r2, [pc, #280]	@ (800371c <HAL_DMA_Init+0x658>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d072      	beq.n	80036ec <HAL_DMA_Init+0x628>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a45      	ldr	r2, [pc, #276]	@ (8003720 <HAL_DMA_Init+0x65c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d06d      	beq.n	80036ec <HAL_DMA_Init+0x628>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a43      	ldr	r2, [pc, #268]	@ (8003724 <HAL_DMA_Init+0x660>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d068      	beq.n	80036ec <HAL_DMA_Init+0x628>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a42      	ldr	r2, [pc, #264]	@ (8003728 <HAL_DMA_Init+0x664>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d063      	beq.n	80036ec <HAL_DMA_Init+0x628>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a40      	ldr	r2, [pc, #256]	@ (800372c <HAL_DMA_Init+0x668>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d05e      	beq.n	80036ec <HAL_DMA_Init+0x628>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a3f      	ldr	r2, [pc, #252]	@ (8003730 <HAL_DMA_Init+0x66c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d059      	beq.n	80036ec <HAL_DMA_Init+0x628>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a3d      	ldr	r2, [pc, #244]	@ (8003734 <HAL_DMA_Init+0x670>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d054      	beq.n	80036ec <HAL_DMA_Init+0x628>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a3c      	ldr	r2, [pc, #240]	@ (8003738 <HAL_DMA_Init+0x674>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d04f      	beq.n	80036ec <HAL_DMA_Init+0x628>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a3a      	ldr	r2, [pc, #232]	@ (800373c <HAL_DMA_Init+0x678>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d04a      	beq.n	80036ec <HAL_DMA_Init+0x628>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a39      	ldr	r2, [pc, #228]	@ (8003740 <HAL_DMA_Init+0x67c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d045      	beq.n	80036ec <HAL_DMA_Init+0x628>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a37      	ldr	r2, [pc, #220]	@ (8003744 <HAL_DMA_Init+0x680>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d040      	beq.n	80036ec <HAL_DMA_Init+0x628>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a36      	ldr	r2, [pc, #216]	@ (8003748 <HAL_DMA_Init+0x684>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d03b      	beq.n	80036ec <HAL_DMA_Init+0x628>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a34      	ldr	r2, [pc, #208]	@ (800374c <HAL_DMA_Init+0x688>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d036      	beq.n	80036ec <HAL_DMA_Init+0x628>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a33      	ldr	r2, [pc, #204]	@ (8003750 <HAL_DMA_Init+0x68c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d031      	beq.n	80036ec <HAL_DMA_Init+0x628>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a31      	ldr	r2, [pc, #196]	@ (8003754 <HAL_DMA_Init+0x690>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02c      	beq.n	80036ec <HAL_DMA_Init+0x628>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a30      	ldr	r2, [pc, #192]	@ (8003758 <HAL_DMA_Init+0x694>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d027      	beq.n	80036ec <HAL_DMA_Init+0x628>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a13      	ldr	r2, [pc, #76]	@ (80036f0 <HAL_DMA_Init+0x62c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d022      	beq.n	80036ec <HAL_DMA_Init+0x628>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a12      	ldr	r2, [pc, #72]	@ (80036f4 <HAL_DMA_Init+0x630>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d01d      	beq.n	80036ec <HAL_DMA_Init+0x628>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a10      	ldr	r2, [pc, #64]	@ (80036f8 <HAL_DMA_Init+0x634>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_DMA_Init+0x628>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a0f      	ldr	r2, [pc, #60]	@ (80036fc <HAL_DMA_Init+0x638>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_DMA_Init+0x628>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003700 <HAL_DMA_Init+0x63c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <HAL_DMA_Init+0x628>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003704 <HAL_DMA_Init+0x640>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_DMA_Init+0x628>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003708 <HAL_DMA_Init+0x644>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_DMA_Init+0x628>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a09      	ldr	r2, [pc, #36]	@ (800370c <HAL_DMA_Init+0x648>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d137      	bne.n	800375c <HAL_DMA_Init+0x698>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e036      	b.n	800375e <HAL_DMA_Init+0x69a>
 80036f0:	58025408 	.word	0x58025408
 80036f4:	5802541c 	.word	0x5802541c
 80036f8:	58025430 	.word	0x58025430
 80036fc:	58025444 	.word	0x58025444
 8003700:	58025458 	.word	0x58025458
 8003704:	5802546c 	.word	0x5802546c
 8003708:	58025480 	.word	0x58025480
 800370c:	58025494 	.word	0x58025494
 8003710:	fffe000f 	.word	0xfffe000f
 8003714:	a7fdabf8 	.word	0xa7fdabf8
 8003718:	cccccccd 	.word	0xcccccccd
 800371c:	40020010 	.word	0x40020010
 8003720:	40020028 	.word	0x40020028
 8003724:	40020040 	.word	0x40020040
 8003728:	40020058 	.word	0x40020058
 800372c:	40020070 	.word	0x40020070
 8003730:	40020088 	.word	0x40020088
 8003734:	400200a0 	.word	0x400200a0
 8003738:	400200b8 	.word	0x400200b8
 800373c:	40020410 	.word	0x40020410
 8003740:	40020428 	.word	0x40020428
 8003744:	40020440 	.word	0x40020440
 8003748:	40020458 	.word	0x40020458
 800374c:	40020470 	.word	0x40020470
 8003750:	40020488 	.word	0x40020488
 8003754:	400204a0 	.word	0x400204a0
 8003758:	400204b8 	.word	0x400204b8
 800375c:	2300      	movs	r3, #0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d032      	beq.n	80037c8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f001 fd1a 	bl	800519c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b80      	cmp	r3, #128	@ 0x80
 800376e:	d102      	bne.n	8003776 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800378a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d010      	beq.n	80037b6 <HAL_DMA_Init+0x6f2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d80c      	bhi.n	80037b6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f001 fd97 	bl	80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	e008      	b.n	80037c8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e226      	b.n	8003c4a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_DMA_Start_IT+0x2a>
 8003806:	2302      	movs	r3, #2
 8003808:	e21f      	b.n	8003c4a <HAL_DMA_Start_IT+0x46a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	f040 820a 	bne.w	8003c34 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a68      	ldr	r2, [pc, #416]	@ (80039d4 <HAL_DMA_Start_IT+0x1f4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d04a      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a66      	ldr	r2, [pc, #408]	@ (80039d8 <HAL_DMA_Start_IT+0x1f8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d045      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a65      	ldr	r2, [pc, #404]	@ (80039dc <HAL_DMA_Start_IT+0x1fc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d040      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a63      	ldr	r2, [pc, #396]	@ (80039e0 <HAL_DMA_Start_IT+0x200>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d03b      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a62      	ldr	r2, [pc, #392]	@ (80039e4 <HAL_DMA_Start_IT+0x204>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d036      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a60      	ldr	r2, [pc, #384]	@ (80039e8 <HAL_DMA_Start_IT+0x208>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d031      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5f      	ldr	r2, [pc, #380]	@ (80039ec <HAL_DMA_Start_IT+0x20c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d02c      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5d      	ldr	r2, [pc, #372]	@ (80039f0 <HAL_DMA_Start_IT+0x210>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d027      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a5c      	ldr	r2, [pc, #368]	@ (80039f4 <HAL_DMA_Start_IT+0x214>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d022      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a5a      	ldr	r2, [pc, #360]	@ (80039f8 <HAL_DMA_Start_IT+0x218>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01d      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a59      	ldr	r2, [pc, #356]	@ (80039fc <HAL_DMA_Start_IT+0x21c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d018      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a57      	ldr	r2, [pc, #348]	@ (8003a00 <HAL_DMA_Start_IT+0x220>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a56      	ldr	r2, [pc, #344]	@ (8003a04 <HAL_DMA_Start_IT+0x224>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00e      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a54      	ldr	r2, [pc, #336]	@ (8003a08 <HAL_DMA_Start_IT+0x228>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d009      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a53      	ldr	r2, [pc, #332]	@ (8003a0c <HAL_DMA_Start_IT+0x22c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a51      	ldr	r2, [pc, #324]	@ (8003a10 <HAL_DMA_Start_IT+0x230>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d108      	bne.n	80038e0 <HAL_DMA_Start_IT+0x100>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e007      	b.n	80038f0 <HAL_DMA_Start_IT+0x110>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f001 f93e 	bl	8004b78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a34      	ldr	r2, [pc, #208]	@ (80039d4 <HAL_DMA_Start_IT+0x1f4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d04a      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a33      	ldr	r2, [pc, #204]	@ (80039d8 <HAL_DMA_Start_IT+0x1f8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d045      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a31      	ldr	r2, [pc, #196]	@ (80039dc <HAL_DMA_Start_IT+0x1fc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d040      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a30      	ldr	r2, [pc, #192]	@ (80039e0 <HAL_DMA_Start_IT+0x200>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d03b      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2e      	ldr	r2, [pc, #184]	@ (80039e4 <HAL_DMA_Start_IT+0x204>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d036      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2d      	ldr	r2, [pc, #180]	@ (80039e8 <HAL_DMA_Start_IT+0x208>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d031      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a2b      	ldr	r2, [pc, #172]	@ (80039ec <HAL_DMA_Start_IT+0x20c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02c      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2a      	ldr	r2, [pc, #168]	@ (80039f0 <HAL_DMA_Start_IT+0x210>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d027      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a28      	ldr	r2, [pc, #160]	@ (80039f4 <HAL_DMA_Start_IT+0x214>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d022      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a27      	ldr	r2, [pc, #156]	@ (80039f8 <HAL_DMA_Start_IT+0x218>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d01d      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a25      	ldr	r2, [pc, #148]	@ (80039fc <HAL_DMA_Start_IT+0x21c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d018      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a24      	ldr	r2, [pc, #144]	@ (8003a00 <HAL_DMA_Start_IT+0x220>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d013      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a22      	ldr	r2, [pc, #136]	@ (8003a04 <HAL_DMA_Start_IT+0x224>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00e      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a21      	ldr	r2, [pc, #132]	@ (8003a08 <HAL_DMA_Start_IT+0x228>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d009      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a0c <HAL_DMA_Start_IT+0x22c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d004      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1e      	ldr	r2, [pc, #120]	@ (8003a10 <HAL_DMA_Start_IT+0x230>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <HAL_DMA_Start_IT+0x1c0>
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_DMA_Start_IT+0x1c2>
 80039a0:	2300      	movs	r3, #0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d036      	beq.n	8003a14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 021e 	bic.w	r2, r3, #30
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0216 	orr.w	r2, r2, #22
 80039b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d03e      	beq.n	8003a40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0208 	orr.w	r2, r2, #8
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e035      	b.n	8003a40 <HAL_DMA_Start_IT+0x260>
 80039d4:	40020010 	.word	0x40020010
 80039d8:	40020028 	.word	0x40020028
 80039dc:	40020040 	.word	0x40020040
 80039e0:	40020058 	.word	0x40020058
 80039e4:	40020070 	.word	0x40020070
 80039e8:	40020088 	.word	0x40020088
 80039ec:	400200a0 	.word	0x400200a0
 80039f0:	400200b8 	.word	0x400200b8
 80039f4:	40020410 	.word	0x40020410
 80039f8:	40020428 	.word	0x40020428
 80039fc:	40020440 	.word	0x40020440
 8003a00:	40020458 	.word	0x40020458
 8003a04:	40020470 	.word	0x40020470
 8003a08:	40020488 	.word	0x40020488
 8003a0c:	400204a0 	.word	0x400204a0
 8003a10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 020e 	bic.w	r2, r3, #14
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 020a 	orr.w	r2, r2, #10
 8003a26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0204 	orr.w	r2, r2, #4
 8003a3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a83      	ldr	r2, [pc, #524]	@ (8003c54 <HAL_DMA_Start_IT+0x474>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d072      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a82      	ldr	r2, [pc, #520]	@ (8003c58 <HAL_DMA_Start_IT+0x478>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d06d      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a80      	ldr	r2, [pc, #512]	@ (8003c5c <HAL_DMA_Start_IT+0x47c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d068      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a7f      	ldr	r2, [pc, #508]	@ (8003c60 <HAL_DMA_Start_IT+0x480>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d063      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a7d      	ldr	r2, [pc, #500]	@ (8003c64 <HAL_DMA_Start_IT+0x484>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d05e      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7c      	ldr	r2, [pc, #496]	@ (8003c68 <HAL_DMA_Start_IT+0x488>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d059      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a7a      	ldr	r2, [pc, #488]	@ (8003c6c <HAL_DMA_Start_IT+0x48c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d054      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a79      	ldr	r2, [pc, #484]	@ (8003c70 <HAL_DMA_Start_IT+0x490>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d04f      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a77      	ldr	r2, [pc, #476]	@ (8003c74 <HAL_DMA_Start_IT+0x494>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d04a      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a76      	ldr	r2, [pc, #472]	@ (8003c78 <HAL_DMA_Start_IT+0x498>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d045      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a74      	ldr	r2, [pc, #464]	@ (8003c7c <HAL_DMA_Start_IT+0x49c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d040      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a73      	ldr	r2, [pc, #460]	@ (8003c80 <HAL_DMA_Start_IT+0x4a0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d03b      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a71      	ldr	r2, [pc, #452]	@ (8003c84 <HAL_DMA_Start_IT+0x4a4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d036      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a70      	ldr	r2, [pc, #448]	@ (8003c88 <HAL_DMA_Start_IT+0x4a8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d031      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a6e      	ldr	r2, [pc, #440]	@ (8003c8c <HAL_DMA_Start_IT+0x4ac>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02c      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6d      	ldr	r2, [pc, #436]	@ (8003c90 <HAL_DMA_Start_IT+0x4b0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d027      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6b      	ldr	r2, [pc, #428]	@ (8003c94 <HAL_DMA_Start_IT+0x4b4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d022      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6a      	ldr	r2, [pc, #424]	@ (8003c98 <HAL_DMA_Start_IT+0x4b8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d01d      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a68      	ldr	r2, [pc, #416]	@ (8003c9c <HAL_DMA_Start_IT+0x4bc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d018      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a67      	ldr	r2, [pc, #412]	@ (8003ca0 <HAL_DMA_Start_IT+0x4c0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d013      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a65      	ldr	r2, [pc, #404]	@ (8003ca4 <HAL_DMA_Start_IT+0x4c4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00e      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a64      	ldr	r2, [pc, #400]	@ (8003ca8 <HAL_DMA_Start_IT+0x4c8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d009      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a62      	ldr	r2, [pc, #392]	@ (8003cac <HAL_DMA_Start_IT+0x4cc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a61      	ldr	r2, [pc, #388]	@ (8003cb0 <HAL_DMA_Start_IT+0x4d0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_DMA_Start_IT+0x354>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_DMA_Start_IT+0x356>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01a      	beq.n	8003b70 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a37      	ldr	r2, [pc, #220]	@ (8003c54 <HAL_DMA_Start_IT+0x474>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d04a      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a36      	ldr	r2, [pc, #216]	@ (8003c58 <HAL_DMA_Start_IT+0x478>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d045      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a34      	ldr	r2, [pc, #208]	@ (8003c5c <HAL_DMA_Start_IT+0x47c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d040      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a33      	ldr	r2, [pc, #204]	@ (8003c60 <HAL_DMA_Start_IT+0x480>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d03b      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a31      	ldr	r2, [pc, #196]	@ (8003c64 <HAL_DMA_Start_IT+0x484>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d036      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a30      	ldr	r2, [pc, #192]	@ (8003c68 <HAL_DMA_Start_IT+0x488>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d031      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c6c <HAL_DMA_Start_IT+0x48c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d02c      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2d      	ldr	r2, [pc, #180]	@ (8003c70 <HAL_DMA_Start_IT+0x490>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d027      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8003c74 <HAL_DMA_Start_IT+0x494>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d022      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2a      	ldr	r2, [pc, #168]	@ (8003c78 <HAL_DMA_Start_IT+0x498>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d01d      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a28      	ldr	r2, [pc, #160]	@ (8003c7c <HAL_DMA_Start_IT+0x49c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d018      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a27      	ldr	r2, [pc, #156]	@ (8003c80 <HAL_DMA_Start_IT+0x4a0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a25      	ldr	r2, [pc, #148]	@ (8003c84 <HAL_DMA_Start_IT+0x4a4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00e      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a24      	ldr	r2, [pc, #144]	@ (8003c88 <HAL_DMA_Start_IT+0x4a8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d009      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a22      	ldr	r2, [pc, #136]	@ (8003c8c <HAL_DMA_Start_IT+0x4ac>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a21      	ldr	r2, [pc, #132]	@ (8003c90 <HAL_DMA_Start_IT+0x4b0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d108      	bne.n	8003c22 <HAL_DMA_Start_IT+0x442>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e012      	b.n	8003c48 <HAL_DMA_Start_IT+0x468>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	e009      	b.n	8003c48 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	58025408 	.word	0x58025408
 8003c98:	5802541c 	.word	0x5802541c
 8003c9c:	58025430 	.word	0x58025430
 8003ca0:	58025444 	.word	0x58025444
 8003ca4:	58025458 	.word	0x58025458
 8003ca8:	5802546c 	.word	0x5802546c
 8003cac:	58025480 	.word	0x58025480
 8003cb0:	58025494 	.word	0x58025494

08003cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	@ 0x28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cc0:	4b67      	ldr	r3, [pc, #412]	@ (8003e60 <HAL_DMA_IRQHandler+0x1ac>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a67      	ldr	r2, [pc, #412]	@ (8003e64 <HAL_DMA_IRQHandler+0x1b0>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	0a9b      	lsrs	r3, r3, #10
 8003ccc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5f      	ldr	r2, [pc, #380]	@ (8003e68 <HAL_DMA_IRQHandler+0x1b4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d04a      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8003e6c <HAL_DMA_IRQHandler+0x1b8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d045      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a5c      	ldr	r2, [pc, #368]	@ (8003e70 <HAL_DMA_IRQHandler+0x1bc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d040      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a5a      	ldr	r2, [pc, #360]	@ (8003e74 <HAL_DMA_IRQHandler+0x1c0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d03b      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a59      	ldr	r2, [pc, #356]	@ (8003e78 <HAL_DMA_IRQHandler+0x1c4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d036      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a57      	ldr	r2, [pc, #348]	@ (8003e7c <HAL_DMA_IRQHandler+0x1c8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d031      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a56      	ldr	r2, [pc, #344]	@ (8003e80 <HAL_DMA_IRQHandler+0x1cc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d02c      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a54      	ldr	r2, [pc, #336]	@ (8003e84 <HAL_DMA_IRQHandler+0x1d0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d027      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a53      	ldr	r2, [pc, #332]	@ (8003e88 <HAL_DMA_IRQHandler+0x1d4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d022      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a51      	ldr	r2, [pc, #324]	@ (8003e8c <HAL_DMA_IRQHandler+0x1d8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01d      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a50      	ldr	r2, [pc, #320]	@ (8003e90 <HAL_DMA_IRQHandler+0x1dc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d018      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a4e      	ldr	r2, [pc, #312]	@ (8003e94 <HAL_DMA_IRQHandler+0x1e0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a4d      	ldr	r2, [pc, #308]	@ (8003e98 <HAL_DMA_IRQHandler+0x1e4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00e      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e9c <HAL_DMA_IRQHandler+0x1e8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea0 <HAL_DMA_IRQHandler+0x1ec>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xd2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a48      	ldr	r2, [pc, #288]	@ (8003ea4 <HAL_DMA_IRQHandler+0x1f0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d101      	bne.n	8003d8a <HAL_DMA_IRQHandler+0xd6>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_DMA_IRQHandler+0xd8>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 842b 	beq.w	80045e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	2208      	movs	r2, #8
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80a2 	beq.w	8003eec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2e      	ldr	r2, [pc, #184]	@ (8003e68 <HAL_DMA_IRQHandler+0x1b4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d04a      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2d      	ldr	r2, [pc, #180]	@ (8003e6c <HAL_DMA_IRQHandler+0x1b8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d045      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e70 <HAL_DMA_IRQHandler+0x1bc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d040      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a2a      	ldr	r2, [pc, #168]	@ (8003e74 <HAL_DMA_IRQHandler+0x1c0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d03b      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a28      	ldr	r2, [pc, #160]	@ (8003e78 <HAL_DMA_IRQHandler+0x1c4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d036      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a27      	ldr	r2, [pc, #156]	@ (8003e7c <HAL_DMA_IRQHandler+0x1c8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d031      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a25      	ldr	r2, [pc, #148]	@ (8003e80 <HAL_DMA_IRQHandler+0x1cc>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d02c      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a24      	ldr	r2, [pc, #144]	@ (8003e84 <HAL_DMA_IRQHandler+0x1d0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d027      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a22      	ldr	r2, [pc, #136]	@ (8003e88 <HAL_DMA_IRQHandler+0x1d4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d022      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a21      	ldr	r2, [pc, #132]	@ (8003e8c <HAL_DMA_IRQHandler+0x1d8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d01d      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1f      	ldr	r2, [pc, #124]	@ (8003e90 <HAL_DMA_IRQHandler+0x1dc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d018      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003e94 <HAL_DMA_IRQHandler+0x1e0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d013      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1c      	ldr	r2, [pc, #112]	@ (8003e98 <HAL_DMA_IRQHandler+0x1e4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00e      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003e9c <HAL_DMA_IRQHandler+0x1e8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d009      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a19      	ldr	r2, [pc, #100]	@ (8003ea0 <HAL_DMA_IRQHandler+0x1ec>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x194>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a18      	ldr	r2, [pc, #96]	@ (8003ea4 <HAL_DMA_IRQHandler+0x1f0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d12f      	bne.n	8003ea8 <HAL_DMA_IRQHandler+0x1f4>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	bf14      	ite	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	2300      	moveq	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e02e      	b.n	8003ebc <HAL_DMA_IRQHandler+0x208>
 8003e5e:	bf00      	nop
 8003e60:	24000000 	.word	0x24000000
 8003e64:	1b4e81b5 	.word	0x1b4e81b5
 8003e68:	40020010 	.word	0x40020010
 8003e6c:	40020028 	.word	0x40020028
 8003e70:	40020040 	.word	0x40020040
 8003e74:	40020058 	.word	0x40020058
 8003e78:	40020070 	.word	0x40020070
 8003e7c:	40020088 	.word	0x40020088
 8003e80:	400200a0 	.word	0x400200a0
 8003e84:	400200b8 	.word	0x400200b8
 8003e88:	40020410 	.word	0x40020410
 8003e8c:	40020428 	.word	0x40020428
 8003e90:	40020440 	.word	0x40020440
 8003e94:	40020458 	.word	0x40020458
 8003e98:	40020470 	.word	0x40020470
 8003e9c:	40020488 	.word	0x40020488
 8003ea0:	400204a0 	.word	0x400204a0
 8003ea4:	400204b8 	.word	0x400204b8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bf14      	ite	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	2300      	moveq	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2208      	movs	r2, #8
 8003eda:	409a      	lsls	r2, r3
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee4:	f043 0201 	orr.w	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d06e      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a69      	ldr	r2, [pc, #420]	@ (80040ac <HAL_DMA_IRQHandler+0x3f8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d04a      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a67      	ldr	r2, [pc, #412]	@ (80040b0 <HAL_DMA_IRQHandler+0x3fc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d045      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a66      	ldr	r2, [pc, #408]	@ (80040b4 <HAL_DMA_IRQHandler+0x400>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d040      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a64      	ldr	r2, [pc, #400]	@ (80040b8 <HAL_DMA_IRQHandler+0x404>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d03b      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a63      	ldr	r2, [pc, #396]	@ (80040bc <HAL_DMA_IRQHandler+0x408>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d036      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a61      	ldr	r2, [pc, #388]	@ (80040c0 <HAL_DMA_IRQHandler+0x40c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d031      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a60      	ldr	r2, [pc, #384]	@ (80040c4 <HAL_DMA_IRQHandler+0x410>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d02c      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a5e      	ldr	r2, [pc, #376]	@ (80040c8 <HAL_DMA_IRQHandler+0x414>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d027      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a5d      	ldr	r2, [pc, #372]	@ (80040cc <HAL_DMA_IRQHandler+0x418>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d022      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a5b      	ldr	r2, [pc, #364]	@ (80040d0 <HAL_DMA_IRQHandler+0x41c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01d      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a5a      	ldr	r2, [pc, #360]	@ (80040d4 <HAL_DMA_IRQHandler+0x420>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d018      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a58      	ldr	r2, [pc, #352]	@ (80040d8 <HAL_DMA_IRQHandler+0x424>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a57      	ldr	r2, [pc, #348]	@ (80040dc <HAL_DMA_IRQHandler+0x428>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a55      	ldr	r2, [pc, #340]	@ (80040e0 <HAL_DMA_IRQHandler+0x42c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a54      	ldr	r2, [pc, #336]	@ (80040e4 <HAL_DMA_IRQHandler+0x430>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x2ee>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a52      	ldr	r2, [pc, #328]	@ (80040e8 <HAL_DMA_IRQHandler+0x434>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x304>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e003      	b.n	8003fc0 <HAL_DMA_IRQHandler+0x30c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2201      	movs	r2, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd8:	f043 0202 	orr.w	r2, r3, #2
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2204      	movs	r2, #4
 8003fea:	409a      	lsls	r2, r3
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 808f 	beq.w	8004114 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80040ac <HAL_DMA_IRQHandler+0x3f8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d04a      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2a      	ldr	r2, [pc, #168]	@ (80040b0 <HAL_DMA_IRQHandler+0x3fc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d045      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a29      	ldr	r2, [pc, #164]	@ (80040b4 <HAL_DMA_IRQHandler+0x400>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d040      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a27      	ldr	r2, [pc, #156]	@ (80040b8 <HAL_DMA_IRQHandler+0x404>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d03b      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a26      	ldr	r2, [pc, #152]	@ (80040bc <HAL_DMA_IRQHandler+0x408>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d036      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a24      	ldr	r2, [pc, #144]	@ (80040c0 <HAL_DMA_IRQHandler+0x40c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d031      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a23      	ldr	r2, [pc, #140]	@ (80040c4 <HAL_DMA_IRQHandler+0x410>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d02c      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a21      	ldr	r2, [pc, #132]	@ (80040c8 <HAL_DMA_IRQHandler+0x414>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d027      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a20      	ldr	r2, [pc, #128]	@ (80040cc <HAL_DMA_IRQHandler+0x418>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d022      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1e      	ldr	r2, [pc, #120]	@ (80040d0 <HAL_DMA_IRQHandler+0x41c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01d      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1d      	ldr	r2, [pc, #116]	@ (80040d4 <HAL_DMA_IRQHandler+0x420>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d018      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1b      	ldr	r2, [pc, #108]	@ (80040d8 <HAL_DMA_IRQHandler+0x424>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1a      	ldr	r2, [pc, #104]	@ (80040dc <HAL_DMA_IRQHandler+0x428>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a18      	ldr	r2, [pc, #96]	@ (80040e0 <HAL_DMA_IRQHandler+0x42c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d009      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a17      	ldr	r2, [pc, #92]	@ (80040e4 <HAL_DMA_IRQHandler+0x430>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_DMA_IRQHandler+0x3e2>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a15      	ldr	r2, [pc, #84]	@ (80040e8 <HAL_DMA_IRQHandler+0x434>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d12a      	bne.n	80040ec <HAL_DMA_IRQHandler+0x438>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf14      	ite	ne
 80040a4:	2301      	movne	r3, #1
 80040a6:	2300      	moveq	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e023      	b.n	80040f4 <HAL_DMA_IRQHandler+0x440>
 80040ac:	40020010 	.word	0x40020010
 80040b0:	40020028 	.word	0x40020028
 80040b4:	40020040 	.word	0x40020040
 80040b8:	40020058 	.word	0x40020058
 80040bc:	40020070 	.word	0x40020070
 80040c0:	40020088 	.word	0x40020088
 80040c4:	400200a0 	.word	0x400200a0
 80040c8:	400200b8 	.word	0x400200b8
 80040cc:	40020410 	.word	0x40020410
 80040d0:	40020428 	.word	0x40020428
 80040d4:	40020440 	.word	0x40020440
 80040d8:	40020458 	.word	0x40020458
 80040dc:	40020470 	.word	0x40020470
 80040e0:	40020488 	.word	0x40020488
 80040e4:	400204a0 	.word	0x400204a0
 80040e8:	400204b8 	.word	0x400204b8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00d      	beq.n	8004114 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	2204      	movs	r2, #4
 8004102:	409a      	lsls	r2, r3
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410c:	f043 0204 	orr.w	r2, r3, #4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	2210      	movs	r2, #16
 800411e:	409a      	lsls	r2, r3
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80a6 	beq.w	8004276 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a85      	ldr	r2, [pc, #532]	@ (8004344 <HAL_DMA_IRQHandler+0x690>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d04a      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a83      	ldr	r2, [pc, #524]	@ (8004348 <HAL_DMA_IRQHandler+0x694>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d045      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a82      	ldr	r2, [pc, #520]	@ (800434c <HAL_DMA_IRQHandler+0x698>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d040      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a80      	ldr	r2, [pc, #512]	@ (8004350 <HAL_DMA_IRQHandler+0x69c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d03b      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a7f      	ldr	r2, [pc, #508]	@ (8004354 <HAL_DMA_IRQHandler+0x6a0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d036      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a7d      	ldr	r2, [pc, #500]	@ (8004358 <HAL_DMA_IRQHandler+0x6a4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d031      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a7c      	ldr	r2, [pc, #496]	@ (800435c <HAL_DMA_IRQHandler+0x6a8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d02c      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a7a      	ldr	r2, [pc, #488]	@ (8004360 <HAL_DMA_IRQHandler+0x6ac>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d027      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a79      	ldr	r2, [pc, #484]	@ (8004364 <HAL_DMA_IRQHandler+0x6b0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d022      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a77      	ldr	r2, [pc, #476]	@ (8004368 <HAL_DMA_IRQHandler+0x6b4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01d      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a76      	ldr	r2, [pc, #472]	@ (800436c <HAL_DMA_IRQHandler+0x6b8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d018      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a74      	ldr	r2, [pc, #464]	@ (8004370 <HAL_DMA_IRQHandler+0x6bc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a73      	ldr	r2, [pc, #460]	@ (8004374 <HAL_DMA_IRQHandler+0x6c0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00e      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a71      	ldr	r2, [pc, #452]	@ (8004378 <HAL_DMA_IRQHandler+0x6c4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a70      	ldr	r2, [pc, #448]	@ (800437c <HAL_DMA_IRQHandler+0x6c8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d004      	beq.n	80041ca <HAL_DMA_IRQHandler+0x516>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004380 <HAL_DMA_IRQHandler+0x6cc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10a      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x52c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf14      	ite	ne
 80041d8:	2301      	movne	r3, #1
 80041da:	2300      	moveq	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e009      	b.n	80041f4 <HAL_DMA_IRQHandler+0x540>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d03e      	beq.n	8004276 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	2210      	movs	r2, #16
 8004202:	409a      	lsls	r2, r3
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d018      	beq.n	8004248 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d108      	bne.n	8004236 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d024      	beq.n	8004276 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
 8004234:	e01f      	b.n	8004276 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423a:	2b00      	cmp	r3, #0
 800423c:	d01b      	beq.n	8004276 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	4798      	blx	r3
 8004246:	e016      	b.n	8004276 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0208 	bic.w	r2, r2, #8
 8004264:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2220      	movs	r2, #32
 8004280:	409a      	lsls	r2, r3
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8110 	beq.w	80044ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2c      	ldr	r2, [pc, #176]	@ (8004344 <HAL_DMA_IRQHandler+0x690>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d04a      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2b      	ldr	r2, [pc, #172]	@ (8004348 <HAL_DMA_IRQHandler+0x694>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d045      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a29      	ldr	r2, [pc, #164]	@ (800434c <HAL_DMA_IRQHandler+0x698>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d040      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a28      	ldr	r2, [pc, #160]	@ (8004350 <HAL_DMA_IRQHandler+0x69c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d03b      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a26      	ldr	r2, [pc, #152]	@ (8004354 <HAL_DMA_IRQHandler+0x6a0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d036      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a25      	ldr	r2, [pc, #148]	@ (8004358 <HAL_DMA_IRQHandler+0x6a4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d031      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a23      	ldr	r2, [pc, #140]	@ (800435c <HAL_DMA_IRQHandler+0x6a8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d02c      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a22      	ldr	r2, [pc, #136]	@ (8004360 <HAL_DMA_IRQHandler+0x6ac>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d027      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a20      	ldr	r2, [pc, #128]	@ (8004364 <HAL_DMA_IRQHandler+0x6b0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004368 <HAL_DMA_IRQHandler+0x6b4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d01d      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1d      	ldr	r2, [pc, #116]	@ (800436c <HAL_DMA_IRQHandler+0x6b8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004370 <HAL_DMA_IRQHandler+0x6bc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1a      	ldr	r2, [pc, #104]	@ (8004374 <HAL_DMA_IRQHandler+0x6c0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a19      	ldr	r2, [pc, #100]	@ (8004378 <HAL_DMA_IRQHandler+0x6c4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a17      	ldr	r2, [pc, #92]	@ (800437c <HAL_DMA_IRQHandler+0x6c8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_DMA_IRQHandler+0x678>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a16      	ldr	r2, [pc, #88]	@ (8004380 <HAL_DMA_IRQHandler+0x6cc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d12b      	bne.n	8004384 <HAL_DMA_IRQHandler+0x6d0>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	bf14      	ite	ne
 800433a:	2301      	movne	r3, #1
 800433c:	2300      	moveq	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	e02a      	b.n	8004398 <HAL_DMA_IRQHandler+0x6e4>
 8004342:	bf00      	nop
 8004344:	40020010 	.word	0x40020010
 8004348:	40020028 	.word	0x40020028
 800434c:	40020040 	.word	0x40020040
 8004350:	40020058 	.word	0x40020058
 8004354:	40020070 	.word	0x40020070
 8004358:	40020088 	.word	0x40020088
 800435c:	400200a0 	.word	0x400200a0
 8004360:	400200b8 	.word	0x400200b8
 8004364:	40020410 	.word	0x40020410
 8004368:	40020428 	.word	0x40020428
 800436c:	40020440 	.word	0x40020440
 8004370:	40020458 	.word	0x40020458
 8004374:	40020470 	.word	0x40020470
 8004378:	40020488 	.word	0x40020488
 800437c:	400204a0 	.word	0x400204a0
 8004380:	400204b8 	.word	0x400204b8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	bf14      	ite	ne
 8004392:	2301      	movne	r3, #1
 8004394:	2300      	moveq	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8087 	beq.w	80044ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	2220      	movs	r2, #32
 80043a8:	409a      	lsls	r2, r3
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d139      	bne.n	800442e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0216 	bic.w	r2, r2, #22
 80043c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <HAL_DMA_IRQHandler+0x736>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0208 	bic.w	r2, r2, #8
 80043f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	223f      	movs	r2, #63	@ 0x3f
 8004404:	409a      	lsls	r2, r3
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8382 	beq.w	8004b28 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
          }
          return;
 800442c:	e37c      	b.n	8004b28 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d018      	beq.n	800446e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d108      	bne.n	800445c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02c      	beq.n	80044ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
 800445a:	e027      	b.n	80044ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d023      	beq.n	80044ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
 800446c:	e01e      	b.n	80044ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10f      	bne.n	800449c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0210 	bic.w	r2, r2, #16
 800448a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 833e 	beq.w	8004b32 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8088 	beq.w	80045d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2204      	movs	r2, #4
 80044c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a89      	ldr	r2, [pc, #548]	@ (80046f8 <HAL_DMA_IRQHandler+0xa44>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d04a      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a88      	ldr	r2, [pc, #544]	@ (80046fc <HAL_DMA_IRQHandler+0xa48>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d045      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a86      	ldr	r2, [pc, #536]	@ (8004700 <HAL_DMA_IRQHandler+0xa4c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d040      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a85      	ldr	r2, [pc, #532]	@ (8004704 <HAL_DMA_IRQHandler+0xa50>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d03b      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a83      	ldr	r2, [pc, #524]	@ (8004708 <HAL_DMA_IRQHandler+0xa54>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d036      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a82      	ldr	r2, [pc, #520]	@ (800470c <HAL_DMA_IRQHandler+0xa58>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d031      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a80      	ldr	r2, [pc, #512]	@ (8004710 <HAL_DMA_IRQHandler+0xa5c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d02c      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a7f      	ldr	r2, [pc, #508]	@ (8004714 <HAL_DMA_IRQHandler+0xa60>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d027      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a7d      	ldr	r2, [pc, #500]	@ (8004718 <HAL_DMA_IRQHandler+0xa64>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d022      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a7c      	ldr	r2, [pc, #496]	@ (800471c <HAL_DMA_IRQHandler+0xa68>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d01d      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a7a      	ldr	r2, [pc, #488]	@ (8004720 <HAL_DMA_IRQHandler+0xa6c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d018      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a79      	ldr	r2, [pc, #484]	@ (8004724 <HAL_DMA_IRQHandler+0xa70>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a77      	ldr	r2, [pc, #476]	@ (8004728 <HAL_DMA_IRQHandler+0xa74>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00e      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a76      	ldr	r2, [pc, #472]	@ (800472c <HAL_DMA_IRQHandler+0xa78>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a74      	ldr	r2, [pc, #464]	@ (8004730 <HAL_DMA_IRQHandler+0xa7c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_DMA_IRQHandler+0x8b8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a73      	ldr	r2, [pc, #460]	@ (8004734 <HAL_DMA_IRQHandler+0xa80>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d108      	bne.n	800457e <HAL_DMA_IRQHandler+0x8ca>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0201 	bic.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e007      	b.n	800458e <HAL_DMA_IRQHandler+0x8da>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3301      	adds	r3, #1
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004596:	429a      	cmp	r2, r3
 8004598:	d307      	bcc.n	80045aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f2      	bne.n	800458e <HAL_DMA_IRQHandler+0x8da>
 80045a8:	e000      	b.n	80045ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80045aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d004      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2203      	movs	r2, #3
 80045be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80045c2:	e003      	b.n	80045cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 82aa 	beq.w	8004b32 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
 80045e6:	e2a4      	b.n	8004b32 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a52      	ldr	r2, [pc, #328]	@ (8004738 <HAL_DMA_IRQHandler+0xa84>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d04a      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a51      	ldr	r2, [pc, #324]	@ (800473c <HAL_DMA_IRQHandler+0xa88>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d045      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a4f      	ldr	r2, [pc, #316]	@ (8004740 <HAL_DMA_IRQHandler+0xa8c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d040      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a4e      	ldr	r2, [pc, #312]	@ (8004744 <HAL_DMA_IRQHandler+0xa90>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d03b      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a4c      	ldr	r2, [pc, #304]	@ (8004748 <HAL_DMA_IRQHandler+0xa94>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d036      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a4b      	ldr	r2, [pc, #300]	@ (800474c <HAL_DMA_IRQHandler+0xa98>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d031      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a49      	ldr	r2, [pc, #292]	@ (8004750 <HAL_DMA_IRQHandler+0xa9c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d02c      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a48      	ldr	r2, [pc, #288]	@ (8004754 <HAL_DMA_IRQHandler+0xaa0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d027      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a46      	ldr	r2, [pc, #280]	@ (8004758 <HAL_DMA_IRQHandler+0xaa4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a45      	ldr	r2, [pc, #276]	@ (800475c <HAL_DMA_IRQHandler+0xaa8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d01d      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a43      	ldr	r2, [pc, #268]	@ (8004760 <HAL_DMA_IRQHandler+0xaac>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a42      	ldr	r2, [pc, #264]	@ (8004764 <HAL_DMA_IRQHandler+0xab0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a40      	ldr	r2, [pc, #256]	@ (8004768 <HAL_DMA_IRQHandler+0xab4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3f      	ldr	r2, [pc, #252]	@ (800476c <HAL_DMA_IRQHandler+0xab8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a3d      	ldr	r2, [pc, #244]	@ (8004770 <HAL_DMA_IRQHandler+0xabc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_DMA_IRQHandler+0x9d4>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a3c      	ldr	r2, [pc, #240]	@ (8004774 <HAL_DMA_IRQHandler+0xac0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <HAL_DMA_IRQHandler+0x9d8>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <HAL_DMA_IRQHandler+0x9da>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 824f 	beq.w	8004b32 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	2204      	movs	r2, #4
 80046a6:	409a      	lsls	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80dd 	beq.w	800486c <HAL_DMA_IRQHandler+0xbb8>
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80d7 	beq.w	800486c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2204      	movs	r2, #4
 80046c8:	409a      	lsls	r2, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d059      	beq.n	800478c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d14a      	bne.n	8004778 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8220 	beq.w	8004b2c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046f4:	e21a      	b.n	8004b2c <HAL_DMA_IRQHandler+0xe78>
 80046f6:	bf00      	nop
 80046f8:	40020010 	.word	0x40020010
 80046fc:	40020028 	.word	0x40020028
 8004700:	40020040 	.word	0x40020040
 8004704:	40020058 	.word	0x40020058
 8004708:	40020070 	.word	0x40020070
 800470c:	40020088 	.word	0x40020088
 8004710:	400200a0 	.word	0x400200a0
 8004714:	400200b8 	.word	0x400200b8
 8004718:	40020410 	.word	0x40020410
 800471c:	40020428 	.word	0x40020428
 8004720:	40020440 	.word	0x40020440
 8004724:	40020458 	.word	0x40020458
 8004728:	40020470 	.word	0x40020470
 800472c:	40020488 	.word	0x40020488
 8004730:	400204a0 	.word	0x400204a0
 8004734:	400204b8 	.word	0x400204b8
 8004738:	48022c08 	.word	0x48022c08
 800473c:	48022c1c 	.word	0x48022c1c
 8004740:	48022c30 	.word	0x48022c30
 8004744:	48022c44 	.word	0x48022c44
 8004748:	48022c58 	.word	0x48022c58
 800474c:	48022c6c 	.word	0x48022c6c
 8004750:	48022c80 	.word	0x48022c80
 8004754:	48022c94 	.word	0x48022c94
 8004758:	58025408 	.word	0x58025408
 800475c:	5802541c 	.word	0x5802541c
 8004760:	58025430 	.word	0x58025430
 8004764:	58025444 	.word	0x58025444
 8004768:	58025458 	.word	0x58025458
 800476c:	5802546c 	.word	0x5802546c
 8004770:	58025480 	.word	0x58025480
 8004774:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 81d5 	beq.w	8004b2c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800478a:	e1cf      	b.n	8004b2c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d160      	bne.n	8004858 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a7f      	ldr	r2, [pc, #508]	@ (8004998 <HAL_DMA_IRQHandler+0xce4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d04a      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a7d      	ldr	r2, [pc, #500]	@ (800499c <HAL_DMA_IRQHandler+0xce8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d045      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a7c      	ldr	r2, [pc, #496]	@ (80049a0 <HAL_DMA_IRQHandler+0xcec>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d040      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a7a      	ldr	r2, [pc, #488]	@ (80049a4 <HAL_DMA_IRQHandler+0xcf0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d03b      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a79      	ldr	r2, [pc, #484]	@ (80049a8 <HAL_DMA_IRQHandler+0xcf4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d036      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a77      	ldr	r2, [pc, #476]	@ (80049ac <HAL_DMA_IRQHandler+0xcf8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d031      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a76      	ldr	r2, [pc, #472]	@ (80049b0 <HAL_DMA_IRQHandler+0xcfc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d02c      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a74      	ldr	r2, [pc, #464]	@ (80049b4 <HAL_DMA_IRQHandler+0xd00>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d027      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a73      	ldr	r2, [pc, #460]	@ (80049b8 <HAL_DMA_IRQHandler+0xd04>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d022      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a71      	ldr	r2, [pc, #452]	@ (80049bc <HAL_DMA_IRQHandler+0xd08>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01d      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a70      	ldr	r2, [pc, #448]	@ (80049c0 <HAL_DMA_IRQHandler+0xd0c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d018      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a6e      	ldr	r2, [pc, #440]	@ (80049c4 <HAL_DMA_IRQHandler+0xd10>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a6d      	ldr	r2, [pc, #436]	@ (80049c8 <HAL_DMA_IRQHandler+0xd14>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00e      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a6b      	ldr	r2, [pc, #428]	@ (80049cc <HAL_DMA_IRQHandler+0xd18>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d009      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a6a      	ldr	r2, [pc, #424]	@ (80049d0 <HAL_DMA_IRQHandler+0xd1c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb82>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a68      	ldr	r2, [pc, #416]	@ (80049d4 <HAL_DMA_IRQHandler+0xd20>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <HAL_DMA_IRQHandler+0xb94>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0208 	bic.w	r2, r2, #8
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e007      	b.n	8004858 <HAL_DMA_IRQHandler+0xba4>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0204 	bic.w	r2, r2, #4
 8004856:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8165 	beq.w	8004b2c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486a:	e15f      	b.n	8004b2c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	2202      	movs	r2, #2
 8004876:	409a      	lsls	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80c5 	beq.w	8004a0c <HAL_DMA_IRQHandler+0xd58>
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80bf 	beq.w	8004a0c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004892:	f003 031f 	and.w	r3, r3, #31
 8004896:	2202      	movs	r2, #2
 8004898:	409a      	lsls	r2, r3
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d018      	beq.n	80048da <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 813a 	beq.w	8004b30 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c4:	e134      	b.n	8004b30 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8130 	beq.w	8004b30 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d8:	e12a      	b.n	8004b30 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f040 8089 	bne.w	80049f8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004998 <HAL_DMA_IRQHandler+0xce4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d04a      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a29      	ldr	r2, [pc, #164]	@ (800499c <HAL_DMA_IRQHandler+0xce8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d045      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a28      	ldr	r2, [pc, #160]	@ (80049a0 <HAL_DMA_IRQHandler+0xcec>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d040      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a26      	ldr	r2, [pc, #152]	@ (80049a4 <HAL_DMA_IRQHandler+0xcf0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d03b      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a25      	ldr	r2, [pc, #148]	@ (80049a8 <HAL_DMA_IRQHandler+0xcf4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d036      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a23      	ldr	r2, [pc, #140]	@ (80049ac <HAL_DMA_IRQHandler+0xcf8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d031      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a22      	ldr	r2, [pc, #136]	@ (80049b0 <HAL_DMA_IRQHandler+0xcfc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d02c      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a20      	ldr	r2, [pc, #128]	@ (80049b4 <HAL_DMA_IRQHandler+0xd00>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d027      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1f      	ldr	r2, [pc, #124]	@ (80049b8 <HAL_DMA_IRQHandler+0xd04>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d022      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1d      	ldr	r2, [pc, #116]	@ (80049bc <HAL_DMA_IRQHandler+0xd08>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d01d      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1c      	ldr	r2, [pc, #112]	@ (80049c0 <HAL_DMA_IRQHandler+0xd0c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d018      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1a      	ldr	r2, [pc, #104]	@ (80049c4 <HAL_DMA_IRQHandler+0xd10>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a19      	ldr	r2, [pc, #100]	@ (80049c8 <HAL_DMA_IRQHandler+0xd14>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a17      	ldr	r2, [pc, #92]	@ (80049cc <HAL_DMA_IRQHandler+0xd18>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a16      	ldr	r2, [pc, #88]	@ (80049d0 <HAL_DMA_IRQHandler+0xd1c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_DMA_IRQHandler+0xcd2>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <HAL_DMA_IRQHandler+0xd20>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d128      	bne.n	80049d8 <HAL_DMA_IRQHandler+0xd24>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0214 	bic.w	r2, r2, #20
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e027      	b.n	80049e8 <HAL_DMA_IRQHandler+0xd34>
 8004998:	40020010 	.word	0x40020010
 800499c:	40020028 	.word	0x40020028
 80049a0:	40020040 	.word	0x40020040
 80049a4:	40020058 	.word	0x40020058
 80049a8:	40020070 	.word	0x40020070
 80049ac:	40020088 	.word	0x40020088
 80049b0:	400200a0 	.word	0x400200a0
 80049b4:	400200b8 	.word	0x400200b8
 80049b8:	40020410 	.word	0x40020410
 80049bc:	40020428 	.word	0x40020428
 80049c0:	40020440 	.word	0x40020440
 80049c4:	40020458 	.word	0x40020458
 80049c8:	40020470 	.word	0x40020470
 80049cc:	40020488 	.word	0x40020488
 80049d0:	400204a0 	.word	0x400204a0
 80049d4:	400204b8 	.word	0x400204b8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 020a 	bic.w	r2, r2, #10
 80049e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8097 	beq.w	8004b30 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a0a:	e091      	b.n	8004b30 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	2208      	movs	r2, #8
 8004a16:	409a      	lsls	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8088 	beq.w	8004b32 <HAL_DMA_IRQHandler+0xe7e>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8082 	beq.w	8004b32 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a41      	ldr	r2, [pc, #260]	@ (8004b38 <HAL_DMA_IRQHandler+0xe84>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d04a      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b3c <HAL_DMA_IRQHandler+0xe88>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d045      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a3e      	ldr	r2, [pc, #248]	@ (8004b40 <HAL_DMA_IRQHandler+0xe8c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d040      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a3c      	ldr	r2, [pc, #240]	@ (8004b44 <HAL_DMA_IRQHandler+0xe90>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d03b      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b48 <HAL_DMA_IRQHandler+0xe94>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d036      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a39      	ldr	r2, [pc, #228]	@ (8004b4c <HAL_DMA_IRQHandler+0xe98>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d031      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a38      	ldr	r2, [pc, #224]	@ (8004b50 <HAL_DMA_IRQHandler+0xe9c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d02c      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a36      	ldr	r2, [pc, #216]	@ (8004b54 <HAL_DMA_IRQHandler+0xea0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d027      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a35      	ldr	r2, [pc, #212]	@ (8004b58 <HAL_DMA_IRQHandler+0xea4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d022      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a33      	ldr	r2, [pc, #204]	@ (8004b5c <HAL_DMA_IRQHandler+0xea8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01d      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a32      	ldr	r2, [pc, #200]	@ (8004b60 <HAL_DMA_IRQHandler+0xeac>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d018      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a30      	ldr	r2, [pc, #192]	@ (8004b64 <HAL_DMA_IRQHandler+0xeb0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8004b68 <HAL_DMA_IRQHandler+0xeb4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8004b6c <HAL_DMA_IRQHandler+0xeb8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2c      	ldr	r2, [pc, #176]	@ (8004b70 <HAL_DMA_IRQHandler+0xebc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_DMA_IRQHandler+0xe1a>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b74 <HAL_DMA_IRQHandler+0xec0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d108      	bne.n	8004ae0 <HAL_DMA_IRQHandler+0xe2c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 021c 	bic.w	r2, r2, #28
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e007      	b.n	8004af0 <HAL_DMA_IRQHandler+0xe3c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 020e 	bic.w	r2, r2, #14
 8004aee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2201      	movs	r2, #1
 8004afa:	409a      	lsls	r2, r3
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
 8004b26:	e004      	b.n	8004b32 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004b28:	bf00      	nop
 8004b2a:	e002      	b.n	8004b32 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b2c:	bf00      	nop
 8004b2e:	e000      	b.n	8004b32 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b32:	3728      	adds	r7, #40	@ 0x28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40020010 	.word	0x40020010
 8004b3c:	40020028 	.word	0x40020028
 8004b40:	40020040 	.word	0x40020040
 8004b44:	40020058 	.word	0x40020058
 8004b48:	40020070 	.word	0x40020070
 8004b4c:	40020088 	.word	0x40020088
 8004b50:	400200a0 	.word	0x400200a0
 8004b54:	400200b8 	.word	0x400200b8
 8004b58:	40020410 	.word	0x40020410
 8004b5c:	40020428 	.word	0x40020428
 8004b60:	40020440 	.word	0x40020440
 8004b64:	40020458 	.word	0x40020458
 8004b68:	40020470 	.word	0x40020470
 8004b6c:	40020488 	.word	0x40020488
 8004b70:	400204a0 	.word	0x400204a0
 8004b74:	400204b8 	.word	0x400204b8

08004b78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a7f      	ldr	r2, [pc, #508]	@ (8004d94 <DMA_SetConfig+0x21c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d072      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a7d      	ldr	r2, [pc, #500]	@ (8004d98 <DMA_SetConfig+0x220>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d06d      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7c      	ldr	r2, [pc, #496]	@ (8004d9c <DMA_SetConfig+0x224>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d068      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7a      	ldr	r2, [pc, #488]	@ (8004da0 <DMA_SetConfig+0x228>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d063      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a79      	ldr	r2, [pc, #484]	@ (8004da4 <DMA_SetConfig+0x22c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d05e      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a77      	ldr	r2, [pc, #476]	@ (8004da8 <DMA_SetConfig+0x230>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d059      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a76      	ldr	r2, [pc, #472]	@ (8004dac <DMA_SetConfig+0x234>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d054      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a74      	ldr	r2, [pc, #464]	@ (8004db0 <DMA_SetConfig+0x238>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d04f      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a73      	ldr	r2, [pc, #460]	@ (8004db4 <DMA_SetConfig+0x23c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d04a      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a71      	ldr	r2, [pc, #452]	@ (8004db8 <DMA_SetConfig+0x240>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d045      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a70      	ldr	r2, [pc, #448]	@ (8004dbc <DMA_SetConfig+0x244>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d040      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc0 <DMA_SetConfig+0x248>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d03b      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6d      	ldr	r2, [pc, #436]	@ (8004dc4 <DMA_SetConfig+0x24c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d036      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc8 <DMA_SetConfig+0x250>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d031      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6a      	ldr	r2, [pc, #424]	@ (8004dcc <DMA_SetConfig+0x254>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d02c      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a68      	ldr	r2, [pc, #416]	@ (8004dd0 <DMA_SetConfig+0x258>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d027      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a67      	ldr	r2, [pc, #412]	@ (8004dd4 <DMA_SetConfig+0x25c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a65      	ldr	r2, [pc, #404]	@ (8004dd8 <DMA_SetConfig+0x260>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01d      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a64      	ldr	r2, [pc, #400]	@ (8004ddc <DMA_SetConfig+0x264>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d018      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a62      	ldr	r2, [pc, #392]	@ (8004de0 <DMA_SetConfig+0x268>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a61      	ldr	r2, [pc, #388]	@ (8004de4 <DMA_SetConfig+0x26c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a5f      	ldr	r2, [pc, #380]	@ (8004de8 <DMA_SetConfig+0x270>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a5e      	ldr	r2, [pc, #376]	@ (8004dec <DMA_SetConfig+0x274>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5c      	ldr	r2, [pc, #368]	@ (8004df0 <DMA_SetConfig+0x278>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d101      	bne.n	8004c86 <DMA_SetConfig+0x10e>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <DMA_SetConfig+0x110>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00d      	beq.n	8004ca8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ca6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a39      	ldr	r2, [pc, #228]	@ (8004d94 <DMA_SetConfig+0x21c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d04a      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a38      	ldr	r2, [pc, #224]	@ (8004d98 <DMA_SetConfig+0x220>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d045      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a36      	ldr	r2, [pc, #216]	@ (8004d9c <DMA_SetConfig+0x224>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d040      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a35      	ldr	r2, [pc, #212]	@ (8004da0 <DMA_SetConfig+0x228>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d03b      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a33      	ldr	r2, [pc, #204]	@ (8004da4 <DMA_SetConfig+0x22c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d036      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a32      	ldr	r2, [pc, #200]	@ (8004da8 <DMA_SetConfig+0x230>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d031      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a30      	ldr	r2, [pc, #192]	@ (8004dac <DMA_SetConfig+0x234>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02c      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8004db0 <DMA_SetConfig+0x238>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d027      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8004db4 <DMA_SetConfig+0x23c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d022      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2c      	ldr	r2, [pc, #176]	@ (8004db8 <DMA_SetConfig+0x240>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d01d      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2a      	ldr	r2, [pc, #168]	@ (8004dbc <DMA_SetConfig+0x244>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d018      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a29      	ldr	r2, [pc, #164]	@ (8004dc0 <DMA_SetConfig+0x248>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a27      	ldr	r2, [pc, #156]	@ (8004dc4 <DMA_SetConfig+0x24c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00e      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a26      	ldr	r2, [pc, #152]	@ (8004dc8 <DMA_SetConfig+0x250>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d009      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a24      	ldr	r2, [pc, #144]	@ (8004dcc <DMA_SetConfig+0x254>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a23      	ldr	r2, [pc, #140]	@ (8004dd0 <DMA_SetConfig+0x258>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d101      	bne.n	8004d4c <DMA_SetConfig+0x1d4>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <DMA_SetConfig+0x1d6>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d059      	beq.n	8004e06 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	223f      	movs	r2, #63	@ 0x3f
 8004d5c:	409a      	lsls	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b40      	cmp	r3, #64	@ 0x40
 8004d80:	d138      	bne.n	8004df4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d92:	e0ae      	b.n	8004ef2 <DMA_SetConfig+0x37a>
 8004d94:	40020010 	.word	0x40020010
 8004d98:	40020028 	.word	0x40020028
 8004d9c:	40020040 	.word	0x40020040
 8004da0:	40020058 	.word	0x40020058
 8004da4:	40020070 	.word	0x40020070
 8004da8:	40020088 	.word	0x40020088
 8004dac:	400200a0 	.word	0x400200a0
 8004db0:	400200b8 	.word	0x400200b8
 8004db4:	40020410 	.word	0x40020410
 8004db8:	40020428 	.word	0x40020428
 8004dbc:	40020440 	.word	0x40020440
 8004dc0:	40020458 	.word	0x40020458
 8004dc4:	40020470 	.word	0x40020470
 8004dc8:	40020488 	.word	0x40020488
 8004dcc:	400204a0 	.word	0x400204a0
 8004dd0:	400204b8 	.word	0x400204b8
 8004dd4:	58025408 	.word	0x58025408
 8004dd8:	5802541c 	.word	0x5802541c
 8004ddc:	58025430 	.word	0x58025430
 8004de0:	58025444 	.word	0x58025444
 8004de4:	58025458 	.word	0x58025458
 8004de8:	5802546c 	.word	0x5802546c
 8004dec:	58025480 	.word	0x58025480
 8004df0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	60da      	str	r2, [r3, #12]
}
 8004e04:	e075      	b.n	8004ef2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a3d      	ldr	r2, [pc, #244]	@ (8004f00 <DMA_SetConfig+0x388>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d04a      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a3b      	ldr	r2, [pc, #236]	@ (8004f04 <DMA_SetConfig+0x38c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d045      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a3a      	ldr	r2, [pc, #232]	@ (8004f08 <DMA_SetConfig+0x390>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d040      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a38      	ldr	r2, [pc, #224]	@ (8004f0c <DMA_SetConfig+0x394>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d03b      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a37      	ldr	r2, [pc, #220]	@ (8004f10 <DMA_SetConfig+0x398>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d036      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a35      	ldr	r2, [pc, #212]	@ (8004f14 <DMA_SetConfig+0x39c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d031      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a34      	ldr	r2, [pc, #208]	@ (8004f18 <DMA_SetConfig+0x3a0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d02c      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a32      	ldr	r2, [pc, #200]	@ (8004f1c <DMA_SetConfig+0x3a4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d027      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a31      	ldr	r2, [pc, #196]	@ (8004f20 <DMA_SetConfig+0x3a8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d022      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a2f      	ldr	r2, [pc, #188]	@ (8004f24 <DMA_SetConfig+0x3ac>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01d      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f28 <DMA_SetConfig+0x3b0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d018      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a2c      	ldr	r2, [pc, #176]	@ (8004f2c <DMA_SetConfig+0x3b4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a2b      	ldr	r2, [pc, #172]	@ (8004f30 <DMA_SetConfig+0x3b8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00e      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a29      	ldr	r2, [pc, #164]	@ (8004f34 <DMA_SetConfig+0x3bc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d009      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a28      	ldr	r2, [pc, #160]	@ (8004f38 <DMA_SetConfig+0x3c0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d004      	beq.n	8004ea6 <DMA_SetConfig+0x32e>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a26      	ldr	r2, [pc, #152]	@ (8004f3c <DMA_SetConfig+0x3c4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d101      	bne.n	8004eaa <DMA_SetConfig+0x332>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <DMA_SetConfig+0x334>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d020      	beq.n	8004ef2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	2201      	movs	r2, #1
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b40      	cmp	r3, #64	@ 0x40
 8004ece:	d108      	bne.n	8004ee2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	60da      	str	r2, [r3, #12]
}
 8004ee0:	e007      	b.n	8004ef2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	60da      	str	r2, [r3, #12]
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	48022c08 	.word	0x48022c08
 8004f04:	48022c1c 	.word	0x48022c1c
 8004f08:	48022c30 	.word	0x48022c30
 8004f0c:	48022c44 	.word	0x48022c44
 8004f10:	48022c58 	.word	0x48022c58
 8004f14:	48022c6c 	.word	0x48022c6c
 8004f18:	48022c80 	.word	0x48022c80
 8004f1c:	48022c94 	.word	0x48022c94
 8004f20:	58025408 	.word	0x58025408
 8004f24:	5802541c 	.word	0x5802541c
 8004f28:	58025430 	.word	0x58025430
 8004f2c:	58025444 	.word	0x58025444
 8004f30:	58025458 	.word	0x58025458
 8004f34:	5802546c 	.word	0x5802546c
 8004f38:	58025480 	.word	0x58025480
 8004f3c:	58025494 	.word	0x58025494

08004f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a42      	ldr	r2, [pc, #264]	@ (8005058 <DMA_CalcBaseAndBitshift+0x118>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d04a      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a41      	ldr	r2, [pc, #260]	@ (800505c <DMA_CalcBaseAndBitshift+0x11c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d045      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a3f      	ldr	r2, [pc, #252]	@ (8005060 <DMA_CalcBaseAndBitshift+0x120>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d040      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a3e      	ldr	r2, [pc, #248]	@ (8005064 <DMA_CalcBaseAndBitshift+0x124>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d03b      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a3c      	ldr	r2, [pc, #240]	@ (8005068 <DMA_CalcBaseAndBitshift+0x128>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d036      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a3b      	ldr	r2, [pc, #236]	@ (800506c <DMA_CalcBaseAndBitshift+0x12c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d031      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a39      	ldr	r2, [pc, #228]	@ (8005070 <DMA_CalcBaseAndBitshift+0x130>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d02c      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a38      	ldr	r2, [pc, #224]	@ (8005074 <DMA_CalcBaseAndBitshift+0x134>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d027      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a36      	ldr	r2, [pc, #216]	@ (8005078 <DMA_CalcBaseAndBitshift+0x138>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d022      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a35      	ldr	r2, [pc, #212]	@ (800507c <DMA_CalcBaseAndBitshift+0x13c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d01d      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a33      	ldr	r2, [pc, #204]	@ (8005080 <DMA_CalcBaseAndBitshift+0x140>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d018      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a32      	ldr	r2, [pc, #200]	@ (8005084 <DMA_CalcBaseAndBitshift+0x144>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a30      	ldr	r2, [pc, #192]	@ (8005088 <DMA_CalcBaseAndBitshift+0x148>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00e      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a2f      	ldr	r2, [pc, #188]	@ (800508c <DMA_CalcBaseAndBitshift+0x14c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8005090 <DMA_CalcBaseAndBitshift+0x150>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8005094 <DMA_CalcBaseAndBitshift+0x154>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d101      	bne.n	8004fec <DMA_CalcBaseAndBitshift+0xac>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <DMA_CalcBaseAndBitshift+0xae>
 8004fec:	2300      	movs	r3, #0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d024      	beq.n	800503c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	3b10      	subs	r3, #16
 8004ffa:	4a27      	ldr	r2, [pc, #156]	@ (8005098 <DMA_CalcBaseAndBitshift+0x158>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	4a24      	ldr	r2, [pc, #144]	@ (800509c <DMA_CalcBaseAndBitshift+0x15c>)
 800500c:	5cd3      	ldrb	r3, [r2, r3]
 800500e:	461a      	mov	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d908      	bls.n	800502c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	4b1f      	ldr	r3, [pc, #124]	@ (80050a0 <DMA_CalcBaseAndBitshift+0x160>)
 8005022:	4013      	ands	r3, r2
 8005024:	1d1a      	adds	r2, r3, #4
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	659a      	str	r2, [r3, #88]	@ 0x58
 800502a:	e00d      	b.n	8005048 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <DMA_CalcBaseAndBitshift+0x160>)
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6593      	str	r3, [r2, #88]	@ 0x58
 800503a:	e005      	b.n	8005048 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	40020010 	.word	0x40020010
 800505c:	40020028 	.word	0x40020028
 8005060:	40020040 	.word	0x40020040
 8005064:	40020058 	.word	0x40020058
 8005068:	40020070 	.word	0x40020070
 800506c:	40020088 	.word	0x40020088
 8005070:	400200a0 	.word	0x400200a0
 8005074:	400200b8 	.word	0x400200b8
 8005078:	40020410 	.word	0x40020410
 800507c:	40020428 	.word	0x40020428
 8005080:	40020440 	.word	0x40020440
 8005084:	40020458 	.word	0x40020458
 8005088:	40020470 	.word	0x40020470
 800508c:	40020488 	.word	0x40020488
 8005090:	400204a0 	.word	0x400204a0
 8005094:	400204b8 	.word	0x400204b8
 8005098:	aaaaaaab 	.word	0xaaaaaaab
 800509c:	0800afac 	.word	0x0800afac
 80050a0:	fffffc00 	.word	0xfffffc00

080050a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d120      	bne.n	80050fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d858      	bhi.n	8005172 <DMA_CheckFifoParam+0xce>
 80050c0:	a201      	add	r2, pc, #4	@ (adr r2, 80050c8 <DMA_CheckFifoParam+0x24>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050d9 	.word	0x080050d9
 80050cc:	080050eb 	.word	0x080050eb
 80050d0:	080050d9 	.word	0x080050d9
 80050d4:	08005173 	.word	0x08005173
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d048      	beq.n	8005176 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050e8:	e045      	b.n	8005176 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050f2:	d142      	bne.n	800517a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050f8:	e03f      	b.n	800517a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005102:	d123      	bne.n	800514c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005108:	2b03      	cmp	r3, #3
 800510a:	d838      	bhi.n	800517e <DMA_CheckFifoParam+0xda>
 800510c:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <DMA_CheckFifoParam+0x70>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005125 	.word	0x08005125
 8005118:	0800512b 	.word	0x0800512b
 800511c:	08005125 	.word	0x08005125
 8005120:	0800513d 	.word	0x0800513d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]
        break;
 8005128:	e030      	b.n	800518c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d025      	beq.n	8005182 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800513a:	e022      	b.n	8005182 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005144:	d11f      	bne.n	8005186 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800514a:	e01c      	b.n	8005186 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005150:	2b02      	cmp	r3, #2
 8005152:	d902      	bls.n	800515a <DMA_CheckFifoParam+0xb6>
 8005154:	2b03      	cmp	r3, #3
 8005156:	d003      	beq.n	8005160 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005158:	e018      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	73fb      	strb	r3, [r7, #15]
        break;
 800515e:	e015      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00e      	beq.n	800518a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
    break;
 8005170:	e00b      	b.n	800518a <DMA_CheckFifoParam+0xe6>
        break;
 8005172:	bf00      	nop
 8005174:	e00a      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        break;
 8005176:	bf00      	nop
 8005178:	e008      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        break;
 800517a:	bf00      	nop
 800517c:	e006      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        break;
 800517e:	bf00      	nop
 8005180:	e004      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        break;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <DMA_CheckFifoParam+0xe8>
    break;
 800518a:	bf00      	nop
    }
  }

  return status;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop

0800519c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a38      	ldr	r2, [pc, #224]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d022      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a36      	ldr	r2, [pc, #216]	@ (8005294 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01d      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a35      	ldr	r2, [pc, #212]	@ (8005298 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a33      	ldr	r2, [pc, #204]	@ (800529c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a32      	ldr	r2, [pc, #200]	@ (80052a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a30      	ldr	r2, [pc, #192]	@ (80052a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2f      	ldr	r2, [pc, #188]	@ (80052a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2d      	ldr	r2, [pc, #180]	@ (80052ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d101      	bne.n	80051fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051fe:	2300      	movs	r3, #0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01a      	beq.n	800523a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	3b08      	subs	r3, #8
 800520c:	4a28      	ldr	r2, [pc, #160]	@ (80052b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	091b      	lsrs	r3, r3, #4
 8005214:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4b26      	ldr	r3, [pc, #152]	@ (80052b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	461a      	mov	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a24      	ldr	r2, [pc, #144]	@ (80052b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005228:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2201      	movs	r2, #1
 8005232:	409a      	lsls	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005238:	e024      	b.n	8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	3b10      	subs	r3, #16
 8005242:	4a1e      	ldr	r2, [pc, #120]	@ (80052bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4a1c      	ldr	r2, [pc, #112]	@ (80052c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d806      	bhi.n	8005262 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4a1b      	ldr	r2, [pc, #108]	@ (80052c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d902      	bls.n	8005262 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3308      	adds	r3, #8
 8005260:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4b18      	ldr	r3, [pc, #96]	@ (80052c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	461a      	mov	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a16      	ldr	r2, [pc, #88]	@ (80052cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005274:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	2201      	movs	r2, #1
 800527e:	409a      	lsls	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	58025408 	.word	0x58025408
 8005294:	5802541c 	.word	0x5802541c
 8005298:	58025430 	.word	0x58025430
 800529c:	58025444 	.word	0x58025444
 80052a0:	58025458 	.word	0x58025458
 80052a4:	5802546c 	.word	0x5802546c
 80052a8:	58025480 	.word	0x58025480
 80052ac:	58025494 	.word	0x58025494
 80052b0:	cccccccd 	.word	0xcccccccd
 80052b4:	16009600 	.word	0x16009600
 80052b8:	58025880 	.word	0x58025880
 80052bc:	aaaaaaab 	.word	0xaaaaaaab
 80052c0:	400204b8 	.word	0x400204b8
 80052c4:	4002040f 	.word	0x4002040f
 80052c8:	10008200 	.word	0x10008200
 80052cc:	40020880 	.word	0x40020880

080052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d04a      	beq.n	800537c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d847      	bhi.n	800537c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a25      	ldr	r2, [pc, #148]	@ (8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d022      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a24      	ldr	r2, [pc, #144]	@ (800538c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d01d      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a22      	ldr	r2, [pc, #136]	@ (8005390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d018      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a21      	ldr	r2, [pc, #132]	@ (8005394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1f      	ldr	r2, [pc, #124]	@ (8005398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1e      	ldr	r2, [pc, #120]	@ (800539c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d009      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1c      	ldr	r2, [pc, #112]	@ (80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1b      	ldr	r2, [pc, #108]	@ (80053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d101      	bne.n	8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005340:	2300      	movs	r3, #0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4b17      	ldr	r3, [pc, #92]	@ (80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	461a      	mov	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a15      	ldr	r2, [pc, #84]	@ (80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005358:	671a      	str	r2, [r3, #112]	@ 0x70
 800535a:	e009      	b.n	8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4b14      	ldr	r3, [pc, #80]	@ (80053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	461a      	mov	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a11      	ldr	r2, [pc, #68]	@ (80053b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800536e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3b01      	subs	r3, #1
 8005374:	2201      	movs	r2, #1
 8005376:	409a      	lsls	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800537c:	bf00      	nop
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	58025408 	.word	0x58025408
 800538c:	5802541c 	.word	0x5802541c
 8005390:	58025430 	.word	0x58025430
 8005394:	58025444 	.word	0x58025444
 8005398:	58025458 	.word	0x58025458
 800539c:	5802546c 	.word	0x5802546c
 80053a0:	58025480 	.word	0x58025480
 80053a4:	58025494 	.word	0x58025494
 80053a8:	1600963f 	.word	0x1600963f
 80053ac:	58025940 	.word	0x58025940
 80053b0:	1000823f 	.word	0x1000823f
 80053b4:	40020940 	.word	0x40020940

080053b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b098      	sub	sp, #96	@ 0x60
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80053c0:	4a84      	ldr	r2, [pc, #528]	@ (80055d4 <HAL_FDCAN_Init+0x21c>)
 80053c2:	f107 030c 	add.w	r3, r7, #12
 80053c6:	4611      	mov	r1, r2
 80053c8:	224c      	movs	r2, #76	@ 0x4c
 80053ca:	4618      	mov	r0, r3
 80053cc:	f005 fd6e 	bl	800aeac <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e1c6      	b.n	8005768 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a7e      	ldr	r2, [pc, #504]	@ (80055d8 <HAL_FDCAN_Init+0x220>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d106      	bne.n	80053f2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80053ec:	461a      	mov	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fb ff5e 	bl	80012c8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0210 	bic.w	r2, r2, #16
 800541a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800541c:	f7fc fba2 	bl	8001b64 <HAL_GetTick>
 8005420:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005422:	e014      	b.n	800544e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005424:	f7fc fb9e 	bl	8001b64 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b0a      	cmp	r3, #10
 8005430:	d90d      	bls.n	800544e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005438:	f043 0201 	orr.w	r2, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2203      	movs	r2, #3
 8005446:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e18c      	b.n	8005768 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b08      	cmp	r3, #8
 800545a:	d0e3      	beq.n	8005424 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800546c:	f7fc fb7a 	bl	8001b64 <HAL_GetTick>
 8005470:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005472:	e014      	b.n	800549e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005474:	f7fc fb76 	bl	8001b64 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b0a      	cmp	r3, #10
 8005480:	d90d      	bls.n	800549e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005488:	f043 0201 	orr.w	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2203      	movs	r2, #3
 8005496:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e164      	b.n	8005768 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0e3      	beq.n	8005474 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0202 	orr.w	r2, r2, #2
 80054ba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7c1b      	ldrb	r3, [r3, #16]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d108      	bne.n	80054d6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054d2:	619a      	str	r2, [r3, #24]
 80054d4:	e007      	b.n	80054e6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	7c5b      	ldrb	r3, [r3, #17]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d108      	bne.n	8005500 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699a      	ldr	r2, [r3, #24]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054fc:	619a      	str	r2, [r3, #24]
 80054fe:	e007      	b.n	8005510 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800550e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	7c9b      	ldrb	r3, [r3, #18]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d108      	bne.n	800552a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005526:	619a      	str	r2, [r3, #24]
 8005528:	e007      	b.n	800553a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699a      	ldr	r2, [r3, #24]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005538:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800555e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0210 	bic.w	r2, r2, #16
 800556e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d108      	bne.n	800558a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0204 	orr.w	r2, r2, #4
 8005586:	619a      	str	r2, [r3, #24]
 8005588:	e030      	b.n	80055ec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d02c      	beq.n	80055ec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d020      	beq.n	80055dc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80055a8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0210 	orr.w	r2, r2, #16
 80055b8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d114      	bne.n	80055ec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0220 	orr.w	r2, r2, #32
 80055d0:	619a      	str	r2, [r3, #24]
 80055d2:	e00b      	b.n	80055ec <HAL_FDCAN_Init+0x234>
 80055d4:	0800af50 	.word	0x0800af50
 80055d8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0220 	orr.w	r2, r2, #32
 80055ea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055fc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005604:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	3b01      	subs	r3, #1
 800560e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005614:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005616:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005620:	d115      	bne.n	800564e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	3b01      	subs	r3, #1
 800562e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005630:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005636:	3b01      	subs	r3, #1
 8005638:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800563a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	3b01      	subs	r3, #1
 8005644:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800564a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800564c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005674:	4413      	add	r3, r2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d011      	beq.n	800569e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005682:	f023 0107 	bic.w	r1, r3, #7
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	3360      	adds	r3, #96	@ 0x60
 800568e:	443b      	add	r3, r7
 8005690:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d011      	beq.n	80056ca <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80056ae:	f023 0107 	bic.w	r1, r3, #7
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	3360      	adds	r3, #96	@ 0x60
 80056ba:	443b      	add	r3, r7
 80056bc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d012      	beq.n	80056f8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80056da:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	3360      	adds	r3, #96	@ 0x60
 80056e6:	443b      	add	r3, r7
 80056e8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80056ec:	011a      	lsls	r2, r3, #4
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d012      	beq.n	8005726 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005708:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	3360      	adds	r3, #96	@ 0x60
 8005714:	443b      	add	r3, r7
 8005716:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800571a:	021a      	lsls	r2, r3, #8
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a11      	ldr	r2, [pc, #68]	@ (8005770 <HAL_FDCAN_Init+0x3b8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d107      	bne.n	8005740 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f022 0203 	bic.w	r2, r2, #3
 800573e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fd81 	bl	8006260 <FDCAN_CalcultateRamBlockAddresses>
 800575e:	4603      	mov	r3, r0
 8005760:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005764:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005768:	4618      	mov	r0, r3
 800576a:	3760      	adds	r7, #96	@ 0x60
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	4000a000 	.word	0x4000a000

08005774 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d111      	bne.n	80057ac <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0201 	bic.w	r2, r2, #1
 800579e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e008      	b.n	80057be <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057b2:	f043 0204 	orr.w	r2, r3, #4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
  }
}
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b086      	sub	sp, #24
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d141      	bne.n	8005866 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80057ea:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057f8:	f043 0220 	orr.w	r2, r3, #32
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e038      	b.n	8005878 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800580e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800581c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e026      	b.n	8005878 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005832:	0c1b      	lsrs	r3, r3, #16
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 fe93 	bl	800656c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2101      	movs	r1, #1
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	fa01 f202 	lsl.w	r2, r1, r2
 8005852:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005856:	2201      	movs	r2, #1
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	409a      	lsls	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	e008      	b.n	8005878 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800586c:	f043 0208 	orr.w	r2, r3, #8
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
  }
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005880:	b480      	push	{r7}
 8005882:	b08b      	sub	sp, #44	@ 0x2c
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005898:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800589a:	7efb      	ldrb	r3, [r7, #27]
 800589c:	2b02      	cmp	r3, #2
 800589e:	f040 8149 	bne.w	8005b34 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b40      	cmp	r3, #64	@ 0x40
 80058a6:	d14c      	bne.n	8005942 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058be:	f043 0220 	orr.w	r2, r3, #32
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e13c      	b.n	8005b46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d109      	bne.n	80058f0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e12a      	b.n	8005b46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058f8:	0e1b      	lsrs	r3, r3, #24
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d10a      	bne.n	8005918 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800590a:	0fdb      	lsrs	r3, r3, #31
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005914:	2301      	movs	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005934:	69f9      	ldr	r1, [r7, #28]
 8005936:	fb01 f303 	mul.w	r3, r1, r3
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005940:	e068      	b.n	8005a14 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b41      	cmp	r3, #65	@ 0x41
 8005946:	d14c      	bne.n	80059e2 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005950:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d109      	bne.n	800596c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800595e:	f043 0220 	orr.w	r2, r3, #32
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0ec      	b.n	8005b46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005982:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0da      	b.n	8005b46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005998:	0e1b      	lsrs	r3, r3, #24
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d10a      	bne.n	80059b8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059aa:	0fdb      	lsrs	r3, r3, #31
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80059b4:	2301      	movs	r3, #1
 80059b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d4:	69f9      	ldr	r1, [r7, #28]
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e0:	e018      	b.n	8005a14 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d309      	bcc.n	8005a00 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0a2      	b.n	8005b46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d107      	bne.n	8005a38 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	0c9b      	lsrs	r3, r3, #18
 8005a2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e005      	b.n	8005a44 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	3304      	adds	r3, #4
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	0c1b      	lsrs	r3, r3, #16
 8005a72:	f003 020f 	and.w	r2, r3, #15
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	0e1b      	lsrs	r3, r3, #24
 8005a98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	0fda      	lsrs	r2, r3, #31
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	3304      	adds	r3, #4
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	623b      	str	r3, [r7, #32]
 8005ab8:	e00a      	b.n	8005ad0 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	441a      	add	r2, r3
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	440b      	add	r3, r1
 8005ac6:	7812      	ldrb	r2, [r2, #0]
 8005ac8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	3301      	adds	r3, #1
 8005ace:	623b      	str	r3, [r7, #32]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8005b54 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005ad6:	5cd3      	ldrb	r3, [r2, r3]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d3ec      	bcc.n	8005aba <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b40      	cmp	r3, #64	@ 0x40
 8005ae4:	d105      	bne.n	8005af2 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005af0:	e01e      	b.n	8005b30 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b41      	cmp	r3, #65	@ 0x41
 8005af6:	d105      	bne.n	8005b04 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005b02:	e015      	b.n	8005b30 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b1f      	cmp	r3, #31
 8005b08:	d808      	bhi.n	8005b1c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2101      	movs	r1, #1
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	fa01 f202 	lsl.w	r2, r1, r2
 8005b16:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005b1a:	e009      	b.n	8005b30 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 021f 	and.w	r2, r3, #31
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2101      	movs	r1, #1
 8005b28:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e008      	b.n	8005b46 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b3a:	f043 0208 	orr.w	r2, r3, #8
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
  }
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	372c      	adds	r7, #44	@ 0x2c
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	0800afb4 	.word	0x0800afb4

08005b58 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005b8e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d002      	beq.n	8005b9c <HAL_FDCAN_ActivateNotification+0x20>
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d155      	bne.n	8005c48 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d108      	bne.n	8005bbc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 0201 	orr.w	r2, r2, #1
 8005bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bba:	e014      	b.n	8005be6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d108      	bne.n	8005bde <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0202 	orr.w	r2, r2, #2
 8005bda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bdc:	e003      	b.n	8005be6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2203      	movs	r2, #3
 8005be4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d009      	beq.n	8005c04 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c68 <HAL_FDCAN_ActivateNotification+0xec>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	430b      	orrs	r3, r1
 8005c34:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c36:	4b0d      	ldr	r3, [pc, #52]	@ (8005c6c <HAL_FDCAN_ActivateNotification+0xf0>)
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	0f9b      	lsrs	r3, r3, #30
 8005c3e:	490b      	ldr	r1, [pc, #44]	@ (8005c6c <HAL_FDCAN_ActivateNotification+0xf0>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	e008      	b.n	8005c5a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c4e:	f043 0202 	orr.w	r2, r3, #2
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
  }
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	3fcfffff 	.word	0x3fcfffff
 8005c6c:	4000a800 	.word	0x4000a800

08005c70 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b096      	sub	sp, #88	@ 0x58
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005c78:	4b95      	ldr	r3, [pc, #596]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	079b      	lsls	r3, r3, #30
 8005c7e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005c80:	4b93      	ldr	r3, [pc, #588]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	079b      	lsls	r3, r3, #30
 8005c86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c88:	4013      	ands	r3, r2
 8005c8a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c92:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005c96:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cb8:	4013      	ands	r3, r2
 8005cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cda:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005cde:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ce8:	4013      	ands	r3, r2
 8005cea:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005cf6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d00:	4013      	ands	r3, r2
 8005d02:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00f      	beq.n	8005d3e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d30:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d32:	4b67      	ldr	r3, [pc, #412]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fa44 	bl	80061c6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01c      	beq.n	8005d82 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d017      	beq.n	8005d82 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d5a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d66:	4013      	ands	r3, r2
 8005d68:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d72:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d74:	4b56      	ldr	r3, [pc, #344]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005d7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f9f9 	bl	8006174 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00d      	beq.n	8005da4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d8e:	4b51      	ldr	r3, [pc, #324]	@ (8005ed4 <HAL_FDCAN_IRQHandler+0x264>)
 8005d90:	400b      	ands	r3, r1
 8005d92:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d94:	4a4e      	ldr	r2, [pc, #312]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d98:	0f9b      	lsrs	r3, r3, #30
 8005d9a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005d9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f9b2 	bl	8006108 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005da4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00d      	beq.n	8005dc6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005db0:	4b48      	ldr	r3, [pc, #288]	@ (8005ed4 <HAL_FDCAN_IRQHandler+0x264>)
 8005db2:	400b      	ands	r3, r1
 8005db4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005db6:	4a46      	ldr	r2, [pc, #280]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dba:	0f9b      	lsrs	r3, r3, #30
 8005dbc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005dbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9ac 	bl	800611e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00d      	beq.n	8005de8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005dd2:	4b40      	ldr	r3, [pc, #256]	@ (8005ed4 <HAL_FDCAN_IRQHandler+0x264>)
 8005dd4:	400b      	ands	r3, r1
 8005dd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dd8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ddc:	0f9b      	lsrs	r3, r3, #30
 8005dde:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005de0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fa fb66 	bl	80004b4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00d      	beq.n	8005e0a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005df4:	4b37      	ldr	r3, [pc, #220]	@ (8005ed4 <HAL_FDCAN_IRQHandler+0x264>)
 8005df6:	400b      	ands	r3, r1
 8005df8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dfa:	4a35      	ldr	r2, [pc, #212]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dfe:	0f9b      	lsrs	r3, r3, #30
 8005e00:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005e02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f995 	bl	8006134 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00f      	beq.n	8005e34 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e26:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e28:	4b29      	ldr	r3, [pc, #164]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f98b 	bl	800614a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01c      	beq.n	8005e78 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d017      	beq.n	8005e78 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e50:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e68:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e6a:	4b19      	ldr	r3, [pc, #100]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005e70:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f973 	bl	800615e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00f      	beq.n	8005ea2 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005e94:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e96:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f974 	bl	800618a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d015      	beq.n	8005ed8 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d010      	beq.n	8005ed8 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005ebe:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ec0:	4b03      	ldr	r3, [pc, #12]	@ (8005ed0 <HAL_FDCAN_IRQHandler+0x260>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f969 	bl	800619e <HAL_FDCAN_TimestampWraparoundCallback>
 8005ecc:	e004      	b.n	8005ed8 <HAL_FDCAN_IRQHandler+0x268>
 8005ece:	bf00      	nop
 8005ed0:	4000a800 	.word	0x4000a800
 8005ed4:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00f      	beq.n	8005f02 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005ef4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ef6:	4b81      	ldr	r3, [pc, #516]	@ (80060fc <HAL_FDCAN_IRQHandler+0x48c>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f958 	bl	80061b2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d014      	beq.n	8005f36 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00f      	beq.n	8005f36 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005f1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f20:	4b76      	ldr	r3, [pc, #472]	@ (80060fc <HAL_FDCAN_IRQHandler+0x48c>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00d      	beq.n	8005f58 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f42:	4b6f      	ldr	r3, [pc, #444]	@ (8006100 <HAL_FDCAN_IRQHandler+0x490>)
 8005f44:	400b      	ands	r3, r1
 8005f46:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f48:	4a6c      	ldr	r2, [pc, #432]	@ (80060fc <HAL_FDCAN_IRQHandler+0x48c>)
 8005f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f4c:	0f9b      	lsrs	r3, r3, #30
 8005f4e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005f50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f94b 	bl	80061ee <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d011      	beq.n	8005f82 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f64:	4b66      	ldr	r3, [pc, #408]	@ (8006100 <HAL_FDCAN_IRQHandler+0x490>)
 8005f66:	400b      	ands	r3, r1
 8005f68:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f6a:	4a64      	ldr	r2, [pc, #400]	@ (80060fc <HAL_FDCAN_IRQHandler+0x48c>)
 8005f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f6e:	0f9b      	lsrs	r3, r3, #30
 8005f70:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a5f      	ldr	r2, [pc, #380]	@ (8006104 <HAL_FDCAN_IRQHandler+0x494>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	f040 80aa 	bne.w	80060e2 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80a2 	beq.w	80060e2 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fca:	4013      	ands	r3, r2
 8005fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005ff0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff8:	6a3a      	ldr	r2, [r7, #32]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8006008:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	4013      	ands	r3, r2
 8006014:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006032:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006034:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f8e4 	bl	8006204 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006048:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800604a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f8e4 	bl	800621a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d019      	beq.n	8006090 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d014      	beq.n	8006090 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606c:	0c1b      	lsrs	r3, r3, #16
 800606e:	b29b      	uxth	r3, r3
 8006070:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006078:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800607c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2240      	movs	r2, #64	@ 0x40
 8006084:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	6939      	ldr	r1, [r7, #16]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f8d0 	bl	8006230 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800609e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f8d1 	bl	8006248 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	6a3a      	ldr	r2, [r7, #32]
 80060b2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00b      	beq.n	80060e2 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	69fa      	ldr	r2, [r7, #28]
 80060d0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f874 	bl	80061da <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80060f2:	bf00      	nop
 80060f4:	3758      	adds	r7, #88	@ 0x58
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	4000a800 	.word	0x4000a800
 8006100:	3fcfffff 	.word	0x3fcfffff
 8006104:	4000a000 	.word	0x4000a000

08006108 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006276:	4ba7      	ldr	r3, [pc, #668]	@ (8006514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006278:	4013      	ands	r3, r2
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	0091      	lsls	r1, r2, #2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	430b      	orrs	r3, r1
 8006284:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006290:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006298:	041a      	lsls	r2, r3, #16
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	4413      	add	r3, r2
 80062ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80062b6:	4b97      	ldr	r3, [pc, #604]	@ (8006514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	0091      	lsls	r1, r2, #2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	430b      	orrs	r3, r1
 80062c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d8:	041a      	lsls	r2, r3, #16
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	4413      	add	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80062f8:	4b86      	ldr	r3, [pc, #536]	@ (8006514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	0091      	lsls	r1, r2, #2
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6812      	ldr	r2, [r2, #0]
 8006304:	430b      	orrs	r3, r1
 8006306:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006312:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	041a      	lsls	r2, r3, #16
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800632e:	fb02 f303 	mul.w	r3, r2, r3
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006340:	4b74      	ldr	r3, [pc, #464]	@ (8006514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006342:	4013      	ands	r3, r2
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	0091      	lsls	r1, r2, #2
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	430b      	orrs	r3, r1
 800634e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800635a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006362:	041a      	lsls	r2, r3, #16
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006376:	fb02 f303 	mul.w	r3, r2, r3
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	4413      	add	r3, r2
 800637e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006388:	4b62      	ldr	r3, [pc, #392]	@ (8006514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800638a:	4013      	ands	r3, r2
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	0091      	lsls	r1, r2, #2
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	430b      	orrs	r3, r1
 8006396:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80063a2:	fb02 f303 	mul.w	r3, r2, r3
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4413      	add	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80063b4:	4b57      	ldr	r3, [pc, #348]	@ (8006514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	0091      	lsls	r1, r2, #2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	430b      	orrs	r3, r1
 80063c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ce:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d6:	041a      	lsls	r2, r3, #16
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	4413      	add	r3, r2
 80063ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80063f6:	4b47      	ldr	r3, [pc, #284]	@ (8006514 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	0091      	lsls	r1, r2, #2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	430b      	orrs	r3, r1
 8006404:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006410:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006418:	041a      	lsls	r2, r3, #16
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800642c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006434:	061a      	lsls	r2, r3, #24
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006444:	4b34      	ldr	r3, [pc, #208]	@ (8006518 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006446:	4413      	add	r3, r2
 8006448:	009a      	lsls	r2, r3, #2
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	441a      	add	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	441a      	add	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800647a:	fb01 f303 	mul.w	r3, r1, r3
 800647e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006480:	441a      	add	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006492:	fb01 f303 	mul.w	r3, r1, r3
 8006496:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006498:	441a      	add	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80064aa:	fb01 f303 	mul.w	r3, r1, r3
 80064ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80064b0:	441a      	add	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	441a      	add	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	441a      	add	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80064f6:	fb01 f303 	mul.w	r3, r1, r3
 80064fa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80064fc:	441a      	add	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650a:	4a04      	ldr	r2, [pc, #16]	@ (800651c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d915      	bls.n	800653c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006510:	e006      	b.n	8006520 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006512:	bf00      	nop
 8006514:	ffff0003 	.word	0xffff0003
 8006518:	10002b00 	.word	0x10002b00
 800651c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006526:	f043 0220 	orr.w	r2, r3, #32
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2203      	movs	r2, #3
 8006534:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e010      	b.n	800655e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e005      	b.n	8006550 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3304      	adds	r3, #4
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	429a      	cmp	r2, r3
 800655a:	d3f3      	bcc.n	8006544 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop

0800656c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800656c:	b480      	push	{r7}
 800656e:	b089      	sub	sp, #36	@ 0x24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800658a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006592:	4313      	orrs	r3, r2
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	e00a      	b.n	80065ae <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80065a0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80065a6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80065a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065ac:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80065b8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80065be:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80065c4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	3304      	adds	r3, #4
 80065f0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	3304      	adds	r3, #4
 80065fc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	e020      	b.n	8006646 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	3303      	adds	r3, #3
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	4413      	add	r3, r2
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	3302      	adds	r3, #2
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	440b      	add	r3, r1
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800661c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	3301      	adds	r3, #1
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	440b      	add	r3, r1
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800662a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	440a      	add	r2, r1
 8006632:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006634:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	3304      	adds	r3, #4
 800663e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	3304      	adds	r3, #4
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	4a06      	ldr	r2, [pc, #24]	@ (8006664 <FDCAN_CopyMessageToRAM+0xf8>)
 800664c:	5cd3      	ldrb	r3, [r2, r3]
 800664e:	461a      	mov	r2, r3
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	4293      	cmp	r3, r2
 8006654:	d3d6      	bcc.n	8006604 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	3724      	adds	r7, #36	@ 0x24
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	0800afb4 	.word	0x0800afb4

08006668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006668:	b480      	push	{r7}
 800666a:	b089      	sub	sp, #36	@ 0x24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006672:	2300      	movs	r3, #0
 8006674:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006676:	4b89      	ldr	r3, [pc, #548]	@ (800689c <HAL_GPIO_Init+0x234>)
 8006678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800667a:	e194      	b.n	80069a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	2101      	movs	r1, #1
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	fa01 f303 	lsl.w	r3, r1, r3
 8006688:	4013      	ands	r3, r2
 800668a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 8186 	beq.w	80069a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	2b01      	cmp	r3, #1
 800669e:	d005      	beq.n	80066ac <HAL_GPIO_Init+0x44>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d130      	bne.n	800670e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	2203      	movs	r2, #3
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	43db      	mvns	r3, r3
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	4013      	ands	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066e2:	2201      	movs	r2, #1
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43db      	mvns	r3, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	4013      	ands	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	091b      	lsrs	r3, r3, #4
 80066f8:	f003 0201 	and.w	r2, r3, #1
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	4313      	orrs	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	2b03      	cmp	r3, #3
 8006718:	d017      	beq.n	800674a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	2203      	movs	r2, #3
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	43db      	mvns	r3, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4013      	ands	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	4313      	orrs	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d123      	bne.n	800679e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	08da      	lsrs	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3208      	adds	r2, #8
 800675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	220f      	movs	r2, #15
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43db      	mvns	r3, r3
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	4013      	ands	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	4313      	orrs	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	08da      	lsrs	r2, r3, #3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3208      	adds	r2, #8
 8006798:	69b9      	ldr	r1, [r7, #24]
 800679a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	2203      	movs	r2, #3
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f003 0203 	and.w	r2, r3, #3
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80e0 	beq.w	80069a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067e0:	4b2f      	ldr	r3, [pc, #188]	@ (80068a0 <HAL_GPIO_Init+0x238>)
 80067e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80067e6:	4a2e      	ldr	r2, [pc, #184]	@ (80068a0 <HAL_GPIO_Init+0x238>)
 80067e8:	f043 0302 	orr.w	r3, r3, #2
 80067ec:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80067f0:	4b2b      	ldr	r3, [pc, #172]	@ (80068a0 <HAL_GPIO_Init+0x238>)
 80067f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067fe:	4a29      	ldr	r2, [pc, #164]	@ (80068a4 <HAL_GPIO_Init+0x23c>)
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	089b      	lsrs	r3, r3, #2
 8006804:	3302      	adds	r3, #2
 8006806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	220f      	movs	r2, #15
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43db      	mvns	r3, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4013      	ands	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a20      	ldr	r2, [pc, #128]	@ (80068a8 <HAL_GPIO_Init+0x240>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d052      	beq.n	80068d0 <HAL_GPIO_Init+0x268>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a1f      	ldr	r2, [pc, #124]	@ (80068ac <HAL_GPIO_Init+0x244>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d031      	beq.n	8006896 <HAL_GPIO_Init+0x22e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1e      	ldr	r2, [pc, #120]	@ (80068b0 <HAL_GPIO_Init+0x248>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d02b      	beq.n	8006892 <HAL_GPIO_Init+0x22a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a1d      	ldr	r2, [pc, #116]	@ (80068b4 <HAL_GPIO_Init+0x24c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d025      	beq.n	800688e <HAL_GPIO_Init+0x226>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a1c      	ldr	r2, [pc, #112]	@ (80068b8 <HAL_GPIO_Init+0x250>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d01f      	beq.n	800688a <HAL_GPIO_Init+0x222>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a1b      	ldr	r2, [pc, #108]	@ (80068bc <HAL_GPIO_Init+0x254>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d019      	beq.n	8006886 <HAL_GPIO_Init+0x21e>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a1a      	ldr	r2, [pc, #104]	@ (80068c0 <HAL_GPIO_Init+0x258>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d013      	beq.n	8006882 <HAL_GPIO_Init+0x21a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a19      	ldr	r2, [pc, #100]	@ (80068c4 <HAL_GPIO_Init+0x25c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00d      	beq.n	800687e <HAL_GPIO_Init+0x216>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a18      	ldr	r2, [pc, #96]	@ (80068c8 <HAL_GPIO_Init+0x260>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d007      	beq.n	800687a <HAL_GPIO_Init+0x212>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a17      	ldr	r2, [pc, #92]	@ (80068cc <HAL_GPIO_Init+0x264>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d101      	bne.n	8006876 <HAL_GPIO_Init+0x20e>
 8006872:	2309      	movs	r3, #9
 8006874:	e02d      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 8006876:	230a      	movs	r3, #10
 8006878:	e02b      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 800687a:	2308      	movs	r3, #8
 800687c:	e029      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 800687e:	2307      	movs	r3, #7
 8006880:	e027      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 8006882:	2306      	movs	r3, #6
 8006884:	e025      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 8006886:	2305      	movs	r3, #5
 8006888:	e023      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 800688a:	2304      	movs	r3, #4
 800688c:	e021      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 800688e:	2303      	movs	r3, #3
 8006890:	e01f      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 8006892:	2302      	movs	r3, #2
 8006894:	e01d      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 8006896:	2301      	movs	r3, #1
 8006898:	e01b      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 800689a:	bf00      	nop
 800689c:	58000080 	.word	0x58000080
 80068a0:	58024400 	.word	0x58024400
 80068a4:	58000400 	.word	0x58000400
 80068a8:	58020000 	.word	0x58020000
 80068ac:	58020400 	.word	0x58020400
 80068b0:	58020800 	.word	0x58020800
 80068b4:	58020c00 	.word	0x58020c00
 80068b8:	58021000 	.word	0x58021000
 80068bc:	58021400 	.word	0x58021400
 80068c0:	58021800 	.word	0x58021800
 80068c4:	58021c00 	.word	0x58021c00
 80068c8:	58022000 	.word	0x58022000
 80068cc:	58022400 	.word	0x58022400
 80068d0:	2300      	movs	r3, #0
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	f002 0203 	and.w	r2, r2, #3
 80068d8:	0092      	lsls	r2, r2, #2
 80068da:	4093      	lsls	r3, r2
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	4313      	orrs	r3, r2
 80068e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068e2:	4938      	ldr	r1, [pc, #224]	@ (80069c4 <HAL_GPIO_Init+0x35c>)
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	089b      	lsrs	r3, r3, #2
 80068e8:	3302      	adds	r3, #2
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	43db      	mvns	r3, r3
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	4013      	ands	r3, r2
 8006900:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006916:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800691e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	43db      	mvns	r3, r3
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	4013      	ands	r3, r2
 800692e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006944:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	43db      	mvns	r3, r3
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	4013      	ands	r3, r2
 800695a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	43db      	mvns	r3, r3
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	4013      	ands	r3, r2
 8006984:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	3301      	adds	r3, #1
 80069a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f47f ae63 	bne.w	800667c <HAL_GPIO_Init+0x14>
  }
}
 80069b6:	bf00      	nop
 80069b8:	bf00      	nop
 80069ba:	3724      	adds	r7, #36	@ 0x24
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	58000400 	.word	0x58000400

080069c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	807b      	strh	r3, [r7, #2]
 80069d4:	4613      	mov	r3, r2
 80069d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069d8:	787b      	ldrb	r3, [r7, #1]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069de:	887a      	ldrh	r2, [r7, #2]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80069e4:	e003      	b.n	80069ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80069e6:	887b      	ldrh	r3, [r7, #2]
 80069e8:	041a      	lsls	r2, r3, #16
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	619a      	str	r2, [r3, #24]
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	460b      	mov	r3, r1
 8006a04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a0c:	887a      	ldrh	r2, [r7, #2]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4013      	ands	r3, r2
 8006a12:	041a      	lsls	r2, r3, #16
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	43d9      	mvns	r1, r3
 8006a18:	887b      	ldrh	r3, [r7, #2]
 8006a1a:	400b      	ands	r3, r1
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	619a      	str	r2, [r3, #24]
}
 8006a22:	bf00      	nop
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
	...

08006a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e08b      	b.n	8006b5a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fa fd0c 	bl	8001474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2224      	movs	r2, #36	@ 0x24
 8006a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0201 	bic.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d107      	bne.n	8006aaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006aa6:	609a      	str	r2, [r3, #8]
 8006aa8:	e006      	b.n	8006ab8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006ab6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d108      	bne.n	8006ad2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ace:	605a      	str	r2, [r3, #4]
 8006ad0:	e007      	b.n	8006ae2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ae0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6859      	ldr	r1, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	4b1d      	ldr	r3, [pc, #116]	@ (8006b64 <HAL_I2C_Init+0x134>)
 8006aee:	430b      	orrs	r3, r1
 8006af0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691a      	ldr	r2, [r3, #16]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	69d9      	ldr	r1, [r3, #28]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	02008000 	.word	0x02008000

08006b68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	d138      	bne.n	8006bf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e032      	b.n	8006bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2224      	movs	r2, #36	@ 0x24
 8006b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6819      	ldr	r1, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0201 	orr.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	e000      	b.n	8006bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bf0:	2302      	movs	r3, #2
  }
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d139      	bne.n	8006c88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e033      	b.n	8006c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2224      	movs	r2, #36	@ 0x24
 8006c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	e000      	b.n	8006c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c88:	2302      	movs	r3, #2
  }
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
	...

08006c98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ca0:	4b19      	ldr	r3, [pc, #100]	@ (8006d08 <HAL_PWREx_ConfigSupply+0x70>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d00a      	beq.n	8006cc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cac:	4b16      	ldr	r3, [pc, #88]	@ (8006d08 <HAL_PWREx_ConfigSupply+0x70>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d001      	beq.n	8006cbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e01f      	b.n	8006cfe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e01d      	b.n	8006cfe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cc2:	4b11      	ldr	r3, [pc, #68]	@ (8006d08 <HAL_PWREx_ConfigSupply+0x70>)
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f023 0207 	bic.w	r2, r3, #7
 8006cca:	490f      	ldr	r1, [pc, #60]	@ (8006d08 <HAL_PWREx_ConfigSupply+0x70>)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006cd2:	f7fa ff47 	bl	8001b64 <HAL_GetTick>
 8006cd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cd8:	e009      	b.n	8006cee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cda:	f7fa ff43 	bl	8001b64 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ce8:	d901      	bls.n	8006cee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e007      	b.n	8006cfe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cee:	4b06      	ldr	r3, [pc, #24]	@ (8006d08 <HAL_PWREx_ConfigSupply+0x70>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cfa:	d1ee      	bne.n	8006cda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	58024800 	.word	0x58024800

08006d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08c      	sub	sp, #48	@ 0x30
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d102      	bne.n	8006d20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f000 bc1f 	b.w	800755e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 80b3 	beq.w	8006e94 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d2e:	4b95      	ldr	r3, [pc, #596]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d38:	4b92      	ldr	r3, [pc, #584]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d40:	2b10      	cmp	r3, #16
 8006d42:	d007      	beq.n	8006d54 <HAL_RCC_OscConfig+0x48>
 8006d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d46:	2b18      	cmp	r3, #24
 8006d48:	d112      	bne.n	8006d70 <HAL_RCC_OscConfig+0x64>
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	f003 0303 	and.w	r3, r3, #3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d10d      	bne.n	8006d70 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d54:	4b8b      	ldr	r3, [pc, #556]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8098 	beq.w	8006e92 <HAL_RCC_OscConfig+0x186>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 8093 	bne.w	8006e92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e3f6      	b.n	800755e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d78:	d106      	bne.n	8006d88 <HAL_RCC_OscConfig+0x7c>
 8006d7a:	4b82      	ldr	r3, [pc, #520]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a81      	ldr	r2, [pc, #516]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	e058      	b.n	8006e3a <HAL_RCC_OscConfig+0x12e>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d112      	bne.n	8006db6 <HAL_RCC_OscConfig+0xaa>
 8006d90:	4b7c      	ldr	r3, [pc, #496]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a7b      	ldr	r2, [pc, #492]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	4b79      	ldr	r3, [pc, #484]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a78      	ldr	r2, [pc, #480]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006da2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	4b76      	ldr	r3, [pc, #472]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a75      	ldr	r2, [pc, #468]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	e041      	b.n	8006e3a <HAL_RCC_OscConfig+0x12e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dbe:	d112      	bne.n	8006de6 <HAL_RCC_OscConfig+0xda>
 8006dc0:	4b70      	ldr	r3, [pc, #448]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6f      	ldr	r2, [pc, #444]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006dc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	4b6d      	ldr	r3, [pc, #436]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a6c      	ldr	r2, [pc, #432]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006dd2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a69      	ldr	r2, [pc, #420]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	e029      	b.n	8006e3a <HAL_RCC_OscConfig+0x12e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006dee:	d112      	bne.n	8006e16 <HAL_RCC_OscConfig+0x10a>
 8006df0:	4b64      	ldr	r3, [pc, #400]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a63      	ldr	r2, [pc, #396]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006df6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	4b61      	ldr	r3, [pc, #388]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a60      	ldr	r2, [pc, #384]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	4b5e      	ldr	r3, [pc, #376]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a5d      	ldr	r2, [pc, #372]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	e011      	b.n	8006e3a <HAL_RCC_OscConfig+0x12e>
 8006e16:	4b5b      	ldr	r3, [pc, #364]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a5a      	ldr	r2, [pc, #360]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	4b58      	ldr	r3, [pc, #352]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a57      	ldr	r2, [pc, #348]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006e28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	4b55      	ldr	r3, [pc, #340]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a54      	ldr	r2, [pc, #336]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006e34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d013      	beq.n	8006e6a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e42:	f7fa fe8f 	bl	8001b64 <HAL_GetTick>
 8006e46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e4a:	f7fa fe8b 	bl	8001b64 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b64      	cmp	r3, #100	@ 0x64
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e380      	b.n	800755e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e5c:	4b49      	ldr	r3, [pc, #292]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x13e>
 8006e68:	e014      	b.n	8006e94 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6a:	f7fa fe7b 	bl	8001b64 <HAL_GetTick>
 8006e6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e70:	e008      	b.n	8006e84 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e72:	f7fa fe77 	bl	8001b64 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b64      	cmp	r3, #100	@ 0x64
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e36c      	b.n	800755e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e84:	4b3f      	ldr	r3, [pc, #252]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1f0      	bne.n	8006e72 <HAL_RCC_OscConfig+0x166>
 8006e90:	e000      	b.n	8006e94 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 808c 	beq.w	8006fba <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ea2:	4b38      	ldr	r3, [pc, #224]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eaa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006eac:	4b35      	ldr	r3, [pc, #212]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d007      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x1bc>
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	2b18      	cmp	r3, #24
 8006ebc:	d137      	bne.n	8006f2e <HAL_RCC_OscConfig+0x222>
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d132      	bne.n	8006f2e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x1d4>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e33e      	b.n	800755e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ee0:	4b28      	ldr	r3, [pc, #160]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f023 0219 	bic.w	r2, r3, #25
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	4925      	ldr	r1, [pc, #148]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef2:	f7fa fe37 	bl	8001b64 <HAL_GetTick>
 8006ef6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ef8:	e008      	b.n	8006f0c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006efa:	f7fa fe33 	bl	8001b64 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e328      	b.n	800755e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0f0      	beq.n	8006efa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f18:	4b1a      	ldr	r3, [pc, #104]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	061b      	lsls	r3, r3, #24
 8006f26:	4917      	ldr	r1, [pc, #92]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f2c:	e045      	b.n	8006fba <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d028      	beq.n	8006f88 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f36:	4b13      	ldr	r3, [pc, #76]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f023 0219 	bic.w	r2, r3, #25
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	4910      	ldr	r1, [pc, #64]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f48:	f7fa fe0c 	bl	8001b64 <HAL_GetTick>
 8006f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f50:	f7fa fe08 	bl	8001b64 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e2fd      	b.n	800755e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f62:	4b08      	ldr	r3, [pc, #32]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f0      	beq.n	8006f50 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f6e:	4b05      	ldr	r3, [pc, #20]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	061b      	lsls	r3, r3, #24
 8006f7c:	4901      	ldr	r1, [pc, #4]	@ (8006f84 <HAL_RCC_OscConfig+0x278>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	604b      	str	r3, [r1, #4]
 8006f82:	e01a      	b.n	8006fba <HAL_RCC_OscConfig+0x2ae>
 8006f84:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f88:	4b97      	ldr	r3, [pc, #604]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a96      	ldr	r2, [pc, #600]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f94:	f7fa fde6 	bl	8001b64 <HAL_GetTick>
 8006f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f9c:	f7fa fde2 	bl	8001b64 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e2d7      	b.n	800755e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fae:	4b8e      	ldr	r3, [pc, #568]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f0      	bne.n	8006f9c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d06a      	beq.n	800709c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fc6:	4b88      	ldr	r3, [pc, #544]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fd0:	4b85      	ldr	r3, [pc, #532]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d007      	beq.n	8006fec <HAL_RCC_OscConfig+0x2e0>
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b18      	cmp	r3, #24
 8006fe0:	d11b      	bne.n	800701a <HAL_RCC_OscConfig+0x30e>
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d116      	bne.n	800701a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fec:	4b7e      	ldr	r3, [pc, #504]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <HAL_RCC_OscConfig+0x2f8>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	2b80      	cmp	r3, #128	@ 0x80
 8006ffe:	d001      	beq.n	8007004 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e2ac      	b.n	800755e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007004:	4b78      	ldr	r3, [pc, #480]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	061b      	lsls	r3, r3, #24
 8007012:	4975      	ldr	r1, [pc, #468]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007014:	4313      	orrs	r3, r2
 8007016:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007018:	e040      	b.n	800709c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d023      	beq.n	800706a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007022:	4b71      	ldr	r3, [pc, #452]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a70      	ldr	r2, [pc, #448]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800702c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702e:	f7fa fd99 	bl	8001b64 <HAL_GetTick>
 8007032:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007034:	e008      	b.n	8007048 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007036:	f7fa fd95 	bl	8001b64 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d901      	bls.n	8007048 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e28a      	b.n	800755e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007048:	4b67      	ldr	r3, [pc, #412]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0f0      	beq.n	8007036 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007054:	4b64      	ldr	r3, [pc, #400]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	061b      	lsls	r3, r3, #24
 8007062:	4961      	ldr	r1, [pc, #388]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007064:	4313      	orrs	r3, r2
 8007066:	60cb      	str	r3, [r1, #12]
 8007068:	e018      	b.n	800709c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800706a:	4b5f      	ldr	r3, [pc, #380]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a5e      	ldr	r2, [pc, #376]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007070:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007076:	f7fa fd75 	bl	8001b64 <HAL_GetTick>
 800707a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800707c:	e008      	b.n	8007090 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800707e:	f7fa fd71 	bl	8001b64 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d901      	bls.n	8007090 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e266      	b.n	800755e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007090:	4b55      	ldr	r3, [pc, #340]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1f0      	bne.n	800707e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d036      	beq.n	8007116 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d019      	beq.n	80070e4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070b0:	4b4d      	ldr	r3, [pc, #308]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 80070b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070b4:	4a4c      	ldr	r2, [pc, #304]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 80070b6:	f043 0301 	orr.w	r3, r3, #1
 80070ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070bc:	f7fa fd52 	bl	8001b64 <HAL_GetTick>
 80070c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070c4:	f7fa fd4e 	bl	8001b64 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e243      	b.n	800755e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80070d6:	4b44      	ldr	r3, [pc, #272]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 80070d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0f0      	beq.n	80070c4 <HAL_RCC_OscConfig+0x3b8>
 80070e2:	e018      	b.n	8007116 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070e4:	4b40      	ldr	r3, [pc, #256]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 80070e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e8:	4a3f      	ldr	r2, [pc, #252]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 80070ea:	f023 0301 	bic.w	r3, r3, #1
 80070ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f0:	f7fa fd38 	bl	8001b64 <HAL_GetTick>
 80070f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070f8:	f7fa fd34 	bl	8001b64 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e229      	b.n	800755e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800710a:	4b37      	ldr	r3, [pc, #220]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 800710c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d036      	beq.n	8007190 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d019      	beq.n	800715e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800712a:	4b2f      	ldr	r3, [pc, #188]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a2e      	ldr	r2, [pc, #184]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007130:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007134:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007136:	f7fa fd15 	bl	8001b64 <HAL_GetTick>
 800713a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800713e:	f7fa fd11 	bl	8001b64 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e206      	b.n	800755e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007150:	4b25      	ldr	r3, [pc, #148]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <HAL_RCC_OscConfig+0x432>
 800715c:	e018      	b.n	8007190 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800715e:	4b22      	ldr	r3, [pc, #136]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a21      	ldr	r2, [pc, #132]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007164:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007168:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800716a:	f7fa fcfb 	bl	8001b64 <HAL_GetTick>
 800716e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007172:	f7fa fcf7 	bl	8001b64 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e1ec      	b.n	800755e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007184:	4b18      	ldr	r3, [pc, #96]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f0      	bne.n	8007172 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80af 	beq.w	80072fc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800719e:	4b13      	ldr	r3, [pc, #76]	@ (80071ec <HAL_RCC_OscConfig+0x4e0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a12      	ldr	r2, [pc, #72]	@ (80071ec <HAL_RCC_OscConfig+0x4e0>)
 80071a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071aa:	f7fa fcdb 	bl	8001b64 <HAL_GetTick>
 80071ae:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071b0:	e008      	b.n	80071c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b2:	f7fa fcd7 	bl	8001b64 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b64      	cmp	r3, #100	@ 0x64
 80071be:	d901      	bls.n	80071c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e1cc      	b.n	800755e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071c4:	4b09      	ldr	r3, [pc, #36]	@ (80071ec <HAL_RCC_OscConfig+0x4e0>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f0      	beq.n	80071b2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d10b      	bne.n	80071f0 <HAL_RCC_OscConfig+0x4e4>
 80071d8:	4b03      	ldr	r3, [pc, #12]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 80071da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071dc:	4a02      	ldr	r2, [pc, #8]	@ (80071e8 <HAL_RCC_OscConfig+0x4dc>)
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80071e4:	e05b      	b.n	800729e <HAL_RCC_OscConfig+0x592>
 80071e6:	bf00      	nop
 80071e8:	58024400 	.word	0x58024400
 80071ec:	58024800 	.word	0x58024800
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d112      	bne.n	800721e <HAL_RCC_OscConfig+0x512>
 80071f8:	4b9d      	ldr	r3, [pc, #628]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80071fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fc:	4a9c      	ldr	r2, [pc, #624]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80071fe:	f023 0301 	bic.w	r3, r3, #1
 8007202:	6713      	str	r3, [r2, #112]	@ 0x70
 8007204:	4b9a      	ldr	r3, [pc, #616]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007208:	4a99      	ldr	r2, [pc, #612]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800720a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800720e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007210:	4b97      	ldr	r3, [pc, #604]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007214:	4a96      	ldr	r2, [pc, #600]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007216:	f023 0304 	bic.w	r3, r3, #4
 800721a:	6713      	str	r3, [r2, #112]	@ 0x70
 800721c:	e03f      	b.n	800729e <HAL_RCC_OscConfig+0x592>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2b05      	cmp	r3, #5
 8007224:	d112      	bne.n	800724c <HAL_RCC_OscConfig+0x540>
 8007226:	4b92      	ldr	r3, [pc, #584]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800722a:	4a91      	ldr	r2, [pc, #580]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800722c:	f043 0304 	orr.w	r3, r3, #4
 8007230:	6713      	str	r3, [r2, #112]	@ 0x70
 8007232:	4b8f      	ldr	r3, [pc, #572]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007236:	4a8e      	ldr	r2, [pc, #568]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007238:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800723c:	6713      	str	r3, [r2, #112]	@ 0x70
 800723e:	4b8c      	ldr	r3, [pc, #560]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007242:	4a8b      	ldr	r2, [pc, #556]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	6713      	str	r3, [r2, #112]	@ 0x70
 800724a:	e028      	b.n	800729e <HAL_RCC_OscConfig+0x592>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b85      	cmp	r3, #133	@ 0x85
 8007252:	d112      	bne.n	800727a <HAL_RCC_OscConfig+0x56e>
 8007254:	4b86      	ldr	r3, [pc, #536]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007258:	4a85      	ldr	r2, [pc, #532]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800725a:	f043 0304 	orr.w	r3, r3, #4
 800725e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007260:	4b83      	ldr	r3, [pc, #524]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007264:	4a82      	ldr	r2, [pc, #520]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800726a:	6713      	str	r3, [r2, #112]	@ 0x70
 800726c:	4b80      	ldr	r3, [pc, #512]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800726e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007270:	4a7f      	ldr	r2, [pc, #508]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007272:	f043 0301 	orr.w	r3, r3, #1
 8007276:	6713      	str	r3, [r2, #112]	@ 0x70
 8007278:	e011      	b.n	800729e <HAL_RCC_OscConfig+0x592>
 800727a:	4b7d      	ldr	r3, [pc, #500]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727e:	4a7c      	ldr	r2, [pc, #496]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007280:	f023 0301 	bic.w	r3, r3, #1
 8007284:	6713      	str	r3, [r2, #112]	@ 0x70
 8007286:	4b7a      	ldr	r3, [pc, #488]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728a:	4a79      	ldr	r2, [pc, #484]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800728c:	f023 0304 	bic.w	r3, r3, #4
 8007290:	6713      	str	r3, [r2, #112]	@ 0x70
 8007292:	4b77      	ldr	r3, [pc, #476]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007296:	4a76      	ldr	r2, [pc, #472]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007298:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800729c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d015      	beq.n	80072d2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a6:	f7fa fc5d 	bl	8001b64 <HAL_GetTick>
 80072aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072ac:	e00a      	b.n	80072c4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ae:	f7fa fc59 	bl	8001b64 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072bc:	4293      	cmp	r3, r2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e14c      	b.n	800755e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0ee      	beq.n	80072ae <HAL_RCC_OscConfig+0x5a2>
 80072d0:	e014      	b.n	80072fc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d2:	f7fa fc47 	bl	8001b64 <HAL_GetTick>
 80072d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072d8:	e00a      	b.n	80072f0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072da:	f7fa fc43 	bl	8001b64 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e136      	b.n	800755e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072f0:	4b5f      	ldr	r3, [pc, #380]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80072f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1ee      	bne.n	80072da <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 812b 	beq.w	800755c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007306:	4b5a      	ldr	r3, [pc, #360]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800730e:	2b18      	cmp	r3, #24
 8007310:	f000 80bb 	beq.w	800748a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007318:	2b02      	cmp	r3, #2
 800731a:	f040 8095 	bne.w	8007448 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800731e:	4b54      	ldr	r3, [pc, #336]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a53      	ldr	r2, [pc, #332]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007324:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732a:	f7fa fc1b 	bl	8001b64 <HAL_GetTick>
 800732e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007330:	e008      	b.n	8007344 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007332:	f7fa fc17 	bl	8001b64 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d901      	bls.n	8007344 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e10c      	b.n	800755e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007344:	4b4a      	ldr	r3, [pc, #296]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1f0      	bne.n	8007332 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007350:	4b47      	ldr	r3, [pc, #284]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007352:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007354:	4b47      	ldr	r3, [pc, #284]	@ (8007474 <HAL_RCC_OscConfig+0x768>)
 8007356:	4013      	ands	r3, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007360:	0112      	lsls	r2, r2, #4
 8007362:	430a      	orrs	r2, r1
 8007364:	4942      	ldr	r1, [pc, #264]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007366:	4313      	orrs	r3, r2
 8007368:	628b      	str	r3, [r1, #40]	@ 0x28
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736e:	3b01      	subs	r3, #1
 8007370:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007378:	3b01      	subs	r3, #1
 800737a:	025b      	lsls	r3, r3, #9
 800737c:	b29b      	uxth	r3, r3
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007384:	3b01      	subs	r3, #1
 8007386:	041b      	lsls	r3, r3, #16
 8007388:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007392:	3b01      	subs	r3, #1
 8007394:	061b      	lsls	r3, r3, #24
 8007396:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800739a:	4935      	ldr	r1, [pc, #212]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800739c:	4313      	orrs	r3, r2
 800739e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80073a0:	4b33      	ldr	r3, [pc, #204]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a4:	4a32      	ldr	r2, [pc, #200]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073a6:	f023 0301 	bic.w	r3, r3, #1
 80073aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80073ac:	4b30      	ldr	r3, [pc, #192]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073b0:	4b31      	ldr	r3, [pc, #196]	@ (8007478 <HAL_RCC_OscConfig+0x76c>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80073b8:	00d2      	lsls	r2, r2, #3
 80073ba:	492d      	ldr	r1, [pc, #180]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80073c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c4:	f023 020c 	bic.w	r2, r3, #12
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073cc:	4928      	ldr	r1, [pc, #160]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80073d2:	4b27      	ldr	r3, [pc, #156]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d6:	f023 0202 	bic.w	r2, r3, #2
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073de:	4924      	ldr	r1, [pc, #144]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80073e4:	4b22      	ldr	r3, [pc, #136]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e8:	4a21      	ldr	r2, [pc, #132]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f4:	4a1e      	ldr	r2, [pc, #120]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80073fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	4a1b      	ldr	r2, [pc, #108]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007402:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007408:	4b19      	ldr	r3, [pc, #100]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800740a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740c:	4a18      	ldr	r2, [pc, #96]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800740e:	f043 0301 	orr.w	r3, r3, #1
 8007412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007414:	4b16      	ldr	r3, [pc, #88]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a15      	ldr	r2, [pc, #84]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800741a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800741e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fa fba0 	bl	8001b64 <HAL_GetTick>
 8007424:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007428:	f7fa fb9c 	bl	8001b64 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e091      	b.n	800755e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800743a:	4b0d      	ldr	r3, [pc, #52]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0f0      	beq.n	8007428 <HAL_RCC_OscConfig+0x71c>
 8007446:	e089      	b.n	800755c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007448:	4b09      	ldr	r3, [pc, #36]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a08      	ldr	r2, [pc, #32]	@ (8007470 <HAL_RCC_OscConfig+0x764>)
 800744e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007454:	f7fa fb86 	bl	8001b64 <HAL_GetTick>
 8007458:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800745a:	e00f      	b.n	800747c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800745c:	f7fa fb82 	bl	8001b64 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d908      	bls.n	800747c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e077      	b.n	800755e <HAL_RCC_OscConfig+0x852>
 800746e:	bf00      	nop
 8007470:	58024400 	.word	0x58024400
 8007474:	fffffc0c 	.word	0xfffffc0c
 8007478:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800747c:	4b3a      	ldr	r3, [pc, #232]	@ (8007568 <HAL_RCC_OscConfig+0x85c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e9      	bne.n	800745c <HAL_RCC_OscConfig+0x750>
 8007488:	e068      	b.n	800755c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800748a:	4b37      	ldr	r3, [pc, #220]	@ (8007568 <HAL_RCC_OscConfig+0x85c>)
 800748c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007490:	4b35      	ldr	r3, [pc, #212]	@ (8007568 <HAL_RCC_OscConfig+0x85c>)
 8007492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007494:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749a:	2b01      	cmp	r3, #1
 800749c:	d031      	beq.n	8007502 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f003 0203 	and.w	r2, r3, #3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d12a      	bne.n	8007502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	091b      	lsrs	r3, r3, #4
 80074b0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d122      	bne.n	8007502 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d11a      	bne.n	8007502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	0a5b      	lsrs	r3, r3, #9
 80074d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074d8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074da:	429a      	cmp	r2, r3
 80074dc:	d111      	bne.n	8007502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	0c1b      	lsrs	r3, r3, #16
 80074e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d108      	bne.n	8007502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	0e1b      	lsrs	r3, r3, #24
 80074f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074fe:	429a      	cmp	r2, r3
 8007500:	d001      	beq.n	8007506 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e02b      	b.n	800755e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007506:	4b18      	ldr	r3, [pc, #96]	@ (8007568 <HAL_RCC_OscConfig+0x85c>)
 8007508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800750a:	08db      	lsrs	r3, r3, #3
 800750c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007510:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	429a      	cmp	r2, r3
 800751a:	d01f      	beq.n	800755c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800751c:	4b12      	ldr	r3, [pc, #72]	@ (8007568 <HAL_RCC_OscConfig+0x85c>)
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	4a11      	ldr	r2, [pc, #68]	@ (8007568 <HAL_RCC_OscConfig+0x85c>)
 8007522:	f023 0301 	bic.w	r3, r3, #1
 8007526:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007528:	f7fa fb1c 	bl	8001b64 <HAL_GetTick>
 800752c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800752e:	bf00      	nop
 8007530:	f7fa fb18 	bl	8001b64 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	4293      	cmp	r3, r2
 800753a:	d0f9      	beq.n	8007530 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800753c:	4b0a      	ldr	r3, [pc, #40]	@ (8007568 <HAL_RCC_OscConfig+0x85c>)
 800753e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007540:	4b0a      	ldr	r3, [pc, #40]	@ (800756c <HAL_RCC_OscConfig+0x860>)
 8007542:	4013      	ands	r3, r2
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007548:	00d2      	lsls	r2, r2, #3
 800754a:	4907      	ldr	r1, [pc, #28]	@ (8007568 <HAL_RCC_OscConfig+0x85c>)
 800754c:	4313      	orrs	r3, r2
 800754e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007550:	4b05      	ldr	r3, [pc, #20]	@ (8007568 <HAL_RCC_OscConfig+0x85c>)
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	4a04      	ldr	r2, [pc, #16]	@ (8007568 <HAL_RCC_OscConfig+0x85c>)
 8007556:	f043 0301 	orr.w	r3, r3, #1
 800755a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3730      	adds	r7, #48	@ 0x30
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	58024400 	.word	0x58024400
 800756c:	ffff0007 	.word	0xffff0007

08007570 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e19c      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007584:	4b8a      	ldr	r3, [pc, #552]	@ (80077b0 <HAL_RCC_ClockConfig+0x240>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d910      	bls.n	80075b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007592:	4b87      	ldr	r3, [pc, #540]	@ (80077b0 <HAL_RCC_ClockConfig+0x240>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f023 020f 	bic.w	r2, r3, #15
 800759a:	4985      	ldr	r1, [pc, #532]	@ (80077b0 <HAL_RCC_ClockConfig+0x240>)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	4313      	orrs	r3, r2
 80075a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075a2:	4b83      	ldr	r3, [pc, #524]	@ (80077b0 <HAL_RCC_ClockConfig+0x240>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d001      	beq.n	80075b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e184      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d010      	beq.n	80075e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691a      	ldr	r2, [r3, #16]
 80075c4:	4b7b      	ldr	r3, [pc, #492]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d908      	bls.n	80075e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075d0:	4b78      	ldr	r3, [pc, #480]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	4975      	ldr	r1, [pc, #468]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d010      	beq.n	8007610 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	695a      	ldr	r2, [r3, #20]
 80075f2:	4b70      	ldr	r3, [pc, #448]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d908      	bls.n	8007610 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075fe:	4b6d      	ldr	r3, [pc, #436]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	496a      	ldr	r1, [pc, #424]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800760c:	4313      	orrs	r3, r2
 800760e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0310 	and.w	r3, r3, #16
 8007618:	2b00      	cmp	r3, #0
 800761a:	d010      	beq.n	800763e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699a      	ldr	r2, [r3, #24]
 8007620:	4b64      	ldr	r3, [pc, #400]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007628:	429a      	cmp	r2, r3
 800762a:	d908      	bls.n	800763e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800762c:	4b61      	ldr	r3, [pc, #388]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	495e      	ldr	r1, [pc, #376]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800763a:	4313      	orrs	r3, r2
 800763c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d010      	beq.n	800766c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69da      	ldr	r2, [r3, #28]
 800764e:	4b59      	ldr	r3, [pc, #356]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007656:	429a      	cmp	r2, r3
 8007658:	d908      	bls.n	800766c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800765a:	4b56      	ldr	r3, [pc, #344]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	4953      	ldr	r1, [pc, #332]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007668:	4313      	orrs	r3, r2
 800766a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d010      	beq.n	800769a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	4b4d      	ldr	r3, [pc, #308]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	f003 030f 	and.w	r3, r3, #15
 8007684:	429a      	cmp	r2, r3
 8007686:	d908      	bls.n	800769a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007688:	4b4a      	ldr	r3, [pc, #296]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	f023 020f 	bic.w	r2, r3, #15
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	4947      	ldr	r1, [pc, #284]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007696:	4313      	orrs	r3, r2
 8007698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d055      	beq.n	8007752 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80076a6:	4b43      	ldr	r3, [pc, #268]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	4940      	ldr	r1, [pc, #256]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d107      	bne.n	80076d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076c0:	4b3c      	ldr	r3, [pc, #240]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d121      	bne.n	8007710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e0f6      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d107      	bne.n	80076e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076d8:	4b36      	ldr	r3, [pc, #216]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d115      	bne.n	8007710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e0ea      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d107      	bne.n	8007700 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076f0:	4b30      	ldr	r3, [pc, #192]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e0de      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007700:	4b2c      	ldr	r3, [pc, #176]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e0d6      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007710:	4b28      	ldr	r3, [pc, #160]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f023 0207 	bic.w	r2, r3, #7
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	4925      	ldr	r1, [pc, #148]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800771e:	4313      	orrs	r3, r2
 8007720:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007722:	f7fa fa1f 	bl	8001b64 <HAL_GetTick>
 8007726:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007728:	e00a      	b.n	8007740 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800772a:	f7fa fa1b 	bl	8001b64 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007738:	4293      	cmp	r3, r2
 800773a:	d901      	bls.n	8007740 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e0be      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007740:	4b1c      	ldr	r3, [pc, #112]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	00db      	lsls	r3, r3, #3
 800774e:	429a      	cmp	r2, r3
 8007750:	d1eb      	bne.n	800772a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d010      	beq.n	8007780 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68da      	ldr	r2, [r3, #12]
 8007762:	4b14      	ldr	r3, [pc, #80]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	429a      	cmp	r2, r3
 800776c:	d208      	bcs.n	8007780 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800776e:	4b11      	ldr	r3, [pc, #68]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	f023 020f 	bic.w	r2, r3, #15
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	490e      	ldr	r1, [pc, #56]	@ (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800777c:	4313      	orrs	r3, r2
 800777e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007780:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <HAL_RCC_ClockConfig+0x240>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d214      	bcs.n	80077b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800778e:	4b08      	ldr	r3, [pc, #32]	@ (80077b0 <HAL_RCC_ClockConfig+0x240>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f023 020f 	bic.w	r2, r3, #15
 8007796:	4906      	ldr	r1, [pc, #24]	@ (80077b0 <HAL_RCC_ClockConfig+0x240>)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	4313      	orrs	r3, r2
 800779c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800779e:	4b04      	ldr	r3, [pc, #16]	@ (80077b0 <HAL_RCC_ClockConfig+0x240>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d005      	beq.n	80077b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e086      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
 80077b0:	52002000 	.word	0x52002000
 80077b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d010      	beq.n	80077e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	4b3f      	ldr	r3, [pc, #252]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d208      	bcs.n	80077e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077d4:	4b3c      	ldr	r3, [pc, #240]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	4939      	ldr	r1, [pc, #228]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d010      	beq.n	8007814 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695a      	ldr	r2, [r3, #20]
 80077f6:	4b34      	ldr	r3, [pc, #208]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077fe:	429a      	cmp	r2, r3
 8007800:	d208      	bcs.n	8007814 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007802:	4b31      	ldr	r3, [pc, #196]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	492e      	ldr	r1, [pc, #184]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007810:	4313      	orrs	r3, r2
 8007812:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0310 	and.w	r3, r3, #16
 800781c:	2b00      	cmp	r3, #0
 800781e:	d010      	beq.n	8007842 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	699a      	ldr	r2, [r3, #24]
 8007824:	4b28      	ldr	r3, [pc, #160]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800782c:	429a      	cmp	r2, r3
 800782e:	d208      	bcs.n	8007842 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007830:	4b25      	ldr	r3, [pc, #148]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	4922      	ldr	r1, [pc, #136]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 800783e:	4313      	orrs	r3, r2
 8007840:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d010      	beq.n	8007870 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69da      	ldr	r2, [r3, #28]
 8007852:	4b1d      	ldr	r3, [pc, #116]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800785a:	429a      	cmp	r2, r3
 800785c:	d208      	bcs.n	8007870 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800785e:	4b1a      	ldr	r3, [pc, #104]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	4917      	ldr	r1, [pc, #92]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 800786c:	4313      	orrs	r3, r2
 800786e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007870:	f000 f834 	bl	80078dc <HAL_RCC_GetSysClockFreq>
 8007874:	4602      	mov	r2, r0
 8007876:	4b14      	ldr	r3, [pc, #80]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	f003 030f 	and.w	r3, r3, #15
 8007880:	4912      	ldr	r1, [pc, #72]	@ (80078cc <HAL_RCC_ClockConfig+0x35c>)
 8007882:	5ccb      	ldrb	r3, [r1, r3]
 8007884:	f003 031f 	and.w	r3, r3, #31
 8007888:	fa22 f303 	lsr.w	r3, r2, r3
 800788c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800788e:	4b0e      	ldr	r3, [pc, #56]	@ (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	4a0d      	ldr	r2, [pc, #52]	@ (80078cc <HAL_RCC_ClockConfig+0x35c>)
 8007898:	5cd3      	ldrb	r3, [r2, r3]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	fa22 f303 	lsr.w	r3, r2, r3
 80078a4:	4a0a      	ldr	r2, [pc, #40]	@ (80078d0 <HAL_RCC_ClockConfig+0x360>)
 80078a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078a8:	4a0a      	ldr	r2, [pc, #40]	@ (80078d4 <HAL_RCC_ClockConfig+0x364>)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80078ae:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <HAL_RCC_ClockConfig+0x368>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fa f90c 	bl	8001ad0 <HAL_InitTick>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	58024400 	.word	0x58024400
 80078cc:	0800af9c 	.word	0x0800af9c
 80078d0:	24000004 	.word	0x24000004
 80078d4:	24000000 	.word	0x24000000
 80078d8:	24000008 	.word	0x24000008

080078dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078dc:	b480      	push	{r7}
 80078de:	b089      	sub	sp, #36	@ 0x24
 80078e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078e2:	4bb3      	ldr	r3, [pc, #716]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078ea:	2b18      	cmp	r3, #24
 80078ec:	f200 8155 	bhi.w	8007b9a <HAL_RCC_GetSysClockFreq+0x2be>
 80078f0:	a201      	add	r2, pc, #4	@ (adr r2, 80078f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80078f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f6:	bf00      	nop
 80078f8:	0800795d 	.word	0x0800795d
 80078fc:	08007b9b 	.word	0x08007b9b
 8007900:	08007b9b 	.word	0x08007b9b
 8007904:	08007b9b 	.word	0x08007b9b
 8007908:	08007b9b 	.word	0x08007b9b
 800790c:	08007b9b 	.word	0x08007b9b
 8007910:	08007b9b 	.word	0x08007b9b
 8007914:	08007b9b 	.word	0x08007b9b
 8007918:	08007983 	.word	0x08007983
 800791c:	08007b9b 	.word	0x08007b9b
 8007920:	08007b9b 	.word	0x08007b9b
 8007924:	08007b9b 	.word	0x08007b9b
 8007928:	08007b9b 	.word	0x08007b9b
 800792c:	08007b9b 	.word	0x08007b9b
 8007930:	08007b9b 	.word	0x08007b9b
 8007934:	08007b9b 	.word	0x08007b9b
 8007938:	08007989 	.word	0x08007989
 800793c:	08007b9b 	.word	0x08007b9b
 8007940:	08007b9b 	.word	0x08007b9b
 8007944:	08007b9b 	.word	0x08007b9b
 8007948:	08007b9b 	.word	0x08007b9b
 800794c:	08007b9b 	.word	0x08007b9b
 8007950:	08007b9b 	.word	0x08007b9b
 8007954:	08007b9b 	.word	0x08007b9b
 8007958:	0800798f 	.word	0x0800798f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800795c:	4b94      	ldr	r3, [pc, #592]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d009      	beq.n	800797c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007968:	4b91      	ldr	r3, [pc, #580]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	08db      	lsrs	r3, r3, #3
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	4a90      	ldr	r2, [pc, #576]	@ (8007bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007974:	fa22 f303 	lsr.w	r3, r2, r3
 8007978:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800797a:	e111      	b.n	8007ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800797c:	4b8d      	ldr	r3, [pc, #564]	@ (8007bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800797e:	61bb      	str	r3, [r7, #24]
      break;
 8007980:	e10e      	b.n	8007ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007982:	4b8d      	ldr	r3, [pc, #564]	@ (8007bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007984:	61bb      	str	r3, [r7, #24]
      break;
 8007986:	e10b      	b.n	8007ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007988:	4b8c      	ldr	r3, [pc, #560]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800798a:	61bb      	str	r3, [r7, #24]
      break;
 800798c:	e108      	b.n	8007ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800798e:	4b88      	ldr	r3, [pc, #544]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007998:	4b85      	ldr	r3, [pc, #532]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800799a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799c:	091b      	lsrs	r3, r3, #4
 800799e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80079a4:	4b82      	ldr	r3, [pc, #520]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80079ae:	4b80      	ldr	r3, [pc, #512]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b2:	08db      	lsrs	r3, r3, #3
 80079b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	fb02 f303 	mul.w	r3, r2, r3
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80e1 	beq.w	8007b94 <HAL_RCC_GetSysClockFreq+0x2b8>
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	f000 8083 	beq.w	8007ae0 <HAL_RCC_GetSysClockFreq+0x204>
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	f200 80a1 	bhi.w	8007b24 <HAL_RCC_GetSysClockFreq+0x248>
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <HAL_RCC_GetSysClockFreq+0x114>
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d056      	beq.n	8007a9c <HAL_RCC_GetSysClockFreq+0x1c0>
 80079ee:	e099      	b.n	8007b24 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f0:	4b6f      	ldr	r3, [pc, #444]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0320 	and.w	r3, r3, #32
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d02d      	beq.n	8007a58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079fc:	4b6c      	ldr	r3, [pc, #432]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	08db      	lsrs	r3, r3, #3
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	4a6b      	ldr	r2, [pc, #428]	@ (8007bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a08:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	ee07 3a90 	vmov	s15, r3
 8007a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a26:	4b62      	ldr	r3, [pc, #392]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007a56:	e087      	b.n	8007b68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007bc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6a:	4b51      	ldr	r3, [pc, #324]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a9a:	e065      	b.n	8007b68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	ee07 3a90 	vmov	s15, r3
 8007aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aae:	4b40      	ldr	r3, [pc, #256]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ac2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ada:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ade:	e043      	b.n	8007b68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007bcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8007aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af2:	4b2f      	ldr	r3, [pc, #188]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b06:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b22:	e021      	b.n	8007b68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b36:	4b1e      	ldr	r3, [pc, #120]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b4a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007b68:	4b11      	ldr	r3, [pc, #68]	@ (8007bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6c:	0a5b      	lsrs	r3, r3, #9
 8007b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b72:	3301      	adds	r3, #1
 8007b74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	ee07 3a90 	vmov	s15, r3
 8007b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b8c:	ee17 3a90 	vmov	r3, s15
 8007b90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007b92:	e005      	b.n	8007ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61bb      	str	r3, [r7, #24]
      break;
 8007b98:	e002      	b.n	8007ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007b9a:	4b07      	ldr	r3, [pc, #28]	@ (8007bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b9c:	61bb      	str	r3, [r7, #24]
      break;
 8007b9e:	bf00      	nop
  }

  return sysclockfreq;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3724      	adds	r7, #36	@ 0x24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	58024400 	.word	0x58024400
 8007bb4:	03d09000 	.word	0x03d09000
 8007bb8:	003d0900 	.word	0x003d0900
 8007bbc:	017d7840 	.word	0x017d7840
 8007bc0:	46000000 	.word	0x46000000
 8007bc4:	4c742400 	.word	0x4c742400
 8007bc8:	4a742400 	.word	0x4a742400
 8007bcc:	4bbebc20 	.word	0x4bbebc20

08007bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007bd6:	f7ff fe81 	bl	80078dc <HAL_RCC_GetSysClockFreq>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	4b10      	ldr	r3, [pc, #64]	@ (8007c20 <HAL_RCC_GetHCLKFreq+0x50>)
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	0a1b      	lsrs	r3, r3, #8
 8007be2:	f003 030f 	and.w	r3, r3, #15
 8007be6:	490f      	ldr	r1, [pc, #60]	@ (8007c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8007be8:	5ccb      	ldrb	r3, [r1, r3]
 8007bea:	f003 031f 	and.w	r3, r3, #31
 8007bee:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8007c20 <HAL_RCC_GetHCLKFreq+0x50>)
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	f003 030f 	and.w	r3, r3, #15
 8007bfc:	4a09      	ldr	r2, [pc, #36]	@ (8007c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8007bfe:	5cd3      	ldrb	r3, [r2, r3]
 8007c00:	f003 031f 	and.w	r3, r3, #31
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0a:	4a07      	ldr	r2, [pc, #28]	@ (8007c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c0e:	4a07      	ldr	r2, [pc, #28]	@ (8007c2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c14:	4b04      	ldr	r3, [pc, #16]	@ (8007c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c16:	681b      	ldr	r3, [r3, #0]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	58024400 	.word	0x58024400
 8007c24:	0800af9c 	.word	0x0800af9c
 8007c28:	24000004 	.word	0x24000004
 8007c2c:	24000000 	.word	0x24000000

08007c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007c34:	f7ff ffcc 	bl	8007bd0 <HAL_RCC_GetHCLKFreq>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	4b06      	ldr	r3, [pc, #24]	@ (8007c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	091b      	lsrs	r3, r3, #4
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	4904      	ldr	r1, [pc, #16]	@ (8007c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c46:	5ccb      	ldrb	r3, [r1, r3]
 8007c48:	f003 031f 	and.w	r3, r3, #31
 8007c4c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	58024400 	.word	0x58024400
 8007c58:	0800af9c 	.word	0x0800af9c

08007c5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c60:	b0c8      	sub	sp, #288	@ 0x120
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007c80:	2500      	movs	r5, #0
 8007c82:	ea54 0305 	orrs.w	r3, r4, r5
 8007c86:	d049      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c92:	d02f      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007c94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c98:	d828      	bhi.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c9e:	d01a      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007ca0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ca4:	d822      	bhi.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007caa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cae:	d007      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007cb0:	e01c      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb2:	4ba7      	ldr	r3, [pc, #668]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb6:	4aa6      	ldr	r2, [pc, #664]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cbe:	e01a      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	2102      	movs	r1, #2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f002 fa6d 	bl	800a1a8 <RCCEx_PLL2_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cd4:	e00f      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cda:	3328      	adds	r3, #40	@ 0x28
 8007cdc:	2102      	movs	r1, #2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f002 fb14 	bl	800a30c <RCCEx_PLL3_Config>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cea:	e004      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cf2:	e000      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007cfe:	4b94      	ldr	r3, [pc, #592]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d0c:	4a90      	ldr	r2, [pc, #576]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d12:	e003      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007d28:	f04f 0900 	mov.w	r9, #0
 8007d2c:	ea58 0309 	orrs.w	r3, r8, r9
 8007d30:	d047      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d82a      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d59 	.word	0x08007d59
 8007d48:	08007d67 	.word	0x08007d67
 8007d4c:	08007d7d 	.word	0x08007d7d
 8007d50:	08007d9b 	.word	0x08007d9b
 8007d54:	08007d9b 	.word	0x08007d9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d58:	4b7d      	ldr	r3, [pc, #500]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5c:	4a7c      	ldr	r2, [pc, #496]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d64:	e01a      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f002 fa1a 	bl	800a1a8 <RCCEx_PLL2_Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d7a:	e00f      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d80:	3328      	adds	r3, #40	@ 0x28
 8007d82:	2100      	movs	r1, #0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f002 fac1 	bl	800a30c <RCCEx_PLL3_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d90:	e004      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d98:	e000      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007da4:	4b6a      	ldr	r3, [pc, #424]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da8:	f023 0107 	bic.w	r1, r3, #7
 8007dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db2:	4a67      	ldr	r2, [pc, #412]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007db4:	430b      	orrs	r3, r1
 8007db6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007db8:	e003      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007dce:	f04f 0b00 	mov.w	fp, #0
 8007dd2:	ea5a 030b 	orrs.w	r3, sl, fp
 8007dd6:	d054      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dde:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007de2:	d036      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007de4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007de8:	d82f      	bhi.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dee:	d032      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007df4:	d829      	bhi.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007df6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007df8:	d02f      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007dfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dfc:	d825      	bhi.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007dfe:	2b80      	cmp	r3, #128	@ 0x80
 8007e00:	d018      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007e02:	2b80      	cmp	r3, #128	@ 0x80
 8007e04:	d821      	bhi.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d002      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007e0a:	2b40      	cmp	r3, #64	@ 0x40
 8007e0c:	d007      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007e0e:	e01c      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e10:	4b4f      	ldr	r3, [pc, #316]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e14:	4a4e      	ldr	r2, [pc, #312]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007e1c:	e01e      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e22:	3308      	adds	r3, #8
 8007e24:	2100      	movs	r1, #0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f002 f9be 	bl	800a1a8 <RCCEx_PLL2_Config>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007e32:	e013      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e38:	3328      	adds	r3, #40	@ 0x28
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f002 fa65 	bl	800a30c <RCCEx_PLL3_Config>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007e48:	e008      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e50:	e004      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007e52:	bf00      	nop
 8007e54:	e002      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007e56:	bf00      	nop
 8007e58:	e000      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007e64:	4b3a      	ldr	r3, [pc, #232]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e72:	4a37      	ldr	r2, [pc, #220]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e74:	430b      	orrs	r3, r1
 8007e76:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e78:	e003      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007e8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007e92:	2300      	movs	r3, #0
 8007e94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007e98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	d05c      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ea8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007eac:	d03b      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007eae:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007eb2:	d834      	bhi.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eb8:	d037      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ebe:	d82e      	bhi.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007ec0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007ec4:	d033      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007ec6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007eca:	d828      	bhi.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ed0:	d01a      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ed6:	d822      	bhi.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ee0:	d007      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007ee2:	e01c      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee8:	4a19      	ldr	r2, [pc, #100]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007ef0:	e01e      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f002 f954 	bl	800a1a8 <RCCEx_PLL2_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007f06:	e013      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f0c:	3328      	adds	r3, #40	@ 0x28
 8007f0e:	2100      	movs	r1, #0
 8007f10:	4618      	mov	r0, r3
 8007f12:	f002 f9fb 	bl	800a30c <RCCEx_PLL3_Config>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007f1c:	e008      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f24:	e004      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f26:	bf00      	nop
 8007f28:	e002      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f2a:	bf00      	nop
 8007f2c:	e000      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10d      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007f38:	4b05      	ldr	r3, [pc, #20]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f3c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f46:	4a02      	ldr	r2, [pc, #8]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f48:	430b      	orrs	r3, r1
 8007f4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f4c:	e006      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007f4e:	bf00      	nop
 8007f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007f68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007f76:	460b      	mov	r3, r1
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	d03a      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f82:	2b30      	cmp	r3, #48	@ 0x30
 8007f84:	d01f      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007f86:	2b30      	cmp	r3, #48	@ 0x30
 8007f88:	d819      	bhi.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d00c      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	d815      	bhi.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d019      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d111      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f9a:	4bae      	ldr	r3, [pc, #696]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9e:	4aad      	ldr	r2, [pc, #692]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007fa6:	e011      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fac:	3308      	adds	r3, #8
 8007fae:	2102      	movs	r1, #2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f002 f8f9 	bl	800a1a8 <RCCEx_PLL2_Config>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007fbc:	e006      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fc4:	e002      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007fc6:	bf00      	nop
 8007fc8:	e000      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007fd4:	4b9f      	ldr	r3, [pc, #636]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe2:	4a9c      	ldr	r2, [pc, #624]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fe8:	e003      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007ffe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008002:	2300      	movs	r3, #0
 8008004:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008008:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800800c:	460b      	mov	r3, r1
 800800e:	4313      	orrs	r3, r2
 8008010:	d051      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800801c:	d035      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800801e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008022:	d82e      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008024:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008028:	d031      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800802a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800802e:	d828      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008030:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008034:	d01a      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800803a:	d822      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008044:	d007      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008046:	e01c      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008048:	4b82      	ldr	r3, [pc, #520]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800804a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804c:	4a81      	ldr	r2, [pc, #516]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800804e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008052:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008054:	e01c      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800805a:	3308      	adds	r3, #8
 800805c:	2100      	movs	r1, #0
 800805e:	4618      	mov	r0, r3
 8008060:	f002 f8a2 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800806a:	e011      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800806c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008070:	3328      	adds	r3, #40	@ 0x28
 8008072:	2100      	movs	r1, #0
 8008074:	4618      	mov	r0, r3
 8008076:	f002 f949 	bl	800a30c <RCCEx_PLL3_Config>
 800807a:	4603      	mov	r3, r0
 800807c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008080:	e006      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008088:	e002      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800808a:	bf00      	nop
 800808c:	e000      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800808e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008090:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008098:	4b6e      	ldr	r3, [pc, #440]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800809a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800809c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80080a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080a6:	4a6b      	ldr	r2, [pc, #428]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80080ac:	e003      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80080b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80080c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080c6:	2300      	movs	r3, #0
 80080c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80080cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80080d0:	460b      	mov	r3, r1
 80080d2:	4313      	orrs	r3, r2
 80080d4:	d053      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80080d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080e0:	d033      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80080e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080e6:	d82c      	bhi.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80080e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080ec:	d02f      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80080ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080f2:	d826      	bhi.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80080f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080f8:	d02b      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80080fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080fe:	d820      	bhi.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008104:	d012      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800810a:	d81a      	bhi.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d022      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008114:	d115      	bne.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800811a:	3308      	adds	r3, #8
 800811c:	2101      	movs	r1, #1
 800811e:	4618      	mov	r0, r3
 8008120:	f002 f842 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008124:	4603      	mov	r3, r0
 8008126:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800812a:	e015      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800812c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008130:	3328      	adds	r3, #40	@ 0x28
 8008132:	2101      	movs	r1, #1
 8008134:	4618      	mov	r0, r3
 8008136:	f002 f8e9 	bl	800a30c <RCCEx_PLL3_Config>
 800813a:	4603      	mov	r3, r0
 800813c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008140:	e00a      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008148:	e006      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800814a:	bf00      	nop
 800814c:	e004      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800814e:	bf00      	nop
 8008150:	e002      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008152:	bf00      	nop
 8008154:	e000      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008158:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10a      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008160:	4b3c      	ldr	r3, [pc, #240]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008164:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800816c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800816e:	4a39      	ldr	r2, [pc, #228]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008170:	430b      	orrs	r3, r1
 8008172:	6513      	str	r3, [r2, #80]	@ 0x50
 8008174:	e003      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008176:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800817a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800817e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800818a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800818e:	2300      	movs	r3, #0
 8008190:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008194:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008198:	460b      	mov	r3, r1
 800819a:	4313      	orrs	r3, r2
 800819c:	d060      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800819e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80081aa:	d039      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80081ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80081b0:	d832      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80081b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081b6:	d035      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80081b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081bc:	d82c      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80081be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081c2:	d031      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80081c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081c8:	d826      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80081ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081ce:	d02d      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80081d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081d4:	d820      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80081d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081da:	d012      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80081dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081e0:	d81a      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d024      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80081e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081ea:	d115      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081f0:	3308      	adds	r3, #8
 80081f2:	2101      	movs	r1, #1
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 ffd7 	bl	800a1a8 <RCCEx_PLL2_Config>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008200:	e017      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008206:	3328      	adds	r3, #40	@ 0x28
 8008208:	2101      	movs	r1, #1
 800820a:	4618      	mov	r0, r3
 800820c:	f002 f87e 	bl	800a30c <RCCEx_PLL3_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008216:	e00c      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800821e:	e008      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008220:	bf00      	nop
 8008222:	e006      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008224:	bf00      	nop
 8008226:	e004      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008228:	bf00      	nop
 800822a:	e002      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800822c:	bf00      	nop
 800822e:	e000      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008232:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10e      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800823a:	4b06      	ldr	r3, [pc, #24]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800823c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800824a:	4a02      	ldr	r2, [pc, #8]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800824c:	430b      	orrs	r3, r1
 800824e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008250:	e006      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008252:	bf00      	nop
 8008254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008258:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800825c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800826c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008270:	2300      	movs	r3, #0
 8008272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008276:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800827a:	460b      	mov	r3, r1
 800827c:	4313      	orrs	r3, r2
 800827e:	d037      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800828a:	d00e      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800828c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008290:	d816      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008292:	2b00      	cmp	r3, #0
 8008294:	d018      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008296:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800829a:	d111      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800829c:	4bc4      	ldr	r3, [pc, #784]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800829e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a0:	4ac3      	ldr	r2, [pc, #780]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80082a8:	e00f      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ae:	3308      	adds	r3, #8
 80082b0:	2101      	movs	r1, #1
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 ff78 	bl	800a1a8 <RCCEx_PLL2_Config>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80082be:	e004      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082c6:	e000      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80082c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80082d2:	4bb7      	ldr	r3, [pc, #732]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80082da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082e0:	4ab3      	ldr	r2, [pc, #716]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082e2:	430b      	orrs	r3, r1
 80082e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80082e6:	e003      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80082f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80082fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008300:	2300      	movs	r3, #0
 8008302:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008306:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800830a:	460b      	mov	r3, r1
 800830c:	4313      	orrs	r3, r2
 800830e:	d039      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008316:	2b03      	cmp	r3, #3
 8008318:	d81c      	bhi.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800831a:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	0800835d 	.word	0x0800835d
 8008324:	08008331 	.word	0x08008331
 8008328:	0800833f 	.word	0x0800833f
 800832c:	0800835d 	.word	0x0800835d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008330:	4b9f      	ldr	r3, [pc, #636]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008334:	4a9e      	ldr	r2, [pc, #632]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800833a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800833c:	e00f      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800833e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008342:	3308      	adds	r3, #8
 8008344:	2102      	movs	r1, #2
 8008346:	4618      	mov	r0, r3
 8008348:	f001 ff2e 	bl	800a1a8 <RCCEx_PLL2_Config>
 800834c:	4603      	mov	r3, r0
 800834e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008352:	e004      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800835a:	e000      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800835c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800835e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10a      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008366:	4b92      	ldr	r3, [pc, #584]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800836a:	f023 0103 	bic.w	r1, r3, #3
 800836e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008374:	4a8e      	ldr	r2, [pc, #568]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008376:	430b      	orrs	r3, r1
 8008378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800837a:	e003      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008380:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008390:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008394:	2300      	movs	r3, #0
 8008396:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800839a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800839e:	460b      	mov	r3, r1
 80083a0:	4313      	orrs	r3, r2
 80083a2:	f000 8099 	beq.w	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083a6:	4b83      	ldr	r3, [pc, #524]	@ (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a82      	ldr	r2, [pc, #520]	@ (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80083ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083b2:	f7f9 fbd7 	bl	8001b64 <HAL_GetTick>
 80083b6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083ba:	e00b      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083bc:	f7f9 fbd2 	bl	8001b64 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	2b64      	cmp	r3, #100	@ 0x64
 80083ca:	d903      	bls.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083d2:	e005      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083d4:	4b77      	ldr	r3, [pc, #476]	@ (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0ed      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80083e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d173      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80083e8:	4b71      	ldr	r3, [pc, #452]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80083ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083f4:	4053      	eors	r3, r2
 80083f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d015      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083fe:	4b6c      	ldr	r3, [pc, #432]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008406:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800840a:	4b69      	ldr	r3, [pc, #420]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800840c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840e:	4a68      	ldr	r2, [pc, #416]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008414:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008416:	4b66      	ldr	r3, [pc, #408]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800841a:	4a65      	ldr	r2, [pc, #404]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800841c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008420:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008422:	4a63      	ldr	r2, [pc, #396]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008428:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800842a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800842e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008436:	d118      	bne.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008438:	f7f9 fb94 	bl	8001b64 <HAL_GetTick>
 800843c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008440:	e00d      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008442:	f7f9 fb8f 	bl	8001b64 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800844c:	1ad2      	subs	r2, r2, r3
 800844e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008452:	429a      	cmp	r2, r3
 8008454:	d903      	bls.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800845c:	e005      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800845e:	4b54      	ldr	r3, [pc, #336]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0eb      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800846a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800846e:	2b00      	cmp	r3, #0
 8008470:	d129      	bne.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008476:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800847a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800847e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008482:	d10e      	bne.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008484:	4b4a      	ldr	r3, [pc, #296]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800848c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008490:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008494:	091a      	lsrs	r2, r3, #4
 8008496:	4b48      	ldr	r3, [pc, #288]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008498:	4013      	ands	r3, r2
 800849a:	4a45      	ldr	r2, [pc, #276]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800849c:	430b      	orrs	r3, r1
 800849e:	6113      	str	r3, [r2, #16]
 80084a0:	e005      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 80084a2:	4b43      	ldr	r3, [pc, #268]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	4a42      	ldr	r2, [pc, #264]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80084ac:	6113      	str	r3, [r2, #16]
 80084ae:	4b40      	ldr	r3, [pc, #256]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80084b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084be:	4a3c      	ldr	r2, [pc, #240]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084c0:	430b      	orrs	r3, r1
 80084c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80084c4:	e008      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80084ce:	e003      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80084d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	f002 0301 	and.w	r3, r2, #1
 80084e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084e8:	2300      	movs	r3, #0
 80084ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f000 8090 	beq.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80084fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008502:	2b28      	cmp	r3, #40	@ 0x28
 8008504:	d870      	bhi.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008506:	a201      	add	r2, pc, #4	@ (adr r2, 800850c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	080085f1 	.word	0x080085f1
 8008510:	080085e9 	.word	0x080085e9
 8008514:	080085e9 	.word	0x080085e9
 8008518:	080085e9 	.word	0x080085e9
 800851c:	080085e9 	.word	0x080085e9
 8008520:	080085e9 	.word	0x080085e9
 8008524:	080085e9 	.word	0x080085e9
 8008528:	080085e9 	.word	0x080085e9
 800852c:	080085bd 	.word	0x080085bd
 8008530:	080085e9 	.word	0x080085e9
 8008534:	080085e9 	.word	0x080085e9
 8008538:	080085e9 	.word	0x080085e9
 800853c:	080085e9 	.word	0x080085e9
 8008540:	080085e9 	.word	0x080085e9
 8008544:	080085e9 	.word	0x080085e9
 8008548:	080085e9 	.word	0x080085e9
 800854c:	080085d3 	.word	0x080085d3
 8008550:	080085e9 	.word	0x080085e9
 8008554:	080085e9 	.word	0x080085e9
 8008558:	080085e9 	.word	0x080085e9
 800855c:	080085e9 	.word	0x080085e9
 8008560:	080085e9 	.word	0x080085e9
 8008564:	080085e9 	.word	0x080085e9
 8008568:	080085e9 	.word	0x080085e9
 800856c:	080085f1 	.word	0x080085f1
 8008570:	080085e9 	.word	0x080085e9
 8008574:	080085e9 	.word	0x080085e9
 8008578:	080085e9 	.word	0x080085e9
 800857c:	080085e9 	.word	0x080085e9
 8008580:	080085e9 	.word	0x080085e9
 8008584:	080085e9 	.word	0x080085e9
 8008588:	080085e9 	.word	0x080085e9
 800858c:	080085f1 	.word	0x080085f1
 8008590:	080085e9 	.word	0x080085e9
 8008594:	080085e9 	.word	0x080085e9
 8008598:	080085e9 	.word	0x080085e9
 800859c:	080085e9 	.word	0x080085e9
 80085a0:	080085e9 	.word	0x080085e9
 80085a4:	080085e9 	.word	0x080085e9
 80085a8:	080085e9 	.word	0x080085e9
 80085ac:	080085f1 	.word	0x080085f1
 80085b0:	58024400 	.word	0x58024400
 80085b4:	58024800 	.word	0x58024800
 80085b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085c0:	3308      	adds	r3, #8
 80085c2:	2101      	movs	r1, #1
 80085c4:	4618      	mov	r0, r3
 80085c6:	f001 fdef 	bl	800a1a8 <RCCEx_PLL2_Config>
 80085ca:	4603      	mov	r3, r0
 80085cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80085d0:	e00f      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d6:	3328      	adds	r3, #40	@ 0x28
 80085d8:	2101      	movs	r1, #1
 80085da:	4618      	mov	r0, r3
 80085dc:	f001 fe96 	bl	800a30c <RCCEx_PLL3_Config>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80085e6:	e004      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085ee:	e000      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80085f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10b      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80085fa:	4bc0      	ldr	r3, [pc, #768]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80085fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800860a:	4abc      	ldr	r2, [pc, #752]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800860c:	430b      	orrs	r3, r1
 800860e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008610:	e003      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008612:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008616:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800861a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008622:	f002 0302 	and.w	r3, r2, #2
 8008626:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800862a:	2300      	movs	r3, #0
 800862c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008630:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008634:	460b      	mov	r3, r1
 8008636:	4313      	orrs	r3, r2
 8008638:	d043      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800863a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800863e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008642:	2b05      	cmp	r3, #5
 8008644:	d824      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008646:	a201      	add	r2, pc, #4	@ (adr r2, 800864c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	08008699 	.word	0x08008699
 8008650:	08008665 	.word	0x08008665
 8008654:	0800867b 	.word	0x0800867b
 8008658:	08008699 	.word	0x08008699
 800865c:	08008699 	.word	0x08008699
 8008660:	08008699 	.word	0x08008699
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008668:	3308      	adds	r3, #8
 800866a:	2101      	movs	r1, #1
 800866c:	4618      	mov	r0, r3
 800866e:	f001 fd9b 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008672:	4603      	mov	r3, r0
 8008674:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008678:	e00f      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800867a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800867e:	3328      	adds	r3, #40	@ 0x28
 8008680:	2101      	movs	r1, #1
 8008682:	4618      	mov	r0, r3
 8008684:	f001 fe42 	bl	800a30c <RCCEx_PLL3_Config>
 8008688:	4603      	mov	r3, r0
 800868a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800868e:	e004      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008696:	e000      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800869a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10b      	bne.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80086a2:	4b96      	ldr	r3, [pc, #600]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80086a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a6:	f023 0107 	bic.w	r1, r3, #7
 80086aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b2:	4a92      	ldr	r2, [pc, #584]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80086b4:	430b      	orrs	r3, r1
 80086b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80086b8:	e003      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80086c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	f002 0304 	and.w	r3, r2, #4
 80086ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086d2:	2300      	movs	r3, #0
 80086d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086d8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80086dc:	460b      	mov	r3, r1
 80086de:	4313      	orrs	r3, r2
 80086e0:	d043      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80086e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086ea:	2b05      	cmp	r3, #5
 80086ec:	d824      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80086ee:	a201      	add	r2, pc, #4	@ (adr r2, 80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80086f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f4:	08008741 	.word	0x08008741
 80086f8:	0800870d 	.word	0x0800870d
 80086fc:	08008723 	.word	0x08008723
 8008700:	08008741 	.word	0x08008741
 8008704:	08008741 	.word	0x08008741
 8008708:	08008741 	.word	0x08008741
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800870c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008710:	3308      	adds	r3, #8
 8008712:	2101      	movs	r1, #1
 8008714:	4618      	mov	r0, r3
 8008716:	f001 fd47 	bl	800a1a8 <RCCEx_PLL2_Config>
 800871a:	4603      	mov	r3, r0
 800871c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008720:	e00f      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008726:	3328      	adds	r3, #40	@ 0x28
 8008728:	2101      	movs	r1, #1
 800872a:	4618      	mov	r0, r3
 800872c:	f001 fdee 	bl	800a30c <RCCEx_PLL3_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008736:	e004      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800873e:	e000      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008742:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10b      	bne.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800874a:	4b6c      	ldr	r3, [pc, #432]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800874c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800874e:	f023 0107 	bic.w	r1, r3, #7
 8008752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008756:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800875a:	4a68      	ldr	r2, [pc, #416]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800875c:	430b      	orrs	r3, r1
 800875e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008760:	e003      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008762:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008766:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800876a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800876e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008772:	f002 0320 	and.w	r3, r2, #32
 8008776:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800877a:	2300      	movs	r3, #0
 800877c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008784:	460b      	mov	r3, r1
 8008786:	4313      	orrs	r3, r2
 8008788:	d055      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800878a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800878e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008796:	d033      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800879c:	d82c      	bhi.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800879e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a2:	d02f      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80087a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a8:	d826      	bhi.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80087aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80087ae:	d02b      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80087b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80087b4:	d820      	bhi.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80087b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087ba:	d012      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80087bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087c0:	d81a      	bhi.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d022      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80087c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087ca:	d115      	bne.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087d0:	3308      	adds	r3, #8
 80087d2:	2100      	movs	r1, #0
 80087d4:	4618      	mov	r0, r3
 80087d6:	f001 fce7 	bl	800a1a8 <RCCEx_PLL2_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80087e0:	e015      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087e6:	3328      	adds	r3, #40	@ 0x28
 80087e8:	2102      	movs	r1, #2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 fd8e 	bl	800a30c <RCCEx_PLL3_Config>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80087f6:	e00a      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087fe:	e006      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008800:	bf00      	nop
 8008802:	e004      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008804:	bf00      	nop
 8008806:	e002      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008808:	bf00      	nop
 800880a:	e000      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800880c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800880e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10b      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008816:	4b39      	ldr	r3, [pc, #228]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800881e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008826:	4a35      	ldr	r2, [pc, #212]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008828:	430b      	orrs	r3, r1
 800882a:	6553      	str	r3, [r2, #84]	@ 0x54
 800882c:	e003      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008832:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008846:	2300      	movs	r3, #0
 8008848:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800884c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008850:	460b      	mov	r3, r1
 8008852:	4313      	orrs	r3, r2
 8008854:	d058      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800885a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800885e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008862:	d033      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008864:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008868:	d82c      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800886a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800886e:	d02f      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008874:	d826      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008876:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800887a:	d02b      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800887c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008880:	d820      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008882:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008886:	d012      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800888c:	d81a      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800888e:	2b00      	cmp	r3, #0
 8008890:	d022      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008896:	d115      	bne.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800889c:	3308      	adds	r3, #8
 800889e:	2100      	movs	r1, #0
 80088a0:	4618      	mov	r0, r3
 80088a2:	f001 fc81 	bl	800a1a8 <RCCEx_PLL2_Config>
 80088a6:	4603      	mov	r3, r0
 80088a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80088ac:	e015      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b2:	3328      	adds	r3, #40	@ 0x28
 80088b4:	2102      	movs	r1, #2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 fd28 	bl	800a30c <RCCEx_PLL3_Config>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80088c2:	e00a      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088ca:	e006      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80088cc:	bf00      	nop
 80088ce:	e004      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80088d0:	bf00      	nop
 80088d2:	e002      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80088d4:	bf00      	nop
 80088d6:	e000      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80088d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10e      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088e2:	4b06      	ldr	r3, [pc, #24]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80088ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088f2:	4a02      	ldr	r2, [pc, #8]	@ (80088fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088f4:	430b      	orrs	r3, r1
 80088f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80088f8:	e006      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80088fa:	bf00      	nop
 80088fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008900:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008904:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008918:	2300      	movs	r3, #0
 800891a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800891e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008922:	460b      	mov	r3, r1
 8008924:	4313      	orrs	r3, r2
 8008926:	d055      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800892c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008930:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008934:	d033      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008936:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800893a:	d82c      	bhi.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800893c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008940:	d02f      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008946:	d826      	bhi.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008948:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800894c:	d02b      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800894e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008952:	d820      	bhi.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008954:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008958:	d012      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800895a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800895e:	d81a      	bhi.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008960:	2b00      	cmp	r3, #0
 8008962:	d022      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008968:	d115      	bne.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800896a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800896e:	3308      	adds	r3, #8
 8008970:	2100      	movs	r1, #0
 8008972:	4618      	mov	r0, r3
 8008974:	f001 fc18 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008978:	4603      	mov	r3, r0
 800897a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800897e:	e015      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008984:	3328      	adds	r3, #40	@ 0x28
 8008986:	2102      	movs	r1, #2
 8008988:	4618      	mov	r0, r3
 800898a:	f001 fcbf 	bl	800a30c <RCCEx_PLL3_Config>
 800898e:	4603      	mov	r3, r0
 8008990:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008994:	e00a      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800899c:	e006      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800899e:	bf00      	nop
 80089a0:	e004      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80089a2:	bf00      	nop
 80089a4:	e002      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80089a6:	bf00      	nop
 80089a8:	e000      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80089aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10b      	bne.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80089b4:	4ba1      	ldr	r3, [pc, #644]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80089b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80089bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80089c4:	4a9d      	ldr	r2, [pc, #628]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80089c6:	430b      	orrs	r3, r1
 80089c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80089ca:	e003      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80089d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089dc:	f002 0308 	and.w	r3, r2, #8
 80089e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80089e4:	2300      	movs	r3, #0
 80089e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80089ee:	460b      	mov	r3, r1
 80089f0:	4313      	orrs	r3, r2
 80089f2:	d01e      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80089f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a00:	d10c      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a06:	3328      	adds	r3, #40	@ 0x28
 8008a08:	2102      	movs	r1, #2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 fc7e 	bl	800a30c <RCCEx_PLL3_Config>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a1c:	4b87      	ldr	r3, [pc, #540]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a2c:	4a83      	ldr	r2, [pc, #524]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a2e:	430b      	orrs	r3, r1
 8008a30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	f002 0310 	and.w	r3, r2, #16
 8008a3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a42:	2300      	movs	r3, #0
 8008a44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	d01e      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a5e:	d10c      	bne.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a64:	3328      	adds	r3, #40	@ 0x28
 8008a66:	2102      	movs	r1, #2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f001 fc4f 	bl	800a30c <RCCEx_PLL3_Config>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a7a:	4b70      	ldr	r3, [pc, #448]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a8a:	4a6c      	ldr	r2, [pc, #432]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008a9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008aa6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4313      	orrs	r3, r2
 8008aae:	d03e      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ab4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ab8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008abc:	d022      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008abe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ac2:	d81b      	bhi.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008acc:	d00b      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008ace:	e015      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f001 fb65 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008ae4:	e00f      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aea:	3328      	adds	r3, #40	@ 0x28
 8008aec:	2102      	movs	r1, #2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 fc0c 	bl	800a30c <RCCEx_PLL3_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008afa:	e004      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b02:	e000      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10b      	bne.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b1e:	4a47      	ldr	r2, [pc, #284]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b20:	430b      	orrs	r3, r1
 8008b22:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b24:	e003      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008b44:	460b      	mov	r3, r1
 8008b46:	4313      	orrs	r3, r2
 8008b48:	d03b      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b56:	d01f      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008b58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b5c:	d818      	bhi.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b62:	d003      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008b64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b68:	d007      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008b6a:	e011      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b6c:	4b33      	ldr	r3, [pc, #204]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b70:	4a32      	ldr	r2, [pc, #200]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008b78:	e00f      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b7e:	3328      	adds	r3, #40	@ 0x28
 8008b80:	2101      	movs	r1, #1
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 fbc2 	bl	800a30c <RCCEx_PLL3_Config>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008b8e:	e004      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b96:	e000      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10b      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ba2:	4b26      	ldr	r3, [pc, #152]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ba6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bb2:	4a22      	ldr	r2, [pc, #136]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bb4:	430b      	orrs	r3, r1
 8008bb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008bb8:	e003      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008bce:	673b      	str	r3, [r7, #112]	@ 0x70
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8008bd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	d034      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bec:	d007      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008bee:	e011      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bf0:	4b12      	ldr	r3, [pc, #72]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf4:	4a11      	ldr	r2, [pc, #68]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008bfc:	e00e      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c02:	3308      	adds	r3, #8
 8008c04:	2102      	movs	r1, #2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f001 face 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c12:	e003      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10d      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c24:	4b05      	ldr	r3, [pc, #20]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c32:	4a02      	ldr	r2, [pc, #8]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c34:	430b      	orrs	r3, r1
 8008c36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c38:	e006      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008c3a:	bf00      	nop
 8008c3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008c54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c56:	2300      	movs	r3, #0
 8008c58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4313      	orrs	r3, r2
 8008c62:	d00c      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c68:	3328      	adds	r3, #40	@ 0x28
 8008c6a:	2102      	movs	r1, #2
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f001 fb4d 	bl	800a30c <RCCEx_PLL3_Config>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008c8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008c94:	460b      	mov	r3, r1
 8008c96:	4313      	orrs	r3, r2
 8008c98:	d038      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ca6:	d018      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008ca8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cac:	d811      	bhi.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cb2:	d014      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cb8:	d80b      	bhi.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d011      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cc2:	d106      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc4:	4bc3      	ldr	r3, [pc, #780]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc8:	4ac2      	ldr	r2, [pc, #776]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008cd0:	e008      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008cd8:	e004      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008cda:	bf00      	nop
 8008cdc:	e002      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008cde:	bf00      	nop
 8008ce0:	e000      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ce4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10b      	bne.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cec:	4bb9      	ldr	r3, [pc, #740]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cfc:	4ab5      	ldr	r2, [pc, #724]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008cfe:	430b      	orrs	r3, r1
 8008d00:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d02:	e003      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008d18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008d22:	460b      	mov	r3, r1
 8008d24:	4313      	orrs	r3, r2
 8008d26:	d009      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d28:	4baa      	ldr	r3, [pc, #680]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d36:	4aa7      	ldr	r2, [pc, #668]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d38:	430b      	orrs	r3, r1
 8008d3a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008d48:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008d52:	460b      	mov	r3, r1
 8008d54:	4313      	orrs	r3, r2
 8008d56:	d009      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d58:	4b9e      	ldr	r3, [pc, #632]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d5c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d66:	4a9b      	ldr	r2, [pc, #620]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008d82:	460b      	mov	r3, r1
 8008d84:	4313      	orrs	r3, r2
 8008d86:	d009      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008d88:	4b92      	ldr	r3, [pc, #584]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d8c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d96:	4a8f      	ldr	r2, [pc, #572]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008da8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008daa:	2300      	movs	r3, #0
 8008dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008db2:	460b      	mov	r3, r1
 8008db4:	4313      	orrs	r3, r2
 8008db6:	d00e      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008db8:	4b86      	ldr	r3, [pc, #536]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	4a85      	ldr	r2, [pc, #532]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008dc2:	6113      	str	r3, [r2, #16]
 8008dc4:	4b83      	ldr	r3, [pc, #524]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dc6:	6919      	ldr	r1, [r3, #16]
 8008dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008dd0:	4a80      	ldr	r2, [pc, #512]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dd2:	430b      	orrs	r3, r1
 8008dd4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008de2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008de4:	2300      	movs	r3, #0
 8008de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008de8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008dec:	460b      	mov	r3, r1
 8008dee:	4313      	orrs	r3, r2
 8008df0:	d009      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008df2:	4b78      	ldr	r3, [pc, #480]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008df6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e00:	4a74      	ldr	r2, [pc, #464]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e02:	430b      	orrs	r3, r1
 8008e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008e12:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e14:	2300      	movs	r3, #0
 8008e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	d00a      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e22:	4b6c      	ldr	r3, [pc, #432]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e26:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e32:	4a68      	ldr	r2, [pc, #416]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e34:	430b      	orrs	r3, r1
 8008e36:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	2100      	movs	r1, #0
 8008e42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e4a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4313      	orrs	r3, r2
 8008e52:	d011      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e58:	3308      	adds	r3, #8
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f001 f9a3 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008e68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	2100      	movs	r1, #0
 8008e82:	6239      	str	r1, [r7, #32]
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4313      	orrs	r3, r2
 8008e92:	d011      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e98:	3308      	adds	r3, #8
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 f983 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008ea8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	61b9      	str	r1, [r7, #24]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	61fb      	str	r3, [r7, #28]
 8008eca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	d011      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ed8:	3308      	adds	r3, #8
 8008eda:	2102      	movs	r1, #2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f001 f963 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ef4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	2100      	movs	r1, #0
 8008f02:	6139      	str	r1, [r7, #16]
 8008f04:	f003 0308 	and.w	r3, r3, #8
 8008f08:	617b      	str	r3, [r7, #20]
 8008f0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4313      	orrs	r3, r2
 8008f12:	d011      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f18:	3328      	adds	r3, #40	@ 0x28
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 f9f5 	bl	800a30c <RCCEx_PLL3_Config>
 8008f22:	4603      	mov	r3, r0
 8008f24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008f28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	2100      	movs	r1, #0
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	f003 0310 	and.w	r3, r3, #16
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4313      	orrs	r3, r2
 8008f52:	d011      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f58:	3328      	adds	r3, #40	@ 0x28
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f001 f9d5 	bl	800a30c <RCCEx_PLL3_Config>
 8008f62:	4603      	mov	r3, r0
 8008f64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008f68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d003      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f80:	2100      	movs	r1, #0
 8008f82:	6039      	str	r1, [r7, #0]
 8008f84:	f003 0320 	and.w	r3, r3, #32
 8008f88:	607b      	str	r3, [r7, #4]
 8008f8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	4313      	orrs	r3, r2
 8008f92:	d011      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f98:	3328      	adds	r3, #40	@ 0x28
 8008f9a:	2102      	movs	r1, #2
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 f9b5 	bl	800a30c <RCCEx_PLL3_Config>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d003      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8008fb8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e000      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fd2:	bf00      	nop
 8008fd4:	58024400 	.word	0x58024400

08008fd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b090      	sub	sp, #64	@ 0x40
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008fea:	430b      	orrs	r3, r1
 8008fec:	f040 8094 	bne.w	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008ff0:	4b97      	ldr	r3, [pc, #604]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff4:	f003 0307 	and.w	r3, r3, #7
 8008ff8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	f200 8087 	bhi.w	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009002:	a201      	add	r2, pc, #4	@ (adr r2, 8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009008:	0800901d 	.word	0x0800901d
 800900c:	08009045 	.word	0x08009045
 8009010:	0800906d 	.word	0x0800906d
 8009014:	08009109 	.word	0x08009109
 8009018:	08009095 	.word	0x08009095
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800901c:	4b8c      	ldr	r3, [pc, #560]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009028:	d108      	bne.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800902a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800902e:	4618      	mov	r0, r3
 8009030:	f000 ff68 	bl	8009f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009038:	f000 bc97 	b.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009040:	f000 bc93 	b.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009044:	4b82      	ldr	r3, [pc, #520]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800904c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009050:	d108      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009052:	f107 0318 	add.w	r3, r7, #24
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fcac 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009060:	f000 bc83 	b.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009068:	f000 bc7f 	b.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800906c:	4b78      	ldr	r3, [pc, #480]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009078:	d108      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800907a:	f107 030c 	add.w	r3, r7, #12
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fdec 	bl	8009c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009088:	f000 bc6f 	b.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009090:	f000 bc6b 	b.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009094:	4b6e      	ldr	r3, [pc, #440]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009098:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800909e:	4b6c      	ldr	r3, [pc, #432]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0304 	and.w	r3, r3, #4
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d10c      	bne.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80090aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d109      	bne.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090b0:	4b67      	ldr	r3, [pc, #412]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	08db      	lsrs	r3, r3, #3
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	4a66      	ldr	r2, [pc, #408]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80090bc:	fa22 f303 	lsr.w	r3, r2, r3
 80090c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c2:	e01f      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090c4:	4b62      	ldr	r3, [pc, #392]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090d0:	d106      	bne.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80090d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090d8:	d102      	bne.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090da:	4b5f      	ldr	r3, [pc, #380]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80090dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090de:	e011      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090e0:	4b5b      	ldr	r3, [pc, #364]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090ec:	d106      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80090ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090f4:	d102      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090f6:	4b59      	ldr	r3, [pc, #356]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80090f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090fa:	e003      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009100:	f000 bc33 	b.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009104:	f000 bc31 	b.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009108:	4b55      	ldr	r3, [pc, #340]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800910a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800910c:	f000 bc2d 	b.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009114:	f000 bc29 	b.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8009118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800911c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009120:	430b      	orrs	r3, r1
 8009122:	f040 809f 	bne.w	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8009126:	4b4a      	ldr	r3, [pc, #296]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800912a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800912e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009136:	d04d      	beq.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800913e:	f200 8084 	bhi.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009144:	2bc0      	cmp	r3, #192	@ 0xc0
 8009146:	d07d      	beq.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8009148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914a:	2bc0      	cmp	r3, #192	@ 0xc0
 800914c:	d87d      	bhi.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	2b80      	cmp	r3, #128	@ 0x80
 8009152:	d02d      	beq.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8009154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009156:	2b80      	cmp	r3, #128	@ 0x80
 8009158:	d877      	bhi.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8009160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009162:	2b40      	cmp	r3, #64	@ 0x40
 8009164:	d012      	beq.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009166:	e070      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009168:	4b39      	ldr	r3, [pc, #228]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009170:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009174:	d107      	bne.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009176:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fec2 	bl	8009f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009184:	e3f1      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918a:	e3ee      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800918c:	4b30      	ldr	r3, [pc, #192]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009194:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009198:	d107      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800919a:	f107 0318 	add.w	r3, r7, #24
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fc08 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091a8:	e3df      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ae:	e3dc      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091b0:	4b27      	ldr	r3, [pc, #156]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091bc:	d107      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091be:	f107 030c 	add.w	r3, r7, #12
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fd4a 	bl	8009c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091cc:	e3cd      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d2:	e3ca      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091d4:	4b1e      	ldr	r3, [pc, #120]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091de:	4b1c      	ldr	r3, [pc, #112]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0304 	and.w	r3, r3, #4
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d10c      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80091ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d109      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091f0:	4b17      	ldr	r3, [pc, #92]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	08db      	lsrs	r3, r3, #3
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	4a16      	ldr	r2, [pc, #88]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009202:	e01e      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009204:	4b12      	ldr	r3, [pc, #72]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800920c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009210:	d106      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8009212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009218:	d102      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800921a:	4b0f      	ldr	r3, [pc, #60]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800921c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800921e:	e010      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009220:	4b0b      	ldr	r3, [pc, #44]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800922c:	d106      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800922e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009234:	d102      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009236:	4b09      	ldr	r3, [pc, #36]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800923a:	e002      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009240:	e393      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009242:	e392      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009244:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009248:	e38f      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800924e:	e38c      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009250:	58024400 	.word	0x58024400
 8009254:	03d09000 	.word	0x03d09000
 8009258:	003d0900 	.word	0x003d0900
 800925c:	017d7840 	.word	0x017d7840
 8009260:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009268:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800926c:	430b      	orrs	r3, r1
 800926e:	f040 809c 	bne.w	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8009272:	4b9e      	ldr	r3, [pc, #632]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009276:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800927a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800927c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009282:	d054      	beq.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800928a:	f200 808b 	bhi.w	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009294:	f000 8083 	beq.w	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8009298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800929e:	f200 8081 	bhi.w	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80092a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092a8:	d02f      	beq.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80092aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092b0:	d878      	bhi.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80092b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d004      	beq.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80092b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092be:	d012      	beq.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80092c0:	e070      	b.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092c2:	4b8a      	ldr	r3, [pc, #552]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092ce:	d107      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fe15 	bl	8009f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092de:	e344      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092e4:	e341      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092e6:	4b81      	ldr	r3, [pc, #516]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092f2:	d107      	bne.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092f4:	f107 0318 	add.w	r3, r7, #24
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 fb5b 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009302:	e332      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009308:	e32f      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800930a:	4b78      	ldr	r3, [pc, #480]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009316:	d107      	bne.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009318:	f107 030c 	add.w	r3, r7, #12
 800931c:	4618      	mov	r0, r3
 800931e:	f000 fc9d 	bl	8009c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009326:	e320      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009328:	2300      	movs	r3, #0
 800932a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800932c:	e31d      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800932e:	4b6f      	ldr	r3, [pc, #444]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009332:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009336:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009338:	4b6c      	ldr	r3, [pc, #432]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0304 	and.w	r3, r3, #4
 8009340:	2b04      	cmp	r3, #4
 8009342:	d10c      	bne.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009346:	2b00      	cmp	r3, #0
 8009348:	d109      	bne.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800934a:	4b68      	ldr	r3, [pc, #416]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	08db      	lsrs	r3, r3, #3
 8009350:	f003 0303 	and.w	r3, r3, #3
 8009354:	4a66      	ldr	r2, [pc, #408]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8009356:	fa22 f303 	lsr.w	r3, r2, r3
 800935a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800935c:	e01e      	b.n	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800935e:	4b63      	ldr	r3, [pc, #396]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800936a:	d106      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800936c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800936e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009372:	d102      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009374:	4b5f      	ldr	r3, [pc, #380]	@ (80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009378:	e010      	b.n	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800937a:	4b5c      	ldr	r3, [pc, #368]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009382:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009386:	d106      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800938a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800938e:	d102      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009390:	4b59      	ldr	r3, [pc, #356]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009394:	e002      	b.n	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800939a:	e2e6      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800939c:	e2e5      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800939e:	4b57      	ldr	r3, [pc, #348]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80093a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093a2:	e2e2      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093a8:	e2df      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80093aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80093b2:	430b      	orrs	r3, r1
 80093b4:	f040 80a7 	bne.w	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80093b8:	4b4c      	ldr	r3, [pc, #304]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093bc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80093c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80093c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093c8:	d055      	beq.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80093ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093d0:	f200 8096 	bhi.w	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80093d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093da:	f000 8084 	beq.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80093de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093e4:	f200 808c 	bhi.w	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80093e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093ee:	d030      	beq.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80093f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093f6:	f200 8083 	bhi.w	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80093fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d004      	beq.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009406:	d012      	beq.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8009408:	e07a      	b.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800940a:	4b38      	ldr	r3, [pc, #224]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009412:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009416:	d107      	bne.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fd71 	bl	8009f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009426:	e2a0      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800942c:	e29d      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800942e:	4b2f      	ldr	r3, [pc, #188]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800943a:	d107      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800943c:	f107 0318 	add.w	r3, r7, #24
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fab7 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800944a:	e28e      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009450:	e28b      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009452:	4b26      	ldr	r3, [pc, #152]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800945a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800945e:	d107      	bne.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009460:	f107 030c 	add.w	r3, r7, #12
 8009464:	4618      	mov	r0, r3
 8009466:	f000 fbf9 	bl	8009c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800946e:	e27c      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009474:	e279      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009476:	4b1d      	ldr	r3, [pc, #116]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800947a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800947e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009480:	4b1a      	ldr	r3, [pc, #104]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b04      	cmp	r3, #4
 800948a:	d10c      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800948c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800948e:	2b00      	cmp	r3, #0
 8009490:	d109      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009492:	4b16      	ldr	r3, [pc, #88]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	08db      	lsrs	r3, r3, #3
 8009498:	f003 0303 	and.w	r3, r3, #3
 800949c:	4a14      	ldr	r2, [pc, #80]	@ (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800949e:	fa22 f303 	lsr.w	r3, r2, r3
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094a4:	e01e      	b.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094a6:	4b11      	ldr	r3, [pc, #68]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094b2:	d106      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80094b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094ba:	d102      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094bc:	4b0d      	ldr	r3, [pc, #52]	@ (80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80094be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094c0:	e010      	b.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094c2:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094ce:	d106      	bne.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80094d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094d6:	d102      	bne.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094d8:	4b07      	ldr	r3, [pc, #28]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80094da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094dc:	e002      	b.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80094e2:	e242      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80094e4:	e241      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094e6:	4b05      	ldr	r3, [pc, #20]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80094e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ea:	e23e      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80094ec:	58024400 	.word	0x58024400
 80094f0:	03d09000 	.word	0x03d09000
 80094f4:	003d0900 	.word	0x003d0900
 80094f8:	017d7840 	.word	0x017d7840
 80094fc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009504:	e231      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800950a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800950e:	430b      	orrs	r3, r1
 8009510:	f040 8085 	bne.w	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009514:	4b9c      	ldr	r3, [pc, #624]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009518:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800951c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800951e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009524:	d06b      	beq.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800952c:	d874      	bhi.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800952e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009530:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009534:	d056      	beq.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8009536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009538:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800953c:	d86c      	bhi.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800953e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009540:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009544:	d03b      	beq.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8009546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009548:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800954c:	d864      	bhi.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800954e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009554:	d021      	beq.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8009556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800955c:	d85c      	bhi.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800955e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8009564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800956a:	d004      	beq.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800956c:	e054      	b.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800956e:	f7fe fb5f 	bl	8007c30 <HAL_RCC_GetPCLK1Freq>
 8009572:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009574:	e1f9      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009576:	4b84      	ldr	r3, [pc, #528]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800957e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009582:	d107      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009584:	f107 0318 	add.w	r3, r7, #24
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fa13 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009592:	e1ea      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009598:	e1e7      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800959a:	4b7b      	ldr	r3, [pc, #492]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095a6:	d107      	bne.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095a8:	f107 030c 	add.w	r3, r7, #12
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 fb55 	bl	8009c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095b6:	e1d8      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095bc:	e1d5      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80095be:	4b72      	ldr	r3, [pc, #456]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 0304 	and.w	r3, r3, #4
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	d109      	bne.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095ca:	4b6f      	ldr	r3, [pc, #444]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	08db      	lsrs	r3, r3, #3
 80095d0:	f003 0303 	and.w	r3, r3, #3
 80095d4:	4a6d      	ldr	r2, [pc, #436]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80095d6:	fa22 f303 	lsr.w	r3, r2, r3
 80095da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095dc:	e1c5      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e2:	e1c2      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80095e4:	4b68      	ldr	r3, [pc, #416]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095f0:	d102      	bne.n	80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80095f2:	4b67      	ldr	r3, [pc, #412]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80095f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095f6:	e1b8      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095fc:	e1b5      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095fe:	4b62      	ldr	r3, [pc, #392]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800960a:	d102      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800960c:	4b61      	ldr	r3, [pc, #388]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800960e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009610:	e1ab      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009616:	e1a8      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800961c:	e1a5      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800961e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009622:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009626:	430b      	orrs	r3, r1
 8009628:	d173      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800962a:	4b57      	ldr	r3, [pc, #348]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800962c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800962e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009632:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800963a:	d02f      	beq.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800963c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009642:	d863      	bhi.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009646:	2b00      	cmp	r3, #0
 8009648:	d004      	beq.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800964a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009650:	d012      	beq.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8009652:	e05b      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009654:	4b4c      	ldr	r3, [pc, #304]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800965c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009660:	d107      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009662:	f107 0318 	add.w	r3, r7, #24
 8009666:	4618      	mov	r0, r3
 8009668:	f000 f9a4 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009670:	e17b      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009676:	e178      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009678:	4b43      	ldr	r3, [pc, #268]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009684:	d107      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009686:	f107 030c 	add.w	r3, r7, #12
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fae6 	bl	8009c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009694:	e169      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800969a:	e166      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800969c:	4b3a      	ldr	r3, [pc, #232]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800969e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80096a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096a6:	4b38      	ldr	r3, [pc, #224]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0304 	and.w	r3, r3, #4
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d10c      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80096b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d109      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096b8:	4b33      	ldr	r3, [pc, #204]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	08db      	lsrs	r3, r3, #3
 80096be:	f003 0303 	and.w	r3, r3, #3
 80096c2:	4a32      	ldr	r2, [pc, #200]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80096c4:	fa22 f303 	lsr.w	r3, r2, r3
 80096c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096ca:	e01e      	b.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096cc:	4b2e      	ldr	r3, [pc, #184]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096d8:	d106      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80096da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096e0:	d102      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096e2:	4b2b      	ldr	r3, [pc, #172]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096e6:	e010      	b.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096e8:	4b27      	ldr	r3, [pc, #156]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096f4:	d106      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80096f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096fc:	d102      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096fe:	4b25      	ldr	r3, [pc, #148]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009702:	e002      	b.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009708:	e12f      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800970a:	e12e      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009710:	e12b      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009716:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800971a:	430b      	orrs	r3, r1
 800971c:	d13c      	bne.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800971e:	4b1a      	ldr	r3, [pc, #104]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009726:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972a:	2b00      	cmp	r3, #0
 800972c:	d004      	beq.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800972e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009734:	d012      	beq.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009736:	e023      	b.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009738:	4b13      	ldr	r3, [pc, #76]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009740:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009744:	d107      	bne.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800974a:	4618      	mov	r0, r3
 800974c:	f000 fbda 	bl	8009f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009754:	e109      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800975a:	e106      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800975c:	4b0a      	ldr	r3, [pc, #40]	@ (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009768:	d107      	bne.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800976a:	f107 0318 	add.w	r3, r7, #24
 800976e:	4618      	mov	r0, r3
 8009770:	f000 f920 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009778:	e0f7      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800977e:	e0f4      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009784:	e0f1      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009786:	bf00      	nop
 8009788:	58024400 	.word	0x58024400
 800978c:	03d09000 	.word	0x03d09000
 8009790:	003d0900 	.word	0x003d0900
 8009794:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800979c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80097a0:	430b      	orrs	r3, r1
 80097a2:	f040 8091 	bne.w	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80097a6:	4b73      	ldr	r3, [pc, #460]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80097a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097aa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80097ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80097b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80097b6:	f000 8081 	beq.w	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80097ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097bc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80097c0:	d87f      	bhi.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80097c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097c8:	d06b      	beq.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80097ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097d0:	d877      	bhi.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80097d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d8:	d056      	beq.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80097da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097e0:	d86f      	bhi.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80097e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097e8:	d03b      	beq.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80097ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097f0:	d867      	bhi.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80097f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097f8:	d021      	beq.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80097fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009800:	d85f      	bhi.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009804:	2b00      	cmp	r3, #0
 8009806:	d004      	beq.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800980e:	d004      	beq.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009810:	e057      	b.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009812:	f000 f8b9 	bl	8009988 <HAL_RCCEx_GetD3PCLK1Freq>
 8009816:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009818:	e0a7      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800981a:	4b56      	ldr	r3, [pc, #344]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009822:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009826:	d107      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009828:	f107 0318 	add.w	r3, r7, #24
 800982c:	4618      	mov	r0, r3
 800982e:	f000 f8c1 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009836:	e098      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800983c:	e095      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800983e:	4b4d      	ldr	r3, [pc, #308]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800984a:	d107      	bne.n	800985c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800984c:	f107 030c 	add.w	r3, r7, #12
 8009850:	4618      	mov	r0, r3
 8009852:	f000 fa03 	bl	8009c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800985a:	e086      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009860:	e083      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009862:	4b44      	ldr	r3, [pc, #272]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0304 	and.w	r3, r3, #4
 800986a:	2b04      	cmp	r3, #4
 800986c:	d109      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800986e:	4b41      	ldr	r3, [pc, #260]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	08db      	lsrs	r3, r3, #3
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	4a3f      	ldr	r2, [pc, #252]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800987a:	fa22 f303 	lsr.w	r3, r2, r3
 800987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009880:	e073      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009886:	e070      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009888:	4b3a      	ldr	r3, [pc, #232]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009894:	d102      	bne.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8009896:	4b39      	ldr	r3, [pc, #228]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8009898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800989a:	e066      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a0:	e063      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098a2:	4b34      	ldr	r3, [pc, #208]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098ae:	d102      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80098b0:	4b33      	ldr	r3, [pc, #204]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80098b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098b4:	e059      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ba:	e056      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80098bc:	4b31      	ldr	r3, [pc, #196]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80098be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c0:	e053      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c6:	e050      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80098c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098cc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80098d0:	430b      	orrs	r3, r1
 80098d2:	d148      	bne.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80098d4:	4b27      	ldr	r3, [pc, #156]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098e4:	d02a      	beq.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80098e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ec:	d838      	bhi.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80098ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d004      	beq.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80098f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098fa:	d00d      	beq.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80098fc:	e030      	b.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800990a:	d102      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800990c:	4b1c      	ldr	r3, [pc, #112]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800990e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009910:	e02b      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009916:	e028      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009918:	4b16      	ldr	r3, [pc, #88]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009924:	d107      	bne.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800992a:	4618      	mov	r0, r3
 800992c:	f000 faea 	bl	8009f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009934:	e019      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800993a:	e016      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800993c:	4b0d      	ldr	r3, [pc, #52]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009944:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009948:	d107      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800994a:	f107 0318 	add.w	r3, r7, #24
 800994e:	4618      	mov	r0, r3
 8009950:	f000 f830 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009958:	e007      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995e:	e004      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009960:	2300      	movs	r3, #0
 8009962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009964:	e001      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800996a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800996c:	4618      	mov	r0, r3
 800996e:	3740      	adds	r7, #64	@ 0x40
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	58024400 	.word	0x58024400
 8009978:	03d09000 	.word	0x03d09000
 800997c:	003d0900 	.word	0x003d0900
 8009980:	017d7840 	.word	0x017d7840
 8009984:	00bb8000 	.word	0x00bb8000

08009988 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800998c:	f7fe f920 	bl	8007bd0 <HAL_RCC_GetHCLKFreq>
 8009990:	4602      	mov	r2, r0
 8009992:	4b06      	ldr	r3, [pc, #24]	@ (80099ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	091b      	lsrs	r3, r3, #4
 8009998:	f003 0307 	and.w	r3, r3, #7
 800999c:	4904      	ldr	r1, [pc, #16]	@ (80099b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800999e:	5ccb      	ldrb	r3, [r1, r3]
 80099a0:	f003 031f 	and.w	r3, r3, #31
 80099a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	58024400 	.word	0x58024400
 80099b0:	0800af9c 	.word	0x0800af9c

080099b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b089      	sub	sp, #36	@ 0x24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099bc:	4ba1      	ldr	r3, [pc, #644]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80099c6:	4b9f      	ldr	r3, [pc, #636]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ca:	0b1b      	lsrs	r3, r3, #12
 80099cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099d2:	4b9c      	ldr	r3, [pc, #624]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d6:	091b      	lsrs	r3, r3, #4
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80099de:	4b99      	ldr	r3, [pc, #612]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099e2:	08db      	lsrs	r3, r3, #3
 80099e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	fb02 f303 	mul.w	r3, r2, r3
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 8111 	beq.w	8009c24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	f000 8083 	beq.w	8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	f200 80a1 	bhi.w	8009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d056      	beq.n	8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a1e:	e099      	b.n	8009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a20:	4b88      	ldr	r3, [pc, #544]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0320 	and.w	r3, r3, #32
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d02d      	beq.n	8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a2c:	4b85      	ldr	r3, [pc, #532]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	08db      	lsrs	r3, r3, #3
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	4a84      	ldr	r2, [pc, #528]	@ (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a38:	fa22 f303 	lsr.w	r3, r2, r3
 8009a3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	ee07 3a90 	vmov	s15, r3
 8009a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a56:	4b7b      	ldr	r3, [pc, #492]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a86:	e087      	b.n	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aca:	e065      	b.n	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ade:	4b59      	ldr	r3, [pc, #356]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009af2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b0e:	e043      	b.n	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b22:	4b48      	ldr	r3, [pc, #288]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b52:	e021      	b.n	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b66:	4b37      	ldr	r3, [pc, #220]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009b98:	4b2a      	ldr	r3, [pc, #168]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9c:	0a5b      	lsrs	r3, r3, #9
 8009b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009baa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bbe:	ee17 2a90 	vmov	r2, s15
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bca:	0c1b      	lsrs	r3, r3, #16
 8009bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bd0:	ee07 3a90 	vmov	s15, r3
 8009bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bec:	ee17 2a90 	vmov	r2, s15
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009bf4:	4b13      	ldr	r3, [pc, #76]	@ (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf8:	0e1b      	lsrs	r3, r3, #24
 8009bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c1a:	ee17 2a90 	vmov	r2, s15
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c22:	e008      	b.n	8009c36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	609a      	str	r2, [r3, #8]
}
 8009c36:	bf00      	nop
 8009c38:	3724      	adds	r7, #36	@ 0x24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	58024400 	.word	0x58024400
 8009c48:	03d09000 	.word	0x03d09000
 8009c4c:	46000000 	.word	0x46000000
 8009c50:	4c742400 	.word	0x4c742400
 8009c54:	4a742400 	.word	0x4a742400
 8009c58:	4bbebc20 	.word	0x4bbebc20

08009c5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b089      	sub	sp, #36	@ 0x24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c64:	4ba1      	ldr	r3, [pc, #644]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c68:	f003 0303 	and.w	r3, r3, #3
 8009c6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009c6e:	4b9f      	ldr	r3, [pc, #636]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c72:	0d1b      	lsrs	r3, r3, #20
 8009c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c7a:	4b9c      	ldr	r3, [pc, #624]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7e:	0a1b      	lsrs	r3, r3, #8
 8009c80:	f003 0301 	and.w	r3, r3, #1
 8009c84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009c86:	4b99      	ldr	r3, [pc, #612]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c8a:	08db      	lsrs	r3, r3, #3
 8009c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	fb02 f303 	mul.w	r3, r2, r3
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 8111 	beq.w	8009ecc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	f000 8083 	beq.w	8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	f200 80a1 	bhi.w	8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d056      	beq.n	8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009cc6:	e099      	b.n	8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cc8:	4b88      	ldr	r3, [pc, #544]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0320 	and.w	r3, r3, #32
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d02d      	beq.n	8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cd4:	4b85      	ldr	r3, [pc, #532]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	08db      	lsrs	r3, r3, #3
 8009cda:	f003 0303 	and.w	r3, r3, #3
 8009cde:	4a84      	ldr	r2, [pc, #528]	@ (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	ee07 3a90 	vmov	s15, r3
 8009cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d06:	ee07 3a90 	vmov	s15, r3
 8009d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d2e:	e087      	b.n	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d42:	4b6a      	ldr	r3, [pc, #424]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d72:	e065      	b.n	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d86:	4b59      	ldr	r3, [pc, #356]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009db6:	e043      	b.n	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dca:	4b48      	ldr	r3, [pc, #288]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dfa:	e021      	b.n	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0e:	4b37      	ldr	r3, [pc, #220]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009e40:	4b2a      	ldr	r3, [pc, #168]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e44:	0a5b      	lsrs	r3, r3, #9
 8009e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e66:	ee17 2a90 	vmov	r2, s15
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e72:	0c1b      	lsrs	r3, r3, #16
 8009e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e78:	ee07 3a90 	vmov	s15, r3
 8009e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e94:	ee17 2a90 	vmov	r2, s15
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009e9c:	4b13      	ldr	r3, [pc, #76]	@ (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea0:	0e1b      	lsrs	r3, r3, #24
 8009ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ea6:	ee07 3a90 	vmov	s15, r3
 8009eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ec2:	ee17 2a90 	vmov	r2, s15
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009eca:	e008      	b.n	8009ede <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	609a      	str	r2, [r3, #8]
}
 8009ede:	bf00      	nop
 8009ee0:	3724      	adds	r7, #36	@ 0x24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	58024400 	.word	0x58024400
 8009ef0:	03d09000 	.word	0x03d09000
 8009ef4:	46000000 	.word	0x46000000
 8009ef8:	4c742400 	.word	0x4c742400
 8009efc:	4a742400 	.word	0x4a742400
 8009f00:	4bbebc20 	.word	0x4bbebc20

08009f04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b089      	sub	sp, #36	@ 0x24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f0c:	4ba0      	ldr	r3, [pc, #640]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f10:	f003 0303 	and.w	r3, r3, #3
 8009f14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009f16:	4b9e      	ldr	r3, [pc, #632]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1a:	091b      	lsrs	r3, r3, #4
 8009f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f22:	4b9b      	ldr	r3, [pc, #620]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f2c:	4b98      	ldr	r3, [pc, #608]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f30:	08db      	lsrs	r3, r3, #3
 8009f32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	fb02 f303 	mul.w	r3, r2, r3
 8009f3c:	ee07 3a90 	vmov	s15, r3
 8009f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 8111 	beq.w	800a172 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	f000 8083 	beq.w	800a05e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	f200 80a1 	bhi.w	800a0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d003      	beq.n	8009f6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d056      	beq.n	800a01a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f6c:	e099      	b.n	800a0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f6e:	4b88      	ldr	r3, [pc, #544]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 0320 	and.w	r3, r3, #32
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d02d      	beq.n	8009fd6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f7a:	4b85      	ldr	r3, [pc, #532]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	08db      	lsrs	r3, r3, #3
 8009f80:	f003 0303 	and.w	r3, r3, #3
 8009f84:	4a83      	ldr	r2, [pc, #524]	@ (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f86:	fa22 f303 	lsr.w	r3, r2, r3
 8009f8a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	ee07 3a90 	vmov	s15, r3
 8009f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	ee07 3a90 	vmov	s15, r3
 8009f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fa4:	4b7a      	ldr	r3, [pc, #488]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fac:	ee07 3a90 	vmov	s15, r3
 8009fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fb8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009fd4:	e087      	b.n	800a0e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	ee07 3a90 	vmov	s15, r3
 8009fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a19c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe8:	4b69      	ldr	r3, [pc, #420]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff0:	ee07 3a90 	vmov	s15, r3
 8009ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ffc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a00c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a018:	e065      	b.n	800a0e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a024:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02c:	4b58      	ldr	r3, [pc, #352]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a034:	ee07 3a90 	vmov	s15, r3
 800a038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a03c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a040:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a04c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a054:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a058:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a05c:	e043      	b.n	800a0e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	ee07 3a90 	vmov	s15, r3
 800a064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a068:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a06c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a070:	4b47      	ldr	r3, [pc, #284]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a078:	ee07 3a90 	vmov	s15, r3
 800a07c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a080:	ed97 6a03 	vldr	s12, [r7, #12]
 800a084:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a08c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a090:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0a0:	e021      	b.n	800a0e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	ee07 3a90 	vmov	s15, r3
 800a0a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a19c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a0b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b4:	4b36      	ldr	r3, [pc, #216]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0bc:	ee07 3a90 	vmov	s15, r3
 800a0c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a0e6:	4b2a      	ldr	r3, [pc, #168]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0ea:	0a5b      	lsrs	r3, r3, #9
 800a0ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0f0:	ee07 3a90 	vmov	s15, r3
 800a0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a100:	edd7 6a07 	vldr	s13, [r7, #28]
 800a104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a10c:	ee17 2a90 	vmov	r2, s15
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a114:	4b1e      	ldr	r3, [pc, #120]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a118:	0c1b      	lsrs	r3, r3, #16
 800a11a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a12a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a12e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a13a:	ee17 2a90 	vmov	r2, s15
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a142:	4b13      	ldr	r3, [pc, #76]	@ (800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a146:	0e1b      	lsrs	r3, r3, #24
 800a148:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a14c:	ee07 3a90 	vmov	s15, r3
 800a150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a154:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a158:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a15c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a168:	ee17 2a90 	vmov	r2, s15
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a170:	e008      	b.n	800a184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	609a      	str	r2, [r3, #8]
}
 800a184:	bf00      	nop
 800a186:	3724      	adds	r7, #36	@ 0x24
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	58024400 	.word	0x58024400
 800a194:	03d09000 	.word	0x03d09000
 800a198:	46000000 	.word	0x46000000
 800a19c:	4c742400 	.word	0x4c742400
 800a1a0:	4a742400 	.word	0x4a742400
 800a1a4:	4bbebc20 	.word	0x4bbebc20

0800a1a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1b6:	4b53      	ldr	r3, [pc, #332]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ba:	f003 0303 	and.w	r3, r3, #3
 800a1be:	2b03      	cmp	r3, #3
 800a1c0:	d101      	bne.n	800a1c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e099      	b.n	800a2fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a1c6:	4b4f      	ldr	r3, [pc, #316]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a4e      	ldr	r2, [pc, #312]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a1cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a1d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1d2:	f7f7 fcc7 	bl	8001b64 <HAL_GetTick>
 800a1d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1d8:	e008      	b.n	800a1ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1da:	f7f7 fcc3 	bl	8001b64 <HAL_GetTick>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d901      	bls.n	800a1ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e086      	b.n	800a2fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1ec:	4b45      	ldr	r3, [pc, #276]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1f0      	bne.n	800a1da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1f8:	4b42      	ldr	r3, [pc, #264]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	031b      	lsls	r3, r3, #12
 800a206:	493f      	ldr	r1, [pc, #252]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	3b01      	subs	r3, #1
 800a212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	025b      	lsls	r3, r3, #9
 800a21e:	b29b      	uxth	r3, r3
 800a220:	431a      	orrs	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	3b01      	subs	r3, #1
 800a228:	041b      	lsls	r3, r3, #16
 800a22a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a22e:	431a      	orrs	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	3b01      	subs	r3, #1
 800a236:	061b      	lsls	r3, r3, #24
 800a238:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a23c:	4931      	ldr	r1, [pc, #196]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a23e:	4313      	orrs	r3, r2
 800a240:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a242:	4b30      	ldr	r3, [pc, #192]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a246:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	492d      	ldr	r1, [pc, #180]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a250:	4313      	orrs	r3, r2
 800a252:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a254:	4b2b      	ldr	r3, [pc, #172]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a258:	f023 0220 	bic.w	r2, r3, #32
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	4928      	ldr	r1, [pc, #160]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a262:	4313      	orrs	r3, r2
 800a264:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a266:	4b27      	ldr	r3, [pc, #156]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26a:	4a26      	ldr	r2, [pc, #152]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a26c:	f023 0310 	bic.w	r3, r3, #16
 800a270:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a272:	4b24      	ldr	r3, [pc, #144]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a274:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a276:	4b24      	ldr	r3, [pc, #144]	@ (800a308 <RCCEx_PLL2_Config+0x160>)
 800a278:	4013      	ands	r3, r2
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	69d2      	ldr	r2, [r2, #28]
 800a27e:	00d2      	lsls	r2, r2, #3
 800a280:	4920      	ldr	r1, [pc, #128]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a282:	4313      	orrs	r3, r2
 800a284:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a286:	4b1f      	ldr	r3, [pc, #124]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a28a:	4a1e      	ldr	r2, [pc, #120]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a28c:	f043 0310 	orr.w	r3, r3, #16
 800a290:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d106      	bne.n	800a2a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a298:	4b1a      	ldr	r3, [pc, #104]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29c:	4a19      	ldr	r2, [pc, #100]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a29e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2a4:	e00f      	b.n	800a2c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d106      	bne.n	800a2ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a2ac:	4b15      	ldr	r3, [pc, #84]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b0:	4a14      	ldr	r2, [pc, #80]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2b8:	e005      	b.n	800a2c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a2ba:	4b12      	ldr	r3, [pc, #72]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2be:	4a11      	ldr	r2, [pc, #68]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a2c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a0e      	ldr	r2, [pc, #56]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a2d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2d2:	f7f7 fc47 	bl	8001b64 <HAL_GetTick>
 800a2d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2d8:	e008      	b.n	800a2ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2da:	f7f7 fc43 	bl	8001b64 <HAL_GetTick>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d901      	bls.n	800a2ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e006      	b.n	800a2fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2ec:	4b05      	ldr	r3, [pc, #20]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d0f0      	beq.n	800a2da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	58024400 	.word	0x58024400
 800a308:	ffff0007 	.word	0xffff0007

0800a30c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a31a:	4b53      	ldr	r3, [pc, #332]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a31e:	f003 0303 	and.w	r3, r3, #3
 800a322:	2b03      	cmp	r3, #3
 800a324:	d101      	bne.n	800a32a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e099      	b.n	800a45e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a32a:	4b4f      	ldr	r3, [pc, #316]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a4e      	ldr	r2, [pc, #312]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a336:	f7f7 fc15 	bl	8001b64 <HAL_GetTick>
 800a33a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a33c:	e008      	b.n	800a350 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a33e:	f7f7 fc11 	bl	8001b64 <HAL_GetTick>
 800a342:	4602      	mov	r2, r0
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d901      	bls.n	800a350 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e086      	b.n	800a45e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a350:	4b45      	ldr	r3, [pc, #276]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1f0      	bne.n	800a33e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a35c:	4b42      	ldr	r3, [pc, #264]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a360:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	051b      	lsls	r3, r3, #20
 800a36a:	493f      	ldr	r1, [pc, #252]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	3b01      	subs	r3, #1
 800a376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	3b01      	subs	r3, #1
 800a380:	025b      	lsls	r3, r3, #9
 800a382:	b29b      	uxth	r3, r3
 800a384:	431a      	orrs	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	041b      	lsls	r3, r3, #16
 800a38e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a392:	431a      	orrs	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	3b01      	subs	r3, #1
 800a39a:	061b      	lsls	r3, r3, #24
 800a39c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a3a0:	4931      	ldr	r1, [pc, #196]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a3a6:	4b30      	ldr	r3, [pc, #192]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	492d      	ldr	r1, [pc, #180]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3b8:	4b2b      	ldr	r3, [pc, #172]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	4928      	ldr	r1, [pc, #160]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a3ca:	4b27      	ldr	r3, [pc, #156]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ce:	4a26      	ldr	r2, [pc, #152]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3d6:	4b24      	ldr	r3, [pc, #144]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3da:	4b24      	ldr	r3, [pc, #144]	@ (800a46c <RCCEx_PLL3_Config+0x160>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	69d2      	ldr	r2, [r2, #28]
 800a3e2:	00d2      	lsls	r2, r2, #3
 800a3e4:	4920      	ldr	r1, [pc, #128]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a3ea:	4b1f      	ldr	r3, [pc, #124]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ee:	4a1e      	ldr	r2, [pc, #120]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d106      	bne.n	800a40a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a3fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a400:	4a19      	ldr	r2, [pc, #100]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a402:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a406:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a408:	e00f      	b.n	800a42a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d106      	bne.n	800a41e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a410:	4b15      	ldr	r3, [pc, #84]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a414:	4a14      	ldr	r2, [pc, #80]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a416:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a41a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a41c:	e005      	b.n	800a42a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a41e:	4b12      	ldr	r3, [pc, #72]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a422:	4a11      	ldr	r2, [pc, #68]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a424:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a428:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a42a:	4b0f      	ldr	r3, [pc, #60]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a0e      	ldr	r2, [pc, #56]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a436:	f7f7 fb95 	bl	8001b64 <HAL_GetTick>
 800a43a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a43c:	e008      	b.n	800a450 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a43e:	f7f7 fb91 	bl	8001b64 <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d901      	bls.n	800a450 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e006      	b.n	800a45e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a450:	4b05      	ldr	r3, [pc, #20]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d0f0      	beq.n	800a43e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	58024400 	.word	0x58024400
 800a46c:	ffff0007 	.word	0xffff0007

0800a470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e049      	b.n	800a516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d106      	bne.n	800a49c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7f7 f91c 	bl	80016d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	4610      	mov	r0, r2
 800a4b0:	f000 fae0 	bl	800aa74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
	...

0800a520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b01      	cmp	r3, #1
 800a532:	d001      	beq.n	800a538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e054      	b.n	800a5e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68da      	ldr	r2, [r3, #12]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f042 0201 	orr.w	r2, r2, #1
 800a54e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a26      	ldr	r2, [pc, #152]	@ (800a5f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d022      	beq.n	800a5a0 <HAL_TIM_Base_Start_IT+0x80>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a562:	d01d      	beq.n	800a5a0 <HAL_TIM_Base_Start_IT+0x80>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a22      	ldr	r2, [pc, #136]	@ (800a5f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d018      	beq.n	800a5a0 <HAL_TIM_Base_Start_IT+0x80>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a21      	ldr	r2, [pc, #132]	@ (800a5f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d013      	beq.n	800a5a0 <HAL_TIM_Base_Start_IT+0x80>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a1f      	ldr	r2, [pc, #124]	@ (800a5fc <HAL_TIM_Base_Start_IT+0xdc>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d00e      	beq.n	800a5a0 <HAL_TIM_Base_Start_IT+0x80>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a1e      	ldr	r2, [pc, #120]	@ (800a600 <HAL_TIM_Base_Start_IT+0xe0>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d009      	beq.n	800a5a0 <HAL_TIM_Base_Start_IT+0x80>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a1c      	ldr	r2, [pc, #112]	@ (800a604 <HAL_TIM_Base_Start_IT+0xe4>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d004      	beq.n	800a5a0 <HAL_TIM_Base_Start_IT+0x80>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a1b      	ldr	r2, [pc, #108]	@ (800a608 <HAL_TIM_Base_Start_IT+0xe8>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d115      	bne.n	800a5cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689a      	ldr	r2, [r3, #8]
 800a5a6:	4b19      	ldr	r3, [pc, #100]	@ (800a60c <HAL_TIM_Base_Start_IT+0xec>)
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2b06      	cmp	r3, #6
 800a5b0:	d015      	beq.n	800a5de <HAL_TIM_Base_Start_IT+0xbe>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5b8:	d011      	beq.n	800a5de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f042 0201 	orr.w	r2, r2, #1
 800a5c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ca:	e008      	b.n	800a5de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f042 0201 	orr.w	r2, r2, #1
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	e000      	b.n	800a5e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3714      	adds	r7, #20
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	40010000 	.word	0x40010000
 800a5f4:	40000400 	.word	0x40000400
 800a5f8:	40000800 	.word	0x40000800
 800a5fc:	40000c00 	.word	0x40000c00
 800a600:	40010400 	.word	0x40010400
 800a604:	40001800 	.word	0x40001800
 800a608:	40014000 	.word	0x40014000
 800a60c:	00010007 	.word	0x00010007

0800a610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f003 0302 	and.w	r3, r3, #2
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d020      	beq.n	800a674 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f003 0302 	and.w	r3, r3, #2
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01b      	beq.n	800a674 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f06f 0202 	mvn.w	r2, #2
 800a644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	f003 0303 	and.w	r3, r3, #3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f9ec 	bl	800aa38 <HAL_TIM_IC_CaptureCallback>
 800a660:	e005      	b.n	800a66e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f9de 	bl	800aa24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f9ef 	bl	800aa4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d020      	beq.n	800a6c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f003 0304 	and.w	r3, r3, #4
 800a684:	2b00      	cmp	r3, #0
 800a686:	d01b      	beq.n	800a6c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f06f 0204 	mvn.w	r2, #4
 800a690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2202      	movs	r2, #2
 800a696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f9c6 	bl	800aa38 <HAL_TIM_IC_CaptureCallback>
 800a6ac:	e005      	b.n	800a6ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f9b8 	bl	800aa24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f9c9 	bl	800aa4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	f003 0308 	and.w	r3, r3, #8
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d020      	beq.n	800a70c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f003 0308 	and.w	r3, r3, #8
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d01b      	beq.n	800a70c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f06f 0208 	mvn.w	r2, #8
 800a6dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2204      	movs	r2, #4
 800a6e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	69db      	ldr	r3, [r3, #28]
 800a6ea:	f003 0303 	and.w	r3, r3, #3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f9a0 	bl	800aa38 <HAL_TIM_IC_CaptureCallback>
 800a6f8:	e005      	b.n	800a706 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f992 	bl	800aa24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f9a3 	bl	800aa4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	f003 0310 	and.w	r3, r3, #16
 800a712:	2b00      	cmp	r3, #0
 800a714:	d020      	beq.n	800a758 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f003 0310 	and.w	r3, r3, #16
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d01b      	beq.n	800a758 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f06f 0210 	mvn.w	r2, #16
 800a728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2208      	movs	r2, #8
 800a72e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d003      	beq.n	800a746 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f97a 	bl	800aa38 <HAL_TIM_IC_CaptureCallback>
 800a744:	e005      	b.n	800a752 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f96c 	bl	800aa24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f97d 	bl	800aa4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00c      	beq.n	800a77c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d007      	beq.n	800a77c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f06f 0201 	mvn.w	r2, #1
 800a774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f94a 	bl	800aa10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a782:	2b00      	cmp	r3, #0
 800a784:	d104      	bne.n	800a790 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00c      	beq.n	800a7aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a796:	2b00      	cmp	r3, #0
 800a798:	d007      	beq.n	800a7aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a7a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fb41 	bl	800ae2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00c      	beq.n	800a7ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d007      	beq.n	800a7ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a7c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fb39 	bl	800ae40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00c      	beq.n	800a7f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d007      	beq.n	800a7f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f937 	bl	800aa60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	f003 0320 	and.w	r3, r3, #32
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00c      	beq.n	800a816 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f003 0320 	and.w	r3, r3, #32
 800a802:	2b00      	cmp	r3, #0
 800a804:	d007      	beq.n	800a816 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f06f 0220 	mvn.w	r2, #32
 800a80e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fb01 	bl	800ae18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a816:	bf00      	nop
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a834:	2b01      	cmp	r3, #1
 800a836:	d101      	bne.n	800a83c <HAL_TIM_ConfigClockSource+0x1c>
 800a838:	2302      	movs	r3, #2
 800a83a:	e0dc      	b.n	800a9f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2202      	movs	r2, #2
 800a848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	4b6a      	ldr	r3, [pc, #424]	@ (800aa00 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a858:	4013      	ands	r3, r2
 800a85a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a64      	ldr	r2, [pc, #400]	@ (800aa04 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a872:	4293      	cmp	r3, r2
 800a874:	f000 80a9 	beq.w	800a9ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a878:	4a62      	ldr	r2, [pc, #392]	@ (800aa04 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	f200 80ae 	bhi.w	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a880:	4a61      	ldr	r2, [pc, #388]	@ (800aa08 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a882:	4293      	cmp	r3, r2
 800a884:	f000 80a1 	beq.w	800a9ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a888:	4a5f      	ldr	r2, [pc, #380]	@ (800aa08 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	f200 80a6 	bhi.w	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a890:	4a5e      	ldr	r2, [pc, #376]	@ (800aa0c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a892:	4293      	cmp	r3, r2
 800a894:	f000 8099 	beq.w	800a9ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a898:	4a5c      	ldr	r2, [pc, #368]	@ (800aa0c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	f200 809e 	bhi.w	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a8a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a8a4:	f000 8091 	beq.w	800a9ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a8a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a8ac:	f200 8096 	bhi.w	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a8b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8b4:	f000 8089 	beq.w	800a9ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a8b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8bc:	f200 808e 	bhi.w	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a8c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8c4:	d03e      	beq.n	800a944 <HAL_TIM_ConfigClockSource+0x124>
 800a8c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8ca:	f200 8087 	bhi.w	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a8ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8d2:	f000 8086 	beq.w	800a9e2 <HAL_TIM_ConfigClockSource+0x1c2>
 800a8d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8da:	d87f      	bhi.n	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a8dc:	2b70      	cmp	r3, #112	@ 0x70
 800a8de:	d01a      	beq.n	800a916 <HAL_TIM_ConfigClockSource+0xf6>
 800a8e0:	2b70      	cmp	r3, #112	@ 0x70
 800a8e2:	d87b      	bhi.n	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a8e4:	2b60      	cmp	r3, #96	@ 0x60
 800a8e6:	d050      	beq.n	800a98a <HAL_TIM_ConfigClockSource+0x16a>
 800a8e8:	2b60      	cmp	r3, #96	@ 0x60
 800a8ea:	d877      	bhi.n	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a8ec:	2b50      	cmp	r3, #80	@ 0x50
 800a8ee:	d03c      	beq.n	800a96a <HAL_TIM_ConfigClockSource+0x14a>
 800a8f0:	2b50      	cmp	r3, #80	@ 0x50
 800a8f2:	d873      	bhi.n	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a8f4:	2b40      	cmp	r3, #64	@ 0x40
 800a8f6:	d058      	beq.n	800a9aa <HAL_TIM_ConfigClockSource+0x18a>
 800a8f8:	2b40      	cmp	r3, #64	@ 0x40
 800a8fa:	d86f      	bhi.n	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a8fc:	2b30      	cmp	r3, #48	@ 0x30
 800a8fe:	d064      	beq.n	800a9ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a900:	2b30      	cmp	r3, #48	@ 0x30
 800a902:	d86b      	bhi.n	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a904:	2b20      	cmp	r3, #32
 800a906:	d060      	beq.n	800a9ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a908:	2b20      	cmp	r3, #32
 800a90a:	d867      	bhi.n	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d05c      	beq.n	800a9ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a910:	2b10      	cmp	r3, #16
 800a912:	d05a      	beq.n	800a9ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a914:	e062      	b.n	800a9dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a926:	f000 f9c9 	bl	800acbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	609a      	str	r2, [r3, #8]
      break;
 800a942:	e04f      	b.n	800a9e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a954:	f000 f9b2 	bl	800acbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	689a      	ldr	r2, [r3, #8]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a966:	609a      	str	r2, [r3, #8]
      break;
 800a968:	e03c      	b.n	800a9e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a976:	461a      	mov	r2, r3
 800a978:	f000 f922 	bl	800abc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2150      	movs	r1, #80	@ 0x50
 800a982:	4618      	mov	r0, r3
 800a984:	f000 f97c 	bl	800ac80 <TIM_ITRx_SetConfig>
      break;
 800a988:	e02c      	b.n	800a9e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a996:	461a      	mov	r2, r3
 800a998:	f000 f941 	bl	800ac1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2160      	movs	r1, #96	@ 0x60
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 f96c 	bl	800ac80 <TIM_ITRx_SetConfig>
      break;
 800a9a8:	e01c      	b.n	800a9e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f000 f902 	bl	800abc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2140      	movs	r1, #64	@ 0x40
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 f95c 	bl	800ac80 <TIM_ITRx_SetConfig>
      break;
 800a9c8:	e00c      	b.n	800a9e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	f000 f953 	bl	800ac80 <TIM_ITRx_SetConfig>
      break;
 800a9da:	e003      	b.n	800a9e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e0:	e000      	b.n	800a9e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a9e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	ffceff88 	.word	0xffceff88
 800aa04:	00100040 	.word	0x00100040
 800aa08:	00100030 	.word	0x00100030
 800aa0c:	00100020 	.word	0x00100020

0800aa10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a46      	ldr	r2, [pc, #280]	@ (800aba0 <TIM_Base_SetConfig+0x12c>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d013      	beq.n	800aab4 <TIM_Base_SetConfig+0x40>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa92:	d00f      	beq.n	800aab4 <TIM_Base_SetConfig+0x40>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a43      	ldr	r2, [pc, #268]	@ (800aba4 <TIM_Base_SetConfig+0x130>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d00b      	beq.n	800aab4 <TIM_Base_SetConfig+0x40>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a42      	ldr	r2, [pc, #264]	@ (800aba8 <TIM_Base_SetConfig+0x134>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d007      	beq.n	800aab4 <TIM_Base_SetConfig+0x40>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a41      	ldr	r2, [pc, #260]	@ (800abac <TIM_Base_SetConfig+0x138>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d003      	beq.n	800aab4 <TIM_Base_SetConfig+0x40>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a40      	ldr	r2, [pc, #256]	@ (800abb0 <TIM_Base_SetConfig+0x13c>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d108      	bne.n	800aac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a35      	ldr	r2, [pc, #212]	@ (800aba0 <TIM_Base_SetConfig+0x12c>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d01f      	beq.n	800ab0e <TIM_Base_SetConfig+0x9a>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aad4:	d01b      	beq.n	800ab0e <TIM_Base_SetConfig+0x9a>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a32      	ldr	r2, [pc, #200]	@ (800aba4 <TIM_Base_SetConfig+0x130>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d017      	beq.n	800ab0e <TIM_Base_SetConfig+0x9a>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a31      	ldr	r2, [pc, #196]	@ (800aba8 <TIM_Base_SetConfig+0x134>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d013      	beq.n	800ab0e <TIM_Base_SetConfig+0x9a>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a30      	ldr	r2, [pc, #192]	@ (800abac <TIM_Base_SetConfig+0x138>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d00f      	beq.n	800ab0e <TIM_Base_SetConfig+0x9a>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a2f      	ldr	r2, [pc, #188]	@ (800abb0 <TIM_Base_SetConfig+0x13c>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d00b      	beq.n	800ab0e <TIM_Base_SetConfig+0x9a>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a2e      	ldr	r2, [pc, #184]	@ (800abb4 <TIM_Base_SetConfig+0x140>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d007      	beq.n	800ab0e <TIM_Base_SetConfig+0x9a>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a2d      	ldr	r2, [pc, #180]	@ (800abb8 <TIM_Base_SetConfig+0x144>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d003      	beq.n	800ab0e <TIM_Base_SetConfig+0x9a>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a2c      	ldr	r2, [pc, #176]	@ (800abbc <TIM_Base_SetConfig+0x148>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d108      	bne.n	800ab20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	695b      	ldr	r3, [r3, #20]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	689a      	ldr	r2, [r3, #8]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a16      	ldr	r2, [pc, #88]	@ (800aba0 <TIM_Base_SetConfig+0x12c>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d00f      	beq.n	800ab6c <TIM_Base_SetConfig+0xf8>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a18      	ldr	r2, [pc, #96]	@ (800abb0 <TIM_Base_SetConfig+0x13c>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d00b      	beq.n	800ab6c <TIM_Base_SetConfig+0xf8>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a17      	ldr	r2, [pc, #92]	@ (800abb4 <TIM_Base_SetConfig+0x140>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d007      	beq.n	800ab6c <TIM_Base_SetConfig+0xf8>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a16      	ldr	r2, [pc, #88]	@ (800abb8 <TIM_Base_SetConfig+0x144>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d003      	beq.n	800ab6c <TIM_Base_SetConfig+0xf8>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a15      	ldr	r2, [pc, #84]	@ (800abbc <TIM_Base_SetConfig+0x148>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d103      	bne.n	800ab74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	691a      	ldr	r2, [r3, #16]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d105      	bne.n	800ab92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f023 0201 	bic.w	r2, r3, #1
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	611a      	str	r2, [r3, #16]
  }
}
 800ab92:	bf00      	nop
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	40010000 	.word	0x40010000
 800aba4:	40000400 	.word	0x40000400
 800aba8:	40000800 	.word	0x40000800
 800abac:	40000c00 	.word	0x40000c00
 800abb0:	40010400 	.word	0x40010400
 800abb4:	40014000 	.word	0x40014000
 800abb8:	40014400 	.word	0x40014400
 800abbc:	40014800 	.word	0x40014800

0800abc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b087      	sub	sp, #28
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	f023 0201 	bic.w	r2, r3, #1
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	011b      	lsls	r3, r3, #4
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f023 030a 	bic.w	r3, r3, #10
 800abfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	621a      	str	r2, [r3, #32]
}
 800ac12:	bf00      	nop
 800ac14:	371c      	adds	r7, #28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b087      	sub	sp, #28
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	f023 0210 	bic.w	r2, r3, #16
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	031b      	lsls	r3, r3, #12
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	011b      	lsls	r3, r3, #4
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	621a      	str	r2, [r3, #32]
}
 800ac72:	bf00      	nop
 800ac74:	371c      	adds	r7, #28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
	...

0800ac80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	4b09      	ldr	r3, [pc, #36]	@ (800acb8 <TIM_ITRx_SetConfig+0x38>)
 800ac94:	4013      	ands	r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	f043 0307 	orr.w	r3, r3, #7
 800aca2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	609a      	str	r2, [r3, #8]
}
 800acaa:	bf00      	nop
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	ffcfff8f 	.word	0xffcfff8f

0800acbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b087      	sub	sp, #28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800acd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	021a      	lsls	r2, r3, #8
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	431a      	orrs	r2, r3
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	609a      	str	r2, [r3, #8]
}
 800acf0:	bf00      	nop
 800acf2:	371c      	adds	r7, #28
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d101      	bne.n	800ad14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad10:	2302      	movs	r3, #2
 800ad12:	e06d      	b.n	800adf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2202      	movs	r2, #2
 800ad20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a30      	ldr	r2, [pc, #192]	@ (800adfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d004      	beq.n	800ad48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a2f      	ldr	r2, [pc, #188]	@ (800ae00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d108      	bne.n	800ad5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ad4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a20      	ldr	r2, [pc, #128]	@ (800adfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d022      	beq.n	800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad86:	d01d      	beq.n	800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ae04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d018      	beq.n	800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a1c      	ldr	r2, [pc, #112]	@ (800ae08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d013      	beq.n	800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a1a      	ldr	r2, [pc, #104]	@ (800ae0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d00e      	beq.n	800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a15      	ldr	r2, [pc, #84]	@ (800ae00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d009      	beq.n	800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a16      	ldr	r2, [pc, #88]	@ (800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d004      	beq.n	800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a15      	ldr	r2, [pc, #84]	@ (800ae14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d10c      	bne.n	800adde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	68ba      	ldr	r2, [r7, #8]
 800add2:	4313      	orrs	r3, r2
 800add4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3714      	adds	r7, #20
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	40010000 	.word	0x40010000
 800ae00:	40010400 	.word	0x40010400
 800ae04:	40000400 	.word	0x40000400
 800ae08:	40000800 	.word	0x40000800
 800ae0c:	40000c00 	.word	0x40000c00
 800ae10:	40001800 	.word	0x40001800
 800ae14:	40014000 	.word	0x40014000

0800ae18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <memset>:
 800ae54:	4402      	add	r2, r0
 800ae56:	4603      	mov	r3, r0
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d100      	bne.n	800ae5e <memset+0xa>
 800ae5c:	4770      	bx	lr
 800ae5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae62:	e7f9      	b.n	800ae58 <memset+0x4>

0800ae64 <__libc_init_array>:
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	4d0d      	ldr	r5, [pc, #52]	@ (800ae9c <__libc_init_array+0x38>)
 800ae68:	4c0d      	ldr	r4, [pc, #52]	@ (800aea0 <__libc_init_array+0x3c>)
 800ae6a:	1b64      	subs	r4, r4, r5
 800ae6c:	10a4      	asrs	r4, r4, #2
 800ae6e:	2600      	movs	r6, #0
 800ae70:	42a6      	cmp	r6, r4
 800ae72:	d109      	bne.n	800ae88 <__libc_init_array+0x24>
 800ae74:	4d0b      	ldr	r5, [pc, #44]	@ (800aea4 <__libc_init_array+0x40>)
 800ae76:	4c0c      	ldr	r4, [pc, #48]	@ (800aea8 <__libc_init_array+0x44>)
 800ae78:	f000 f826 	bl	800aec8 <_init>
 800ae7c:	1b64      	subs	r4, r4, r5
 800ae7e:	10a4      	asrs	r4, r4, #2
 800ae80:	2600      	movs	r6, #0
 800ae82:	42a6      	cmp	r6, r4
 800ae84:	d105      	bne.n	800ae92 <__libc_init_array+0x2e>
 800ae86:	bd70      	pop	{r4, r5, r6, pc}
 800ae88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae8c:	4798      	blx	r3
 800ae8e:	3601      	adds	r6, #1
 800ae90:	e7ee      	b.n	800ae70 <__libc_init_array+0xc>
 800ae92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae96:	4798      	blx	r3
 800ae98:	3601      	adds	r6, #1
 800ae9a:	e7f2      	b.n	800ae82 <__libc_init_array+0x1e>
 800ae9c:	0800afc4 	.word	0x0800afc4
 800aea0:	0800afc4 	.word	0x0800afc4
 800aea4:	0800afc4 	.word	0x0800afc4
 800aea8:	0800afc8 	.word	0x0800afc8

0800aeac <memcpy>:
 800aeac:	440a      	add	r2, r1
 800aeae:	4291      	cmp	r1, r2
 800aeb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aeb4:	d100      	bne.n	800aeb8 <memcpy+0xc>
 800aeb6:	4770      	bx	lr
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aec2:	4291      	cmp	r1, r2
 800aec4:	d1f9      	bne.n	800aeba <memcpy+0xe>
 800aec6:	bd10      	pop	{r4, pc}

0800aec8 <_init>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	bf00      	nop
 800aecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aece:	bc08      	pop	{r3}
 800aed0:	469e      	mov	lr, r3
 800aed2:	4770      	bx	lr

0800aed4 <_fini>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	bf00      	nop
 800aed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeda:	bc08      	pop	{r3}
 800aedc:	469e      	mov	lr, r3
 800aede:	4770      	bx	lr

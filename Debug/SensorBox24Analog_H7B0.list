
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa54  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800ad00  0800ad00  0000bd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ad74  0800ad74  0000bd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ad78  0800ad78  0000bd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800ad7c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000092c  24000010  0800ad8c  0000c010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400093c  0800ad8c  0000c93c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c87a  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000030a2  00000000  00000000  000288b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018d8  00000000  00000000  0002b95a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001362  00000000  00000000  0002d232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003408e  00000000  00000000  0002e594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f701  00000000  00000000  00062622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a846  00000000  00000000  00081d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001dc569  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006d7c  00000000  00000000  001dc5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800ace8 	.word	0x0800ace8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800ace8 	.word	0x0800ace8

080002ec <Config_Setup>:
#include "config.h"

#define ID 2


void Config_Setup(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
#if ID == 1
    Config_1();
#elif ID == 2
    Config_2();
 80002f0:	f000 f802 	bl	80002f8 <Config_2>
#elif ID == 3
    Config_3();
#endif
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Config_2>:
	

    CAN_interval = 100;
}

void Config_2(void){
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
	//initialize the sensors
		for (int i = 0; i < 16; i++) {
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	e026      	b.n	8000352 <Config_2+0x5a>
			sensors[i].transfer_function = TF_3V3;
 8000304:	4a19      	ldr	r2, [pc, #100]	@ (800036c <Config_2+0x74>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	011b      	lsls	r3, r3, #4
 800030a:	4413      	add	r3, r2
 800030c:	4a18      	ldr	r2, [pc, #96]	@ (8000370 <Config_2+0x78>)
 800030e:	601a      	str	r2, [r3, #0]
			sensors[i].CAN_ID = 2;
 8000310:	4a16      	ldr	r2, [pc, #88]	@ (800036c <Config_2+0x74>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	011b      	lsls	r3, r3, #4
 8000316:	4413      	add	r3, r2
 8000318:	3304      	adds	r3, #4
 800031a:	2202      	movs	r2, #2
 800031c:	801a      	strh	r2, [r3, #0]
			sensors[i].CAN_interval = 100;
 800031e:	4a13      	ldr	r2, [pc, #76]	@ (800036c <Config_2+0x74>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	011b      	lsls	r3, r3, #4
 8000324:	4413      	add	r3, r2
 8000326:	3306      	adds	r3, #6
 8000328:	2264      	movs	r2, #100	@ 0x64
 800032a:	801a      	strh	r2, [r3, #0]
			sensors[i].averages = 0;
 800032c:	4a0f      	ldr	r2, [pc, #60]	@ (800036c <Config_2+0x74>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	4413      	add	r3, r2
 8000334:	3308      	adds	r3, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
			sensors[i].pin = i;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	b2d9      	uxtb	r1, r3
 800033e:	4a0b      	ldr	r2, [pc, #44]	@ (800036c <Config_2+0x74>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	011b      	lsls	r3, r3, #4
 8000344:	4413      	add	r3, r2
 8000346:	330c      	adds	r3, #12
 8000348:	460a      	mov	r2, r1
 800034a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 16; i++) {
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	3301      	adds	r3, #1
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2b0f      	cmp	r3, #15
 8000356:	ddd5      	ble.n	8000304 <Config_2+0xc>
		}

		// Sensor definitions

	    CAN_interval = 100;
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <Config_2+0x7c>)
 800035a:	2264      	movs	r2, #100	@ 0x64
 800035c:	801a      	strh	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	240003a0 	.word	0x240003a0
 8000370:	080017e9 	.word	0x080017e9
 8000374:	240008c2 	.word	0x240008c2

08000378 <CanSend>:

uint8_t TxData[8];
uint8_t RxData[8];


void CanSend(uint8_t *TxData){
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000380:	e001      	b.n	8000386 <CanSend+0xe>
		Error_Handler();
 8000382:	f000 fe13 	bl	8000fac <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000386:	4809      	ldr	r0, [pc, #36]	@ (80003ac <CanSend+0x34>)
 8000388:	f005 faf6 	bl	8005978 <HAL_FDCAN_GetTxFifoFreeLevel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d007      	beq.n	80003a2 <CanSend+0x2a>
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	4906      	ldr	r1, [pc, #24]	@ (80003b0 <CanSend+0x38>)
 8000396:	4805      	ldr	r0, [pc, #20]	@ (80003ac <CanSend+0x34>)
 8000398:	f005 f927 	bl	80055ea <HAL_FDCAN_AddMessageToTxFifoQ>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1ef      	bne.n	8000382 <CanSend+0xa>
	}
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	24000118 	.word	0x24000118
 80003b0:	240008e8 	.word	0x240008e8

080003b4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d017      	beq.n	80003f8 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80003c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80003ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80003cc:	2140      	movs	r1, #64	@ 0x40
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f005 f966 	bl	80056a0 <HAL_FDCAN_GetRxMessage>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 80003da:	f000 fde7 	bl	8000fac <Error_Handler>
 80003de:	e001      	b.n	80003e4 <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 80003e0:	f000 f848 	bl	8000474 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f005 fad7 	bl	800599c <HAL_FDCAN_ActivateNotification>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 80003f4:	f000 fdda 	bl	8000fac <Error_Handler>
		}
	}
}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	24000034 	.word	0x24000034
 8000404:	2400090c 	.word	0x2400090c

08000408 <print>:



void print(uint16_t select){
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	80fb      	strh	r3, [r7, #6]
		//uint16_t Data = TF_Select(1,averages[select],transfer_functions[select]);
		uint16_t Data = sensors[select].transfer_function(1,sensors[select].averages);
 8000412:	88fb      	ldrh	r3, [r7, #6]
 8000414:	4a14      	ldr	r2, [pc, #80]	@ (8000468 <print+0x60>)
 8000416:	011b      	lsls	r3, r3, #4
 8000418:	4413      	add	r3, r2
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	88fa      	ldrh	r2, [r7, #6]
 800041e:	4912      	ldr	r1, [pc, #72]	@ (8000468 <print+0x60>)
 8000420:	0112      	lsls	r2, r2, #4
 8000422:	440a      	add	r2, r1
 8000424:	3208      	adds	r2, #8
 8000426:	6812      	ldr	r2, [r2, #0]
 8000428:	4611      	mov	r1, r2
 800042a:	2001      	movs	r0, #1
 800042c:	4798      	blx	r3
 800042e:	4603      	mov	r3, r0
 8000430:	81fb      	strh	r3, [r7, #14]
		TxData[0] = Data;
 8000432:	89fb      	ldrh	r3, [r7, #14]
 8000434:	b2da      	uxtb	r2, r3
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <print+0x64>)
 8000438:	701a      	strb	r2, [r3, #0]
		TxData[1] = Data >> 8;
 800043a:	89fb      	ldrh	r3, [r7, #14]
 800043c:	0a1b      	lsrs	r3, r3, #8
 800043e:	b29b      	uxth	r3, r3
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4b0a      	ldr	r3, [pc, #40]	@ (800046c <print+0x64>)
 8000444:	705a      	strb	r2, [r3, #1]
		TxHeader.Identifier = sensors[select].CAN_ID;
 8000446:	88fb      	ldrh	r3, [r7, #6]
 8000448:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <print+0x60>)
 800044a:	011b      	lsls	r3, r3, #4
 800044c:	4413      	add	r3, r2
 800044e:	3304      	adds	r3, #4
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	461a      	mov	r2, r3
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <print+0x68>)
 8000456:	601a      	str	r2, [r3, #0]

		CanSend(TxData);
 8000458:	4804      	ldr	r0, [pc, #16]	@ (800046c <print+0x64>)
 800045a:	f7ff ff8d 	bl	8000378 <CanSend>
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	240003a0 	.word	0x240003a0
 800046c:	2400002c 	.word	0x2400002c
 8000470:	240008e8 	.word	0x240008e8

08000474 <decode>:

void decode(){
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	switch(TxData[0]){
	
	}
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
	...

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800048a:	f001 f9f5 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f87b 	bl	8000588 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Config_Setup();
 8000492:	f7ff ff2b 	bl	80002ec <Config_Setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 fc95 	bl	8000dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 800049a:	f000 fc73 	bl	8000d84 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800049e:	f000 fa57 	bl	8000950 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80004a2:	f000 fadb 	bl	8000a5c <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80004a6:	f000 fb5f 	bl	8000b68 <MX_I2C1_Init>
  MX_I2C3_Init();
 80004aa:	f000 fb9d 	bl	8000be8 <MX_I2C3_Init>
  MX_ADC1_Init();
 80004ae:	f000 f8d9 	bl	8000664 <MX_ADC1_Init>
  MX_I2C4_Init();
 80004b2:	f000 fbd9 	bl	8000c68 <MX_I2C4_Init>
  MX_TIM3_Init();
 80004b6:	f000 fc17 	bl	8000ce8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 80004ba:	482a      	ldr	r0, [pc, #168]	@ (8000564 <main+0xe0>)
 80004bc:	f009 ff40 	bl	800a340 <HAL_TIM_Base_Start_IT>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <main+0x46>
 80004c6:	f000 fd71 	bl	8000fac <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 80004ca:	4b27      	ldr	r3, [pc, #156]	@ (8000568 <main+0xe4>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	461a      	mov	r2, r3
 80004d0:	4926      	ldr	r1, [pc, #152]	@ (800056c <main+0xe8>)
 80004d2:	4825      	ldr	r0, [pc, #148]	@ (8000568 <main+0xe4>)
 80004d4:	f001 fda4 	bl	8002020 <HAL_ADC_Start_DMA>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <main+0x5e>
 80004de:	f000 fd65 	bl	8000fac <Error_Handler>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 80004e2:	4823      	ldr	r0, [pc, #140]	@ (8000570 <main+0xec>)
 80004e4:	f005 f856 	bl	8005594 <HAL_FDCAN_Start>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d002      	beq.n	80004f4 <main+0x70>
 80004ee:	f000 fd5d 	bl	8000fac <Error_Handler>
 80004f2:	e008      	b.n	8000506 <main+0x82>
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004fa:	481e      	ldr	r0, [pc, #120]	@ (8000574 <main+0xf0>)
 80004fc:	f006 f974 	bl	80067e8 <HAL_GPIO_WritePin>
 8000500:	4b1d      	ldr	r3, [pc, #116]	@ (8000578 <main+0xf4>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000506:	2200      	movs	r2, #0
 8000508:	2101      	movs	r1, #1
 800050a:	4819      	ldr	r0, [pc, #100]	@ (8000570 <main+0xec>)
 800050c:	f005 fa46 	bl	800599c <HAL_FDCAN_ActivateNotification>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <main+0x96>
 8000516:	f000 fd49 	bl	8000fac <Error_Handler>


  uint8_t counter = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 800051e:	4b16      	ldr	r3, [pc, #88]	@ (8000578 <main+0xf4>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d1fb      	bne.n	800051e <main+0x9a>
		  if(millis % CAN_interval == 0){
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <main+0xf8>)
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	4a15      	ldr	r2, [pc, #84]	@ (8000580 <main+0xfc>)
 800052c:	8812      	ldrh	r2, [r2, #0]
 800052e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000532:	fb01 f202 	mul.w	r2, r1, r2
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	b29b      	uxth	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1ef      	bne.n	800051e <main+0x9a>
			  print(counter);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	b29b      	uxth	r3, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff ff60 	bl	8000408 <print>
			  counter++;
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	3301      	adds	r3, #1
 800054c:	71fb      	strb	r3, [r7, #7]
			  if(counter == 16){
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b10      	cmp	r3, #16
 8000552:	d1e4      	bne.n	800051e <main+0x9a>
				  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8000554:	2140      	movs	r1, #64	@ 0x40
 8000556:	480b      	ldr	r0, [pc, #44]	@ (8000584 <main+0x100>)
 8000558:	f006 f95f 	bl	800681a <HAL_GPIO_TogglePin>
				  counter = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 8000560:	e7dd      	b.n	800051e <main+0x9a>
 8000562:	bf00      	nop
 8000564:	24000354 	.word	0x24000354
 8000568:	2400003c 	.word	0x2400003c
 800056c:	240004a0 	.word	0x240004a0
 8000570:	24000118 	.word	0x24000118
 8000574:	58020400 	.word	0x58020400
 8000578:	240008e6 	.word	0x240008e6
 800057c:	240008e4 	.word	0x240008e4
 8000580:	240008c2 	.word	0x240008c2
 8000584:	58020800 	.word	0x58020800

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b09c      	sub	sp, #112	@ 0x70
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000592:	224c      	movs	r2, #76	@ 0x4c
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f00a fb6c 	bl	800ac74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2220      	movs	r2, #32
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f00a fb66 	bl	800ac74 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80005a8:	4b2c      	ldr	r3, [pc, #176]	@ (800065c <SystemClock_Config+0xd4>)
 80005aa:	f04f 32ff 	mov.w	r2, #4294967295
 80005ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005b2:	2002      	movs	r0, #2
 80005b4:	f006 fa80 	bl	8006ab8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <SystemClock_Config+0xd8>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a27      	ldr	r2, [pc, #156]	@ (8000660 <SystemClock_Config+0xd8>)
 80005c2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <SystemClock_Config+0xd8>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005d4:	bf00      	nop
 80005d6:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <SystemClock_Config+0xd8>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005e2:	d1f8      	bne.n	80005d6 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005e4:	4b1d      	ldr	r3, [pc, #116]	@ (800065c <SystemClock_Config+0xd4>)
 80005e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005e8:	f023 0303 	bic.w	r3, r3, #3
 80005ec:	4a1b      	ldr	r2, [pc, #108]	@ (800065c <SystemClock_Config+0xd4>)
 80005ee:	f043 0302 	orr.w	r3, r3, #2
 80005f2:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005f4:	2303      	movs	r3, #3
 80005f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005fe:	2301      	movs	r3, #1
 8000600:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000602:	2340      	movs	r3, #64	@ 0x40
 8000604:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000606:	2300      	movs	r3, #0
 8000608:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800060e:	4618      	mov	r0, r3
 8000610:	f006 fa8c 	bl	8006b2c <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800061a:	f000 fcc7 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	233f      	movs	r3, #63	@ 0x3f
 8000620:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800062e:	2340      	movs	r3, #64	@ 0x40
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000632:	2340      	movs	r3, #64	@ 0x40
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800063c:	2340      	movs	r3, #64	@ 0x40
 800063e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f006 fea3 	bl	8007390 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000650:	f000 fcac 	bl	8000fac <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3770      	adds	r7, #112	@ 0x70
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	58024400 	.word	0x58024400
 8000660:	58024800 	.word	0x58024800

08000664 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]
 8000686:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000688:	4b9f      	ldr	r3, [pc, #636]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 800068a:	4aa0      	ldr	r2, [pc, #640]	@ (800090c <MX_ADC1_Init+0x2a8>)
 800068c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800068e:	4b9e      	ldr	r3, [pc, #632]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 8000690:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000694:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000696:	4b9c      	ldr	r3, [pc, #624]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 8000698:	2208      	movs	r2, #8
 800069a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800069c:	4b9a      	ldr	r3, [pc, #616]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 800069e:	2201      	movs	r2, #1
 80006a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a2:	4b99      	ldr	r3, [pc, #612]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a8:	4b97      	ldr	r3, [pc, #604]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006ae:	4b96      	ldr	r3, [pc, #600]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 80006b4:	4b94      	ldr	r3, [pc, #592]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006b6:	2210      	movs	r2, #16
 80006b8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ba:	4b93      	ldr	r3, [pc, #588]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c0:	4b91      	ldr	r3, [pc, #580]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c6:	4b90      	ldr	r3, [pc, #576]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006cc:	4b8e      	ldr	r3, [pc, #568]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006ce:	2203      	movs	r2, #3
 80006d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d2:	4b8d      	ldr	r3, [pc, #564]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006d8:	4b8b      	ldr	r3, [pc, #556]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006de:	4b8a      	ldr	r3, [pc, #552]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e6:	4888      	ldr	r0, [pc, #544]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80006e8:	f001 fb40 	bl	8001d6c <HAL_ADC_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006f2:	f000 fc5b 	bl	8000fac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4881      	ldr	r0, [pc, #516]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 8000702:	f002 fa43 	bl	8002b8c <HAL_ADCEx_MultiModeConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800070c:	f000 fc4e 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000710:	4b7f      	ldr	r3, [pc, #508]	@ (8000910 <MX_ADC1_Init+0x2ac>)
 8000712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000714:	2306      	movs	r3, #6
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000718:	2307      	movs	r3, #7
 800071a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800071c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000720:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000722:	2304      	movs	r3, #4
 8000724:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	4619      	mov	r1, r3
 8000732:	4875      	ldr	r0, [pc, #468]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 8000734:	f001 fd3c 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800073e:	f000 fc35 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000742:	4b74      	ldr	r3, [pc, #464]	@ (8000914 <MX_ADC1_Init+0x2b0>)
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000746:	230c      	movs	r3, #12
 8000748:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	486e      	ldr	r0, [pc, #440]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 8000750:	f001 fd2e 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800075a:	f000 fc27 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800075e:	4b6e      	ldr	r3, [pc, #440]	@ (8000918 <MX_ADC1_Init+0x2b4>)
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000762:	2312      	movs	r3, #18
 8000764:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4867      	ldr	r0, [pc, #412]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 800076c:	f001 fd20 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000776:	f000 fc19 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800077a:	4b68      	ldr	r3, [pc, #416]	@ (800091c <MX_ADC1_Init+0x2b8>)
 800077c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800077e:	2318      	movs	r3, #24
 8000780:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4860      	ldr	r0, [pc, #384]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 8000788:	f001 fd12 	bl	80021b0 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000792:	f000 fc0b 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000796:	4b62      	ldr	r3, [pc, #392]	@ (8000920 <MX_ADC1_Init+0x2bc>)
 8000798:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800079a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4858      	ldr	r0, [pc, #352]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80007a6:	f001 fd03 	bl	80021b0 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80007b0:	f000 fbfc 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007b4:	4b5b      	ldr	r3, [pc, #364]	@ (8000924 <MX_ADC1_Init+0x2c0>)
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007b8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80007bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4851      	ldr	r0, [pc, #324]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80007c4:	f001 fcf4 	bl	80021b0 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80007ce:	f000 fbed 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007d2:	4b55      	ldr	r3, [pc, #340]	@ (8000928 <MX_ADC1_Init+0x2c4>)
 80007d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80007d6:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80007da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4849      	ldr	r0, [pc, #292]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80007e2:	f001 fce5 	bl	80021b0 <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80007ec:	f000 fbde 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007f0:	4b4e      	ldr	r3, [pc, #312]	@ (800092c <MX_ADC1_Init+0x2c8>)
 80007f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80007f4:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80007f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	4842      	ldr	r0, [pc, #264]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 8000800:	f001 fcd6 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 800080a:	f000 fbcf 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800080e:	4b48      	ldr	r3, [pc, #288]	@ (8000930 <MX_ADC1_Init+0x2cc>)
 8000810:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000812:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	483a      	ldr	r0, [pc, #232]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 800081e:	f001 fcc7 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 8000828:	f000 fbc0 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800082c:	4b41      	ldr	r3, [pc, #260]	@ (8000934 <MX_ADC1_Init+0x2d0>)
 800082e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000830:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000834:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	4833      	ldr	r0, [pc, #204]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 800083c:	f001 fcb8 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8000846:	f000 fbb1 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800084a:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <MX_ADC1_Init+0x2d4>)
 800084c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800084e:	f240 2306 	movw	r3, #518	@ 0x206
 8000852:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	482b      	ldr	r0, [pc, #172]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 800085a:	f001 fca9 	bl	80021b0 <HAL_ADC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 8000864:	f000 fba2 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000868:	4b34      	ldr	r3, [pc, #208]	@ (800093c <MX_ADC1_Init+0x2d8>)
 800086a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800086c:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000870:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4824      	ldr	r0, [pc, #144]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 8000878:	f001 fc9a 	bl	80021b0 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 8000882:	f000 fb93 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000886:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <MX_ADC1_Init+0x2dc>)
 8000888:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800088a:	f240 2312 	movw	r3, #530	@ 0x212
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	481c      	ldr	r0, [pc, #112]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 8000896:	f001 fc8b 	bl	80021b0 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 80008a0:	f000 fb84 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80008a4:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <MX_ADC1_Init+0x2e0>)
 80008a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80008a8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80008ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	4619      	mov	r1, r3
 80008b2:	4815      	ldr	r0, [pc, #84]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80008b4:	f001 fc7c 	bl	80021b0 <HAL_ADC_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 80008be:	f000 fb75 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <MX_ADC1_Init+0x2e4>)
 80008c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80008c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4619      	mov	r1, r3
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80008d2:	f001 fc6d 	bl	80021b0 <HAL_ADC_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 80008dc:	f000 fb66 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_ADC1_Init+0x2e8>)
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80008e4:	f240 3306 	movw	r3, #774	@ 0x306
 80008e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <MX_ADC1_Init+0x2a4>)
 80008f0:	f001 fc5e 	bl	80021b0 <HAL_ADC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 80008fa:	f000 fb57 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	@ 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2400003c 	.word	0x2400003c
 800090c:	40022000 	.word	0x40022000
 8000910:	0c900008 	.word	0x0c900008
 8000914:	10c00010 	.word	0x10c00010
 8000918:	14f00020 	.word	0x14f00020
 800091c:	1d500080 	.word	0x1d500080
 8000920:	21800100 	.word	0x21800100
 8000924:	25b00200 	.word	0x25b00200
 8000928:	2a000400 	.word	0x2a000400
 800092c:	2e300800 	.word	0x2e300800
 8000930:	32601000 	.word	0x32601000
 8000934:	36902000 	.word	0x36902000
 8000938:	3ac04000 	.word	0x3ac04000
 800093c:	3ef08000 	.word	0x3ef08000
 8000940:	43210000 	.word	0x43210000
 8000944:	47520000 	.word	0x47520000
 8000948:	4b840000 	.word	0x4b840000
 800094c:	4fb80000 	.word	0x4fb80000

08000950 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000954:	4b3d      	ldr	r3, [pc, #244]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 8000956:	4a3e      	ldr	r2, [pc, #248]	@ (8000a50 <MX_FDCAN1_Init+0x100>)
 8000958:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800095a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000960:	4b3a      	ldr	r3, [pc, #232]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000966:	4b39      	ldr	r3, [pc, #228]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 8000968:	2201      	movs	r2, #1
 800096a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800096c:	4b37      	ldr	r3, [pc, #220]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 800096e:	2200      	movs	r2, #0
 8000970:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000972:	4b36      	ldr	r3, [pc, #216]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 8000974:	2200      	movs	r2, #0
 8000976:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000978:	4b34      	ldr	r3, [pc, #208]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 800097a:	2201      	movs	r2, #1
 800097c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800097e:	4b33      	ldr	r3, [pc, #204]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 8000980:	2201      	movs	r2, #1
 8000982:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 22;
 8000984:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 8000986:	2216      	movs	r2, #22
 8000988:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800098a:	4b30      	ldr	r3, [pc, #192]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 800098c:	2202      	movs	r2, #2
 800098e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000990:	4b2e      	ldr	r3, [pc, #184]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 8000992:	2201      	movs	r2, #1
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000996:	4b2d      	ldr	r3, [pc, #180]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 8000998:	2201      	movs	r2, #1
 800099a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800099c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 800099e:	2201      	movs	r2, #1
 80009a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009a8:	4b28      	ldr	r3, [pc, #160]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 28;
 80009ae:	4b27      	ldr	r3, [pc, #156]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009b0:	221c      	movs	r2, #28
 80009b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009b4:	4b25      	ldr	r3, [pc, #148]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80009ba:	4b24      	ldr	r3, [pc, #144]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009c0:	4b22      	ldr	r3, [pc, #136]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009c2:	2204      	movs	r2, #4
 80009c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009c6:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009da:	2204      	movs	r2, #4
 80009dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80009e4:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80009ea:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009f0:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009fc:	4813      	ldr	r0, [pc, #76]	@ (8000a4c <MX_FDCAN1_Init+0xfc>)
 80009fe:	f004 fbeb 	bl	80051d8 <HAL_FDCAN_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000a08:	f000 fad0 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_FDCAN1_Init+0x104>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a14:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	24000118 	.word	0x24000118
 8000a50:	4000a000 	.word	0x4000a000
 8000a54:	240008c4 	.word	0x240008c4
 8000a58:	240008e8 	.word	0x240008e8

08000a5c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000a60:	4b3d      	ldr	r3, [pc, #244]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000a62:	4a3e      	ldr	r2, [pc, #248]	@ (8000b5c <MX_FDCAN2_Init+0x100>)
 8000a64:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a66:	4b3c      	ldr	r3, [pc, #240]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000a72:	4b39      	ldr	r3, [pc, #228]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a78:	4b37      	ldr	r3, [pc, #220]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a7e:	4b36      	ldr	r3, [pc, #216]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000a84:	4b34      	ldr	r3, [pc, #208]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000a8a:	4b33      	ldr	r3, [pc, #204]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 22;
 8000a90:	4b31      	ldr	r3, [pc, #196]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000a92:	2216      	movs	r2, #22
 8000a94:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000a96:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000aae:	4b2a      	ldr	r3, [pc, #168]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000ab4:	4b28      	ldr	r3, [pc, #160]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000aba:	4b27      	ldr	r3, [pc, #156]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ac0:	4b25      	ldr	r3, [pc, #148]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000ac6:	4b24      	ldr	r3, [pc, #144]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000acc:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000ace:	2204      	movs	r2, #4
 8000ad0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ade:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000aea:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000af0:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000af6:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000b08:	4813      	ldr	r0, [pc, #76]	@ (8000b58 <MX_FDCAN2_Init+0xfc>)
 8000b0a:	f004 fb65 	bl	80051d8 <HAL_FDCAN_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000b14:	f000 fa4a 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_FDCAN2_Init+0x104>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <MX_FDCAN2_Init+0x108>)
 8000b20:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <MX_FDCAN2_Init+0x108>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <MX_FDCAN2_Init+0x108>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <MX_FDCAN2_Init+0x108>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b34:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <MX_FDCAN2_Init+0x108>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <MX_FDCAN2_Init+0x108>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <MX_FDCAN2_Init+0x108>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b46:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <MX_FDCAN2_Init+0x108>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <MX_FDCAN2_Init+0x108>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	240001b8 	.word	0x240001b8
 8000b5c:	4000a400 	.word	0x4000a400
 8000b60:	240008c4 	.word	0x240008c4
 8000b64:	240008e8 	.word	0x240008e8

08000b68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000be0 <MX_I2C1_Init+0x78>)
 8000b70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b74:	4a1b      	ldr	r2, [pc, #108]	@ (8000be4 <MX_I2C1_Init+0x7c>)
 8000b76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b78:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba2:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000ba4:	f005 fe54 	bl	8006850 <HAL_I2C_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bae:	f000 f9fd 	bl	8000fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4809      	ldr	r0, [pc, #36]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000bb6:	f005 fee7 	bl	8006988 <HAL_I2CEx_ConfigAnalogFilter>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bc0:	f000 f9f4 	bl	8000fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_I2C1_Init+0x74>)
 8000bc8:	f005 ff29 	bl	8006a1e <HAL_I2CEx_ConfigDigitalFilter>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 f9eb 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000258 	.word	0x24000258
 8000be0:	40005400 	.word	0x40005400
 8000be4:	00707cbb 	.word	0x00707cbb

08000be8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000bee:	4a1c      	ldr	r2, [pc, #112]	@ (8000c60 <MX_I2C3_Init+0x78>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c64 <MX_I2C3_Init+0x7c>)
 8000bf6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c04:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c22:	480e      	ldr	r0, [pc, #56]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000c24:	f005 fe14 	bl	8006850 <HAL_I2C_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c2e:	f000 f9bd 	bl	8000fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4809      	ldr	r0, [pc, #36]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000c36:	f005 fea7 	bl	8006988 <HAL_I2CEx_ConfigAnalogFilter>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c40:	f000 f9b4 	bl	8000fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <MX_I2C3_Init+0x74>)
 8000c48:	f005 fee9 	bl	8006a1e <HAL_I2CEx_ConfigDigitalFilter>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c52:	f000 f9ab 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240002ac 	.word	0x240002ac
 8000c60:	40005c00 	.word	0x40005c00
 8000c64:	00707cbb 	.word	0x00707cbb

08000c68 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <MX_I2C4_Init+0x78>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000c74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce4 <MX_I2C4_Init+0x7c>)
 8000c76:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ca2:	480e      	ldr	r0, [pc, #56]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000ca4:	f005 fdd4 	bl	8006850 <HAL_I2C_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000cae:	f000 f97d 	bl	8000fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000cb6:	f005 fe67 	bl	8006988 <HAL_I2CEx_ConfigAnalogFilter>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000cc0:	f000 f974 	bl	8000fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_I2C4_Init+0x74>)
 8000cc8:	f005 fea9 	bl	8006a1e <HAL_I2CEx_ConfigDigitalFilter>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000cd2:	f000 f96b 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	24000300 	.word	0x24000300
 8000ce0:	58001c00 	.word	0x58001c00
 8000ce4:	00707cbb 	.word	0x00707cbb

08000ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d08:	4a1d      	ldr	r2, [pc, #116]	@ (8000d80 <MX_TIM3_Init+0x98>)
 8000d0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d0e:	223f      	movs	r2, #63	@ 0x3f
 8000d10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d2c:	4813      	ldr	r0, [pc, #76]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d2e:	f009 faaf 	bl	800a290 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d38:	f000 f938 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d4a:	f009 fc79 	bl	800a640 <HAL_TIM_ConfigClockSource>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d54:	f000 f92a 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_TIM3_Init+0x94>)
 8000d66:	f009 fed9 	bl	800ab1c <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f000 f91c 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	24000354 	.word	0x24000354
 8000d80:	40000400 	.word	0x40000400

08000d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <MX_DMA_Init+0x3c>)
 8000d8c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d90:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc0 <MX_DMA_Init+0x3c>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_DMA_Init+0x3c>)
 8000d9c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	200b      	movs	r0, #11
 8000dae:	f002 f864 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000db2:	200b      	movs	r0, #11
 8000db4:	f002 f87b 	bl	8002eae <HAL_NVIC_EnableIRQ>

}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	58024400 	.word	0x58024400

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dda:	4b34      	ldr	r3, [pc, #208]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000ddc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000de0:	4a32      	ldr	r2, [pc, #200]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dea:	4b30      	ldr	r3, [pc, #192]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000dec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df8:	4b2c      	ldr	r3, [pc, #176]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000dfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dfe:	4a2b      	ldr	r2, [pc, #172]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e08:	4b28      	ldr	r3, [pc, #160]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000e0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000e18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e1c:	4a23      	ldr	r2, [pc, #140]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000e28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000e36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e44:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_GPIO_Init+0xe8>)
 8000e46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e58:	4815      	ldr	r0, [pc, #84]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000e5a:	f005 fcc5 	bl	80067e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2140      	movs	r1, #64	@ 0x40
 8000e62:	4814      	ldr	r0, [pc, #80]	@ (8000eb4 <MX_GPIO_Init+0xf0>)
 8000e64:	f005 fcc0 	bl	80067e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000e68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480b      	ldr	r0, [pc, #44]	@ (8000eb0 <MX_GPIO_Init+0xec>)
 8000e82:	f005 fb01 	bl	8006488 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000e86:	2340      	movs	r3, #64	@ 0x40
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_GPIO_Init+0xf0>)
 8000e9e:	f005 faf3 	bl	8006488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	@ 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	58024400 	.word	0x58024400
 8000eb0:	58020400 	.word	0x58020400
 8000eb4:	58020800 	.word	0x58020800

08000eb8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a34      	ldr	r2, [pc, #208]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d15f      	bne.n	8000f8a <HAL_ADC_ConvCpltCallback+0xd2>
		if(AVE_POS < ROLLING_AVE){
 8000eca:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b1f      	cmp	r3, #31
 8000ed0:	d806      	bhi.n	8000ee0 <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 8000ed2:	4b32      	ldr	r3, [pc, #200]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b30      	ldr	r3, [pc, #192]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e03b      	b.n	8000f58 <HAL_ADC_ConvCpltCallback+0xa0>
		}
		else{
			AVE_POS = 0;
 8000ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e030      	b.n	8000f4e <HAL_ADC_ConvCpltCallback+0x96>
				for(int z = 0; z < ROLLING_AVE;z++){
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	e027      	b.n	8000f42 <HAL_ADC_ConvCpltCallback+0x8a>
					if(z == 0){
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10c      	bne.n	8000f12 <HAL_ADC_ConvCpltCallback+0x5a>
						//averages[i] = all_raw_data[i][0];
            sensors[i].averages = all_raw_data[i][0];
 8000ef8:	4a29      	ldr	r2, [pc, #164]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	4413      	add	r3, r2
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	4619      	mov	r1, r3
 8000f04:	4a27      	ldr	r2, [pc, #156]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0xec>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3308      	adds	r3, #8
 8000f0e:	6019      	str	r1, [r3, #0]
 8000f10:	e014      	b.n	8000f3c <HAL_ADC_ConvCpltCallback+0x84>
					}else{
						//averages[i]=(averages[i] + all_raw_data[i][z])/2;
            sensors[i].averages = (sensors[i].averages + all_raw_data[i][z])/2;
 8000f12:	4a24      	ldr	r2, [pc, #144]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0xec>)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	4413      	add	r3, r2
 8000f1a:	3308      	adds	r3, #8
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4820      	ldr	r0, [pc, #128]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	0151      	lsls	r1, r2, #5
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	440a      	add	r2, r1
 8000f28:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	085a      	lsrs	r2, r3, #1
 8000f30:	491c      	ldr	r1, [pc, #112]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0xec>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	440b      	add	r3, r1
 8000f38:	3308      	adds	r3, #8
 8000f3a:	601a      	str	r2, [r3, #0]
				for(int z = 0; z < ROLLING_AVE;z++){
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	2b1f      	cmp	r3, #31
 8000f46:	ddd4      	ble.n	8000ef2 <HAL_ADC_ConvCpltCallback+0x3a>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8c9      	bhi.n	8000eec <HAL_ADC_ConvCpltCallback+0x34>
					}
				}
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	e010      	b.n	8000f80 <HAL_ADC_ConvCpltCallback+0xc8>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	4910      	ldr	r1, [pc, #64]	@ (8000fa8 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	0152      	lsls	r2, r2, #5
 8000f72:	4413      	add	r3, r2
 8000f74:	4602      	mov	r2, r0
 8000f76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699a      	ldr	r2, [r3, #24]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d8e9      	bhi.n	8000f5e <HAL_ADC_ConvCpltCallback+0xa6>
		}
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	371c      	adds	r7, #28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000
 8000f9c:	240008c0 	.word	0x240008c0
 8000fa0:	240004c0 	.word	0x240004c0
 8000fa4:	240003a0 	.word	0x240003a0
 8000fa8:	240004a0 	.word	0x240004a0

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <Error_Handler+0x8>

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <HAL_MspInit+0x3c>)
 8000fc0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff4 <HAL_MspInit+0x3c>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <HAL_MspInit+0x3c>)
 8000fd0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2005      	movs	r0, #5
 8000fe2:	f001 ff4a 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	f001 ff61 	bl	8002eae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	58024400 	.word	0x58024400

08000ff8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0bc      	sub	sp, #240	@ 0xf0
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001010:	f107 0318 	add.w	r3, r7, #24
 8001014:	22c0      	movs	r2, #192	@ 0xc0
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f009 fe2b 	bl	800ac74 <memset>
  if(hadc->Instance==ADC1)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a62      	ldr	r2, [pc, #392]	@ (80011ac <HAL_ADC_MspInit+0x1b4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	f040 80bc 	bne.w	80011a2 <HAL_ADC_MspInit+0x1aa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800102a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001036:	2302      	movs	r3, #2
 8001038:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 800103a:	2320      	movs	r3, #32
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 800103e:	2308      	movs	r3, #8
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 25;
 8001042:	2319      	movs	r3, #25
 8001044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001046:	2302      	movs	r3, #2
 8001048:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800104a:	23c0      	movs	r3, #192	@ 0xc0
 800104c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800104e:	2300      	movs	r3, #0
 8001050:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	4618      	mov	r0, r3
 8001062:	f006 fd0b 	bl	8007a7c <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800106c:	f7ff ff9e 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001070:	4b4f      	ldr	r3, [pc, #316]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 8001072:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001076:	4a4e      	ldr	r2, [pc, #312]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 8001078:	f043 0320 	orr.w	r3, r3, #32
 800107c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001080:	4b4b      	ldr	r3, [pc, #300]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 8001082:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001086:	f003 0320 	and.w	r3, r3, #32
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b48      	ldr	r3, [pc, #288]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 8001090:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001094:	4a46      	ldr	r2, [pc, #280]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800109e:	4b44      	ldr	r3, [pc, #272]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 80010a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 80010ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010b2:	4a3f      	ldr	r2, [pc, #252]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80010bc:	4b3c      	ldr	r3, [pc, #240]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 80010be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b39      	ldr	r3, [pc, #228]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 80010cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010d0:	4a37      	ldr	r2, [pc, #220]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80010da:	4b35      	ldr	r3, [pc, #212]	@ (80011b0 <HAL_ADC_MspInit+0x1b8>)
 80010dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010e8:	233f      	movs	r3, #63	@ 0x3f
 80010ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010fe:	4619      	mov	r1, r3
 8001100:	482c      	ldr	r0, [pc, #176]	@ (80011b4 <HAL_ADC_MspInit+0x1bc>)
 8001102:	f005 f9c1 	bl	8006488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001106:	23ff      	movs	r3, #255	@ 0xff
 8001108:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110c:	2303      	movs	r3, #3
 800110e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800111c:	4619      	mov	r1, r3
 800111e:	4826      	ldr	r0, [pc, #152]	@ (80011b8 <HAL_ADC_MspInit+0x1c0>)
 8001120:	f005 f9b2 	bl	8006488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001124:	2303      	movs	r3, #3
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112a:	2303      	movs	r3, #3
 800112c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800113a:	4619      	mov	r1, r3
 800113c:	481f      	ldr	r0, [pc, #124]	@ (80011bc <HAL_ADC_MspInit+0x1c4>)
 800113e:	f005 f9a3 	bl	8006488 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001142:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 8001144:	4a1f      	ldr	r2, [pc, #124]	@ (80011c4 <HAL_ADC_MspInit+0x1cc>)
 8001146:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001148:	4b1d      	ldr	r3, [pc, #116]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 800114a:	2209      	movs	r2, #9
 800114c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001154:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800115a:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 800115c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001160:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 8001164:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001168:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 800116c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001170:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 8001174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001178:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001186:	480e      	ldr	r0, [pc, #56]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 8001188:	f001 feac 	bl	8002ee4 <HAL_DMA_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 8001192:	f7ff ff0b 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a09      	ldr	r2, [pc, #36]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 800119a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800119c:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <HAL_ADC_MspInit+0x1c8>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	37f0      	adds	r7, #240	@ 0xf0
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40022000 	.word	0x40022000
 80011b0:	58024400 	.word	0x58024400
 80011b4:	58020800 	.word	0x58020800
 80011b8:	58020000 	.word	0x58020000
 80011bc:	58020400 	.word	0x58020400
 80011c0:	240000a0 	.word	0x240000a0
 80011c4:	40020010 	.word	0x40020010

080011c8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0bc      	sub	sp, #240	@ 0xf0
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	22c0      	movs	r2, #192	@ 0xc0
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f009 fd43 	bl	800ac74 <memset>
  if(hfdcan->Instance==FDCAN1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a5a      	ldr	r2, [pc, #360]	@ (800135c <HAL_FDCAN_MspInit+0x194>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d158      	bne.n	80012aa <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	4618      	mov	r0, r3
 8001210:	f006 fc34 	bl	8007a7c <HAL_RCCEx_PeriphCLKConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800121a:	f7ff fec7 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800121e:	4b50      	ldr	r3, [pc, #320]	@ (8001360 <HAL_FDCAN_MspInit+0x198>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	4a4e      	ldr	r2, [pc, #312]	@ (8001360 <HAL_FDCAN_MspInit+0x198>)
 8001226:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001228:	4b4d      	ldr	r3, [pc, #308]	@ (8001360 <HAL_FDCAN_MspInit+0x198>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10e      	bne.n	800124e <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001230:	4b4c      	ldr	r3, [pc, #304]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 8001232:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001236:	4a4b      	ldr	r2, [pc, #300]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800123c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001240:	4b48      	ldr	r3, [pc, #288]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 8001242:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b45      	ldr	r3, [pc, #276]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 8001250:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001254:	4a43      	ldr	r2, [pc, #268]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800125e:	4b41      	ldr	r3, [pc, #260]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 8001260:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800126c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001270:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001286:	2309      	movs	r3, #9
 8001288:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001290:	4619      	mov	r1, r3
 8001292:	4835      	ldr	r0, [pc, #212]	@ (8001368 <HAL_FDCAN_MspInit+0x1a0>)
 8001294:	f005 f8f8 	bl	8006488 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2013      	movs	r0, #19
 800129e:	f001 fdec 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80012a2:	2013      	movs	r0, #19
 80012a4:	f001 fe03 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80012a8:	e054      	b.n	8001354 <HAL_FDCAN_MspInit+0x18c>
  else if(hfdcan->Instance==FDCAN2)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a2f      	ldr	r2, [pc, #188]	@ (800136c <HAL_FDCAN_MspInit+0x1a4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d14f      	bne.n	8001354 <HAL_FDCAN_MspInit+0x18c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	4618      	mov	r0, r3
 80012cc:	f006 fbd6 	bl	8007a7c <HAL_RCCEx_PeriphCLKConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_FDCAN_MspInit+0x112>
      Error_Handler();
 80012d6:	f7ff fe69 	bl	8000fac <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80012da:	4b21      	ldr	r3, [pc, #132]	@ (8001360 <HAL_FDCAN_MspInit+0x198>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001360 <HAL_FDCAN_MspInit+0x198>)
 80012e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80012e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001360 <HAL_FDCAN_MspInit+0x198>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d10e      	bne.n	800130a <HAL_FDCAN_MspInit+0x142>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80012ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 80012ee:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80012f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 80012f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f8:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 80012fe:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 800130c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001310:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_FDCAN_MspInit+0x19c>)
 800131c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001328:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800132c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001342:	2309      	movs	r3, #9
 8001344:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800134c:	4619      	mov	r1, r3
 800134e:	4808      	ldr	r0, [pc, #32]	@ (8001370 <HAL_FDCAN_MspInit+0x1a8>)
 8001350:	f005 f89a 	bl	8006488 <HAL_GPIO_Init>
}
 8001354:	bf00      	nop
 8001356:	37f0      	adds	r7, #240	@ 0xf0
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	4000a000 	.word	0x4000a000
 8001360:	24000934 	.word	0x24000934
 8001364:	58024400 	.word	0x58024400
 8001368:	58020000 	.word	0x58020000
 800136c:	4000a400 	.word	0x4000a400
 8001370:	58020400 	.word	0x58020400

08001374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b0c0      	sub	sp, #256	@ 0x100
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800138c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001390:	22c0      	movs	r2, #192	@ 0xc0
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f009 fc6d 	bl	800ac74 <memset>
  if(hi2c->Instance==I2C1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a86      	ldr	r2, [pc, #536]	@ (80015b8 <HAL_I2C_MspInit+0x244>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d146      	bne.n	8001432 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013a4:	f04f 0208 	mov.w	r2, #8
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ba:	4618      	mov	r0, r3
 80013bc:	f006 fb5e 	bl	8007a7c <HAL_RCCEx_PeriphCLKConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013c6:	f7ff fdf1 	bl	8000fac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	4b7c      	ldr	r3, [pc, #496]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 80013cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013d0:	4a7a      	ldr	r2, [pc, #488]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 80013d2:	f043 0302 	orr.w	r3, r3, #2
 80013d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013da:	4b78      	ldr	r3, [pc, #480]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 80013dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e8:	23c0      	movs	r3, #192	@ 0xc0
 80013ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ee:	2312      	movs	r3, #18
 80013f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001400:	2304      	movs	r3, #4
 8001402:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800140a:	4619      	mov	r1, r3
 800140c:	486c      	ldr	r0, [pc, #432]	@ (80015c0 <HAL_I2C_MspInit+0x24c>)
 800140e:	f005 f83b 	bl	8006488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001412:	4b6a      	ldr	r3, [pc, #424]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001414:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001418:	4a68      	ldr	r2, [pc, #416]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 800141a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800141e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001422:	4b66      	ldr	r3, [pc, #408]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001424:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800142c:	623b      	str	r3, [r7, #32]
 800142e:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001430:	e0bd      	b.n	80015ae <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a63      	ldr	r2, [pc, #396]	@ (80015c4 <HAL_I2C_MspInit+0x250>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d16c      	bne.n	8001516 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800143c:	f04f 0208 	mov.w	r2, #8
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001452:	4618      	mov	r0, r3
 8001454:	f006 fb12 	bl	8007a7c <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800145e:	f7ff fda5 	bl	8000fac <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b56      	ldr	r3, [pc, #344]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001464:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001468:	4a54      	ldr	r2, [pc, #336]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001472:	4b52      	ldr	r3, [pc, #328]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001474:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b4e      	ldr	r3, [pc, #312]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001482:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001486:	4a4d      	ldr	r2, [pc, #308]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001490:	4b4a      	ldr	r3, [pc, #296]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001492:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800149e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a6:	2312      	movs	r3, #18
 80014a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014b8:	2304      	movs	r3, #4
 80014ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014be:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80014c2:	4619      	mov	r1, r3
 80014c4:	4840      	ldr	r0, [pc, #256]	@ (80015c8 <HAL_I2C_MspInit+0x254>)
 80014c6:	f004 ffdf 	bl	8006488 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	2312      	movs	r3, #18
 80014d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014e4:	2304      	movs	r3, #4
 80014e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80014ee:	4619      	mov	r1, r3
 80014f0:	4836      	ldr	r0, [pc, #216]	@ (80015cc <HAL_I2C_MspInit+0x258>)
 80014f2:	f004 ffc9 	bl	8006488 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014f6:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 80014f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014fc:	4a2f      	ldr	r2, [pc, #188]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 80014fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001502:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001506:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001508:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800150c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
}
 8001514:	e04b      	b.n	80015ae <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a2d      	ldr	r2, [pc, #180]	@ (80015d0 <HAL_I2C_MspInit+0x25c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d146      	bne.n	80015ae <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001520:	f04f 0210 	mov.w	r2, #16
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001536:	4618      	mov	r0, r3
 8001538:	f006 faa0 	bl	8007a7c <HAL_RCCEx_PeriphCLKConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8001542:	f7ff fd33 	bl	8000fac <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001548:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800154c:	4a1b      	ldr	r2, [pc, #108]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001558:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001564:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001568:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156c:	2312      	movs	r3, #18
 800156e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800157e:	2306      	movs	r3, #6
 8001580:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001588:	4619      	mov	r1, r3
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <HAL_I2C_MspInit+0x24c>)
 800158c:	f004 ff7c 	bl	8006488 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001592:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001596:	4a09      	ldr	r2, [pc, #36]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 8001598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800159c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_I2C_MspInit+0x248>)
 80015a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80015a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
}
 80015ae:	bf00      	nop
 80015b0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40005400 	.word	0x40005400
 80015bc:	58024400 	.word	0x58024400
 80015c0:	58020400 	.word	0x58020400
 80015c4:	40005c00 	.word	0x40005c00
 80015c8:	58020800 	.word	0x58020800
 80015cc:	58020000 	.word	0x58020000
 80015d0:	58001c00 	.word	0x58001c00

080015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <HAL_TIM_Base_MspInit+0x48>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d116      	bne.n	8001614 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <HAL_TIM_Base_MspInit+0x4c>)
 80015e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001620 <HAL_TIM_Base_MspInit+0x4c>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_TIM_Base_MspInit+0x4c>)
 80015f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	201d      	movs	r0, #29
 800160a:	f001 fc36 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800160e:	201d      	movs	r0, #29
 8001610:	f001 fc4d 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40000400 	.word	0x40000400
 8001620:	58024400 	.word	0x58024400

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167a:	f000 f96f 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}

08001682 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001696:	f002 fa1d 	bl	8003ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	240000a0 	.word	0x240000a0

080016a4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <FDCAN1_IT0_IRQHandler+0x10>)
 80016aa:	f004 f9f1 	bl	8005a90 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000118 	.word	0x24000118

080016b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <TIM3_IRQHandler+0x2c>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <TIM3_IRQHandler+0x2c>)
 80016c6:	801a      	strh	r2, [r3, #0]
	if(millis == 1000){
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <TIM3_IRQHandler+0x2c>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016d0:	d102      	bne.n	80016d8 <TIM3_IRQHandler+0x20>
		CAN_enable = 1;
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <TIM3_IRQHandler+0x30>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <TIM3_IRQHandler+0x34>)
 80016da:	f008 fea9 	bl	800a430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	240008e4 	.word	0x240008e4
 80016e8:	240008e6 	.word	0x240008e6
 80016ec:	24000354 	.word	0x24000354

080016f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016f4:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <SystemInit+0xd8>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fa:	4a33      	ldr	r2, [pc, #204]	@ (80017c8 <SystemInit+0xd8>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001704:	4b31      	ldr	r3, [pc, #196]	@ (80017cc <SystemInit+0xdc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	2b02      	cmp	r3, #2
 800170e:	d807      	bhi.n	8001720 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001710:	4b2e      	ldr	r3, [pc, #184]	@ (80017cc <SystemInit+0xdc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 030f 	bic.w	r3, r3, #15
 8001718:	4a2c      	ldr	r2, [pc, #176]	@ (80017cc <SystemInit+0xdc>)
 800171a:	f043 0303 	orr.w	r3, r3, #3
 800171e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001720:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <SystemInit+0xe0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a2a      	ldr	r2, [pc, #168]	@ (80017d0 <SystemInit+0xe0>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800172c:	4b28      	ldr	r3, [pc, #160]	@ (80017d0 <SystemInit+0xe0>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001732:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <SystemInit+0xe0>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4926      	ldr	r1, [pc, #152]	@ (80017d0 <SystemInit+0xe0>)
 8001738:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <SystemInit+0xe4>)
 800173a:	4013      	ands	r3, r2
 800173c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800173e:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <SystemInit+0xdc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800174a:	4b20      	ldr	r3, [pc, #128]	@ (80017cc <SystemInit+0xdc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 030f 	bic.w	r3, r3, #15
 8001752:	4a1e      	ldr	r2, [pc, #120]	@ (80017cc <SystemInit+0xdc>)
 8001754:	f043 0303 	orr.w	r3, r3, #3
 8001758:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800175a:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <SystemInit+0xe0>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001760:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <SystemInit+0xe0>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <SystemInit+0xe0>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800176c:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <SystemInit+0xe0>)
 800176e:	4a1a      	ldr	r2, [pc, #104]	@ (80017d8 <SystemInit+0xe8>)
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001772:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <SystemInit+0xe0>)
 8001774:	4a19      	ldr	r2, [pc, #100]	@ (80017dc <SystemInit+0xec>)
 8001776:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001778:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <SystemInit+0xe0>)
 800177a:	4a19      	ldr	r2, [pc, #100]	@ (80017e0 <SystemInit+0xf0>)
 800177c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800177e:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <SystemInit+0xe0>)
 8001780:	2200      	movs	r2, #0
 8001782:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <SystemInit+0xe0>)
 8001786:	4a16      	ldr	r2, [pc, #88]	@ (80017e0 <SystemInit+0xf0>)
 8001788:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <SystemInit+0xe0>)
 800178c:	2200      	movs	r2, #0
 800178e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001790:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <SystemInit+0xe0>)
 8001792:	4a13      	ldr	r2, [pc, #76]	@ (80017e0 <SystemInit+0xf0>)
 8001794:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <SystemInit+0xe0>)
 8001798:	2200      	movs	r2, #0
 800179a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <SystemInit+0xe0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <SystemInit+0xe0>)
 80017a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017a8:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <SystemInit+0xe0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <SystemInit+0xf4>)
 80017b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80017b6:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <SystemInit+0xd8>)
 80017b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017bc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	52002000 	.word	0x52002000
 80017d0:	58024400 	.word	0x58024400
 80017d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80017d8:	02020200 	.word	0x02020200
 80017dc:	01ff0000 	.word	0x01ff0000
 80017e0:	01010280 	.word	0x01010280
 80017e4:	52004000 	.word	0x52004000

080017e8 <TF_3V3>:
#include "transfer_functions.h"
#include "functions.h"
#include "main.h"
#include "config.h"

uint16_t TF_3V3(uint8_t bytes, uint32_t raw){
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 3300;
 80017f4:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80017f8:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 80017fa:	89fb      	ldrh	r3, [r7, #14]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	fb03 f202 	mul.w	r2, r3, r2
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <TF_3V3+0x38>)
 8001804:	fba3 1302 	umull	r1, r3, r3, r2
 8001808:	1ad2      	subs	r2, r2, r3
 800180a:	0852      	lsrs	r2, r2, #1
 800180c:	4413      	add	r3, r2
 800180e:	0adb      	lsrs	r3, r3, #11
 8001810:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001812:	89bb      	ldrh	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	00100101 	.word	0x00100101

08001824 <Reset_Handler>:
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800185c <LoopFillZerobss+0xe>
 8001828:	f7ff ff62 	bl	80016f0 <SystemInit>
 800182c:	480c      	ldr	r0, [pc, #48]	@ (8001860 <LoopFillZerobss+0x12>)
 800182e:	490d      	ldr	r1, [pc, #52]	@ (8001864 <LoopFillZerobss+0x16>)
 8001830:	4a0d      	ldr	r2, [pc, #52]	@ (8001868 <LoopFillZerobss+0x1a>)
 8001832:	2300      	movs	r3, #0
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:
 8001836:	58d4      	ldr	r4, [r2, r3]
 8001838:	50c4      	str	r4, [r0, r3]
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:
 800183c:	18c4      	adds	r4, r0, r3
 800183e:	428c      	cmp	r4, r1
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
 8001842:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <LoopFillZerobss+0x1e>)
 8001844:	4c0a      	ldr	r4, [pc, #40]	@ (8001870 <LoopFillZerobss+0x22>)
 8001846:	2300      	movs	r3, #0
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:
 800184e:	42a2      	cmp	r2, r4
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>
 8001852:	f009 fa17 	bl	800ac84 <__libc_init_array>
 8001856:	f7fe fe15 	bl	8000484 <main>
 800185a:	4770      	bx	lr
 800185c:	24100000 	.word	0x24100000
 8001860:	24000000 	.word	0x24000000
 8001864:	24000010 	.word	0x24000010
 8001868:	0800ad7c 	.word	0x0800ad7c
 800186c:	24000010 	.word	0x24000010
 8001870:	2400093c 	.word	0x2400093c

08001874 <ADC_IRQHandler>:
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187e:	2003      	movs	r0, #3
 8001880:	f001 faf0 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001884:	f005 ff3a 	bl	80076fc <HAL_RCC_GetSysClockFreq>
 8001888:	4602      	mov	r2, r0
 800188a:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <HAL_Init+0x68>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	4913      	ldr	r1, [pc, #76]	@ (80018e4 <HAL_Init+0x6c>)
 8001896:	5ccb      	ldrb	r3, [r1, r3]
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_Init+0x68>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	4a0e      	ldr	r2, [pc, #56]	@ (80018e4 <HAL_Init+0x6c>)
 80018ac:	5cd3      	ldrb	r3, [r2, r3]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	4a0b      	ldr	r2, [pc, #44]	@ (80018e8 <HAL_Init+0x70>)
 80018ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018bc:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <HAL_Init+0x74>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c2:	200f      	movs	r0, #15
 80018c4:	f000 f814 	bl	80018f0 <HAL_InitTick>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e002      	b.n	80018d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018d2:	f7ff fb71 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	58024400 	.word	0x58024400
 80018e4:	0800ad4c 	.word	0x0800ad4c
 80018e8:	24000004 	.word	0x24000004
 80018ec:	24000000 	.word	0x24000000

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_InitTick+0x60>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e021      	b.n	8001948 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001904:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <HAL_InitTick+0x64>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <HAL_InitTick+0x60>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f001 fad5 	bl	8002eca <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00e      	b.n	8001948 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d80a      	bhi.n	8001946 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f001 fa9f 	bl	8002e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800193c:	4a06      	ldr	r2, [pc, #24]	@ (8001958 <HAL_InitTick+0x68>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	2400000c 	.word	0x2400000c
 8001954:	24000000 	.word	0x24000000
 8001958:	24000008 	.word	0x24000008

0800195c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_IncTick+0x20>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <HAL_IncTick+0x24>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <HAL_IncTick+0x24>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	2400000c 	.word	0x2400000c
 8001980:	24000938 	.word	0x24000938

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	@ (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	24000938 	.word	0x24000938

0800199c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3360      	adds	r3, #96	@ 0x60
 8001a16:	461a      	mov	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	430b      	orrs	r3, r1
 8001a32:	431a      	orrs	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a38:	bf00      	nop
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	431a      	orrs	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	611a      	str	r2, [r3, #16]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b087      	sub	sp, #28
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3360      	adds	r3, #96	@ 0x60
 8001a86:	461a      	mov	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	601a      	str	r2, [r3, #0]
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b087      	sub	sp, #28
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3330      	adds	r3, #48	@ 0x30
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	4413      	add	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	211f      	movs	r1, #31
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	401a      	ands	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0e9b      	lsrs	r3, r3, #26
 8001b0a:	f003 011f 	and.w	r1, r3, #31
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b1e:	bf00      	nop
 8001b20:	371c      	adds	r7, #28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f023 0203 	bic.w	r2, r3, #3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	60da      	str	r2, [r3, #12]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3314      	adds	r3, #20
 8001b60:	461a      	mov	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	0e5b      	lsrs	r3, r3, #25
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	4413      	add	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	0d1b      	lsrs	r3, r3, #20
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	2107      	movs	r1, #7
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	401a      	ands	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	0d1b      	lsrs	r3, r3, #20
 8001b8a:	f003 031f 	and.w	r3, r3, #31
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	431a      	orrs	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b9a:	bf00      	nop
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0318 	and.w	r3, r3, #24
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bcc:	40d9      	lsrs	r1, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	400b      	ands	r3, r1
 8001bd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	000fffff 	.word	0x000fffff

08001bf0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6093      	str	r3, [r2, #8]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	5fffffc0 	.word	0x5fffffc0

08001c30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c44:	d101      	bne.n	8001c4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <LL_ADC_EnableInternalRegulator+0x24>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	6fffffc0 	.word	0x6fffffc0

08001c80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c94:	d101      	bne.n	8001c9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <LL_ADC_Enable+0x24>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	7fffffc0 	.word	0x7fffffc0

08001cd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <LL_ADC_IsEnabled+0x18>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <LL_ADC_IsEnabled+0x1a>
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <LL_ADC_REG_StartConversion+0x24>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	f043 0204 	orr.w	r2, r3, #4
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	7fffffc0 	.word	0x7fffffc0

08001d20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d101      	bne.n	8001d38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d101      	bne.n	8001d5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b089      	sub	sp, #36	@ 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e138      	b.n	8001ff8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff f92f 	bl	8000ff8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff3f 	bl	8001c30 <LL_ADC_IsDeepPowerDownEnabled>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d004      	beq.n	8001dc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff25 	bl	8001c0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff5a 	bl	8001c80 <LL_ADC_IsInternalRegulatorEnabled>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d114      	bne.n	8001dfc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff3e 	bl	8001c58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ddc:	4b88      	ldr	r3, [pc, #544]	@ (8002000 <HAL_ADC_Init+0x294>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	099b      	lsrs	r3, r3, #6
 8001de2:	4a88      	ldr	r2, [pc, #544]	@ (8002004 <HAL_ADC_Init+0x298>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	3301      	adds	r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dee:	e002      	b.n	8001df6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f9      	bne.n	8001df0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff3d 	bl	8001c80 <LL_ADC_IsInternalRegulatorEnabled>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10d      	bne.n	8001e28 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e10:	f043 0210 	orr.w	r2, r3, #16
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	f043 0201 	orr.w	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff77 	bl	8001d20 <LL_ADC_REG_IsConversionOngoing>
 8001e32:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f040 80d2 	bne.w	8001fe6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f040 80ce 	bne.w	8001fe6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e52:	f043 0202 	orr.w	r2, r3, #2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff36 	bl	8001cd0 <LL_ADC_IsEnabled>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d110      	bne.n	8001e8c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e6a:	4867      	ldr	r0, [pc, #412]	@ (8002008 <HAL_ADC_Init+0x29c>)
 8001e6c:	f7ff ff30 	bl	8001cd0 <LL_ADC_IsEnabled>
 8001e70:	4604      	mov	r4, r0
 8001e72:	4866      	ldr	r0, [pc, #408]	@ (800200c <HAL_ADC_Init+0x2a0>)
 8001e74:	f7ff ff2c 	bl	8001cd0 <LL_ADC_IsEnabled>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4323      	orrs	r3, r4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4619      	mov	r1, r3
 8001e86:	4862      	ldr	r0, [pc, #392]	@ (8002010 <HAL_ADC_Init+0x2a4>)
 8001e88:	f7ff fd88 	bl	800199c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7d5b      	ldrb	r3, [r3, #21]
 8001e90:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e96:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001e9c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7f1b      	ldrb	r3, [r3, #28]
 8001ea2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7f1b      	ldrb	r3, [r3, #28]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d106      	bne.n	8001ebe <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	045b      	lsls	r3, r3, #17
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8002014 <HAL_ADC_Init+0x2a8>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	69b9      	ldr	r1, [r7, #24]
 8001eea:	430b      	orrs	r3, r1
 8001eec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff14 	bl	8001d20 <LL_ADC_REG_IsConversionOngoing>
 8001ef8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff21 	bl	8001d46 <LL_ADC_INJ_IsConversionOngoing>
 8001f04:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d14a      	bne.n	8001fa2 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d147      	bne.n	8001fa2 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7d1b      	ldrb	r3, [r3, #20]
 8001f16:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	4b3c      	ldr	r3, [pc, #240]	@ (8002018 <HAL_ADC_Init+0x2ac>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	69b9      	ldr	r1, [r7, #24]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d11b      	bne.n	8001f76 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	4b34      	ldr	r3, [pc, #208]	@ (800201c <HAL_ADC_Init+0x2b0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f52:	3a01      	subs	r2, #1
 8001f54:	0411      	lsls	r1, r2, #16
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f60:	4311      	orrs	r1, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f66:	430a      	orrs	r2, r1
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	611a      	str	r2, [r3, #16]
 8001f74:	e007      	b.n	8001f86 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fd01 	bl	80029a4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb0:	f023 010f 	bic.w	r1, r3, #15
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fc2:	e007      	b.n	8001fd4 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 020f 	bic.w	r2, r2, #15
 8001fd2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd8:	f023 0303 	bic.w	r3, r3, #3
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fe4:	e007      	b.n	8001ff6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3724      	adds	r7, #36	@ 0x24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	24000000 	.word	0x24000000
 8002004:	053e2d63 	.word	0x053e2d63
 8002008:	40022000 	.word	0x40022000
 800200c:	40022100 	.word	0x40022100
 8002010:	40022300 	.word	0x40022300
 8002014:	fff0c003 	.word	0xfff0c003
 8002018:	ffffbffc 	.word	0xffffbffc
 800201c:	fc00f81e 	.word	0xfc00f81e

08002020 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800202c:	484f      	ldr	r0, [pc, #316]	@ (800216c <HAL_ADC_Start_DMA+0x14c>)
 800202e:	f7ff fddf 	bl	8001bf0 <LL_ADC_GetMultimode>
 8002032:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fe71 	bl	8001d20 <LL_ADC_REG_IsConversionOngoing>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	f040 808c 	bne.w	800215e <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_ADC_Start_DMA+0x34>
 8002050:	2302      	movs	r3, #2
 8002052:	e087      	b.n	8002164 <HAL_ADC_Start_DMA+0x144>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d002      	beq.n	800206e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b09      	cmp	r3, #9
 800206c:	d170      	bne.n	8002150 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 fb88 	bl	8002784 <ADC_Enable>
 8002074:	4603      	mov	r3, r0
 8002076:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d163      	bne.n	8002146 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002082:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <HAL_ADC_Start_DMA+0x150>)
 8002084:	4013      	ands	r3, r2
 8002086:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a38      	ldr	r2, [pc, #224]	@ (8002174 <HAL_ADC_Start_DMA+0x154>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d002      	beq.n	800209e <HAL_ADC_Start_DMA+0x7e>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	e000      	b.n	80020a0 <HAL_ADC_Start_DMA+0x80>
 800209e:	4b36      	ldr	r3, [pc, #216]	@ (8002178 <HAL_ADC_Start_DMA+0x158>)
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d002      	beq.n	80020ae <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	f023 0206 	bic.w	r2, r3, #6
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80020d2:	e002      	b.n	80020da <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020de:	4a27      	ldr	r2, [pc, #156]	@ (800217c <HAL_ADC_Start_DMA+0x15c>)
 80020e0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	4a26      	ldr	r2, [pc, #152]	@ (8002180 <HAL_ADC_Start_DMA+0x160>)
 80020e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ee:	4a25      	ldr	r2, [pc, #148]	@ (8002184 <HAL_ADC_Start_DMA+0x164>)
 80020f0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	221c      	movs	r2, #28
 80020f8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0210 	orr.w	r2, r2, #16
 8002110:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211a:	4619      	mov	r1, r3
 800211c:	4610      	mov	r0, r2
 800211e:	f7ff fd04 	bl	8001b2a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	3340      	adds	r3, #64	@ 0x40
 800212c:	4619      	mov	r1, r3
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f001 fa65 	bl	8003600 <HAL_DMA_Start_IT>
 8002136:	4603      	mov	r3, r0
 8002138:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fdda 	bl	8001cf8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002144:	e00d      	b.n	8002162 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800214e:	e008      	b.n	8002162 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800215c:	e001      	b.n	8002162 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800215e:	2302      	movs	r3, #2
 8002160:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002162:	7dfb      	ldrb	r3, [r7, #23]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40022300 	.word	0x40022300
 8002170:	fffff0fe 	.word	0xfffff0fe
 8002174:	40022100 	.word	0x40022100
 8002178:	40022000 	.word	0x40022000
 800217c:	0800287d 	.word	0x0800287d
 8002180:	08002955 	.word	0x08002955
 8002184:	08002971 	.word	0x08002971

08002188 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b0a1      	sub	sp, #132	@ 0x84
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a95      	ldr	r2, [pc, #596]	@ (8002420 <HAL_ADC_ConfigChannel+0x270>)
 80021ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x2a>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e2c0      	b.n	800275c <HAL_ADC_ConfigChannel+0x5ac>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fd9a 	bl	8001d20 <LL_ADC_REG_IsConversionOngoing>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 82a5 	bne.w	800273e <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db2c      	blt.n	8002256 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002204:	2b00      	cmp	r3, #0
 8002206:	d108      	bne.n	800221a <HAL_ADC_ConfigChannel+0x6a>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	2201      	movs	r2, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	e016      	b.n	8002248 <HAL_ADC_ConfigChannel+0x98>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800222a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800222c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002232:	2320      	movs	r3, #32
 8002234:	e003      	b.n	800223e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002236:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2201      	movs	r2, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	69d1      	ldr	r1, [r2, #28]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	430b      	orrs	r3, r1
 8002254:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6859      	ldr	r1, [r3, #4]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	f7ff fc35 	bl	8001ad2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fd57 	bl	8001d20 <LL_ADC_REG_IsConversionOngoing>
 8002272:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fd64 	bl	8001d46 <LL_ADC_INJ_IsConversionOngoing>
 800227e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 80a0 	bne.w	80023c8 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002288:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 809c 	bne.w	80023c8 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6819      	ldr	r1, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	461a      	mov	r2, r3
 800229e:	f7ff fc57 	bl	8001b50 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10b      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x118>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	e00a      	b.n	80022de <HAL_ADC_ConfigChannel+0x12e>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d027      	beq.n	8002338 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6919      	ldr	r1, [r3, #16]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022f6:	f7ff fb85 	bl	8001a04 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6919      	ldr	r1, [r3, #16]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	7e5b      	ldrb	r3, [r3, #25]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d102      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x160>
 800230a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800230e:	e000      	b.n	8002312 <HAL_ADC_ConfigChannel+0x162>
 8002310:	2300      	movs	r3, #0
 8002312:	461a      	mov	r2, r3
 8002314:	f7ff fbaf 	bl	8001a76 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6919      	ldr	r1, [r3, #16]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	7e1b      	ldrb	r3, [r3, #24]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d102      	bne.n	800232e <HAL_ADC_ConfigChannel+0x17e>
 8002328:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800232c:	e000      	b.n	8002330 <HAL_ADC_ConfigChannel+0x180>
 800232e:	2300      	movs	r3, #0
 8002330:	461a      	mov	r2, r3
 8002332:	f7ff fb87 	bl	8001a44 <LL_ADC_SetDataRightShift>
 8002336:	e047      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	069b      	lsls	r3, r3, #26
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800235a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002362:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	069b      	lsls	r3, r3, #26
 800236c:	429a      	cmp	r2, r3
 800236e:	d107      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800237e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002386:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	069b      	lsls	r3, r3, #26
 8002390:	429a      	cmp	r2, r3
 8002392:	d107      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023a2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	069b      	lsls	r3, r3, #26
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fc7f 	bl	8001cd0 <LL_ADC_IsEnabled>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f040 81bb 	bne.w	8002750 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6819      	ldr	r1, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f7ff fbde 	bl	8001ba8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002420 <HAL_ADC_ConfigChannel+0x270>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	f040 8130 	bne.w	8002658 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10d      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x274>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0e9b      	lsrs	r3, r3, #26
 800240e:	3301      	adds	r3, #1
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	2b09      	cmp	r3, #9
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e01b      	b.n	8002458 <HAL_ADC_ConfigChannel+0x2a8>
 8002420:	47ff0000 	.word	0x47ff0000
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002434:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002440:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2b09      	cmp	r3, #9
 8002450:	bf94      	ite	ls
 8002452:	2301      	movls	r3, #1
 8002454:	2300      	movhi	r3, #0
 8002456:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002458:	2b00      	cmp	r3, #0
 800245a:	d079      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x2c8>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0e9b      	lsrs	r3, r3, #26
 800246e:	3301      	adds	r3, #1
 8002470:	069b      	lsls	r3, r3, #26
 8002472:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002476:	e015      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x2f4>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002488:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800248a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e003      	b.n	800249c <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3301      	adds	r3, #1
 800249e:	069b      	lsls	r3, r3, #26
 80024a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x314>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	3301      	adds	r3, #1
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2101      	movs	r1, #1
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	e017      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x344>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80024dc:	2320      	movs	r3, #32
 80024de:	e003      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 80024e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	2101      	movs	r1, #1
 80024f0:	fa01 f303 	lsl.w	r3, r1, r3
 80024f4:	ea42 0103 	orr.w	r1, r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <HAL_ADC_ConfigChannel+0x36a>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0e9b      	lsrs	r3, r3, #26
 800250a:	3301      	adds	r3, #1
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	051b      	lsls	r3, r3, #20
 8002518:	e018      	b.n	800254c <HAL_ADC_ConfigChannel+0x39c>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002532:	2320      	movs	r3, #32
 8002534:	e003      	b.n	800253e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800254c:	430b      	orrs	r3, r1
 800254e:	e07e      	b.n	800264e <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <HAL_ADC_ConfigChannel+0x3bc>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	3301      	adds	r3, #1
 8002564:	069b      	lsls	r3, r3, #26
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800256a:	e015      	b.n	8002598 <HAL_ADC_ConfigChannel+0x3e8>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800257e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002584:	2320      	movs	r3, #32
 8002586:	e003      	b.n	8002590 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	069b      	lsls	r3, r3, #26
 8002594:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x408>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	3301      	adds	r3, #1
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	e017      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x438>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	61bb      	str	r3, [r7, #24]
  return result;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e003      	b.n	80025dc <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	ea42 0103 	orr.w	r1, r2, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10d      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x464>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	3301      	adds	r3, #1
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	3b1e      	subs	r3, #30
 800260c:	051b      	lsls	r3, r3, #20
 800260e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002612:	e01b      	b.n	800264c <HAL_ADC_ConfigChannel+0x49c>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	60fb      	str	r3, [r7, #12]
  return result;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e003      	b.n	8002638 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	3301      	adds	r3, #1
 800263a:	f003 021f 	and.w	r2, r3, #31
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	3b1e      	subs	r3, #30
 8002646:	051b      	lsls	r3, r3, #20
 8002648:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264c:	430b      	orrs	r3, r1
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	6892      	ldr	r2, [r2, #8]
 8002652:	4619      	mov	r1, r3
 8002654:	f7ff fa7c 	bl	8001b50 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da77      	bge.n	8002750 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002660:	4840      	ldr	r0, [pc, #256]	@ (8002764 <HAL_ADC_ConfigChannel+0x5b4>)
 8002662:	f7ff f9c1 	bl	80019e8 <LL_ADC_GetCommonPathInternalCh>
 8002666:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002668:	483f      	ldr	r0, [pc, #252]	@ (8002768 <HAL_ADC_ConfigChannel+0x5b8>)
 800266a:	f7ff fb31 	bl	8001cd0 <LL_ADC_IsEnabled>
 800266e:	4604      	mov	r4, r0
 8002670:	483e      	ldr	r0, [pc, #248]	@ (800276c <HAL_ADC_ConfigChannel+0x5bc>)
 8002672:	f7ff fb2d 	bl	8001cd0 <LL_ADC_IsEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	4323      	orrs	r3, r4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d155      	bne.n	800272a <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a3b      	ldr	r2, [pc, #236]	@ (8002770 <HAL_ADC_ConfigChannel+0x5c0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d122      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x51e>
 8002688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800268a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11d      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a35      	ldr	r2, [pc, #212]	@ (800276c <HAL_ADC_ConfigChannel+0x5bc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d159      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800269c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800269e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026a2:	4619      	mov	r1, r3
 80026a4:	482f      	ldr	r0, [pc, #188]	@ (8002764 <HAL_ADC_ConfigChannel+0x5b4>)
 80026a6:	f7ff f98c 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026aa:	4b32      	ldr	r3, [pc, #200]	@ (8002774 <HAL_ADC_ConfigChannel+0x5c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	099b      	lsrs	r3, r3, #6
 80026b0:	4a31      	ldr	r2, [pc, #196]	@ (8002778 <HAL_ADC_ConfigChannel+0x5c8>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	099b      	lsrs	r3, r3, #6
 80026b8:	3301      	adds	r3, #1
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026be:	e002      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f9      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026cc:	e040      	b.n	8002750 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a2a      	ldr	r2, [pc, #168]	@ (800277c <HAL_ADC_ConfigChannel+0x5cc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d111      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x54c>
 80026d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a21      	ldr	r2, [pc, #132]	@ (800276c <HAL_ADC_ConfigChannel+0x5bc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d131      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026f2:	4619      	mov	r1, r3
 80026f4:	481b      	ldr	r0, [pc, #108]	@ (8002764 <HAL_ADC_ConfigChannel+0x5b4>)
 80026f6:	f7ff f964 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026fa:	e029      	b.n	8002750 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1f      	ldr	r2, [pc, #124]	@ (8002780 <HAL_ADC_ConfigChannel+0x5d0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d124      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x5a0>
 8002706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11f      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a15      	ldr	r2, [pc, #84]	@ (800276c <HAL_ADC_ConfigChannel+0x5bc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d11a      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800271a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800271c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002720:	4619      	mov	r1, r3
 8002722:	4810      	ldr	r0, [pc, #64]	@ (8002764 <HAL_ADC_ConfigChannel+0x5b4>)
 8002724:	f7ff f94d 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
 8002728:	e012      	b.n	8002750 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800273c:	e008      	b.n	8002750 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002742:	f043 0220 	orr.w	r2, r3, #32
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002758:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800275c:	4618      	mov	r0, r3
 800275e:	3784      	adds	r7, #132	@ 0x84
 8002760:	46bd      	mov	sp, r7
 8002762:	bd90      	pop	{r4, r7, pc}
 8002764:	40022300 	.word	0x40022300
 8002768:	40022000 	.word	0x40022000
 800276c:	40022100 	.word	0x40022100
 8002770:	cb840000 	.word	0xcb840000
 8002774:	24000000 	.word	0x24000000
 8002778:	053e2d63 	.word	0x053e2d63
 800277c:	bac04000 	.word	0xbac04000
 8002780:	cfb80000 	.word	0xcfb80000

08002784 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fa9d 	bl	8001cd0 <LL_ADC_IsEnabled>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d161      	bne.n	8002860 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	4b32      	ldr	r3, [pc, #200]	@ (800286c <ADC_Enable+0xe8>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	f043 0210 	orr.w	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e04d      	b.n	8002862 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fa6c 	bl	8001ca8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027d0:	f7ff f8d8 	bl	8001984 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027d6:	4826      	ldr	r0, [pc, #152]	@ (8002870 <ADC_Enable+0xec>)
 80027d8:	f7ff fa0a 	bl	8001bf0 <LL_ADC_GetMultimode>
 80027dc:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a24      	ldr	r2, [pc, #144]	@ (8002874 <ADC_Enable+0xf0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d002      	beq.n	80027ee <ADC_Enable+0x6a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	e000      	b.n	80027f0 <ADC_Enable+0x6c>
 80027ee:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <ADC_Enable+0xf4>)
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d02c      	beq.n	8002852 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d130      	bne.n	8002860 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027fe:	e028      	b.n	8002852 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fa63 	bl	8001cd0 <LL_ADC_IsEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fa47 	bl	8001ca8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800281a:	f7ff f8b3 	bl	8001984 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d914      	bls.n	8002852 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d00d      	beq.n	8002852 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e007      	b.n	8002862 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d1cf      	bne.n	8002800 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	8000003f 	.word	0x8000003f
 8002870:	40022300 	.word	0x40022300
 8002874:	40022100 	.word	0x40022100
 8002878:	40022000 	.word	0x40022000

0800287c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002888:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	d14b      	bne.n	800292e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d021      	beq.n	80028f4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff f8f9 	bl	8001aac <LL_ADC_REG_IsTriggerSourceSWStart>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d032      	beq.n	8002926 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d12b      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d11f      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80028f2:	e018      	b.n	8002926 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d111      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002906:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002912:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7fe fac6 	bl	8000eb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800292c:	e00e      	b.n	800294c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7ff fc2e 	bl	800219c <HAL_ADC_ErrorCallback>
}
 8002940:	e004      	b.n	800294c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002960:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff fc10 	bl	8002188 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002982:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298e:	f043 0204 	orr.w	r2, r3, #4
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7ff fc00 	bl	800219c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80029ac:	4b60      	ldr	r3, [pc, #384]	@ (8002b30 <ADC_ConfigureBoostMode+0x18c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01c      	beq.n	80029f2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029b8:	f005 f81a 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 80029bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029c6:	d010      	beq.n	80029ea <ADC_ConfigureBoostMode+0x46>
 80029c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029cc:	d873      	bhi.n	8002ab6 <ADC_ConfigureBoostMode+0x112>
 80029ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d2:	d002      	beq.n	80029da <ADC_ConfigureBoostMode+0x36>
 80029d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029d8:	d16d      	bne.n	8002ab6 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0c1b      	lsrs	r3, r3, #16
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	60fb      	str	r3, [r7, #12]
        break;
 80029e8:	e068      	b.n	8002abc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	60fb      	str	r3, [r7, #12]
        break;
 80029f0:	e064      	b.n	8002abc <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029f2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	f006 f9fd 	bl	8008df8 <HAL_RCCEx_GetPeriphCLKFreq>
 80029fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002a08:	d051      	beq.n	8002aae <ADC_ConfigureBoostMode+0x10a>
 8002a0a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002a0e:	d854      	bhi.n	8002aba <ADC_ConfigureBoostMode+0x116>
 8002a10:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a14:	d047      	beq.n	8002aa6 <ADC_ConfigureBoostMode+0x102>
 8002a16:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002a1a:	d84e      	bhi.n	8002aba <ADC_ConfigureBoostMode+0x116>
 8002a1c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a20:	d03d      	beq.n	8002a9e <ADC_ConfigureBoostMode+0xfa>
 8002a22:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002a26:	d848      	bhi.n	8002aba <ADC_ConfigureBoostMode+0x116>
 8002a28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a2c:	d033      	beq.n	8002a96 <ADC_ConfigureBoostMode+0xf2>
 8002a2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a32:	d842      	bhi.n	8002aba <ADC_ConfigureBoostMode+0x116>
 8002a34:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a38:	d029      	beq.n	8002a8e <ADC_ConfigureBoostMode+0xea>
 8002a3a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002a3e:	d83c      	bhi.n	8002aba <ADC_ConfigureBoostMode+0x116>
 8002a40:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a44:	d01a      	beq.n	8002a7c <ADC_ConfigureBoostMode+0xd8>
 8002a46:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002a4a:	d836      	bhi.n	8002aba <ADC_ConfigureBoostMode+0x116>
 8002a4c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a50:	d014      	beq.n	8002a7c <ADC_ConfigureBoostMode+0xd8>
 8002a52:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002a56:	d830      	bhi.n	8002aba <ADC_ConfigureBoostMode+0x116>
 8002a58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a5c:	d00e      	beq.n	8002a7c <ADC_ConfigureBoostMode+0xd8>
 8002a5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a62:	d82a      	bhi.n	8002aba <ADC_ConfigureBoostMode+0x116>
 8002a64:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a68:	d008      	beq.n	8002a7c <ADC_ConfigureBoostMode+0xd8>
 8002a6a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a6e:	d824      	bhi.n	8002aba <ADC_ConfigureBoostMode+0x116>
 8002a70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a74:	d002      	beq.n	8002a7c <ADC_ConfigureBoostMode+0xd8>
 8002a76:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a7a:	d11e      	bne.n	8002aba <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	0c9b      	lsrs	r3, r3, #18
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8a:	60fb      	str	r3, [r7, #12]
        break;
 8002a8c:	e016      	b.n	8002abc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	60fb      	str	r3, [r7, #12]
        break;
 8002a94:	e012      	b.n	8002abc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	60fb      	str	r3, [r7, #12]
        break;
 8002a9c:	e00e      	b.n	8002abc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	099b      	lsrs	r3, r3, #6
 8002aa2:	60fb      	str	r3, [r7, #12]
        break;
 8002aa4:	e00a      	b.n	8002abc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	09db      	lsrs	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]
        break;
 8002aac:	e006      	b.n	8002abc <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	60fb      	str	r3, [r7, #12]
        break;
 8002ab4:	e002      	b.n	8002abc <ADC_ConfigureBoostMode+0x118>
        break;
 8002ab6:	bf00      	nop
 8002ab8:	e000      	b.n	8002abc <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002aba:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b34 <ADC_ConfigureBoostMode+0x190>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d808      	bhi.n	8002adc <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ad8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ada:	e025      	b.n	8002b28 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a16      	ldr	r2, [pc, #88]	@ (8002b38 <ADC_ConfigureBoostMode+0x194>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d80a      	bhi.n	8002afa <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	e016      	b.n	8002b28 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a0f      	ldr	r2, [pc, #60]	@ (8002b3c <ADC_ConfigureBoostMode+0x198>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d80a      	bhi.n	8002b18 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b14:	609a      	str	r2, [r3, #8]
}
 8002b16:	e007      	b.n	8002b28 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b26:	609a      	str	r2, [r3, #8]
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40022300 	.word	0x40022300
 8002b34:	005f5e10 	.word	0x005f5e10
 8002b38:	00bebc20 	.word	0x00bebc20
 8002b3c:	017d7840 	.word	0x017d7840

08002b40 <LL_ADC_IsEnabled>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <LL_ADC_IsEnabled+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_ADC_IsEnabled+0x1a>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d101      	bne.n	8002b7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b09f      	sub	sp, #124	@ 0x7c
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e080      	b.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d102      	bne.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	e001      	b.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e05f      	b.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ffb9 	bl	8002b66 <LL_ADC_REG_IsConversionOngoing>
 8002bf4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ffb3 	bl	8002b66 <LL_ADC_REG_IsConversionOngoing>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d141      	bne.n	8002c8a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d13e      	bne.n	8002c8a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c28:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c2a:	4822      	ldr	r0, [pc, #136]	@ (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002c2c:	f7ff ff88 	bl	8002b40 <LL_ADC_IsEnabled>
 8002c30:	4604      	mov	r4, r0
 8002c32:	4821      	ldr	r0, [pc, #132]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002c34:	f7ff ff84 	bl	8002b40 <LL_ADC_IsEnabled>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4323      	orrs	r3, r4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d12e      	bne.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	6811      	ldr	r1, [r2, #0]
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	6892      	ldr	r2, [r2, #8]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c56:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c58:	e021      	b.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c66:	4813      	ldr	r0, [pc, #76]	@ (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002c68:	f7ff ff6a 	bl	8002b40 <LL_ADC_IsEnabled>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	4812      	ldr	r0, [pc, #72]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002c70:	f7ff ff66 	bl	8002b40 <LL_ADC_IsEnabled>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4323      	orrs	r3, r4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d110      	bne.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c86:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c88:	e009      	b.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002c9c:	e000      	b.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c9e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ca8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	377c      	adds	r7, #124	@ 0x7c
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd90      	pop	{r4, r7, pc}
 8002cb4:	40022000 	.word	0x40022000
 8002cb8:	40022100 	.word	0x40022100
 8002cbc:	40022300 	.word	0x40022300
 8002cc0:	fffff0e0 	.word	0xfffff0e0

08002cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <__NVIC_SetPriorityGrouping+0x40>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf2:	4a04      	ldr	r2, [pc, #16]	@ (8002d04 <__NVIC_SetPriorityGrouping+0x40>)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	60d3      	str	r3, [r2, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00
 8002d08:	05fa0000 	.word	0x05fa0000

08002d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d10:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <__NVIC_GetPriorityGrouping+0x18>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0307 	and.w	r3, r3, #7
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4907      	ldr	r1, [pc, #28]	@ (8002d60 <__NVIC_EnableIRQ+0x38>)
 8002d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	@ (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	@ (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	@ 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	@ 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e30:	d301      	bcc.n	8002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <SysTick_Config+0x40>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3e:	210f      	movs	r1, #15
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295
 8002e44:	f7ff ff8e 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <SysTick_Config+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <SysTick_Config+0x40>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff29 	bl	8002cc4 <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e88:	f7ff ff40 	bl	8002d0c <__NVIC_GetPriorityGrouping>
 8002e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff ff90 	bl	8002db8 <NVIC_EncodePriority>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff5f 	bl	8002d64 <__NVIC_SetPriority>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff33 	bl	8002d28 <__NVIC_EnableIRQ>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffa4 	bl	8002e20 <SysTick_Config>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7fe fd4a 	bl	8001984 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e37d      	b.n	80035f8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a66      	ldr	r2, [pc, #408]	@ (800309c <HAL_DMA_Init+0x1b8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d04a      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a65      	ldr	r2, [pc, #404]	@ (80030a0 <HAL_DMA_Init+0x1bc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d045      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a63      	ldr	r2, [pc, #396]	@ (80030a4 <HAL_DMA_Init+0x1c0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d040      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a62      	ldr	r2, [pc, #392]	@ (80030a8 <HAL_DMA_Init+0x1c4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d03b      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a60      	ldr	r2, [pc, #384]	@ (80030ac <HAL_DMA_Init+0x1c8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d036      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a5f      	ldr	r2, [pc, #380]	@ (80030b0 <HAL_DMA_Init+0x1cc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d031      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a5d      	ldr	r2, [pc, #372]	@ (80030b4 <HAL_DMA_Init+0x1d0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02c      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a5c      	ldr	r2, [pc, #368]	@ (80030b8 <HAL_DMA_Init+0x1d4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d027      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a5a      	ldr	r2, [pc, #360]	@ (80030bc <HAL_DMA_Init+0x1d8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d022      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a59      	ldr	r2, [pc, #356]	@ (80030c0 <HAL_DMA_Init+0x1dc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d01d      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a57      	ldr	r2, [pc, #348]	@ (80030c4 <HAL_DMA_Init+0x1e0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d018      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a56      	ldr	r2, [pc, #344]	@ (80030c8 <HAL_DMA_Init+0x1e4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a54      	ldr	r2, [pc, #336]	@ (80030cc <HAL_DMA_Init+0x1e8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a53      	ldr	r2, [pc, #332]	@ (80030d0 <HAL_DMA_Init+0x1ec>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a51      	ldr	r2, [pc, #324]	@ (80030d4 <HAL_DMA_Init+0x1f0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_DMA_Init+0xb8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a50      	ldr	r2, [pc, #320]	@ (80030d8 <HAL_DMA_Init+0x1f4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_DMA_Init+0xbc>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_DMA_Init+0xbe>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 813c 	beq.w	8003220 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a37      	ldr	r2, [pc, #220]	@ (800309c <HAL_DMA_Init+0x1b8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04a      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a36      	ldr	r2, [pc, #216]	@ (80030a0 <HAL_DMA_Init+0x1bc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d045      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a34      	ldr	r2, [pc, #208]	@ (80030a4 <HAL_DMA_Init+0x1c0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d040      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a33      	ldr	r2, [pc, #204]	@ (80030a8 <HAL_DMA_Init+0x1c4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d03b      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a31      	ldr	r2, [pc, #196]	@ (80030ac <HAL_DMA_Init+0x1c8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d036      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a30      	ldr	r2, [pc, #192]	@ (80030b0 <HAL_DMA_Init+0x1cc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d031      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80030b4 <HAL_DMA_Init+0x1d0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02c      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a2d      	ldr	r2, [pc, #180]	@ (80030b8 <HAL_DMA_Init+0x1d4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d027      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a2b      	ldr	r2, [pc, #172]	@ (80030bc <HAL_DMA_Init+0x1d8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2a      	ldr	r2, [pc, #168]	@ (80030c0 <HAL_DMA_Init+0x1dc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <HAL_DMA_Init+0x174>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a28      	ldr	r2, [pc, #160]	@ (80030c4 <HAL_DMA_Init+0x1e0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a27      	ldr	r2, [pc, #156]	@ (80030c8 <HAL_DMA_Init+0x1e4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a25      	ldr	r2, [pc, #148]	@ (80030cc <HAL_DMA_Init+0x1e8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_DMA_Init+0x174>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a24      	ldr	r2, [pc, #144]	@ (80030d0 <HAL_DMA_Init+0x1ec>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_DMA_Init+0x174>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a22      	ldr	r2, [pc, #136]	@ (80030d4 <HAL_DMA_Init+0x1f0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_DMA_Init+0x174>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a21      	ldr	r2, [pc, #132]	@ (80030d8 <HAL_DMA_Init+0x1f4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <HAL_DMA_Init+0x186>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e007      	b.n	800307a <HAL_DMA_Init+0x196>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800307a:	e02f      	b.n	80030dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800307c:	f7fe fc82 	bl	8001984 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b05      	cmp	r3, #5
 8003088:	d928      	bls.n	80030dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2203      	movs	r2, #3
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e2ad      	b.n	80035f8 <HAL_DMA_Init+0x714>
 800309c:	40020010 	.word	0x40020010
 80030a0:	40020028 	.word	0x40020028
 80030a4:	40020040 	.word	0x40020040
 80030a8:	40020058 	.word	0x40020058
 80030ac:	40020070 	.word	0x40020070
 80030b0:	40020088 	.word	0x40020088
 80030b4:	400200a0 	.word	0x400200a0
 80030b8:	400200b8 	.word	0x400200b8
 80030bc:	40020410 	.word	0x40020410
 80030c0:	40020428 	.word	0x40020428
 80030c4:	40020440 	.word	0x40020440
 80030c8:	40020458 	.word	0x40020458
 80030cc:	40020470 	.word	0x40020470
 80030d0:	40020488 	.word	0x40020488
 80030d4:	400204a0 	.word	0x400204a0
 80030d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1c8      	bne.n	800307c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4b73      	ldr	r3, [pc, #460]	@ (80032c4 <HAL_DMA_Init+0x3e0>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003102:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800311a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	2b04      	cmp	r3, #4
 800312e:	d107      	bne.n	8003140 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003138:	4313      	orrs	r3, r2
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b28      	cmp	r3, #40	@ 0x28
 8003146:	d903      	bls.n	8003150 <HAL_DMA_Init+0x26c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b2e      	cmp	r3, #46	@ 0x2e
 800314e:	d91f      	bls.n	8003190 <HAL_DMA_Init+0x2ac>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b3e      	cmp	r3, #62	@ 0x3e
 8003156:	d903      	bls.n	8003160 <HAL_DMA_Init+0x27c>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b42      	cmp	r3, #66	@ 0x42
 800315e:	d917      	bls.n	8003190 <HAL_DMA_Init+0x2ac>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b46      	cmp	r3, #70	@ 0x46
 8003166:	d903      	bls.n	8003170 <HAL_DMA_Init+0x28c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b48      	cmp	r3, #72	@ 0x48
 800316e:	d90f      	bls.n	8003190 <HAL_DMA_Init+0x2ac>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b4e      	cmp	r3, #78	@ 0x4e
 8003176:	d903      	bls.n	8003180 <HAL_DMA_Init+0x29c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b52      	cmp	r3, #82	@ 0x52
 800317e:	d907      	bls.n	8003190 <HAL_DMA_Init+0x2ac>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b73      	cmp	r3, #115	@ 0x73
 8003186:	d905      	bls.n	8003194 <HAL_DMA_Init+0x2b0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b77      	cmp	r3, #119	@ 0x77
 800318e:	d801      	bhi.n	8003194 <HAL_DMA_Init+0x2b0>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_DMA_Init+0x2b2>
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031a0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f023 0307 	bic.w	r3, r3, #7
 80031b8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d117      	bne.n	80031fc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00e      	beq.n	80031fc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f001 fe70 	bl	8004ec4 <DMA_CheckFifoParam>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2240      	movs	r2, #64	@ 0x40
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e1fd      	b.n	80035f8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f001 fdab 	bl	8004d60 <DMA_CalcBaseAndBitshift>
 800320a:	4603      	mov	r3, r0
 800320c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	223f      	movs	r2, #63	@ 0x3f
 8003218:	409a      	lsls	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	e0fd      	b.n	800341c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a28      	ldr	r2, [pc, #160]	@ (80032c8 <HAL_DMA_Init+0x3e4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d04a      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a27      	ldr	r2, [pc, #156]	@ (80032cc <HAL_DMA_Init+0x3e8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d045      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a25      	ldr	r2, [pc, #148]	@ (80032d0 <HAL_DMA_Init+0x3ec>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d040      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a24      	ldr	r2, [pc, #144]	@ (80032d4 <HAL_DMA_Init+0x3f0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d03b      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a22      	ldr	r2, [pc, #136]	@ (80032d8 <HAL_DMA_Init+0x3f4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d036      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a21      	ldr	r2, [pc, #132]	@ (80032dc <HAL_DMA_Init+0x3f8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d031      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1f      	ldr	r2, [pc, #124]	@ (80032e0 <HAL_DMA_Init+0x3fc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02c      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1e      	ldr	r2, [pc, #120]	@ (80032e4 <HAL_DMA_Init+0x400>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d027      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1c      	ldr	r2, [pc, #112]	@ (80032e8 <HAL_DMA_Init+0x404>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d022      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ec <HAL_DMA_Init+0x408>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d01d      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a19      	ldr	r2, [pc, #100]	@ (80032f0 <HAL_DMA_Init+0x40c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d018      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a18      	ldr	r2, [pc, #96]	@ (80032f4 <HAL_DMA_Init+0x410>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a16      	ldr	r2, [pc, #88]	@ (80032f8 <HAL_DMA_Init+0x414>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a15      	ldr	r2, [pc, #84]	@ (80032fc <HAL_DMA_Init+0x418>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d009      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a13      	ldr	r2, [pc, #76]	@ (8003300 <HAL_DMA_Init+0x41c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_DMA_Init+0x3dc>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a12      	ldr	r2, [pc, #72]	@ (8003304 <HAL_DMA_Init+0x420>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d123      	bne.n	8003308 <HAL_DMA_Init+0x424>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e022      	b.n	800330a <HAL_DMA_Init+0x426>
 80032c4:	fe10803f 	.word	0xfe10803f
 80032c8:	48022c08 	.word	0x48022c08
 80032cc:	48022c1c 	.word	0x48022c1c
 80032d0:	48022c30 	.word	0x48022c30
 80032d4:	48022c44 	.word	0x48022c44
 80032d8:	48022c58 	.word	0x48022c58
 80032dc:	48022c6c 	.word	0x48022c6c
 80032e0:	48022c80 	.word	0x48022c80
 80032e4:	48022c94 	.word	0x48022c94
 80032e8:	58025408 	.word	0x58025408
 80032ec:	5802541c 	.word	0x5802541c
 80032f0:	58025430 	.word	0x58025430
 80032f4:	58025444 	.word	0x58025444
 80032f8:	58025458 	.word	0x58025458
 80032fc:	5802546c 	.word	0x5802546c
 8003300:	58025480 	.word	0x58025480
 8003304:	58025494 	.word	0x58025494
 8003308:	2300      	movs	r3, #0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d07d      	beq.n	800340a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7f      	ldr	r2, [pc, #508]	@ (8003510 <HAL_DMA_Init+0x62c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d021      	beq.n	800335c <HAL_DMA_Init+0x478>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a7d      	ldr	r2, [pc, #500]	@ (8003514 <HAL_DMA_Init+0x630>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01c      	beq.n	800335c <HAL_DMA_Init+0x478>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a7c      	ldr	r2, [pc, #496]	@ (8003518 <HAL_DMA_Init+0x634>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d017      	beq.n	800335c <HAL_DMA_Init+0x478>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a7a      	ldr	r2, [pc, #488]	@ (800351c <HAL_DMA_Init+0x638>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d012      	beq.n	800335c <HAL_DMA_Init+0x478>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a79      	ldr	r2, [pc, #484]	@ (8003520 <HAL_DMA_Init+0x63c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00d      	beq.n	800335c <HAL_DMA_Init+0x478>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a77      	ldr	r2, [pc, #476]	@ (8003524 <HAL_DMA_Init+0x640>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d008      	beq.n	800335c <HAL_DMA_Init+0x478>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a76      	ldr	r2, [pc, #472]	@ (8003528 <HAL_DMA_Init+0x644>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <HAL_DMA_Init+0x478>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a74      	ldr	r2, [pc, #464]	@ (800352c <HAL_DMA_Init+0x648>)
 800335a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4b6e      	ldr	r3, [pc, #440]	@ (8003530 <HAL_DMA_Init+0x64c>)
 8003378:	4013      	ands	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b40      	cmp	r3, #64	@ 0x40
 8003382:	d008      	beq.n	8003396 <HAL_DMA_Init+0x4b2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b80      	cmp	r3, #128	@ 0x80
 800338a:	d102      	bne.n	8003392 <HAL_DMA_Init+0x4ae>
 800338c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003390:	e002      	b.n	8003398 <HAL_DMA_Init+0x4b4>
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <HAL_DMA_Init+0x4b4>
 8003396:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	68d2      	ldr	r2, [r2, #12]
 800339c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800339e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80033a6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80033ae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80033b6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80033be:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033c6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	4b55      	ldr	r3, [pc, #340]	@ (8003534 <HAL_DMA_Init+0x650>)
 80033de:	4413      	add	r3, r2
 80033e0:	4a55      	ldr	r2, [pc, #340]	@ (8003538 <HAL_DMA_Init+0x654>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	009a      	lsls	r2, r3, #2
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f001 fcb6 	bl	8004d60 <DMA_CalcBaseAndBitshift>
 80033f4:	4603      	mov	r3, r0
 80033f6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	2201      	movs	r2, #1
 8003402:	409a      	lsls	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	e008      	b.n	800341c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2240      	movs	r2, #64	@ 0x40
 800340e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2203      	movs	r2, #3
 8003414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0ed      	b.n	80035f8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a46      	ldr	r2, [pc, #280]	@ (800353c <HAL_DMA_Init+0x658>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d072      	beq.n	800350c <HAL_DMA_Init+0x628>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a45      	ldr	r2, [pc, #276]	@ (8003540 <HAL_DMA_Init+0x65c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d06d      	beq.n	800350c <HAL_DMA_Init+0x628>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a43      	ldr	r2, [pc, #268]	@ (8003544 <HAL_DMA_Init+0x660>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d068      	beq.n	800350c <HAL_DMA_Init+0x628>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a42      	ldr	r2, [pc, #264]	@ (8003548 <HAL_DMA_Init+0x664>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d063      	beq.n	800350c <HAL_DMA_Init+0x628>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a40      	ldr	r2, [pc, #256]	@ (800354c <HAL_DMA_Init+0x668>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d05e      	beq.n	800350c <HAL_DMA_Init+0x628>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a3f      	ldr	r2, [pc, #252]	@ (8003550 <HAL_DMA_Init+0x66c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d059      	beq.n	800350c <HAL_DMA_Init+0x628>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a3d      	ldr	r2, [pc, #244]	@ (8003554 <HAL_DMA_Init+0x670>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d054      	beq.n	800350c <HAL_DMA_Init+0x628>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a3c      	ldr	r2, [pc, #240]	@ (8003558 <HAL_DMA_Init+0x674>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d04f      	beq.n	800350c <HAL_DMA_Init+0x628>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3a      	ldr	r2, [pc, #232]	@ (800355c <HAL_DMA_Init+0x678>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d04a      	beq.n	800350c <HAL_DMA_Init+0x628>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a39      	ldr	r2, [pc, #228]	@ (8003560 <HAL_DMA_Init+0x67c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d045      	beq.n	800350c <HAL_DMA_Init+0x628>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a37      	ldr	r2, [pc, #220]	@ (8003564 <HAL_DMA_Init+0x680>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d040      	beq.n	800350c <HAL_DMA_Init+0x628>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a36      	ldr	r2, [pc, #216]	@ (8003568 <HAL_DMA_Init+0x684>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d03b      	beq.n	800350c <HAL_DMA_Init+0x628>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a34      	ldr	r2, [pc, #208]	@ (800356c <HAL_DMA_Init+0x688>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d036      	beq.n	800350c <HAL_DMA_Init+0x628>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a33      	ldr	r2, [pc, #204]	@ (8003570 <HAL_DMA_Init+0x68c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d031      	beq.n	800350c <HAL_DMA_Init+0x628>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a31      	ldr	r2, [pc, #196]	@ (8003574 <HAL_DMA_Init+0x690>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d02c      	beq.n	800350c <HAL_DMA_Init+0x628>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a30      	ldr	r2, [pc, #192]	@ (8003578 <HAL_DMA_Init+0x694>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d027      	beq.n	800350c <HAL_DMA_Init+0x628>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a13      	ldr	r2, [pc, #76]	@ (8003510 <HAL_DMA_Init+0x62c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d022      	beq.n	800350c <HAL_DMA_Init+0x628>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a12      	ldr	r2, [pc, #72]	@ (8003514 <HAL_DMA_Init+0x630>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d01d      	beq.n	800350c <HAL_DMA_Init+0x628>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a10      	ldr	r2, [pc, #64]	@ (8003518 <HAL_DMA_Init+0x634>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <HAL_DMA_Init+0x628>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a0f      	ldr	r2, [pc, #60]	@ (800351c <HAL_DMA_Init+0x638>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <HAL_DMA_Init+0x628>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003520 <HAL_DMA_Init+0x63c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_DMA_Init+0x628>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003524 <HAL_DMA_Init+0x640>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_DMA_Init+0x628>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003528 <HAL_DMA_Init+0x644>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_DMA_Init+0x628>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a09      	ldr	r2, [pc, #36]	@ (800352c <HAL_DMA_Init+0x648>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d137      	bne.n	800357c <HAL_DMA_Init+0x698>
 800350c:	2301      	movs	r3, #1
 800350e:	e036      	b.n	800357e <HAL_DMA_Init+0x69a>
 8003510:	58025408 	.word	0x58025408
 8003514:	5802541c 	.word	0x5802541c
 8003518:	58025430 	.word	0x58025430
 800351c:	58025444 	.word	0x58025444
 8003520:	58025458 	.word	0x58025458
 8003524:	5802546c 	.word	0x5802546c
 8003528:	58025480 	.word	0x58025480
 800352c:	58025494 	.word	0x58025494
 8003530:	fffe000f 	.word	0xfffe000f
 8003534:	a7fdabf8 	.word	0xa7fdabf8
 8003538:	cccccccd 	.word	0xcccccccd
 800353c:	40020010 	.word	0x40020010
 8003540:	40020028 	.word	0x40020028
 8003544:	40020040 	.word	0x40020040
 8003548:	40020058 	.word	0x40020058
 800354c:	40020070 	.word	0x40020070
 8003550:	40020088 	.word	0x40020088
 8003554:	400200a0 	.word	0x400200a0
 8003558:	400200b8 	.word	0x400200b8
 800355c:	40020410 	.word	0x40020410
 8003560:	40020428 	.word	0x40020428
 8003564:	40020440 	.word	0x40020440
 8003568:	40020458 	.word	0x40020458
 800356c:	40020470 	.word	0x40020470
 8003570:	40020488 	.word	0x40020488
 8003574:	400204a0 	.word	0x400204a0
 8003578:	400204b8 	.word	0x400204b8
 800357c:	2300      	movs	r3, #0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d032      	beq.n	80035e8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f001 fd1a 	bl	8004fbc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b80      	cmp	r3, #128	@ 0x80
 800358e:	d102      	bne.n	8003596 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80035aa:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <HAL_DMA_Init+0x6f2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d80c      	bhi.n	80035d6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f001 fd97 	bl	80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	e008      	b.n	80035e8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e226      	b.n	8003a6a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_DMA_Start_IT+0x2a>
 8003626:	2302      	movs	r3, #2
 8003628:	e21f      	b.n	8003a6a <HAL_DMA_Start_IT+0x46a>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	f040 820a 	bne.w	8003a54 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a68      	ldr	r2, [pc, #416]	@ (80037f4 <HAL_DMA_Start_IT+0x1f4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d04a      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a66      	ldr	r2, [pc, #408]	@ (80037f8 <HAL_DMA_Start_IT+0x1f8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d045      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a65      	ldr	r2, [pc, #404]	@ (80037fc <HAL_DMA_Start_IT+0x1fc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d040      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a63      	ldr	r2, [pc, #396]	@ (8003800 <HAL_DMA_Start_IT+0x200>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d03b      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a62      	ldr	r2, [pc, #392]	@ (8003804 <HAL_DMA_Start_IT+0x204>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d036      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a60      	ldr	r2, [pc, #384]	@ (8003808 <HAL_DMA_Start_IT+0x208>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d031      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a5f      	ldr	r2, [pc, #380]	@ (800380c <HAL_DMA_Start_IT+0x20c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d02c      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5d      	ldr	r2, [pc, #372]	@ (8003810 <HAL_DMA_Start_IT+0x210>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d027      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003814 <HAL_DMA_Start_IT+0x214>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d022      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5a      	ldr	r2, [pc, #360]	@ (8003818 <HAL_DMA_Start_IT+0x218>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01d      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a59      	ldr	r2, [pc, #356]	@ (800381c <HAL_DMA_Start_IT+0x21c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d018      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a57      	ldr	r2, [pc, #348]	@ (8003820 <HAL_DMA_Start_IT+0x220>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a56      	ldr	r2, [pc, #344]	@ (8003824 <HAL_DMA_Start_IT+0x224>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00e      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a54      	ldr	r2, [pc, #336]	@ (8003828 <HAL_DMA_Start_IT+0x228>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d009      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a53      	ldr	r2, [pc, #332]	@ (800382c <HAL_DMA_Start_IT+0x22c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_DMA_Start_IT+0xee>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a51      	ldr	r2, [pc, #324]	@ (8003830 <HAL_DMA_Start_IT+0x230>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d108      	bne.n	8003700 <HAL_DMA_Start_IT+0x100>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e007      	b.n	8003710 <HAL_DMA_Start_IT+0x110>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f001 f93e 	bl	8004998 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a34      	ldr	r2, [pc, #208]	@ (80037f4 <HAL_DMA_Start_IT+0x1f4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d04a      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a33      	ldr	r2, [pc, #204]	@ (80037f8 <HAL_DMA_Start_IT+0x1f8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d045      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a31      	ldr	r2, [pc, #196]	@ (80037fc <HAL_DMA_Start_IT+0x1fc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d040      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a30      	ldr	r2, [pc, #192]	@ (8003800 <HAL_DMA_Start_IT+0x200>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d03b      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2e      	ldr	r2, [pc, #184]	@ (8003804 <HAL_DMA_Start_IT+0x204>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d036      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2d      	ldr	r2, [pc, #180]	@ (8003808 <HAL_DMA_Start_IT+0x208>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d031      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2b      	ldr	r2, [pc, #172]	@ (800380c <HAL_DMA_Start_IT+0x20c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d02c      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2a      	ldr	r2, [pc, #168]	@ (8003810 <HAL_DMA_Start_IT+0x210>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d027      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a28      	ldr	r2, [pc, #160]	@ (8003814 <HAL_DMA_Start_IT+0x214>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d022      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a27      	ldr	r2, [pc, #156]	@ (8003818 <HAL_DMA_Start_IT+0x218>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d01d      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a25      	ldr	r2, [pc, #148]	@ (800381c <HAL_DMA_Start_IT+0x21c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d018      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a24      	ldr	r2, [pc, #144]	@ (8003820 <HAL_DMA_Start_IT+0x220>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d013      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a22      	ldr	r2, [pc, #136]	@ (8003824 <HAL_DMA_Start_IT+0x224>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00e      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a21      	ldr	r2, [pc, #132]	@ (8003828 <HAL_DMA_Start_IT+0x228>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d009      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1f      	ldr	r2, [pc, #124]	@ (800382c <HAL_DMA_Start_IT+0x22c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <HAL_DMA_Start_IT+0x1bc>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003830 <HAL_DMA_Start_IT+0x230>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d101      	bne.n	80037c0 <HAL_DMA_Start_IT+0x1c0>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <HAL_DMA_Start_IT+0x1c2>
 80037c0:	2300      	movs	r3, #0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d036      	beq.n	8003834 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 021e 	bic.w	r2, r3, #30
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0216 	orr.w	r2, r2, #22
 80037d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d03e      	beq.n	8003860 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0208 	orr.w	r2, r2, #8
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e035      	b.n	8003860 <HAL_DMA_Start_IT+0x260>
 80037f4:	40020010 	.word	0x40020010
 80037f8:	40020028 	.word	0x40020028
 80037fc:	40020040 	.word	0x40020040
 8003800:	40020058 	.word	0x40020058
 8003804:	40020070 	.word	0x40020070
 8003808:	40020088 	.word	0x40020088
 800380c:	400200a0 	.word	0x400200a0
 8003810:	400200b8 	.word	0x400200b8
 8003814:	40020410 	.word	0x40020410
 8003818:	40020428 	.word	0x40020428
 800381c:	40020440 	.word	0x40020440
 8003820:	40020458 	.word	0x40020458
 8003824:	40020470 	.word	0x40020470
 8003828:	40020488 	.word	0x40020488
 800382c:	400204a0 	.word	0x400204a0
 8003830:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 020e 	bic.w	r2, r3, #14
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 020a 	orr.w	r2, r2, #10
 8003846:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0204 	orr.w	r2, r2, #4
 800385e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a83      	ldr	r2, [pc, #524]	@ (8003a74 <HAL_DMA_Start_IT+0x474>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d072      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a82      	ldr	r2, [pc, #520]	@ (8003a78 <HAL_DMA_Start_IT+0x478>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d06d      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a80      	ldr	r2, [pc, #512]	@ (8003a7c <HAL_DMA_Start_IT+0x47c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d068      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a7f      	ldr	r2, [pc, #508]	@ (8003a80 <HAL_DMA_Start_IT+0x480>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d063      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7d      	ldr	r2, [pc, #500]	@ (8003a84 <HAL_DMA_Start_IT+0x484>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d05e      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7c      	ldr	r2, [pc, #496]	@ (8003a88 <HAL_DMA_Start_IT+0x488>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d059      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a7a      	ldr	r2, [pc, #488]	@ (8003a8c <HAL_DMA_Start_IT+0x48c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d054      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a79      	ldr	r2, [pc, #484]	@ (8003a90 <HAL_DMA_Start_IT+0x490>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d04f      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a77      	ldr	r2, [pc, #476]	@ (8003a94 <HAL_DMA_Start_IT+0x494>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04a      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a76      	ldr	r2, [pc, #472]	@ (8003a98 <HAL_DMA_Start_IT+0x498>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d045      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a74      	ldr	r2, [pc, #464]	@ (8003a9c <HAL_DMA_Start_IT+0x49c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a73      	ldr	r2, [pc, #460]	@ (8003aa0 <HAL_DMA_Start_IT+0x4a0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03b      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a71      	ldr	r2, [pc, #452]	@ (8003aa4 <HAL_DMA_Start_IT+0x4a4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d036      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a70      	ldr	r2, [pc, #448]	@ (8003aa8 <HAL_DMA_Start_IT+0x4a8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d031      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a6e      	ldr	r2, [pc, #440]	@ (8003aac <HAL_DMA_Start_IT+0x4ac>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02c      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a6d      	ldr	r2, [pc, #436]	@ (8003ab0 <HAL_DMA_Start_IT+0x4b0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d027      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a6b      	ldr	r2, [pc, #428]	@ (8003ab4 <HAL_DMA_Start_IT+0x4b4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab8 <HAL_DMA_Start_IT+0x4b8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01d      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a68      	ldr	r2, [pc, #416]	@ (8003abc <HAL_DMA_Start_IT+0x4bc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a67      	ldr	r2, [pc, #412]	@ (8003ac0 <HAL_DMA_Start_IT+0x4c0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a65      	ldr	r2, [pc, #404]	@ (8003ac4 <HAL_DMA_Start_IT+0x4c4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a64      	ldr	r2, [pc, #400]	@ (8003ac8 <HAL_DMA_Start_IT+0x4c8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a62      	ldr	r2, [pc, #392]	@ (8003acc <HAL_DMA_Start_IT+0x4cc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_DMA_Start_IT+0x350>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a61      	ldr	r2, [pc, #388]	@ (8003ad0 <HAL_DMA_Start_IT+0x4d0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d101      	bne.n	8003954 <HAL_DMA_Start_IT+0x354>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_DMA_Start_IT+0x356>
 8003954:	2300      	movs	r3, #0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01a      	beq.n	8003990 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003976:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800398a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800398e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a37      	ldr	r2, [pc, #220]	@ (8003a74 <HAL_DMA_Start_IT+0x474>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d04a      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a36      	ldr	r2, [pc, #216]	@ (8003a78 <HAL_DMA_Start_IT+0x478>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d045      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a34      	ldr	r2, [pc, #208]	@ (8003a7c <HAL_DMA_Start_IT+0x47c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d040      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a33      	ldr	r2, [pc, #204]	@ (8003a80 <HAL_DMA_Start_IT+0x480>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d03b      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a31      	ldr	r2, [pc, #196]	@ (8003a84 <HAL_DMA_Start_IT+0x484>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d036      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a30      	ldr	r2, [pc, #192]	@ (8003a88 <HAL_DMA_Start_IT+0x488>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d031      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a8c <HAL_DMA_Start_IT+0x48c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d02c      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2d      	ldr	r2, [pc, #180]	@ (8003a90 <HAL_DMA_Start_IT+0x490>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d027      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a94 <HAL_DMA_Start_IT+0x494>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d022      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003a98 <HAL_DMA_Start_IT+0x498>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d01d      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a28      	ldr	r2, [pc, #160]	@ (8003a9c <HAL_DMA_Start_IT+0x49c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d018      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <HAL_DMA_Start_IT+0x4a0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d013      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a25      	ldr	r2, [pc, #148]	@ (8003aa4 <HAL_DMA_Start_IT+0x4a4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00e      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a24      	ldr	r2, [pc, #144]	@ (8003aa8 <HAL_DMA_Start_IT+0x4a8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d009      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a22      	ldr	r2, [pc, #136]	@ (8003aac <HAL_DMA_Start_IT+0x4ac>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d004      	beq.n	8003a30 <HAL_DMA_Start_IT+0x430>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a21      	ldr	r2, [pc, #132]	@ (8003ab0 <HAL_DMA_Start_IT+0x4b0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d108      	bne.n	8003a42 <HAL_DMA_Start_IT+0x442>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e012      	b.n	8003a68 <HAL_DMA_Start_IT+0x468>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e009      	b.n	8003a68 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40020010 	.word	0x40020010
 8003a78:	40020028 	.word	0x40020028
 8003a7c:	40020040 	.word	0x40020040
 8003a80:	40020058 	.word	0x40020058
 8003a84:	40020070 	.word	0x40020070
 8003a88:	40020088 	.word	0x40020088
 8003a8c:	400200a0 	.word	0x400200a0
 8003a90:	400200b8 	.word	0x400200b8
 8003a94:	40020410 	.word	0x40020410
 8003a98:	40020428 	.word	0x40020428
 8003a9c:	40020440 	.word	0x40020440
 8003aa0:	40020458 	.word	0x40020458
 8003aa4:	40020470 	.word	0x40020470
 8003aa8:	40020488 	.word	0x40020488
 8003aac:	400204a0 	.word	0x400204a0
 8003ab0:	400204b8 	.word	0x400204b8
 8003ab4:	58025408 	.word	0x58025408
 8003ab8:	5802541c 	.word	0x5802541c
 8003abc:	58025430 	.word	0x58025430
 8003ac0:	58025444 	.word	0x58025444
 8003ac4:	58025458 	.word	0x58025458
 8003ac8:	5802546c 	.word	0x5802546c
 8003acc:	58025480 	.word	0x58025480
 8003ad0:	58025494 	.word	0x58025494

08003ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	@ 0x28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ae0:	4b67      	ldr	r3, [pc, #412]	@ (8003c80 <HAL_DMA_IRQHandler+0x1ac>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a67      	ldr	r2, [pc, #412]	@ (8003c84 <HAL_DMA_IRQHandler+0x1b0>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0a9b      	lsrs	r3, r3, #10
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003c88 <HAL_DMA_IRQHandler+0x1b4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d04a      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a5d      	ldr	r2, [pc, #372]	@ (8003c8c <HAL_DMA_IRQHandler+0x1b8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d045      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003c90 <HAL_DMA_IRQHandler+0x1bc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d040      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5a      	ldr	r2, [pc, #360]	@ (8003c94 <HAL_DMA_IRQHandler+0x1c0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d03b      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a59      	ldr	r2, [pc, #356]	@ (8003c98 <HAL_DMA_IRQHandler+0x1c4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d036      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a57      	ldr	r2, [pc, #348]	@ (8003c9c <HAL_DMA_IRQHandler+0x1c8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d031      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a56      	ldr	r2, [pc, #344]	@ (8003ca0 <HAL_DMA_IRQHandler+0x1cc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d02c      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a54      	ldr	r2, [pc, #336]	@ (8003ca4 <HAL_DMA_IRQHandler+0x1d0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d027      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a53      	ldr	r2, [pc, #332]	@ (8003ca8 <HAL_DMA_IRQHandler+0x1d4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a51      	ldr	r2, [pc, #324]	@ (8003cac <HAL_DMA_IRQHandler+0x1d8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01d      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a50      	ldr	r2, [pc, #320]	@ (8003cb0 <HAL_DMA_IRQHandler+0x1dc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d018      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a4e      	ldr	r2, [pc, #312]	@ (8003cb4 <HAL_DMA_IRQHandler+0x1e0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a4d      	ldr	r2, [pc, #308]	@ (8003cb8 <HAL_DMA_IRQHandler+0x1e4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8003cbc <HAL_DMA_IRQHandler+0x1e8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a4a      	ldr	r2, [pc, #296]	@ (8003cc0 <HAL_DMA_IRQHandler+0x1ec>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xd2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a48      	ldr	r2, [pc, #288]	@ (8003cc4 <HAL_DMA_IRQHandler+0x1f0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d101      	bne.n	8003baa <HAL_DMA_IRQHandler+0xd6>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <HAL_DMA_IRQHandler+0xd8>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 842b 	beq.w	8004408 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2208      	movs	r2, #8
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80a2 	beq.w	8003d0c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8003c88 <HAL_DMA_IRQHandler+0x1b4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d04a      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c8c <HAL_DMA_IRQHandler+0x1b8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d045      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c90 <HAL_DMA_IRQHandler+0x1bc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d040      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2a      	ldr	r2, [pc, #168]	@ (8003c94 <HAL_DMA_IRQHandler+0x1c0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d03b      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a28      	ldr	r2, [pc, #160]	@ (8003c98 <HAL_DMA_IRQHandler+0x1c4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d036      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a27      	ldr	r2, [pc, #156]	@ (8003c9c <HAL_DMA_IRQHandler+0x1c8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d031      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a25      	ldr	r2, [pc, #148]	@ (8003ca0 <HAL_DMA_IRQHandler+0x1cc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02c      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a24      	ldr	r2, [pc, #144]	@ (8003ca4 <HAL_DMA_IRQHandler+0x1d0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d027      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a22      	ldr	r2, [pc, #136]	@ (8003ca8 <HAL_DMA_IRQHandler+0x1d4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d022      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a21      	ldr	r2, [pc, #132]	@ (8003cac <HAL_DMA_IRQHandler+0x1d8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d01d      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb0 <HAL_DMA_IRQHandler+0x1dc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d018      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb4 <HAL_DMA_IRQHandler+0x1e0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb8 <HAL_DMA_IRQHandler+0x1e4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00e      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <HAL_DMA_IRQHandler+0x1e8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d009      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a19      	ldr	r2, [pc, #100]	@ (8003cc0 <HAL_DMA_IRQHandler+0x1ec>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x194>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <HAL_DMA_IRQHandler+0x1f0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d12f      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0x1f4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	e02e      	b.n	8003cdc <HAL_DMA_IRQHandler+0x208>
 8003c7e:	bf00      	nop
 8003c80:	24000000 	.word	0x24000000
 8003c84:	1b4e81b5 	.word	0x1b4e81b5
 8003c88:	40020010 	.word	0x40020010
 8003c8c:	40020028 	.word	0x40020028
 8003c90:	40020040 	.word	0x40020040
 8003c94:	40020058 	.word	0x40020058
 8003c98:	40020070 	.word	0x40020070
 8003c9c:	40020088 	.word	0x40020088
 8003ca0:	400200a0 	.word	0x400200a0
 8003ca4:	400200b8 	.word	0x400200b8
 8003ca8:	40020410 	.word	0x40020410
 8003cac:	40020428 	.word	0x40020428
 8003cb0:	40020440 	.word	0x40020440
 8003cb4:	40020458 	.word	0x40020458
 8003cb8:	40020470 	.word	0x40020470
 8003cbc:	40020488 	.word	0x40020488
 8003cc0:	400204a0 	.word	0x400204a0
 8003cc4:	400204b8 	.word	0x400204b8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bf14      	ite	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	2300      	moveq	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d015      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0204 	bic.w	r2, r2, #4
 8003cee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d04:	f043 0201 	orr.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d06e      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a69      	ldr	r2, [pc, #420]	@ (8003ecc <HAL_DMA_IRQHandler+0x3f8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d04a      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a67      	ldr	r2, [pc, #412]	@ (8003ed0 <HAL_DMA_IRQHandler+0x3fc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d045      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a66      	ldr	r2, [pc, #408]	@ (8003ed4 <HAL_DMA_IRQHandler+0x400>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d040      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a64      	ldr	r2, [pc, #400]	@ (8003ed8 <HAL_DMA_IRQHandler+0x404>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d03b      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a63      	ldr	r2, [pc, #396]	@ (8003edc <HAL_DMA_IRQHandler+0x408>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d036      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a61      	ldr	r2, [pc, #388]	@ (8003ee0 <HAL_DMA_IRQHandler+0x40c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d031      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a60      	ldr	r2, [pc, #384]	@ (8003ee4 <HAL_DMA_IRQHandler+0x410>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d02c      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ee8 <HAL_DMA_IRQHandler+0x414>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d027      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a5d      	ldr	r2, [pc, #372]	@ (8003eec <HAL_DMA_IRQHandler+0x418>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5b      	ldr	r2, [pc, #364]	@ (8003ef0 <HAL_DMA_IRQHandler+0x41c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01d      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ef4 <HAL_DMA_IRQHandler+0x420>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d018      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a58      	ldr	r2, [pc, #352]	@ (8003ef8 <HAL_DMA_IRQHandler+0x424>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a57      	ldr	r2, [pc, #348]	@ (8003efc <HAL_DMA_IRQHandler+0x428>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00e      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a55      	ldr	r2, [pc, #340]	@ (8003f00 <HAL_DMA_IRQHandler+0x42c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d009      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a54      	ldr	r2, [pc, #336]	@ (8003f04 <HAL_DMA_IRQHandler+0x430>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d004      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2ee>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	@ (8003f08 <HAL_DMA_IRQHandler+0x434>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x304>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf14      	ite	ne
 8003dd0:	2301      	movne	r3, #1
 8003dd2:	2300      	moveq	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e003      	b.n	8003de0 <HAL_DMA_IRQHandler+0x30c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00d      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2201      	movs	r2, #1
 8003dee:	409a      	lsls	r2, r3
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df8:	f043 0202 	orr.w	r2, r3, #2
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	2204      	movs	r2, #4
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 808f 	beq.w	8003f34 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ecc <HAL_DMA_IRQHandler+0x3f8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d04a      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed0 <HAL_DMA_IRQHandler+0x3fc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d045      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a29      	ldr	r2, [pc, #164]	@ (8003ed4 <HAL_DMA_IRQHandler+0x400>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d040      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a27      	ldr	r2, [pc, #156]	@ (8003ed8 <HAL_DMA_IRQHandler+0x404>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d03b      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a26      	ldr	r2, [pc, #152]	@ (8003edc <HAL_DMA_IRQHandler+0x408>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d036      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ee0 <HAL_DMA_IRQHandler+0x40c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d031      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a23      	ldr	r2, [pc, #140]	@ (8003ee4 <HAL_DMA_IRQHandler+0x410>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d02c      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a21      	ldr	r2, [pc, #132]	@ (8003ee8 <HAL_DMA_IRQHandler+0x414>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d027      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a20      	ldr	r2, [pc, #128]	@ (8003eec <HAL_DMA_IRQHandler+0x418>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d022      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef0 <HAL_DMA_IRQHandler+0x41c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01d      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef4 <HAL_DMA_IRQHandler+0x420>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d018      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef8 <HAL_DMA_IRQHandler+0x424>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1a      	ldr	r2, [pc, #104]	@ (8003efc <HAL_DMA_IRQHandler+0x428>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a18      	ldr	r2, [pc, #96]	@ (8003f00 <HAL_DMA_IRQHandler+0x42c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a17      	ldr	r2, [pc, #92]	@ (8003f04 <HAL_DMA_IRQHandler+0x430>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x3e2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a15      	ldr	r2, [pc, #84]	@ (8003f08 <HAL_DMA_IRQHandler+0x434>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d12a      	bne.n	8003f0c <HAL_DMA_IRQHandler+0x438>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf14      	ite	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	2300      	moveq	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e023      	b.n	8003f14 <HAL_DMA_IRQHandler+0x440>
 8003ecc:	40020010 	.word	0x40020010
 8003ed0:	40020028 	.word	0x40020028
 8003ed4:	40020040 	.word	0x40020040
 8003ed8:	40020058 	.word	0x40020058
 8003edc:	40020070 	.word	0x40020070
 8003ee0:	40020088 	.word	0x40020088
 8003ee4:	400200a0 	.word	0x400200a0
 8003ee8:	400200b8 	.word	0x400200b8
 8003eec:	40020410 	.word	0x40020410
 8003ef0:	40020428 	.word	0x40020428
 8003ef4:	40020440 	.word	0x40020440
 8003ef8:	40020458 	.word	0x40020458
 8003efc:	40020470 	.word	0x40020470
 8003f00:	40020488 	.word	0x40020488
 8003f04:	400204a0 	.word	0x400204a0
 8003f08:	400204b8 	.word	0x400204b8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00d      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2204      	movs	r2, #4
 8003f22:	409a      	lsls	r2, r3
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2c:	f043 0204 	orr.w	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80a6 	beq.w	8004096 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a85      	ldr	r2, [pc, #532]	@ (8004164 <HAL_DMA_IRQHandler+0x690>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d04a      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a83      	ldr	r2, [pc, #524]	@ (8004168 <HAL_DMA_IRQHandler+0x694>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d045      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a82      	ldr	r2, [pc, #520]	@ (800416c <HAL_DMA_IRQHandler+0x698>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d040      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a80      	ldr	r2, [pc, #512]	@ (8004170 <HAL_DMA_IRQHandler+0x69c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d03b      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a7f      	ldr	r2, [pc, #508]	@ (8004174 <HAL_DMA_IRQHandler+0x6a0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d036      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a7d      	ldr	r2, [pc, #500]	@ (8004178 <HAL_DMA_IRQHandler+0x6a4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d031      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a7c      	ldr	r2, [pc, #496]	@ (800417c <HAL_DMA_IRQHandler+0x6a8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d02c      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a7a      	ldr	r2, [pc, #488]	@ (8004180 <HAL_DMA_IRQHandler+0x6ac>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d027      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a79      	ldr	r2, [pc, #484]	@ (8004184 <HAL_DMA_IRQHandler+0x6b0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d022      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a77      	ldr	r2, [pc, #476]	@ (8004188 <HAL_DMA_IRQHandler+0x6b4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d01d      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a76      	ldr	r2, [pc, #472]	@ (800418c <HAL_DMA_IRQHandler+0x6b8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d018      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a74      	ldr	r2, [pc, #464]	@ (8004190 <HAL_DMA_IRQHandler+0x6bc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d013      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a73      	ldr	r2, [pc, #460]	@ (8004194 <HAL_DMA_IRQHandler+0x6c0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00e      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a71      	ldr	r2, [pc, #452]	@ (8004198 <HAL_DMA_IRQHandler+0x6c4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d009      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a70      	ldr	r2, [pc, #448]	@ (800419c <HAL_DMA_IRQHandler+0x6c8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d004      	beq.n	8003fea <HAL_DMA_IRQHandler+0x516>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6e      	ldr	r2, [pc, #440]	@ (80041a0 <HAL_DMA_IRQHandler+0x6cc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10a      	bne.n	8004000 <HAL_DMA_IRQHandler+0x52c>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf14      	ite	ne
 8003ff8:	2301      	movne	r3, #1
 8003ffa:	2300      	moveq	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	e009      	b.n	8004014 <HAL_DMA_IRQHandler+0x540>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	bf14      	ite	ne
 800400e:	2301      	movne	r3, #1
 8004010:	2300      	moveq	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d03e      	beq.n	8004096 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	2210      	movs	r2, #16
 8004022:	409a      	lsls	r2, r3
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d018      	beq.n	8004068 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d108      	bne.n	8004056 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d024      	beq.n	8004096 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
 8004054:	e01f      	b.n	8004096 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01b      	beq.n	8004096 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
 8004066:	e016      	b.n	8004096 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0208 	bic.w	r2, r2, #8
 8004084:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	2220      	movs	r2, #32
 80040a0:	409a      	lsls	r2, r3
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8110 	beq.w	80042cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004164 <HAL_DMA_IRQHandler+0x690>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d04a      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004168 <HAL_DMA_IRQHandler+0x694>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d045      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a29      	ldr	r2, [pc, #164]	@ (800416c <HAL_DMA_IRQHandler+0x698>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d040      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a28      	ldr	r2, [pc, #160]	@ (8004170 <HAL_DMA_IRQHandler+0x69c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d03b      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a26      	ldr	r2, [pc, #152]	@ (8004174 <HAL_DMA_IRQHandler+0x6a0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d036      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a25      	ldr	r2, [pc, #148]	@ (8004178 <HAL_DMA_IRQHandler+0x6a4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d031      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a23      	ldr	r2, [pc, #140]	@ (800417c <HAL_DMA_IRQHandler+0x6a8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d02c      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a22      	ldr	r2, [pc, #136]	@ (8004180 <HAL_DMA_IRQHandler+0x6ac>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d027      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a20      	ldr	r2, [pc, #128]	@ (8004184 <HAL_DMA_IRQHandler+0x6b0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d022      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1f      	ldr	r2, [pc, #124]	@ (8004188 <HAL_DMA_IRQHandler+0x6b4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d01d      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1d      	ldr	r2, [pc, #116]	@ (800418c <HAL_DMA_IRQHandler+0x6b8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d018      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1c      	ldr	r2, [pc, #112]	@ (8004190 <HAL_DMA_IRQHandler+0x6bc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d013      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1a      	ldr	r2, [pc, #104]	@ (8004194 <HAL_DMA_IRQHandler+0x6c0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00e      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a19      	ldr	r2, [pc, #100]	@ (8004198 <HAL_DMA_IRQHandler+0x6c4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d009      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a17      	ldr	r2, [pc, #92]	@ (800419c <HAL_DMA_IRQHandler+0x6c8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <HAL_DMA_IRQHandler+0x678>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a16      	ldr	r2, [pc, #88]	@ (80041a0 <HAL_DMA_IRQHandler+0x6cc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d12b      	bne.n	80041a4 <HAL_DMA_IRQHandler+0x6d0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	e02a      	b.n	80041b8 <HAL_DMA_IRQHandler+0x6e4>
 8004162:	bf00      	nop
 8004164:	40020010 	.word	0x40020010
 8004168:	40020028 	.word	0x40020028
 800416c:	40020040 	.word	0x40020040
 8004170:	40020058 	.word	0x40020058
 8004174:	40020070 	.word	0x40020070
 8004178:	40020088 	.word	0x40020088
 800417c:	400200a0 	.word	0x400200a0
 8004180:	400200b8 	.word	0x400200b8
 8004184:	40020410 	.word	0x40020410
 8004188:	40020428 	.word	0x40020428
 800418c:	40020440 	.word	0x40020440
 8004190:	40020458 	.word	0x40020458
 8004194:	40020470 	.word	0x40020470
 8004198:	40020488 	.word	0x40020488
 800419c:	400204a0 	.word	0x400204a0
 80041a0:	400204b8 	.word	0x400204b8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 8087 	beq.w	80042cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	2220      	movs	r2, #32
 80041c8:	409a      	lsls	r2, r3
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d139      	bne.n	800424e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0216 	bic.w	r2, r2, #22
 80041e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <HAL_DMA_IRQHandler+0x736>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0208 	bic.w	r2, r2, #8
 8004218:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	223f      	movs	r2, #63	@ 0x3f
 8004224:	409a      	lsls	r2, r3
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8382 	beq.w	8004948 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
          }
          return;
 800424c:	e37c      	b.n	8004948 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d018      	beq.n	800428e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d108      	bne.n	800427c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426e:	2b00      	cmp	r3, #0
 8004270:	d02c      	beq.n	80042cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
 800427a:	e027      	b.n	80042cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d023      	beq.n	80042cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
 800428c:	e01e      	b.n	80042cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10f      	bne.n	80042bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0210 	bic.w	r2, r2, #16
 80042aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 833e 	beq.w	8004952 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8088 	beq.w	80043f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2204      	movs	r2, #4
 80042e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a89      	ldr	r2, [pc, #548]	@ (8004518 <HAL_DMA_IRQHandler+0xa44>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d04a      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a88      	ldr	r2, [pc, #544]	@ (800451c <HAL_DMA_IRQHandler+0xa48>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d045      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a86      	ldr	r2, [pc, #536]	@ (8004520 <HAL_DMA_IRQHandler+0xa4c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d040      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a85      	ldr	r2, [pc, #532]	@ (8004524 <HAL_DMA_IRQHandler+0xa50>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d03b      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a83      	ldr	r2, [pc, #524]	@ (8004528 <HAL_DMA_IRQHandler+0xa54>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d036      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a82      	ldr	r2, [pc, #520]	@ (800452c <HAL_DMA_IRQHandler+0xa58>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d031      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a80      	ldr	r2, [pc, #512]	@ (8004530 <HAL_DMA_IRQHandler+0xa5c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d02c      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a7f      	ldr	r2, [pc, #508]	@ (8004534 <HAL_DMA_IRQHandler+0xa60>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d027      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a7d      	ldr	r2, [pc, #500]	@ (8004538 <HAL_DMA_IRQHandler+0xa64>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d022      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a7c      	ldr	r2, [pc, #496]	@ (800453c <HAL_DMA_IRQHandler+0xa68>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d01d      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a7a      	ldr	r2, [pc, #488]	@ (8004540 <HAL_DMA_IRQHandler+0xa6c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d018      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a79      	ldr	r2, [pc, #484]	@ (8004544 <HAL_DMA_IRQHandler+0xa70>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d013      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a77      	ldr	r2, [pc, #476]	@ (8004548 <HAL_DMA_IRQHandler+0xa74>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00e      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a76      	ldr	r2, [pc, #472]	@ (800454c <HAL_DMA_IRQHandler+0xa78>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d009      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a74      	ldr	r2, [pc, #464]	@ (8004550 <HAL_DMA_IRQHandler+0xa7c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d004      	beq.n	800438c <HAL_DMA_IRQHandler+0x8b8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a73      	ldr	r2, [pc, #460]	@ (8004554 <HAL_DMA_IRQHandler+0xa80>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d108      	bne.n	800439e <HAL_DMA_IRQHandler+0x8ca>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	e007      	b.n	80043ae <HAL_DMA_IRQHandler+0x8da>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3301      	adds	r3, #1
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d307      	bcc.n	80043ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f2      	bne.n	80043ae <HAL_DMA_IRQHandler+0x8da>
 80043c8:	e000      	b.n	80043cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2203      	movs	r2, #3
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80043e2:	e003      	b.n	80043ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 82aa 	beq.w	8004952 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
 8004406:	e2a4      	b.n	8004952 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a52      	ldr	r2, [pc, #328]	@ (8004558 <HAL_DMA_IRQHandler+0xa84>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d04a      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a51      	ldr	r2, [pc, #324]	@ (800455c <HAL_DMA_IRQHandler+0xa88>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d045      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a4f      	ldr	r2, [pc, #316]	@ (8004560 <HAL_DMA_IRQHandler+0xa8c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d040      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a4e      	ldr	r2, [pc, #312]	@ (8004564 <HAL_DMA_IRQHandler+0xa90>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d03b      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a4c      	ldr	r2, [pc, #304]	@ (8004568 <HAL_DMA_IRQHandler+0xa94>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d036      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a4b      	ldr	r2, [pc, #300]	@ (800456c <HAL_DMA_IRQHandler+0xa98>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d031      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a49      	ldr	r2, [pc, #292]	@ (8004570 <HAL_DMA_IRQHandler+0xa9c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d02c      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a48      	ldr	r2, [pc, #288]	@ (8004574 <HAL_DMA_IRQHandler+0xaa0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d027      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a46      	ldr	r2, [pc, #280]	@ (8004578 <HAL_DMA_IRQHandler+0xaa4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d022      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a45      	ldr	r2, [pc, #276]	@ (800457c <HAL_DMA_IRQHandler+0xaa8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d01d      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a43      	ldr	r2, [pc, #268]	@ (8004580 <HAL_DMA_IRQHandler+0xaac>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d018      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a42      	ldr	r2, [pc, #264]	@ (8004584 <HAL_DMA_IRQHandler+0xab0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a40      	ldr	r2, [pc, #256]	@ (8004588 <HAL_DMA_IRQHandler+0xab4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00e      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a3f      	ldr	r2, [pc, #252]	@ (800458c <HAL_DMA_IRQHandler+0xab8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d009      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a3d      	ldr	r2, [pc, #244]	@ (8004590 <HAL_DMA_IRQHandler+0xabc>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x9d4>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a3c      	ldr	r2, [pc, #240]	@ (8004594 <HAL_DMA_IRQHandler+0xac0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d101      	bne.n	80044ac <HAL_DMA_IRQHandler+0x9d8>
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_DMA_IRQHandler+0x9da>
 80044ac:	2300      	movs	r3, #0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 824f 	beq.w	8004952 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2204      	movs	r2, #4
 80044c6:	409a      	lsls	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80dd 	beq.w	800468c <HAL_DMA_IRQHandler+0xbb8>
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80d7 	beq.w	800468c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2204      	movs	r2, #4
 80044e8:	409a      	lsls	r2, r3
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d059      	beq.n	80045ac <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d14a      	bne.n	8004598 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8220 	beq.w	800494c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004514:	e21a      	b.n	800494c <HAL_DMA_IRQHandler+0xe78>
 8004516:	bf00      	nop
 8004518:	40020010 	.word	0x40020010
 800451c:	40020028 	.word	0x40020028
 8004520:	40020040 	.word	0x40020040
 8004524:	40020058 	.word	0x40020058
 8004528:	40020070 	.word	0x40020070
 800452c:	40020088 	.word	0x40020088
 8004530:	400200a0 	.word	0x400200a0
 8004534:	400200b8 	.word	0x400200b8
 8004538:	40020410 	.word	0x40020410
 800453c:	40020428 	.word	0x40020428
 8004540:	40020440 	.word	0x40020440
 8004544:	40020458 	.word	0x40020458
 8004548:	40020470 	.word	0x40020470
 800454c:	40020488 	.word	0x40020488
 8004550:	400204a0 	.word	0x400204a0
 8004554:	400204b8 	.word	0x400204b8
 8004558:	48022c08 	.word	0x48022c08
 800455c:	48022c1c 	.word	0x48022c1c
 8004560:	48022c30 	.word	0x48022c30
 8004564:	48022c44 	.word	0x48022c44
 8004568:	48022c58 	.word	0x48022c58
 800456c:	48022c6c 	.word	0x48022c6c
 8004570:	48022c80 	.word	0x48022c80
 8004574:	48022c94 	.word	0x48022c94
 8004578:	58025408 	.word	0x58025408
 800457c:	5802541c 	.word	0x5802541c
 8004580:	58025430 	.word	0x58025430
 8004584:	58025444 	.word	0x58025444
 8004588:	58025458 	.word	0x58025458
 800458c:	5802546c 	.word	0x5802546c
 8004590:	58025480 	.word	0x58025480
 8004594:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 81d5 	beq.w	800494c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045aa:	e1cf      	b.n	800494c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d160      	bne.n	8004678 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a7f      	ldr	r2, [pc, #508]	@ (80047b8 <HAL_DMA_IRQHandler+0xce4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d04a      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a7d      	ldr	r2, [pc, #500]	@ (80047bc <HAL_DMA_IRQHandler+0xce8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d045      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a7c      	ldr	r2, [pc, #496]	@ (80047c0 <HAL_DMA_IRQHandler+0xcec>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d040      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a7a      	ldr	r2, [pc, #488]	@ (80047c4 <HAL_DMA_IRQHandler+0xcf0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d03b      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a79      	ldr	r2, [pc, #484]	@ (80047c8 <HAL_DMA_IRQHandler+0xcf4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d036      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a77      	ldr	r2, [pc, #476]	@ (80047cc <HAL_DMA_IRQHandler+0xcf8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d031      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a76      	ldr	r2, [pc, #472]	@ (80047d0 <HAL_DMA_IRQHandler+0xcfc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d02c      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a74      	ldr	r2, [pc, #464]	@ (80047d4 <HAL_DMA_IRQHandler+0xd00>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d027      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a73      	ldr	r2, [pc, #460]	@ (80047d8 <HAL_DMA_IRQHandler+0xd04>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d022      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a71      	ldr	r2, [pc, #452]	@ (80047dc <HAL_DMA_IRQHandler+0xd08>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d01d      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a70      	ldr	r2, [pc, #448]	@ (80047e0 <HAL_DMA_IRQHandler+0xd0c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d018      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a6e      	ldr	r2, [pc, #440]	@ (80047e4 <HAL_DMA_IRQHandler+0xd10>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6d      	ldr	r2, [pc, #436]	@ (80047e8 <HAL_DMA_IRQHandler+0xd14>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a6b      	ldr	r2, [pc, #428]	@ (80047ec <HAL_DMA_IRQHandler+0xd18>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6a      	ldr	r2, [pc, #424]	@ (80047f0 <HAL_DMA_IRQHandler+0xd1c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_DMA_IRQHandler+0xb82>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a68      	ldr	r2, [pc, #416]	@ (80047f4 <HAL_DMA_IRQHandler+0xd20>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d108      	bne.n	8004668 <HAL_DMA_IRQHandler+0xb94>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0208 	bic.w	r2, r2, #8
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e007      	b.n	8004678 <HAL_DMA_IRQHandler+0xba4>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0204 	bic.w	r2, r2, #4
 8004676:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8165 	beq.w	800494c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800468a:	e15f      	b.n	800494c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	2202      	movs	r2, #2
 8004696:	409a      	lsls	r2, r3
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80c5 	beq.w	800482c <HAL_DMA_IRQHandler+0xd58>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80bf 	beq.w	800482c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	2202      	movs	r2, #2
 80046b8:	409a      	lsls	r2, r3
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d018      	beq.n	80046fa <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 813a 	beq.w	8004950 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046e4:	e134      	b.n	8004950 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8130 	beq.w	8004950 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046f8:	e12a      	b.n	8004950 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	f040 8089 	bne.w	8004818 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a2b      	ldr	r2, [pc, #172]	@ (80047b8 <HAL_DMA_IRQHandler+0xce4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d04a      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a29      	ldr	r2, [pc, #164]	@ (80047bc <HAL_DMA_IRQHandler+0xce8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d045      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a28      	ldr	r2, [pc, #160]	@ (80047c0 <HAL_DMA_IRQHandler+0xcec>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d040      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a26      	ldr	r2, [pc, #152]	@ (80047c4 <HAL_DMA_IRQHandler+0xcf0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d03b      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a25      	ldr	r2, [pc, #148]	@ (80047c8 <HAL_DMA_IRQHandler+0xcf4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d036      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a23      	ldr	r2, [pc, #140]	@ (80047cc <HAL_DMA_IRQHandler+0xcf8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d031      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a22      	ldr	r2, [pc, #136]	@ (80047d0 <HAL_DMA_IRQHandler+0xcfc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d02c      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a20      	ldr	r2, [pc, #128]	@ (80047d4 <HAL_DMA_IRQHandler+0xd00>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d027      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1f      	ldr	r2, [pc, #124]	@ (80047d8 <HAL_DMA_IRQHandler+0xd04>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d022      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <HAL_DMA_IRQHandler+0xd08>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01d      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1c      	ldr	r2, [pc, #112]	@ (80047e0 <HAL_DMA_IRQHandler+0xd0c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d018      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1a      	ldr	r2, [pc, #104]	@ (80047e4 <HAL_DMA_IRQHandler+0xd10>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a19      	ldr	r2, [pc, #100]	@ (80047e8 <HAL_DMA_IRQHandler+0xd14>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00e      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a17      	ldr	r2, [pc, #92]	@ (80047ec <HAL_DMA_IRQHandler+0xd18>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d009      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a16      	ldr	r2, [pc, #88]	@ (80047f0 <HAL_DMA_IRQHandler+0xd1c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xcd2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a14      	ldr	r2, [pc, #80]	@ (80047f4 <HAL_DMA_IRQHandler+0xd20>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d128      	bne.n	80047f8 <HAL_DMA_IRQHandler+0xd24>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0214 	bic.w	r2, r2, #20
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e027      	b.n	8004808 <HAL_DMA_IRQHandler+0xd34>
 80047b8:	40020010 	.word	0x40020010
 80047bc:	40020028 	.word	0x40020028
 80047c0:	40020040 	.word	0x40020040
 80047c4:	40020058 	.word	0x40020058
 80047c8:	40020070 	.word	0x40020070
 80047cc:	40020088 	.word	0x40020088
 80047d0:	400200a0 	.word	0x400200a0
 80047d4:	400200b8 	.word	0x400200b8
 80047d8:	40020410 	.word	0x40020410
 80047dc:	40020428 	.word	0x40020428
 80047e0:	40020440 	.word	0x40020440
 80047e4:	40020458 	.word	0x40020458
 80047e8:	40020470 	.word	0x40020470
 80047ec:	40020488 	.word	0x40020488
 80047f0:	400204a0 	.word	0x400204a0
 80047f4:	400204b8 	.word	0x400204b8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 020a 	bic.w	r2, r2, #10
 8004806:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8097 	beq.w	8004950 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800482a:	e091      	b.n	8004950 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2208      	movs	r2, #8
 8004836:	409a      	lsls	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8088 	beq.w	8004952 <HAL_DMA_IRQHandler+0xe7e>
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8082 	beq.w	8004952 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a41      	ldr	r2, [pc, #260]	@ (8004958 <HAL_DMA_IRQHandler+0xe84>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d04a      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a3f      	ldr	r2, [pc, #252]	@ (800495c <HAL_DMA_IRQHandler+0xe88>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d045      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a3e      	ldr	r2, [pc, #248]	@ (8004960 <HAL_DMA_IRQHandler+0xe8c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d040      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a3c      	ldr	r2, [pc, #240]	@ (8004964 <HAL_DMA_IRQHandler+0xe90>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d03b      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3b      	ldr	r2, [pc, #236]	@ (8004968 <HAL_DMA_IRQHandler+0xe94>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d036      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a39      	ldr	r2, [pc, #228]	@ (800496c <HAL_DMA_IRQHandler+0xe98>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d031      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a38      	ldr	r2, [pc, #224]	@ (8004970 <HAL_DMA_IRQHandler+0xe9c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d02c      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a36      	ldr	r2, [pc, #216]	@ (8004974 <HAL_DMA_IRQHandler+0xea0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d027      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a35      	ldr	r2, [pc, #212]	@ (8004978 <HAL_DMA_IRQHandler+0xea4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d022      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a33      	ldr	r2, [pc, #204]	@ (800497c <HAL_DMA_IRQHandler+0xea8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01d      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a32      	ldr	r2, [pc, #200]	@ (8004980 <HAL_DMA_IRQHandler+0xeac>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d018      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a30      	ldr	r2, [pc, #192]	@ (8004984 <HAL_DMA_IRQHandler+0xeb0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004988 <HAL_DMA_IRQHandler+0xeb4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00e      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2d      	ldr	r2, [pc, #180]	@ (800498c <HAL_DMA_IRQHandler+0xeb8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d009      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2c      	ldr	r2, [pc, #176]	@ (8004990 <HAL_DMA_IRQHandler+0xebc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d004      	beq.n	80048ee <HAL_DMA_IRQHandler+0xe1a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004994 <HAL_DMA_IRQHandler+0xec0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d108      	bne.n	8004900 <HAL_DMA_IRQHandler+0xe2c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 021c 	bic.w	r2, r2, #28
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e007      	b.n	8004910 <HAL_DMA_IRQHandler+0xe3c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 020e 	bic.w	r2, r2, #14
 800490e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2201      	movs	r2, #1
 800491a:	409a      	lsls	r2, r3
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4798      	blx	r3
 8004946:	e004      	b.n	8004952 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004948:	bf00      	nop
 800494a:	e002      	b.n	8004952 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800494c:	bf00      	nop
 800494e:	e000      	b.n	8004952 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004950:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004952:	3728      	adds	r7, #40	@ 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40020010 	.word	0x40020010
 800495c:	40020028 	.word	0x40020028
 8004960:	40020040 	.word	0x40020040
 8004964:	40020058 	.word	0x40020058
 8004968:	40020070 	.word	0x40020070
 800496c:	40020088 	.word	0x40020088
 8004970:	400200a0 	.word	0x400200a0
 8004974:	400200b8 	.word	0x400200b8
 8004978:	40020410 	.word	0x40020410
 800497c:	40020428 	.word	0x40020428
 8004980:	40020440 	.word	0x40020440
 8004984:	40020458 	.word	0x40020458
 8004988:	40020470 	.word	0x40020470
 800498c:	40020488 	.word	0x40020488
 8004990:	400204a0 	.word	0x400204a0
 8004994:	400204b8 	.word	0x400204b8

08004998 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a7f      	ldr	r2, [pc, #508]	@ (8004bb4 <DMA_SetConfig+0x21c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d072      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a7d      	ldr	r2, [pc, #500]	@ (8004bb8 <DMA_SetConfig+0x220>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d06d      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a7c      	ldr	r2, [pc, #496]	@ (8004bbc <DMA_SetConfig+0x224>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d068      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a7a      	ldr	r2, [pc, #488]	@ (8004bc0 <DMA_SetConfig+0x228>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d063      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a79      	ldr	r2, [pc, #484]	@ (8004bc4 <DMA_SetConfig+0x22c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d05e      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a77      	ldr	r2, [pc, #476]	@ (8004bc8 <DMA_SetConfig+0x230>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d059      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a76      	ldr	r2, [pc, #472]	@ (8004bcc <DMA_SetConfig+0x234>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d054      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a74      	ldr	r2, [pc, #464]	@ (8004bd0 <DMA_SetConfig+0x238>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d04f      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a73      	ldr	r2, [pc, #460]	@ (8004bd4 <DMA_SetConfig+0x23c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d04a      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a71      	ldr	r2, [pc, #452]	@ (8004bd8 <DMA_SetConfig+0x240>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d045      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a70      	ldr	r2, [pc, #448]	@ (8004bdc <DMA_SetConfig+0x244>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d040      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a6e      	ldr	r2, [pc, #440]	@ (8004be0 <DMA_SetConfig+0x248>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d03b      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a6d      	ldr	r2, [pc, #436]	@ (8004be4 <DMA_SetConfig+0x24c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d036      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a6b      	ldr	r2, [pc, #428]	@ (8004be8 <DMA_SetConfig+0x250>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d031      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a6a      	ldr	r2, [pc, #424]	@ (8004bec <DMA_SetConfig+0x254>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d02c      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a68      	ldr	r2, [pc, #416]	@ (8004bf0 <DMA_SetConfig+0x258>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d027      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a67      	ldr	r2, [pc, #412]	@ (8004bf4 <DMA_SetConfig+0x25c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d022      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a65      	ldr	r2, [pc, #404]	@ (8004bf8 <DMA_SetConfig+0x260>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01d      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a64      	ldr	r2, [pc, #400]	@ (8004bfc <DMA_SetConfig+0x264>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d018      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a62      	ldr	r2, [pc, #392]	@ (8004c00 <DMA_SetConfig+0x268>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a61      	ldr	r2, [pc, #388]	@ (8004c04 <DMA_SetConfig+0x26c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00e      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a5f      	ldr	r2, [pc, #380]	@ (8004c08 <DMA_SetConfig+0x270>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a5e      	ldr	r2, [pc, #376]	@ (8004c0c <DMA_SetConfig+0x274>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <DMA_SetConfig+0x10a>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a5c      	ldr	r2, [pc, #368]	@ (8004c10 <DMA_SetConfig+0x278>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <DMA_SetConfig+0x10e>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <DMA_SetConfig+0x110>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ab4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d004      	beq.n	8004ac8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ac6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a39      	ldr	r2, [pc, #228]	@ (8004bb4 <DMA_SetConfig+0x21c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d04a      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a38      	ldr	r2, [pc, #224]	@ (8004bb8 <DMA_SetConfig+0x220>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d045      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a36      	ldr	r2, [pc, #216]	@ (8004bbc <DMA_SetConfig+0x224>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d040      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a35      	ldr	r2, [pc, #212]	@ (8004bc0 <DMA_SetConfig+0x228>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d03b      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a33      	ldr	r2, [pc, #204]	@ (8004bc4 <DMA_SetConfig+0x22c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d036      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a32      	ldr	r2, [pc, #200]	@ (8004bc8 <DMA_SetConfig+0x230>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d031      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a30      	ldr	r2, [pc, #192]	@ (8004bcc <DMA_SetConfig+0x234>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d02c      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a2f      	ldr	r2, [pc, #188]	@ (8004bd0 <DMA_SetConfig+0x238>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d027      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004bd4 <DMA_SetConfig+0x23c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d022      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd8 <DMA_SetConfig+0x240>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d01d      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2a      	ldr	r2, [pc, #168]	@ (8004bdc <DMA_SetConfig+0x244>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d018      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a29      	ldr	r2, [pc, #164]	@ (8004be0 <DMA_SetConfig+0x248>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d013      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a27      	ldr	r2, [pc, #156]	@ (8004be4 <DMA_SetConfig+0x24c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00e      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a26      	ldr	r2, [pc, #152]	@ (8004be8 <DMA_SetConfig+0x250>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d009      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a24      	ldr	r2, [pc, #144]	@ (8004bec <DMA_SetConfig+0x254>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <DMA_SetConfig+0x1d0>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a23      	ldr	r2, [pc, #140]	@ (8004bf0 <DMA_SetConfig+0x258>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d101      	bne.n	8004b6c <DMA_SetConfig+0x1d4>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <DMA_SetConfig+0x1d6>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d059      	beq.n	8004c26 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	223f      	movs	r2, #63	@ 0x3f
 8004b7c:	409a      	lsls	r2, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b90:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ba0:	d138      	bne.n	8004c14 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004bb2:	e0ae      	b.n	8004d12 <DMA_SetConfig+0x37a>
 8004bb4:	40020010 	.word	0x40020010
 8004bb8:	40020028 	.word	0x40020028
 8004bbc:	40020040 	.word	0x40020040
 8004bc0:	40020058 	.word	0x40020058
 8004bc4:	40020070 	.word	0x40020070
 8004bc8:	40020088 	.word	0x40020088
 8004bcc:	400200a0 	.word	0x400200a0
 8004bd0:	400200b8 	.word	0x400200b8
 8004bd4:	40020410 	.word	0x40020410
 8004bd8:	40020428 	.word	0x40020428
 8004bdc:	40020440 	.word	0x40020440
 8004be0:	40020458 	.word	0x40020458
 8004be4:	40020470 	.word	0x40020470
 8004be8:	40020488 	.word	0x40020488
 8004bec:	400204a0 	.word	0x400204a0
 8004bf0:	400204b8 	.word	0x400204b8
 8004bf4:	58025408 	.word	0x58025408
 8004bf8:	5802541c 	.word	0x5802541c
 8004bfc:	58025430 	.word	0x58025430
 8004c00:	58025444 	.word	0x58025444
 8004c04:	58025458 	.word	0x58025458
 8004c08:	5802546c 	.word	0x5802546c
 8004c0c:	58025480 	.word	0x58025480
 8004c10:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	60da      	str	r2, [r3, #12]
}
 8004c24:	e075      	b.n	8004d12 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a3d      	ldr	r2, [pc, #244]	@ (8004d20 <DMA_SetConfig+0x388>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d04a      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a3b      	ldr	r2, [pc, #236]	@ (8004d24 <DMA_SetConfig+0x38c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d045      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a3a      	ldr	r2, [pc, #232]	@ (8004d28 <DMA_SetConfig+0x390>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d040      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a38      	ldr	r2, [pc, #224]	@ (8004d2c <DMA_SetConfig+0x394>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d03b      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a37      	ldr	r2, [pc, #220]	@ (8004d30 <DMA_SetConfig+0x398>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d036      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a35      	ldr	r2, [pc, #212]	@ (8004d34 <DMA_SetConfig+0x39c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d031      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a34      	ldr	r2, [pc, #208]	@ (8004d38 <DMA_SetConfig+0x3a0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d02c      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a32      	ldr	r2, [pc, #200]	@ (8004d3c <DMA_SetConfig+0x3a4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d027      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a31      	ldr	r2, [pc, #196]	@ (8004d40 <DMA_SetConfig+0x3a8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d022      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2f      	ldr	r2, [pc, #188]	@ (8004d44 <DMA_SetConfig+0x3ac>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01d      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d48 <DMA_SetConfig+0x3b0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d018      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a2c      	ldr	r2, [pc, #176]	@ (8004d4c <DMA_SetConfig+0x3b4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8004d50 <DMA_SetConfig+0x3b8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a29      	ldr	r2, [pc, #164]	@ (8004d54 <DMA_SetConfig+0x3bc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a28      	ldr	r2, [pc, #160]	@ (8004d58 <DMA_SetConfig+0x3c0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <DMA_SetConfig+0x32e>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a26      	ldr	r2, [pc, #152]	@ (8004d5c <DMA_SetConfig+0x3c4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d101      	bne.n	8004cca <DMA_SetConfig+0x332>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <DMA_SetConfig+0x334>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d020      	beq.n	8004d12 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2201      	movs	r2, #1
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b40      	cmp	r3, #64	@ 0x40
 8004cee:	d108      	bne.n	8004d02 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	60da      	str	r2, [r3, #12]
}
 8004d00:	e007      	b.n	8004d12 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	60da      	str	r2, [r3, #12]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	48022c08 	.word	0x48022c08
 8004d24:	48022c1c 	.word	0x48022c1c
 8004d28:	48022c30 	.word	0x48022c30
 8004d2c:	48022c44 	.word	0x48022c44
 8004d30:	48022c58 	.word	0x48022c58
 8004d34:	48022c6c 	.word	0x48022c6c
 8004d38:	48022c80 	.word	0x48022c80
 8004d3c:	48022c94 	.word	0x48022c94
 8004d40:	58025408 	.word	0x58025408
 8004d44:	5802541c 	.word	0x5802541c
 8004d48:	58025430 	.word	0x58025430
 8004d4c:	58025444 	.word	0x58025444
 8004d50:	58025458 	.word	0x58025458
 8004d54:	5802546c 	.word	0x5802546c
 8004d58:	58025480 	.word	0x58025480
 8004d5c:	58025494 	.word	0x58025494

08004d60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a42      	ldr	r2, [pc, #264]	@ (8004e78 <DMA_CalcBaseAndBitshift+0x118>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d04a      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a41      	ldr	r2, [pc, #260]	@ (8004e7c <DMA_CalcBaseAndBitshift+0x11c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d045      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a3f      	ldr	r2, [pc, #252]	@ (8004e80 <DMA_CalcBaseAndBitshift+0x120>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d040      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a3e      	ldr	r2, [pc, #248]	@ (8004e84 <DMA_CalcBaseAndBitshift+0x124>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d03b      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a3c      	ldr	r2, [pc, #240]	@ (8004e88 <DMA_CalcBaseAndBitshift+0x128>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d036      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a3b      	ldr	r2, [pc, #236]	@ (8004e8c <DMA_CalcBaseAndBitshift+0x12c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d031      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a39      	ldr	r2, [pc, #228]	@ (8004e90 <DMA_CalcBaseAndBitshift+0x130>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d02c      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a38      	ldr	r2, [pc, #224]	@ (8004e94 <DMA_CalcBaseAndBitshift+0x134>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d027      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a36      	ldr	r2, [pc, #216]	@ (8004e98 <DMA_CalcBaseAndBitshift+0x138>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d022      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a35      	ldr	r2, [pc, #212]	@ (8004e9c <DMA_CalcBaseAndBitshift+0x13c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d01d      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a33      	ldr	r2, [pc, #204]	@ (8004ea0 <DMA_CalcBaseAndBitshift+0x140>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d018      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a32      	ldr	r2, [pc, #200]	@ (8004ea4 <DMA_CalcBaseAndBitshift+0x144>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d013      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a30      	ldr	r2, [pc, #192]	@ (8004ea8 <DMA_CalcBaseAndBitshift+0x148>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00e      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a2f      	ldr	r2, [pc, #188]	@ (8004eac <DMA_CalcBaseAndBitshift+0x14c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d009      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb0 <DMA_CalcBaseAndBitshift+0x150>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <DMA_CalcBaseAndBitshift+0xa8>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb4 <DMA_CalcBaseAndBitshift+0x154>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d101      	bne.n	8004e0c <DMA_CalcBaseAndBitshift+0xac>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <DMA_CalcBaseAndBitshift+0xae>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d024      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	3b10      	subs	r3, #16
 8004e1a:	4a27      	ldr	r2, [pc, #156]	@ (8004eb8 <DMA_CalcBaseAndBitshift+0x158>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	4a24      	ldr	r2, [pc, #144]	@ (8004ebc <DMA_CalcBaseAndBitshift+0x15c>)
 8004e2c:	5cd3      	ldrb	r3, [r2, r3]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d908      	bls.n	8004e4c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec0 <DMA_CalcBaseAndBitshift+0x160>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	1d1a      	adds	r2, r3, #4
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e4a:	e00d      	b.n	8004e68 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec0 <DMA_CalcBaseAndBitshift+0x160>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e5a:	e005      	b.n	8004e68 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40020010 	.word	0x40020010
 8004e7c:	40020028 	.word	0x40020028
 8004e80:	40020040 	.word	0x40020040
 8004e84:	40020058 	.word	0x40020058
 8004e88:	40020070 	.word	0x40020070
 8004e8c:	40020088 	.word	0x40020088
 8004e90:	400200a0 	.word	0x400200a0
 8004e94:	400200b8 	.word	0x400200b8
 8004e98:	40020410 	.word	0x40020410
 8004e9c:	40020428 	.word	0x40020428
 8004ea0:	40020440 	.word	0x40020440
 8004ea4:	40020458 	.word	0x40020458
 8004ea8:	40020470 	.word	0x40020470
 8004eac:	40020488 	.word	0x40020488
 8004eb0:	400204a0 	.word	0x400204a0
 8004eb4:	400204b8 	.word	0x400204b8
 8004eb8:	aaaaaaab 	.word	0xaaaaaaab
 8004ebc:	0800ad5c 	.word	0x0800ad5c
 8004ec0:	fffffc00 	.word	0xfffffc00

08004ec4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d120      	bne.n	8004f1a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d858      	bhi.n	8004f92 <DMA_CheckFifoParam+0xce>
 8004ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <DMA_CheckFifoParam+0x24>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004ef9 	.word	0x08004ef9
 8004eec:	08004f0b 	.word	0x08004f0b
 8004ef0:	08004ef9 	.word	0x08004ef9
 8004ef4:	08004f93 	.word	0x08004f93
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d048      	beq.n	8004f96 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f08:	e045      	b.n	8004f96 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f12:	d142      	bne.n	8004f9a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f18:	e03f      	b.n	8004f9a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f22:	d123      	bne.n	8004f6c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d838      	bhi.n	8004f9e <DMA_CheckFifoParam+0xda>
 8004f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f34 <DMA_CheckFifoParam+0x70>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f4b 	.word	0x08004f4b
 8004f3c:	08004f45 	.word	0x08004f45
 8004f40:	08004f5d 	.word	0x08004f5d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
        break;
 8004f48:	e030      	b.n	8004fac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d025      	beq.n	8004fa2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f5a:	e022      	b.n	8004fa2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f64:	d11f      	bne.n	8004fa6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f6a:	e01c      	b.n	8004fa6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d902      	bls.n	8004f7a <DMA_CheckFifoParam+0xb6>
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d003      	beq.n	8004f80 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004f78:	e018      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f7e:	e015      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00e      	beq.n	8004faa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8004f90:	e00b      	b.n	8004faa <DMA_CheckFifoParam+0xe6>
        break;
 8004f92:	bf00      	nop
 8004f94:	e00a      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
        break;
 8004f96:	bf00      	nop
 8004f98:	e008      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
        break;
 8004f9a:	bf00      	nop
 8004f9c:	e006      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
        break;
 8004f9e:	bf00      	nop
 8004fa0:	e004      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
        break;
 8004fa2:	bf00      	nop
 8004fa4:	e002      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
        break;
 8004fa6:	bf00      	nop
 8004fa8:	e000      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
    break;
 8004faa:	bf00      	nop
    }
  }

  return status;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop

08004fbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a38      	ldr	r2, [pc, #224]	@ (80050b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d022      	beq.n	800501a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a36      	ldr	r2, [pc, #216]	@ (80050b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01d      	beq.n	800501a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a35      	ldr	r2, [pc, #212]	@ (80050b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d018      	beq.n	800501a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a33      	ldr	r2, [pc, #204]	@ (80050bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a32      	ldr	r2, [pc, #200]	@ (80050c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00e      	beq.n	800501a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a30      	ldr	r2, [pc, #192]	@ (80050c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d009      	beq.n	800501a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a2f      	ldr	r2, [pc, #188]	@ (80050c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d004      	beq.n	800501a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a2d      	ldr	r2, [pc, #180]	@ (80050cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d101      	bne.n	800501e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01a      	beq.n	800505a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	3b08      	subs	r3, #8
 800502c:	4a28      	ldr	r2, [pc, #160]	@ (80050d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4b26      	ldr	r3, [pc, #152]	@ (80050d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	461a      	mov	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a24      	ldr	r2, [pc, #144]	@ (80050d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005048:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	2201      	movs	r2, #1
 8005052:	409a      	lsls	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005058:	e024      	b.n	80050a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	3b10      	subs	r3, #16
 8005062:	4a1e      	ldr	r2, [pc, #120]	@ (80050dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4a1c      	ldr	r2, [pc, #112]	@ (80050e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d806      	bhi.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4a1b      	ldr	r2, [pc, #108]	@ (80050e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d902      	bls.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3308      	adds	r3, #8
 8005080:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4b18      	ldr	r3, [pc, #96]	@ (80050e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	461a      	mov	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a16      	ldr	r2, [pc, #88]	@ (80050ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005094:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 031f 	and.w	r3, r3, #31
 800509c:	2201      	movs	r2, #1
 800509e:	409a      	lsls	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050a4:	bf00      	nop
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	58025408 	.word	0x58025408
 80050b4:	5802541c 	.word	0x5802541c
 80050b8:	58025430 	.word	0x58025430
 80050bc:	58025444 	.word	0x58025444
 80050c0:	58025458 	.word	0x58025458
 80050c4:	5802546c 	.word	0x5802546c
 80050c8:	58025480 	.word	0x58025480
 80050cc:	58025494 	.word	0x58025494
 80050d0:	cccccccd 	.word	0xcccccccd
 80050d4:	16009600 	.word	0x16009600
 80050d8:	58025880 	.word	0x58025880
 80050dc:	aaaaaaab 	.word	0xaaaaaaab
 80050e0:	400204b8 	.word	0x400204b8
 80050e4:	4002040f 	.word	0x4002040f
 80050e8:	10008200 	.word	0x10008200
 80050ec:	40020880 	.word	0x40020880

080050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d04a      	beq.n	800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d847      	bhi.n	800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a25      	ldr	r2, [pc, #148]	@ (80051a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d022      	beq.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a24      	ldr	r2, [pc, #144]	@ (80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d01d      	beq.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a22      	ldr	r2, [pc, #136]	@ (80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d018      	beq.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a21      	ldr	r2, [pc, #132]	@ (80051b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d013      	beq.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1f      	ldr	r2, [pc, #124]	@ (80051b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00e      	beq.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1e      	ldr	r2, [pc, #120]	@ (80051bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d009      	beq.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1c      	ldr	r2, [pc, #112]	@ (80051c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d004      	beq.n	800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1b      	ldr	r2, [pc, #108]	@ (80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d101      	bne.n	8005160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005160:	2300      	movs	r3, #0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4b17      	ldr	r3, [pc, #92]	@ (80051c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	461a      	mov	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a15      	ldr	r2, [pc, #84]	@ (80051cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005178:	671a      	str	r2, [r3, #112]	@ 0x70
 800517a:	e009      	b.n	8005190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4b14      	ldr	r3, [pc, #80]	@ (80051d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	461a      	mov	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a11      	ldr	r2, [pc, #68]	@ (80051d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800518e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3b01      	subs	r3, #1
 8005194:	2201      	movs	r2, #1
 8005196:	409a      	lsls	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800519c:	bf00      	nop
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	58025408 	.word	0x58025408
 80051ac:	5802541c 	.word	0x5802541c
 80051b0:	58025430 	.word	0x58025430
 80051b4:	58025444 	.word	0x58025444
 80051b8:	58025458 	.word	0x58025458
 80051bc:	5802546c 	.word	0x5802546c
 80051c0:	58025480 	.word	0x58025480
 80051c4:	58025494 	.word	0x58025494
 80051c8:	1600963f 	.word	0x1600963f
 80051cc:	58025940 	.word	0x58025940
 80051d0:	1000823f 	.word	0x1000823f
 80051d4:	40020940 	.word	0x40020940

080051d8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b098      	sub	sp, #96	@ 0x60
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80051e0:	4a84      	ldr	r2, [pc, #528]	@ (80053f4 <HAL_FDCAN_Init+0x21c>)
 80051e2:	f107 030c 	add.w	r3, r7, #12
 80051e6:	4611      	mov	r1, r2
 80051e8:	224c      	movs	r2, #76	@ 0x4c
 80051ea:	4618      	mov	r0, r3
 80051ec:	f005 fd6e 	bl	800accc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e1c6      	b.n	8005588 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a7e      	ldr	r2, [pc, #504]	@ (80053f8 <HAL_FDCAN_Init+0x220>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d106      	bne.n	8005212 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800520c:	461a      	mov	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fb ffce 	bl	80011c8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0210 	bic.w	r2, r2, #16
 800523a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800523c:	f7fc fba2 	bl	8001984 <HAL_GetTick>
 8005240:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005242:	e014      	b.n	800526e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005244:	f7fc fb9e 	bl	8001984 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b0a      	cmp	r3, #10
 8005250:	d90d      	bls.n	800526e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005258:	f043 0201 	orr.w	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2203      	movs	r2, #3
 8005266:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e18c      	b.n	8005588 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b08      	cmp	r3, #8
 800527a:	d0e3      	beq.n	8005244 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800528c:	f7fc fb7a 	bl	8001984 <HAL_GetTick>
 8005290:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005292:	e014      	b.n	80052be <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005294:	f7fc fb76 	bl	8001984 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b0a      	cmp	r3, #10
 80052a0:	d90d      	bls.n	80052be <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052a8:	f043 0201 	orr.w	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2203      	movs	r2, #3
 80052b6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e164      	b.n	8005588 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0e3      	beq.n	8005294 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0202 	orr.w	r2, r2, #2
 80052da:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7c1b      	ldrb	r3, [r3, #16]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d108      	bne.n	80052f6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052f2:	619a      	str	r2, [r3, #24]
 80052f4:	e007      	b.n	8005306 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699a      	ldr	r2, [r3, #24]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005304:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	7c5b      	ldrb	r3, [r3, #17]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d108      	bne.n	8005320 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800531c:	619a      	str	r2, [r3, #24]
 800531e:	e007      	b.n	8005330 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800532e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	7c9b      	ldrb	r3, [r3, #18]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d108      	bne.n	800534a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005346:	619a      	str	r2, [r3, #24]
 8005348:	e007      	b.n	800535a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005358:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800537e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0210 	bic.w	r2, r2, #16
 800538e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d108      	bne.n	80053aa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0204 	orr.w	r2, r2, #4
 80053a6:	619a      	str	r2, [r3, #24]
 80053a8:	e030      	b.n	800540c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d02c      	beq.n	800540c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d020      	beq.n	80053fc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053c8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0210 	orr.w	r2, r2, #16
 80053d8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d114      	bne.n	800540c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0220 	orr.w	r2, r2, #32
 80053f0:	619a      	str	r2, [r3, #24]
 80053f2:	e00b      	b.n	800540c <HAL_FDCAN_Init+0x234>
 80053f4:	0800ad00 	.word	0x0800ad00
 80053f8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0220 	orr.w	r2, r2, #32
 800540a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	3b01      	subs	r3, #1
 8005412:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	3b01      	subs	r3, #1
 800541a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800541c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005424:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	3b01      	subs	r3, #1
 800542e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005434:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005436:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005440:	d115      	bne.n	800546e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544c:	3b01      	subs	r3, #1
 800544e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005450:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005456:	3b01      	subs	r3, #1
 8005458:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800545a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	3b01      	subs	r3, #1
 8005464:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800546a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800546c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005494:	4413      	add	r3, r2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d011      	beq.n	80054be <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80054a2:	f023 0107 	bic.w	r1, r3, #7
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	3360      	adds	r3, #96	@ 0x60
 80054ae:	443b      	add	r3, r7
 80054b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d011      	beq.n	80054ea <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054ce:	f023 0107 	bic.w	r1, r3, #7
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	3360      	adds	r3, #96	@ 0x60
 80054da:	443b      	add	r3, r7
 80054dc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d012      	beq.n	8005518 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054fa:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	3360      	adds	r3, #96	@ 0x60
 8005506:	443b      	add	r3, r7
 8005508:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800550c:	011a      	lsls	r2, r3, #4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800551c:	2b00      	cmp	r3, #0
 800551e:	d012      	beq.n	8005546 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005528:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	3360      	adds	r3, #96	@ 0x60
 8005534:	443b      	add	r3, r7
 8005536:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800553a:	021a      	lsls	r2, r3, #8
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a11      	ldr	r2, [pc, #68]	@ (8005590 <HAL_FDCAN_Init+0x3b8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d107      	bne.n	8005560 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f022 0203 	bic.w	r2, r2, #3
 800555e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fd81 	bl	8006080 <FDCAN_CalcultateRamBlockAddresses>
 800557e:	4603      	mov	r3, r0
 8005580:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005584:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005588:	4618      	mov	r0, r3
 800558a:	3760      	adds	r7, #96	@ 0x60
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	4000a000 	.word	0x4000a000

08005594 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d111      	bne.n	80055cc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e008      	b.n	80055de <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055d2:	f043 0204 	orr.w	r2, r3, #4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d141      	bne.n	8005686 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800560a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005618:	f043 0220 	orr.w	r2, r3, #32
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e038      	b.n	8005698 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800562e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800563c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e026      	b.n	8005698 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005652:	0c1b      	lsrs	r3, r3, #16
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 fe93 	bl	800638c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2101      	movs	r1, #1
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	fa01 f202 	lsl.w	r2, r1, r2
 8005672:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005676:	2201      	movs	r2, #1
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	409a      	lsls	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	e008      	b.n	8005698 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800568c:	f043 0208 	orr.w	r2, r3, #8
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
  }
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b08b      	sub	sp, #44	@ 0x2c
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80056b8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80056ba:	7efb      	ldrb	r3, [r7, #27]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f040 8149 	bne.w	8005954 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b40      	cmp	r3, #64	@ 0x40
 80056c6:	d14c      	bne.n	8005762 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056d0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056de:	f043 0220 	orr.w	r2, r3, #32
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e13c      	b.n	8005966 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005702:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e12a      	b.n	8005966 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005718:	0e1b      	lsrs	r3, r3, #24
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d10a      	bne.n	8005738 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800572a:	0fdb      	lsrs	r3, r3, #31
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005734:	2301      	movs	r3, #1
 8005736:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	4413      	add	r3, r2
 800574a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005754:	69f9      	ldr	r1, [r7, #28]
 8005756:	fb01 f303 	mul.w	r3, r1, r3
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005760:	e068      	b.n	8005834 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b41      	cmp	r3, #65	@ 0x41
 8005766:	d14c      	bne.n	8005802 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005770:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e0ec      	b.n	8005966 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0da      	b.n	8005966 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057b8:	0e1b      	lsrs	r3, r3, #24
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d10a      	bne.n	80057d8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057ca:	0fdb      	lsrs	r3, r3, #31
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80057d4:	2301      	movs	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057f4:	69f9      	ldr	r1, [r7, #28]
 80057f6:	fb01 f303 	mul.w	r3, r1, r3
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005800:	e018      	b.n	8005834 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d309      	bcc.n	8005820 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005812:	f043 0220 	orr.w	r2, r3, #32
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0a2      	b.n	8005966 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d107      	bne.n	8005858 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	0c9b      	lsrs	r3, r3, #18
 800584e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e005      	b.n	8005864 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	3304      	adds	r3, #4
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	b29a      	uxth	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	0c1b      	lsrs	r3, r3, #16
 8005892:	f003 020f 	and.w	r2, r3, #15
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	0e1b      	lsrs	r3, r3, #24
 80058b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	0fda      	lsrs	r2, r3, #31
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	3304      	adds	r3, #4
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80058d4:	2300      	movs	r3, #0
 80058d6:	623b      	str	r3, [r7, #32]
 80058d8:	e00a      	b.n	80058f0 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	441a      	add	r2, r3
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	440b      	add	r3, r1
 80058e6:	7812      	ldrb	r2, [r2, #0]
 80058e8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	3301      	adds	r3, #1
 80058ee:	623b      	str	r3, [r7, #32]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005974 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80058f6:	5cd3      	ldrb	r3, [r2, r3]
 80058f8:	461a      	mov	r2, r3
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d3ec      	bcc.n	80058da <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b40      	cmp	r3, #64	@ 0x40
 8005904:	d105      	bne.n	8005912 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005910:	e01e      	b.n	8005950 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b41      	cmp	r3, #65	@ 0x41
 8005916:	d105      	bne.n	8005924 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005922:	e015      	b.n	8005950 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b1f      	cmp	r3, #31
 8005928:	d808      	bhi.n	800593c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2101      	movs	r1, #1
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	fa01 f202 	lsl.w	r2, r1, r2
 8005936:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800593a:	e009      	b.n	8005950 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 021f 	and.w	r2, r3, #31
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2101      	movs	r1, #1
 8005948:	fa01 f202 	lsl.w	r2, r1, r2
 800594c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e008      	b.n	8005966 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800595a:	f043 0208 	orr.w	r2, r3, #8
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	372c      	adds	r7, #44	@ 0x2c
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	0800ad64 	.word	0x0800ad64

08005978 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800598c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800598e:	68fb      	ldr	r3, [r7, #12]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80059ae:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d002      	beq.n	80059bc <HAL_FDCAN_ActivateNotification+0x20>
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d155      	bne.n	8005a68 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d108      	bne.n	80059dc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80059da:	e014      	b.n	8005a06 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4013      	ands	r3, r2
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d108      	bne.n	80059fe <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0202 	orr.w	r2, r2, #2
 80059fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80059fc:	e003      	b.n	8005a06 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2203      	movs	r2, #3
 8005a04:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d009      	beq.n	8005a24 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a88 <HAL_FDCAN_ActivateNotification+0xec>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	430b      	orrs	r3, r1
 8005a54:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <HAL_FDCAN_ActivateNotification+0xf0>)
 8005a58:	695a      	ldr	r2, [r3, #20]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	0f9b      	lsrs	r3, r3, #30
 8005a5e:	490b      	ldr	r1, [pc, #44]	@ (8005a8c <HAL_FDCAN_ActivateNotification+0xf0>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e008      	b.n	8005a7a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a6e:	f043 0202 	orr.w	r2, r3, #2
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
  }
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	3fcfffff 	.word	0x3fcfffff
 8005a8c:	4000a800 	.word	0x4000a800

08005a90 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b096      	sub	sp, #88	@ 0x58
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005a98:	4b95      	ldr	r3, [pc, #596]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	079b      	lsls	r3, r3, #30
 8005a9e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005aa0:	4b93      	ldr	r3, [pc, #588]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	079b      	lsls	r3, r3, #30
 8005aa6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005ab6:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005abe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ad8:	4013      	ands	r3, r2
 8005ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005af0:	4013      	ands	r3, r2
 8005af2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afa:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005afe:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b08:	4013      	ands	r3, r2
 8005b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b12:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005b16:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b20:	4013      	ands	r3, r2
 8005b22:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00f      	beq.n	8005b5e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b50:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b52:	4b67      	ldr	r3, [pc, #412]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fa44 	bl	8005fe6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01c      	beq.n	8005ba2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d017      	beq.n	8005ba2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005b7a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b86:	4013      	ands	r3, r2
 8005b88:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b92:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b94:	4b56      	ldr	r3, [pc, #344]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005b9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f9f9 	bl	8005f94 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00d      	beq.n	8005bc4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bae:	4b51      	ldr	r3, [pc, #324]	@ (8005cf4 <HAL_FDCAN_IRQHandler+0x264>)
 8005bb0:	400b      	ands	r3, r1
 8005bb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bb4:	4a4e      	ldr	r2, [pc, #312]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb8:	0f9b      	lsrs	r3, r3, #30
 8005bba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005bbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f9b2 	bl	8005f28 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005bd0:	4b48      	ldr	r3, [pc, #288]	@ (8005cf4 <HAL_FDCAN_IRQHandler+0x264>)
 8005bd2:	400b      	ands	r3, r1
 8005bd4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bd6:	4a46      	ldr	r2, [pc, #280]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bda:	0f9b      	lsrs	r3, r3, #30
 8005bdc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005bde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f9ac 	bl	8005f3e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005bf2:	4b40      	ldr	r3, [pc, #256]	@ (8005cf4 <HAL_FDCAN_IRQHandler+0x264>)
 8005bf4:	400b      	ands	r3, r1
 8005bf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bfc:	0f9b      	lsrs	r3, r3, #30
 8005bfe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005c00:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fa fbd6 	bl	80003b4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00d      	beq.n	8005c2a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c14:	4b37      	ldr	r3, [pc, #220]	@ (8005cf4 <HAL_FDCAN_IRQHandler+0x264>)
 8005c16:	400b      	ands	r3, r1
 8005c18:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c1a:	4a35      	ldr	r2, [pc, #212]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005c1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c1e:	0f9b      	lsrs	r3, r3, #30
 8005c20:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005c22:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f995 	bl	8005f54 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00f      	beq.n	8005c54 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c46:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c48:	4b29      	ldr	r3, [pc, #164]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f98b 	bl	8005f6a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01c      	beq.n	8005c98 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d017      	beq.n	8005c98 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c70:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c88:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c8a:	4b19      	ldr	r3, [pc, #100]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005c90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f973 	bl	8005f7e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00f      	beq.n	8005cc2 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005cb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f974 	bl	8005faa <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d015      	beq.n	8005cf8 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d010      	beq.n	8005cf8 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005cde:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ce0:	4b03      	ldr	r3, [pc, #12]	@ (8005cf0 <HAL_FDCAN_IRQHandler+0x260>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f969 	bl	8005fbe <HAL_FDCAN_TimestampWraparoundCallback>
 8005cec:	e004      	b.n	8005cf8 <HAL_FDCAN_IRQHandler+0x268>
 8005cee:	bf00      	nop
 8005cf0:	4000a800 	.word	0x4000a800
 8005cf4:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00f      	beq.n	8005d22 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005d14:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d16:	4b81      	ldr	r3, [pc, #516]	@ (8005f1c <HAL_FDCAN_IRQHandler+0x48c>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f958 	bl	8005fd2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d014      	beq.n	8005d56 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00f      	beq.n	8005d56 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d40:	4b76      	ldr	r3, [pc, #472]	@ (8005f1c <HAL_FDCAN_IRQHandler+0x48c>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d4c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00d      	beq.n	8005d78 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d62:	4b6f      	ldr	r3, [pc, #444]	@ (8005f20 <HAL_FDCAN_IRQHandler+0x490>)
 8005d64:	400b      	ands	r3, r1
 8005d66:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d68:	4a6c      	ldr	r2, [pc, #432]	@ (8005f1c <HAL_FDCAN_IRQHandler+0x48c>)
 8005d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d6c:	0f9b      	lsrs	r3, r3, #30
 8005d6e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005d70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f94b 	bl	800600e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d011      	beq.n	8005da2 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d84:	4b66      	ldr	r3, [pc, #408]	@ (8005f20 <HAL_FDCAN_IRQHandler+0x490>)
 8005d86:	400b      	ands	r3, r1
 8005d88:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d8a:	4a64      	ldr	r2, [pc, #400]	@ (8005f1c <HAL_FDCAN_IRQHandler+0x48c>)
 8005d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d8e:	0f9b      	lsrs	r3, r3, #30
 8005d90:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a5f      	ldr	r2, [pc, #380]	@ (8005f24 <HAL_FDCAN_IRQHandler+0x494>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	f040 80aa 	bne.w	8005f02 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80a2 	beq.w	8005f02 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005de0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dea:	4013      	ands	r3, r2
 8005dec:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e02:	4013      	ands	r3, r2
 8005e04:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005e10:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	6a3a      	ldr	r2, [r7, #32]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005e28:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	4013      	ands	r3, r2
 8005e34:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e52:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005e54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f8e4 	bl	8006024 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e68:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005e6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f8e4 	bl	800603a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d019      	beq.n	8005eb0 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d014      	beq.n	8005eb0 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e9c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2240      	movs	r2, #64	@ 0x40
 8005ea4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	6939      	ldr	r1, [r7, #16]
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f8d0 	bl	8006050 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ebc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005ebe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f8d1 	bl	8006068 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00b      	beq.n	8005ee4 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	6a3a      	ldr	r2, [r7, #32]
 8005ed2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f874 	bl	8005ffa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005f12:	bf00      	nop
 8005f14:	3758      	adds	r7, #88	@ 0x58
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	4000a800 	.word	0x4000a800
 8005f20:	3fcfffff 	.word	0x3fcfffff
 8005f24:	4000a000 	.word	0x4000a000

08005f28 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
	...

08006080 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800608c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006096:	4ba7      	ldr	r3, [pc, #668]	@ (8006334 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006098:	4013      	ands	r3, r2
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	0091      	lsls	r1, r2, #2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	430b      	orrs	r3, r1
 80060a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060b0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b8:	041a      	lsls	r2, r3, #16
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	4413      	add	r3, r2
 80060cc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80060d6:	4b97      	ldr	r3, [pc, #604]	@ (8006334 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80060d8:	4013      	ands	r3, r2
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	0091      	lsls	r1, r2, #2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	430b      	orrs	r3, r1
 80060e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f8:	041a      	lsls	r2, r3, #16
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	4413      	add	r3, r2
 800610e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006118:	4b86      	ldr	r3, [pc, #536]	@ (8006334 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800611a:	4013      	ands	r3, r2
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	0091      	lsls	r1, r2, #2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	430b      	orrs	r3, r1
 8006126:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006132:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613a:	041a      	lsls	r2, r3, #16
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	4413      	add	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006160:	4b74      	ldr	r3, [pc, #464]	@ (8006334 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006162:	4013      	ands	r3, r2
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	0091      	lsls	r1, r2, #2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	430b      	orrs	r3, r1
 800616e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800617a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006182:	041a      	lsls	r2, r3, #16
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4413      	add	r3, r2
 800619e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80061a8:	4b62      	ldr	r3, [pc, #392]	@ (8006334 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	0091      	lsls	r1, r2, #2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	430b      	orrs	r3, r1
 80061b6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80061c2:	fb02 f303 	mul.w	r3, r2, r3
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4413      	add	r3, r2
 80061ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80061d4:	4b57      	ldr	r3, [pc, #348]	@ (8006334 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	0091      	lsls	r1, r2, #2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	430b      	orrs	r3, r1
 80061e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061ee:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f6:	041a      	lsls	r2, r3, #16
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	4413      	add	r3, r2
 800620c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006216:	4b47      	ldr	r3, [pc, #284]	@ (8006334 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006218:	4013      	ands	r3, r2
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	0091      	lsls	r1, r2, #2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	430b      	orrs	r3, r1
 8006224:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006230:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006238:	041a      	lsls	r2, r3, #16
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800624c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006254:	061a      	lsls	r2, r3, #24
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006264:	4b34      	ldr	r3, [pc, #208]	@ (8006338 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006266:	4413      	add	r3, r2
 8006268:	009a      	lsls	r2, r3, #2
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	441a      	add	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800629a:	fb01 f303 	mul.w	r3, r1, r3
 800629e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80062a0:	441a      	add	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80062b2:	fb01 f303 	mul.w	r3, r1, r3
 80062b6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80062b8:	441a      	add	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80062ca:	fb01 f303 	mul.w	r3, r1, r3
 80062ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80062d0:	441a      	add	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	441a      	add	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80062fa:	fb01 f303 	mul.w	r3, r1, r3
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006316:	fb01 f303 	mul.w	r3, r1, r3
 800631a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800631c:	441a      	add	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632a:	4a04      	ldr	r2, [pc, #16]	@ (800633c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d915      	bls.n	800635c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006330:	e006      	b.n	8006340 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006332:	bf00      	nop
 8006334:	ffff0003 	.word	0xffff0003
 8006338:	10002b00 	.word	0x10002b00
 800633c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006346:	f043 0220 	orr.w	r2, r3, #32
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2203      	movs	r2, #3
 8006354:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e010      	b.n	800637e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e005      	b.n	8006370 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3304      	adds	r3, #4
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	429a      	cmp	r2, r3
 800637a:	d3f3      	bcc.n	8006364 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop

0800638c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800638c:	b480      	push	{r7}
 800638e:	b089      	sub	sp, #36	@ 0x24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80063aa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80063b2:	4313      	orrs	r3, r2
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	e00a      	b.n	80063ce <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80063c0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80063c6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80063c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063cc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80063d8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80063de:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80063e4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	3304      	adds	r3, #4
 8006410:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	3304      	adds	r3, #4
 800641c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	e020      	b.n	8006466 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	3303      	adds	r3, #3
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	4413      	add	r3, r2
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	3302      	adds	r3, #2
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	440b      	add	r3, r1
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800643c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	3301      	adds	r3, #1
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	440b      	add	r3, r1
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800644a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	440a      	add	r2, r1
 8006452:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006454:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	3304      	adds	r3, #4
 800645e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	3304      	adds	r3, #4
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	4a06      	ldr	r2, [pc, #24]	@ (8006484 <FDCAN_CopyMessageToRAM+0xf8>)
 800646c:	5cd3      	ldrb	r3, [r2, r3]
 800646e:	461a      	mov	r2, r3
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	4293      	cmp	r3, r2
 8006474:	d3d6      	bcc.n	8006424 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	3724      	adds	r7, #36	@ 0x24
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	0800ad64 	.word	0x0800ad64

08006488 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006488:	b480      	push	{r7}
 800648a:	b089      	sub	sp, #36	@ 0x24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006496:	4b89      	ldr	r3, [pc, #548]	@ (80066bc <HAL_GPIO_Init+0x234>)
 8006498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800649a:	e194      	b.n	80067c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	2101      	movs	r1, #1
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	fa01 f303 	lsl.w	r3, r1, r3
 80064a8:	4013      	ands	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8186 	beq.w	80067c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d005      	beq.n	80064cc <HAL_GPIO_Init+0x44>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f003 0303 	and.w	r3, r3, #3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d130      	bne.n	800652e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	2203      	movs	r2, #3
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	4013      	ands	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006502:	2201      	movs	r2, #1
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	4013      	ands	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	091b      	lsrs	r3, r3, #4
 8006518:	f003 0201 	and.w	r2, r3, #1
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4313      	orrs	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b03      	cmp	r3, #3
 8006538:	d017      	beq.n	800656a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	2203      	movs	r2, #3
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	43db      	mvns	r3, r3
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	4013      	ands	r3, r2
 8006550:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	4313      	orrs	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d123      	bne.n	80065be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	08da      	lsrs	r2, r3, #3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3208      	adds	r2, #8
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	220f      	movs	r2, #15
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	43db      	mvns	r3, r3
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	4013      	ands	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	08da      	lsrs	r2, r3, #3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3208      	adds	r2, #8
 80065b8:	69b9      	ldr	r1, [r7, #24]
 80065ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	2203      	movs	r2, #3
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43db      	mvns	r3, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4013      	ands	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0203 	and.w	r2, r3, #3
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	fa02 f303 	lsl.w	r3, r2, r3
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80e0 	beq.w	80067c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006600:	4b2f      	ldr	r3, [pc, #188]	@ (80066c0 <HAL_GPIO_Init+0x238>)
 8006602:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006606:	4a2e      	ldr	r2, [pc, #184]	@ (80066c0 <HAL_GPIO_Init+0x238>)
 8006608:	f043 0302 	orr.w	r3, r3, #2
 800660c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006610:	4b2b      	ldr	r3, [pc, #172]	@ (80066c0 <HAL_GPIO_Init+0x238>)
 8006612:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800661e:	4a29      	ldr	r2, [pc, #164]	@ (80066c4 <HAL_GPIO_Init+0x23c>)
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	089b      	lsrs	r3, r3, #2
 8006624:	3302      	adds	r3, #2
 8006626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	220f      	movs	r2, #15
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	43db      	mvns	r3, r3
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	4013      	ands	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a20      	ldr	r2, [pc, #128]	@ (80066c8 <HAL_GPIO_Init+0x240>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d052      	beq.n	80066f0 <HAL_GPIO_Init+0x268>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a1f      	ldr	r2, [pc, #124]	@ (80066cc <HAL_GPIO_Init+0x244>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d031      	beq.n	80066b6 <HAL_GPIO_Init+0x22e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a1e      	ldr	r2, [pc, #120]	@ (80066d0 <HAL_GPIO_Init+0x248>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d02b      	beq.n	80066b2 <HAL_GPIO_Init+0x22a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a1d      	ldr	r2, [pc, #116]	@ (80066d4 <HAL_GPIO_Init+0x24c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d025      	beq.n	80066ae <HAL_GPIO_Init+0x226>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1c      	ldr	r2, [pc, #112]	@ (80066d8 <HAL_GPIO_Init+0x250>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d01f      	beq.n	80066aa <HAL_GPIO_Init+0x222>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1b      	ldr	r2, [pc, #108]	@ (80066dc <HAL_GPIO_Init+0x254>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d019      	beq.n	80066a6 <HAL_GPIO_Init+0x21e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1a      	ldr	r2, [pc, #104]	@ (80066e0 <HAL_GPIO_Init+0x258>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d013      	beq.n	80066a2 <HAL_GPIO_Init+0x21a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a19      	ldr	r2, [pc, #100]	@ (80066e4 <HAL_GPIO_Init+0x25c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00d      	beq.n	800669e <HAL_GPIO_Init+0x216>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a18      	ldr	r2, [pc, #96]	@ (80066e8 <HAL_GPIO_Init+0x260>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d007      	beq.n	800669a <HAL_GPIO_Init+0x212>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a17      	ldr	r2, [pc, #92]	@ (80066ec <HAL_GPIO_Init+0x264>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d101      	bne.n	8006696 <HAL_GPIO_Init+0x20e>
 8006692:	2309      	movs	r3, #9
 8006694:	e02d      	b.n	80066f2 <HAL_GPIO_Init+0x26a>
 8006696:	230a      	movs	r3, #10
 8006698:	e02b      	b.n	80066f2 <HAL_GPIO_Init+0x26a>
 800669a:	2308      	movs	r3, #8
 800669c:	e029      	b.n	80066f2 <HAL_GPIO_Init+0x26a>
 800669e:	2307      	movs	r3, #7
 80066a0:	e027      	b.n	80066f2 <HAL_GPIO_Init+0x26a>
 80066a2:	2306      	movs	r3, #6
 80066a4:	e025      	b.n	80066f2 <HAL_GPIO_Init+0x26a>
 80066a6:	2305      	movs	r3, #5
 80066a8:	e023      	b.n	80066f2 <HAL_GPIO_Init+0x26a>
 80066aa:	2304      	movs	r3, #4
 80066ac:	e021      	b.n	80066f2 <HAL_GPIO_Init+0x26a>
 80066ae:	2303      	movs	r3, #3
 80066b0:	e01f      	b.n	80066f2 <HAL_GPIO_Init+0x26a>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e01d      	b.n	80066f2 <HAL_GPIO_Init+0x26a>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e01b      	b.n	80066f2 <HAL_GPIO_Init+0x26a>
 80066ba:	bf00      	nop
 80066bc:	58000080 	.word	0x58000080
 80066c0:	58024400 	.word	0x58024400
 80066c4:	58000400 	.word	0x58000400
 80066c8:	58020000 	.word	0x58020000
 80066cc:	58020400 	.word	0x58020400
 80066d0:	58020800 	.word	0x58020800
 80066d4:	58020c00 	.word	0x58020c00
 80066d8:	58021000 	.word	0x58021000
 80066dc:	58021400 	.word	0x58021400
 80066e0:	58021800 	.word	0x58021800
 80066e4:	58021c00 	.word	0x58021c00
 80066e8:	58022000 	.word	0x58022000
 80066ec:	58022400 	.word	0x58022400
 80066f0:	2300      	movs	r3, #0
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	f002 0203 	and.w	r2, r2, #3
 80066f8:	0092      	lsls	r2, r2, #2
 80066fa:	4093      	lsls	r3, r2
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	4313      	orrs	r3, r2
 8006700:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006702:	4938      	ldr	r1, [pc, #224]	@ (80067e4 <HAL_GPIO_Init+0x35c>)
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	089b      	lsrs	r3, r3, #2
 8006708:	3302      	adds	r3, #2
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	43db      	mvns	r3, r3
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	4013      	ands	r3, r2
 8006720:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006736:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800673e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	43db      	mvns	r3, r3
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	4013      	ands	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006764:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	43db      	mvns	r3, r3
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4013      	ands	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	43db      	mvns	r3, r3
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	4013      	ands	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	3301      	adds	r3, #1
 80067c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f47f ae63 	bne.w	800649c <HAL_GPIO_Init+0x14>
  }
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	3724      	adds	r7, #36	@ 0x24
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	58000400 	.word	0x58000400

080067e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	807b      	strh	r3, [r7, #2]
 80067f4:	4613      	mov	r3, r2
 80067f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067f8:	787b      	ldrb	r3, [r7, #1]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067fe:	887a      	ldrh	r2, [r7, #2]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006804:	e003      	b.n	800680e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006806:	887b      	ldrh	r3, [r7, #2]
 8006808:	041a      	lsls	r2, r3, #16
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	619a      	str	r2, [r3, #24]
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800681a:	b480      	push	{r7}
 800681c:	b085      	sub	sp, #20
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800682c:	887a      	ldrh	r2, [r7, #2]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4013      	ands	r3, r2
 8006832:	041a      	lsls	r2, r3, #16
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	43d9      	mvns	r1, r3
 8006838:	887b      	ldrh	r3, [r7, #2]
 800683a:	400b      	ands	r3, r1
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	619a      	str	r2, [r3, #24]
}
 8006842:	bf00      	nop
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
	...

08006850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e08b      	b.n	800697a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fa fd7c 	bl	8001374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2224      	movs	r2, #36	@ 0x24
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0201 	bic.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80068a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d107      	bne.n	80068ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068c6:	609a      	str	r2, [r3, #8]
 80068c8:	e006      	b.n	80068d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80068d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d108      	bne.n	80068f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ee:	605a      	str	r2, [r3, #4]
 80068f0:	e007      	b.n	8006902 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6859      	ldr	r1, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	4b1d      	ldr	r3, [pc, #116]	@ (8006984 <HAL_I2C_Init+0x134>)
 800690e:	430b      	orrs	r3, r1
 8006910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	69d9      	ldr	r1, [r3, #28]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1a      	ldr	r2, [r3, #32]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	02008000 	.word	0x02008000

08006988 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b20      	cmp	r3, #32
 800699c:	d138      	bne.n	8006a10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e032      	b.n	8006a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2224      	movs	r2, #36	@ 0x24
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0201 	bic.w	r2, r2, #1
 80069ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80069da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6819      	ldr	r1, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	e000      	b.n	8006a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a10:	2302      	movs	r3, #2
  }
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b085      	sub	sp, #20
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d139      	bne.n	8006aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e033      	b.n	8006aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2224      	movs	r2, #36	@ 0x24
 8006a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006a70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e000      	b.n	8006aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006aa8:	2302      	movs	r3, #2
  }
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
	...

08006ab8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ac0:	4b19      	ldr	r3, [pc, #100]	@ (8006b28 <HAL_PWREx_ConfigSupply+0x70>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d00a      	beq.n	8006ae2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006acc:	4b16      	ldr	r3, [pc, #88]	@ (8006b28 <HAL_PWREx_ConfigSupply+0x70>)
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d001      	beq.n	8006ade <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e01f      	b.n	8006b1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e01d      	b.n	8006b1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006ae2:	4b11      	ldr	r3, [pc, #68]	@ (8006b28 <HAL_PWREx_ConfigSupply+0x70>)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f023 0207 	bic.w	r2, r3, #7
 8006aea:	490f      	ldr	r1, [pc, #60]	@ (8006b28 <HAL_PWREx_ConfigSupply+0x70>)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006af2:	f7fa ff47 	bl	8001984 <HAL_GetTick>
 8006af6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006af8:	e009      	b.n	8006b0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006afa:	f7fa ff43 	bl	8001984 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b08:	d901      	bls.n	8006b0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e007      	b.n	8006b1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b0e:	4b06      	ldr	r3, [pc, #24]	@ (8006b28 <HAL_PWREx_ConfigSupply+0x70>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b1a:	d1ee      	bne.n	8006afa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	58024800 	.word	0x58024800

08006b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08c      	sub	sp, #48	@ 0x30
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f000 bc1f 	b.w	800737e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80b3 	beq.w	8006cb4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b4e:	4b95      	ldr	r3, [pc, #596]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b58:	4b92      	ldr	r3, [pc, #584]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b60:	2b10      	cmp	r3, #16
 8006b62:	d007      	beq.n	8006b74 <HAL_RCC_OscConfig+0x48>
 8006b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b66:	2b18      	cmp	r3, #24
 8006b68:	d112      	bne.n	8006b90 <HAL_RCC_OscConfig+0x64>
 8006b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6c:	f003 0303 	and.w	r3, r3, #3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d10d      	bne.n	8006b90 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b74:	4b8b      	ldr	r3, [pc, #556]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8098 	beq.w	8006cb2 <HAL_RCC_OscConfig+0x186>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f040 8093 	bne.w	8006cb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e3f6      	b.n	800737e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b98:	d106      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x7c>
 8006b9a:	4b82      	ldr	r3, [pc, #520]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a81      	ldr	r2, [pc, #516]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	e058      	b.n	8006c5a <HAL_RCC_OscConfig+0x12e>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d112      	bne.n	8006bd6 <HAL_RCC_OscConfig+0xaa>
 8006bb0:	4b7c      	ldr	r3, [pc, #496]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a7b      	ldr	r2, [pc, #492]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	4b79      	ldr	r3, [pc, #484]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a78      	ldr	r2, [pc, #480]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006bc2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	4b76      	ldr	r3, [pc, #472]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a75      	ldr	r2, [pc, #468]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	e041      	b.n	8006c5a <HAL_RCC_OscConfig+0x12e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bde:	d112      	bne.n	8006c06 <HAL_RCC_OscConfig+0xda>
 8006be0:	4b70      	ldr	r3, [pc, #448]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a6f      	ldr	r2, [pc, #444]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006be6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	4b6d      	ldr	r3, [pc, #436]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a6c      	ldr	r2, [pc, #432]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006bf2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a69      	ldr	r2, [pc, #420]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	e029      	b.n	8006c5a <HAL_RCC_OscConfig+0x12e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006c0e:	d112      	bne.n	8006c36 <HAL_RCC_OscConfig+0x10a>
 8006c10:	4b64      	ldr	r3, [pc, #400]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a63      	ldr	r2, [pc, #396]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	4b61      	ldr	r3, [pc, #388]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a60      	ldr	r2, [pc, #384]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	4b5e      	ldr	r3, [pc, #376]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a5d      	ldr	r2, [pc, #372]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	e011      	b.n	8006c5a <HAL_RCC_OscConfig+0x12e>
 8006c36:	4b5b      	ldr	r3, [pc, #364]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a5a      	ldr	r2, [pc, #360]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	4b58      	ldr	r3, [pc, #352]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a57      	ldr	r2, [pc, #348]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	4b55      	ldr	r3, [pc, #340]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a54      	ldr	r2, [pc, #336]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d013      	beq.n	8006c8a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c62:	f7fa fe8f 	bl	8001984 <HAL_GetTick>
 8006c66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c6a:	f7fa fe8b 	bl	8001984 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b64      	cmp	r3, #100	@ 0x64
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e380      	b.n	800737e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c7c:	4b49      	ldr	r3, [pc, #292]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <HAL_RCC_OscConfig+0x13e>
 8006c88:	e014      	b.n	8006cb4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8a:	f7fa fe7b 	bl	8001984 <HAL_GetTick>
 8006c8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c92:	f7fa fe77 	bl	8001984 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b64      	cmp	r3, #100	@ 0x64
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e36c      	b.n	800737e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ca4:	4b3f      	ldr	r3, [pc, #252]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1f0      	bne.n	8006c92 <HAL_RCC_OscConfig+0x166>
 8006cb0:	e000      	b.n	8006cb4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cb2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 808c 	beq.w	8006dda <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cc2:	4b38      	ldr	r3, [pc, #224]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ccc:	4b35      	ldr	r3, [pc, #212]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d007      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x1bc>
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	2b18      	cmp	r3, #24
 8006cdc:	d137      	bne.n	8006d4e <HAL_RCC_OscConfig+0x222>
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d132      	bne.n	8006d4e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_RCC_OscConfig+0x1d4>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e33e      	b.n	800737e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d00:	4b28      	ldr	r3, [pc, #160]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f023 0219 	bic.w	r2, r3, #25
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4925      	ldr	r1, [pc, #148]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d12:	f7fa fe37 	bl	8001984 <HAL_GetTick>
 8006d16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d18:	e008      	b.n	8006d2c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d1a:	f7fa fe33 	bl	8001984 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e328      	b.n	800737e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f0      	beq.n	8006d1a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d38:	4b1a      	ldr	r3, [pc, #104]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	061b      	lsls	r3, r3, #24
 8006d46:	4917      	ldr	r1, [pc, #92]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d4c:	e045      	b.n	8006dda <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d028      	beq.n	8006da8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d56:	4b13      	ldr	r3, [pc, #76]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f023 0219 	bic.w	r2, r3, #25
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	4910      	ldr	r1, [pc, #64]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d68:	f7fa fe0c 	bl	8001984 <HAL_GetTick>
 8006d6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d70:	f7fa fe08 	bl	8001984 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e2fd      	b.n	800737e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d82:	4b08      	ldr	r3, [pc, #32]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d8e:	4b05      	ldr	r3, [pc, #20]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	061b      	lsls	r3, r3, #24
 8006d9c:	4901      	ldr	r1, [pc, #4]	@ (8006da4 <HAL_RCC_OscConfig+0x278>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	604b      	str	r3, [r1, #4]
 8006da2:	e01a      	b.n	8006dda <HAL_RCC_OscConfig+0x2ae>
 8006da4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006da8:	4b97      	ldr	r3, [pc, #604]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a96      	ldr	r2, [pc, #600]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db4:	f7fa fde6 	bl	8001984 <HAL_GetTick>
 8006db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dbc:	f7fa fde2 	bl	8001984 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e2d7      	b.n	800737e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dce:	4b8e      	ldr	r3, [pc, #568]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0304 	and.w	r3, r3, #4
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f0      	bne.n	8006dbc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0310 	and.w	r3, r3, #16
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d06a      	beq.n	8006ebc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006de6:	4b88      	ldr	r3, [pc, #544]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006df0:	4b85      	ldr	r3, [pc, #532]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d007      	beq.n	8006e0c <HAL_RCC_OscConfig+0x2e0>
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b18      	cmp	r3, #24
 8006e00:	d11b      	bne.n	8006e3a <HAL_RCC_OscConfig+0x30e>
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d116      	bne.n	8006e3a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_RCC_OscConfig+0x2f8>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	2b80      	cmp	r3, #128	@ 0x80
 8006e1e:	d001      	beq.n	8006e24 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e2ac      	b.n	800737e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e24:	4b78      	ldr	r3, [pc, #480]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	061b      	lsls	r3, r3, #24
 8006e32:	4975      	ldr	r1, [pc, #468]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e38:	e040      	b.n	8006ebc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d023      	beq.n	8006e8a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e42:	4b71      	ldr	r3, [pc, #452]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a70      	ldr	r2, [pc, #448]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4e:	f7fa fd99 	bl	8001984 <HAL_GetTick>
 8006e52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e54:	e008      	b.n	8006e68 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e56:	f7fa fd95 	bl	8001984 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d901      	bls.n	8006e68 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e28a      	b.n	800737e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e68:	4b67      	ldr	r3, [pc, #412]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0f0      	beq.n	8006e56 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e74:	4b64      	ldr	r3, [pc, #400]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	061b      	lsls	r3, r3, #24
 8006e82:	4961      	ldr	r1, [pc, #388]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60cb      	str	r3, [r1, #12]
 8006e88:	e018      	b.n	8006ebc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e8a:	4b5f      	ldr	r3, [pc, #380]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a5e      	ldr	r2, [pc, #376]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006e90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e96:	f7fa fd75 	bl	8001984 <HAL_GetTick>
 8006e9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e9c:	e008      	b.n	8006eb0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e9e:	f7fa fd71 	bl	8001984 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d901      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e266      	b.n	800737e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006eb0:	4b55      	ldr	r3, [pc, #340]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1f0      	bne.n	8006e9e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d036      	beq.n	8006f36 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d019      	beq.n	8006f04 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006ed6:	f043 0301 	orr.w	r3, r3, #1
 8006eda:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006edc:	f7fa fd52 	bl	8001984 <HAL_GetTick>
 8006ee0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ee4:	f7fa fd4e 	bl	8001984 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e243      	b.n	800737e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ef6:	4b44      	ldr	r3, [pc, #272]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0f0      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x3b8>
 8006f02:	e018      	b.n	8006f36 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f04:	4b40      	ldr	r3, [pc, #256]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f08:	4a3f      	ldr	r2, [pc, #252]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f10:	f7fa fd38 	bl	8001984 <HAL_GetTick>
 8006f14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f18:	f7fa fd34 	bl	8001984 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e229      	b.n	800737e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f2a:	4b37      	ldr	r3, [pc, #220]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1f0      	bne.n	8006f18 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d036      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d019      	beq.n	8006f7e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a2e      	ldr	r2, [pc, #184]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006f50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f56:	f7fa fd15 	bl	8001984 <HAL_GetTick>
 8006f5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f5c:	e008      	b.n	8006f70 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f5e:	f7fa fd11 	bl	8001984 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e206      	b.n	800737e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f70:	4b25      	ldr	r3, [pc, #148]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0f0      	beq.n	8006f5e <HAL_RCC_OscConfig+0x432>
 8006f7c:	e018      	b.n	8006fb0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f7e:	4b22      	ldr	r3, [pc, #136]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a21      	ldr	r2, [pc, #132]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006f84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f8a:	f7fa fcfb 	bl	8001984 <HAL_GetTick>
 8006f8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f90:	e008      	b.n	8006fa4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f92:	f7fa fcf7 	bl	8001984 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e1ec      	b.n	800737e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fa4:	4b18      	ldr	r3, [pc, #96]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1f0      	bne.n	8006f92 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 80af 	beq.w	800711c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fbe:	4b13      	ldr	r3, [pc, #76]	@ (800700c <HAL_RCC_OscConfig+0x4e0>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a12      	ldr	r2, [pc, #72]	@ (800700c <HAL_RCC_OscConfig+0x4e0>)
 8006fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fca:	f7fa fcdb 	bl	8001984 <HAL_GetTick>
 8006fce:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fd2:	f7fa fcd7 	bl	8001984 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b64      	cmp	r3, #100	@ 0x64
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e1cc      	b.n	800737e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fe4:	4b09      	ldr	r3, [pc, #36]	@ (800700c <HAL_RCC_OscConfig+0x4e0>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0f0      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d10b      	bne.n	8007010 <HAL_RCC_OscConfig+0x4e4>
 8006ff8:	4b03      	ldr	r3, [pc, #12]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffc:	4a02      	ldr	r2, [pc, #8]	@ (8007008 <HAL_RCC_OscConfig+0x4dc>)
 8006ffe:	f043 0301 	orr.w	r3, r3, #1
 8007002:	6713      	str	r3, [r2, #112]	@ 0x70
 8007004:	e05b      	b.n	80070be <HAL_RCC_OscConfig+0x592>
 8007006:	bf00      	nop
 8007008:	58024400 	.word	0x58024400
 800700c:	58024800 	.word	0x58024800
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d112      	bne.n	800703e <HAL_RCC_OscConfig+0x512>
 8007018:	4b9d      	ldr	r3, [pc, #628]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800701a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800701c:	4a9c      	ldr	r2, [pc, #624]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	6713      	str	r3, [r2, #112]	@ 0x70
 8007024:	4b9a      	ldr	r3, [pc, #616]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007028:	4a99      	ldr	r2, [pc, #612]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800702a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800702e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007030:	4b97      	ldr	r3, [pc, #604]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007034:	4a96      	ldr	r2, [pc, #600]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007036:	f023 0304 	bic.w	r3, r3, #4
 800703a:	6713      	str	r3, [r2, #112]	@ 0x70
 800703c:	e03f      	b.n	80070be <HAL_RCC_OscConfig+0x592>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	2b05      	cmp	r3, #5
 8007044:	d112      	bne.n	800706c <HAL_RCC_OscConfig+0x540>
 8007046:	4b92      	ldr	r3, [pc, #584]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800704a:	4a91      	ldr	r2, [pc, #580]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800704c:	f043 0304 	orr.w	r3, r3, #4
 8007050:	6713      	str	r3, [r2, #112]	@ 0x70
 8007052:	4b8f      	ldr	r3, [pc, #572]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007056:	4a8e      	ldr	r2, [pc, #568]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800705c:	6713      	str	r3, [r2, #112]	@ 0x70
 800705e:	4b8c      	ldr	r3, [pc, #560]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007062:	4a8b      	ldr	r2, [pc, #556]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007064:	f043 0301 	orr.w	r3, r3, #1
 8007068:	6713      	str	r3, [r2, #112]	@ 0x70
 800706a:	e028      	b.n	80070be <HAL_RCC_OscConfig+0x592>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b85      	cmp	r3, #133	@ 0x85
 8007072:	d112      	bne.n	800709a <HAL_RCC_OscConfig+0x56e>
 8007074:	4b86      	ldr	r3, [pc, #536]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007078:	4a85      	ldr	r2, [pc, #532]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800707a:	f043 0304 	orr.w	r3, r3, #4
 800707e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007080:	4b83      	ldr	r3, [pc, #524]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007084:	4a82      	ldr	r2, [pc, #520]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800708a:	6713      	str	r3, [r2, #112]	@ 0x70
 800708c:	4b80      	ldr	r3, [pc, #512]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800708e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007090:	4a7f      	ldr	r2, [pc, #508]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007092:	f043 0301 	orr.w	r3, r3, #1
 8007096:	6713      	str	r3, [r2, #112]	@ 0x70
 8007098:	e011      	b.n	80070be <HAL_RCC_OscConfig+0x592>
 800709a:	4b7d      	ldr	r3, [pc, #500]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800709c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800709e:	4a7c      	ldr	r2, [pc, #496]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80070a6:	4b7a      	ldr	r3, [pc, #488]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80070a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070aa:	4a79      	ldr	r2, [pc, #484]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80070ac:	f023 0304 	bic.w	r3, r3, #4
 80070b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80070b2:	4b77      	ldr	r3, [pc, #476]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b6:	4a76      	ldr	r2, [pc, #472]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80070b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d015      	beq.n	80070f2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c6:	f7fa fc5d 	bl	8001984 <HAL_GetTick>
 80070ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070cc:	e00a      	b.n	80070e4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ce:	f7fa fc59 	bl	8001984 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070dc:	4293      	cmp	r3, r2
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e14c      	b.n	800737e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070e4:	4b6a      	ldr	r3, [pc, #424]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80070e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e8:	f003 0302 	and.w	r3, r3, #2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0ee      	beq.n	80070ce <HAL_RCC_OscConfig+0x5a2>
 80070f0:	e014      	b.n	800711c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f2:	f7fa fc47 	bl	8001984 <HAL_GetTick>
 80070f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070f8:	e00a      	b.n	8007110 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070fa:	f7fa fc43 	bl	8001984 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007108:	4293      	cmp	r3, r2
 800710a:	d901      	bls.n	8007110 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e136      	b.n	800737e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007110:	4b5f      	ldr	r3, [pc, #380]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1ee      	bne.n	80070fa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 812b 	beq.w	800737c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007126:	4b5a      	ldr	r3, [pc, #360]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800712e:	2b18      	cmp	r3, #24
 8007130:	f000 80bb 	beq.w	80072aa <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007138:	2b02      	cmp	r3, #2
 800713a:	f040 8095 	bne.w	8007268 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800713e:	4b54      	ldr	r3, [pc, #336]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a53      	ldr	r2, [pc, #332]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007144:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714a:	f7fa fc1b 	bl	8001984 <HAL_GetTick>
 800714e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007152:	f7fa fc17 	bl	8001984 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e10c      	b.n	800737e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007164:	4b4a      	ldr	r3, [pc, #296]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1f0      	bne.n	8007152 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007170:	4b47      	ldr	r3, [pc, #284]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007172:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007174:	4b47      	ldr	r3, [pc, #284]	@ (8007294 <HAL_RCC_OscConfig+0x768>)
 8007176:	4013      	ands	r3, r2
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007180:	0112      	lsls	r2, r2, #4
 8007182:	430a      	orrs	r2, r1
 8007184:	4942      	ldr	r1, [pc, #264]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007186:	4313      	orrs	r3, r2
 8007188:	628b      	str	r3, [r1, #40]	@ 0x28
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800718e:	3b01      	subs	r3, #1
 8007190:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007198:	3b01      	subs	r3, #1
 800719a:	025b      	lsls	r3, r3, #9
 800719c:	b29b      	uxth	r3, r3
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a4:	3b01      	subs	r3, #1
 80071a6:	041b      	lsls	r3, r3, #16
 80071a8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b2:	3b01      	subs	r3, #1
 80071b4:	061b      	lsls	r3, r3, #24
 80071b6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071ba:	4935      	ldr	r1, [pc, #212]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80071c0:	4b33      	ldr	r3, [pc, #204]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c4:	4a32      	ldr	r2, [pc, #200]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80071c6:	f023 0301 	bic.w	r3, r3, #1
 80071ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071cc:	4b30      	ldr	r3, [pc, #192]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80071ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071d0:	4b31      	ldr	r3, [pc, #196]	@ (8007298 <HAL_RCC_OscConfig+0x76c>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80071d8:	00d2      	lsls	r2, r2, #3
 80071da:	492d      	ldr	r1, [pc, #180]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80071e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e4:	f023 020c 	bic.w	r2, r3, #12
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	4928      	ldr	r1, [pc, #160]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071f2:	4b27      	ldr	r3, [pc, #156]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 80071f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f6:	f023 0202 	bic.w	r2, r3, #2
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fe:	4924      	ldr	r1, [pc, #144]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007200:	4313      	orrs	r3, r2
 8007202:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007204:	4b22      	ldr	r3, [pc, #136]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	4a21      	ldr	r2, [pc, #132]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800720a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800720e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007210:	4b1f      	ldr	r3, [pc, #124]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007214:	4a1e      	ldr	r2, [pc, #120]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800721a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800721c:	4b1c      	ldr	r3, [pc, #112]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800721e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007220:	4a1b      	ldr	r2, [pc, #108]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007222:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007228:	4b19      	ldr	r3, [pc, #100]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800722a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722c:	4a18      	ldr	r2, [pc, #96]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007234:	4b16      	ldr	r3, [pc, #88]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a15      	ldr	r2, [pc, #84]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800723a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800723e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fa fba0 	bl	8001984 <HAL_GetTick>
 8007244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007248:	f7fa fb9c 	bl	8001984 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e091      	b.n	800737e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800725a:	4b0d      	ldr	r3, [pc, #52]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0f0      	beq.n	8007248 <HAL_RCC_OscConfig+0x71c>
 8007266:	e089      	b.n	800737c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007268:	4b09      	ldr	r3, [pc, #36]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a08      	ldr	r2, [pc, #32]	@ (8007290 <HAL_RCC_OscConfig+0x764>)
 800726e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007274:	f7fa fb86 	bl	8001984 <HAL_GetTick>
 8007278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800727a:	e00f      	b.n	800729c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800727c:	f7fa fb82 	bl	8001984 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d908      	bls.n	800729c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e077      	b.n	800737e <HAL_RCC_OscConfig+0x852>
 800728e:	bf00      	nop
 8007290:	58024400 	.word	0x58024400
 8007294:	fffffc0c 	.word	0xfffffc0c
 8007298:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800729c:	4b3a      	ldr	r3, [pc, #232]	@ (8007388 <HAL_RCC_OscConfig+0x85c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e9      	bne.n	800727c <HAL_RCC_OscConfig+0x750>
 80072a8:	e068      	b.n	800737c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072aa:	4b37      	ldr	r3, [pc, #220]	@ (8007388 <HAL_RCC_OscConfig+0x85c>)
 80072ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072b0:	4b35      	ldr	r3, [pc, #212]	@ (8007388 <HAL_RCC_OscConfig+0x85c>)
 80072b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d031      	beq.n	8007322 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f003 0203 	and.w	r2, r3, #3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d12a      	bne.n	8007322 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	091b      	lsrs	r3, r3, #4
 80072d0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d8:	429a      	cmp	r2, r3
 80072da:	d122      	bne.n	8007322 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d11a      	bne.n	8007322 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	0a5b      	lsrs	r3, r3, #9
 80072f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d111      	bne.n	8007322 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800730c:	429a      	cmp	r2, r3
 800730e:	d108      	bne.n	8007322 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	0e1b      	lsrs	r3, r3, #24
 8007314:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800731e:	429a      	cmp	r2, r3
 8007320:	d001      	beq.n	8007326 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e02b      	b.n	800737e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007326:	4b18      	ldr	r3, [pc, #96]	@ (8007388 <HAL_RCC_OscConfig+0x85c>)
 8007328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800732a:	08db      	lsrs	r3, r3, #3
 800732c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007330:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	429a      	cmp	r2, r3
 800733a:	d01f      	beq.n	800737c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800733c:	4b12      	ldr	r3, [pc, #72]	@ (8007388 <HAL_RCC_OscConfig+0x85c>)
 800733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007340:	4a11      	ldr	r2, [pc, #68]	@ (8007388 <HAL_RCC_OscConfig+0x85c>)
 8007342:	f023 0301 	bic.w	r3, r3, #1
 8007346:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007348:	f7fa fb1c 	bl	8001984 <HAL_GetTick>
 800734c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800734e:	bf00      	nop
 8007350:	f7fa fb18 	bl	8001984 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	4293      	cmp	r3, r2
 800735a:	d0f9      	beq.n	8007350 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800735c:	4b0a      	ldr	r3, [pc, #40]	@ (8007388 <HAL_RCC_OscConfig+0x85c>)
 800735e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007360:	4b0a      	ldr	r3, [pc, #40]	@ (800738c <HAL_RCC_OscConfig+0x860>)
 8007362:	4013      	ands	r3, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007368:	00d2      	lsls	r2, r2, #3
 800736a:	4907      	ldr	r1, [pc, #28]	@ (8007388 <HAL_RCC_OscConfig+0x85c>)
 800736c:	4313      	orrs	r3, r2
 800736e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007370:	4b05      	ldr	r3, [pc, #20]	@ (8007388 <HAL_RCC_OscConfig+0x85c>)
 8007372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007374:	4a04      	ldr	r2, [pc, #16]	@ (8007388 <HAL_RCC_OscConfig+0x85c>)
 8007376:	f043 0301 	orr.w	r3, r3, #1
 800737a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3730      	adds	r7, #48	@ 0x30
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	58024400 	.word	0x58024400
 800738c:	ffff0007 	.word	0xffff0007

08007390 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e19c      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073a4:	4b8a      	ldr	r3, [pc, #552]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d910      	bls.n	80073d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073b2:	4b87      	ldr	r3, [pc, #540]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f023 020f 	bic.w	r2, r3, #15
 80073ba:	4985      	ldr	r1, [pc, #532]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	4313      	orrs	r3, r2
 80073c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073c2:	4b83      	ldr	r3, [pc, #524]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d001      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e184      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d010      	beq.n	8007402 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	4b7b      	ldr	r3, [pc, #492]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d908      	bls.n	8007402 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073f0:	4b78      	ldr	r3, [pc, #480]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	4975      	ldr	r1, [pc, #468]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	2b00      	cmp	r3, #0
 800740c:	d010      	beq.n	8007430 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	695a      	ldr	r2, [r3, #20]
 8007412:	4b70      	ldr	r3, [pc, #448]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800741a:	429a      	cmp	r2, r3
 800741c:	d908      	bls.n	8007430 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800741e:	4b6d      	ldr	r3, [pc, #436]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	496a      	ldr	r1, [pc, #424]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800742c:	4313      	orrs	r3, r2
 800742e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b00      	cmp	r3, #0
 800743a:	d010      	beq.n	800745e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	4b64      	ldr	r3, [pc, #400]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007448:	429a      	cmp	r2, r3
 800744a:	d908      	bls.n	800745e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800744c:	4b61      	ldr	r3, [pc, #388]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	495e      	ldr	r1, [pc, #376]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800745a:	4313      	orrs	r3, r2
 800745c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d010      	beq.n	800748c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69da      	ldr	r2, [r3, #28]
 800746e:	4b59      	ldr	r3, [pc, #356]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007476:	429a      	cmp	r2, r3
 8007478:	d908      	bls.n	800748c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800747a:	4b56      	ldr	r3, [pc, #344]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	4953      	ldr	r1, [pc, #332]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007488:	4313      	orrs	r3, r2
 800748a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d010      	beq.n	80074ba <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68da      	ldr	r2, [r3, #12]
 800749c:	4b4d      	ldr	r3, [pc, #308]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d908      	bls.n	80074ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a8:	4b4a      	ldr	r3, [pc, #296]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f023 020f 	bic.w	r2, r3, #15
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	4947      	ldr	r1, [pc, #284]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d055      	beq.n	8007572 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80074c6:	4b43      	ldr	r3, [pc, #268]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	4940      	ldr	r1, [pc, #256]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d107      	bne.n	80074f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074e0:	4b3c      	ldr	r3, [pc, #240]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d121      	bne.n	8007530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0f6      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d107      	bne.n	8007508 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074f8:	4b36      	ldr	r3, [pc, #216]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d115      	bne.n	8007530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0ea      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d107      	bne.n	8007520 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007510:	4b30      	ldr	r3, [pc, #192]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007518:	2b00      	cmp	r3, #0
 800751a:	d109      	bne.n	8007530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e0de      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007520:	4b2c      	ldr	r3, [pc, #176]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0d6      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007530:	4b28      	ldr	r3, [pc, #160]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f023 0207 	bic.w	r2, r3, #7
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	4925      	ldr	r1, [pc, #148]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800753e:	4313      	orrs	r3, r2
 8007540:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007542:	f7fa fa1f 	bl	8001984 <HAL_GetTick>
 8007546:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007548:	e00a      	b.n	8007560 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800754a:	f7fa fa1b 	bl	8001984 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007558:	4293      	cmp	r3, r2
 800755a:	d901      	bls.n	8007560 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e0be      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007560:	4b1c      	ldr	r3, [pc, #112]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	429a      	cmp	r2, r3
 8007570:	d1eb      	bne.n	800754a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d010      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68da      	ldr	r2, [r3, #12]
 8007582:	4b14      	ldr	r3, [pc, #80]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	429a      	cmp	r2, r3
 800758c:	d208      	bcs.n	80075a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800758e:	4b11      	ldr	r3, [pc, #68]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	f023 020f 	bic.w	r2, r3, #15
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	490e      	ldr	r1, [pc, #56]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800759c:	4313      	orrs	r3, r2
 800759e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075a0:	4b0b      	ldr	r3, [pc, #44]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d214      	bcs.n	80075d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ae:	4b08      	ldr	r3, [pc, #32]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f023 020f 	bic.w	r2, r3, #15
 80075b6:	4906      	ldr	r1, [pc, #24]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075be:	4b04      	ldr	r3, [pc, #16]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d005      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e086      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
 80075d0:	52002000 	.word	0x52002000
 80075d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d010      	beq.n	8007606 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	4b3f      	ldr	r3, [pc, #252]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d208      	bcs.n	8007606 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075f4:	4b3c      	ldr	r3, [pc, #240]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	4939      	ldr	r1, [pc, #228]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007602:	4313      	orrs	r3, r2
 8007604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d010      	beq.n	8007634 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695a      	ldr	r2, [r3, #20]
 8007616:	4b34      	ldr	r3, [pc, #208]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800761e:	429a      	cmp	r2, r3
 8007620:	d208      	bcs.n	8007634 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007622:	4b31      	ldr	r3, [pc, #196]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	492e      	ldr	r1, [pc, #184]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007630:	4313      	orrs	r3, r2
 8007632:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b00      	cmp	r3, #0
 800763e:	d010      	beq.n	8007662 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699a      	ldr	r2, [r3, #24]
 8007644:	4b28      	ldr	r3, [pc, #160]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800764c:	429a      	cmp	r2, r3
 800764e:	d208      	bcs.n	8007662 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007650:	4b25      	ldr	r3, [pc, #148]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	4922      	ldr	r1, [pc, #136]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 800765e:	4313      	orrs	r3, r2
 8007660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d010      	beq.n	8007690 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69da      	ldr	r2, [r3, #28]
 8007672:	4b1d      	ldr	r3, [pc, #116]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800767a:	429a      	cmp	r2, r3
 800767c:	d208      	bcs.n	8007690 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800767e:	4b1a      	ldr	r3, [pc, #104]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	4917      	ldr	r1, [pc, #92]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 800768c:	4313      	orrs	r3, r2
 800768e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007690:	f000 f834 	bl	80076fc <HAL_RCC_GetSysClockFreq>
 8007694:	4602      	mov	r2, r0
 8007696:	4b14      	ldr	r3, [pc, #80]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	0a1b      	lsrs	r3, r3, #8
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	4912      	ldr	r1, [pc, #72]	@ (80076ec <HAL_RCC_ClockConfig+0x35c>)
 80076a2:	5ccb      	ldrb	r3, [r1, r3]
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ac:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80076ae:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	4a0d      	ldr	r2, [pc, #52]	@ (80076ec <HAL_RCC_ClockConfig+0x35c>)
 80076b8:	5cd3      	ldrb	r3, [r2, r3]
 80076ba:	f003 031f 	and.w	r3, r3, #31
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	fa22 f303 	lsr.w	r3, r2, r3
 80076c4:	4a0a      	ldr	r2, [pc, #40]	@ (80076f0 <HAL_RCC_ClockConfig+0x360>)
 80076c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076c8:	4a0a      	ldr	r2, [pc, #40]	@ (80076f4 <HAL_RCC_ClockConfig+0x364>)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80076ce:	4b0a      	ldr	r3, [pc, #40]	@ (80076f8 <HAL_RCC_ClockConfig+0x368>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fa f90c 	bl	80018f0 <HAL_InitTick>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	58024400 	.word	0x58024400
 80076ec:	0800ad4c 	.word	0x0800ad4c
 80076f0:	24000004 	.word	0x24000004
 80076f4:	24000000 	.word	0x24000000
 80076f8:	24000008 	.word	0x24000008

080076fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b089      	sub	sp, #36	@ 0x24
 8007700:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007702:	4bb3      	ldr	r3, [pc, #716]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800770a:	2b18      	cmp	r3, #24
 800770c:	f200 8155 	bhi.w	80079ba <HAL_RCC_GetSysClockFreq+0x2be>
 8007710:	a201      	add	r2, pc, #4	@ (adr r2, 8007718 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	0800777d 	.word	0x0800777d
 800771c:	080079bb 	.word	0x080079bb
 8007720:	080079bb 	.word	0x080079bb
 8007724:	080079bb 	.word	0x080079bb
 8007728:	080079bb 	.word	0x080079bb
 800772c:	080079bb 	.word	0x080079bb
 8007730:	080079bb 	.word	0x080079bb
 8007734:	080079bb 	.word	0x080079bb
 8007738:	080077a3 	.word	0x080077a3
 800773c:	080079bb 	.word	0x080079bb
 8007740:	080079bb 	.word	0x080079bb
 8007744:	080079bb 	.word	0x080079bb
 8007748:	080079bb 	.word	0x080079bb
 800774c:	080079bb 	.word	0x080079bb
 8007750:	080079bb 	.word	0x080079bb
 8007754:	080079bb 	.word	0x080079bb
 8007758:	080077a9 	.word	0x080077a9
 800775c:	080079bb 	.word	0x080079bb
 8007760:	080079bb 	.word	0x080079bb
 8007764:	080079bb 	.word	0x080079bb
 8007768:	080079bb 	.word	0x080079bb
 800776c:	080079bb 	.word	0x080079bb
 8007770:	080079bb 	.word	0x080079bb
 8007774:	080079bb 	.word	0x080079bb
 8007778:	080077af 	.word	0x080077af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800777c:	4b94      	ldr	r3, [pc, #592]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0320 	and.w	r3, r3, #32
 8007784:	2b00      	cmp	r3, #0
 8007786:	d009      	beq.n	800779c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007788:	4b91      	ldr	r3, [pc, #580]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	08db      	lsrs	r3, r3, #3
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	4a90      	ldr	r2, [pc, #576]	@ (80079d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007794:	fa22 f303 	lsr.w	r3, r2, r3
 8007798:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800779a:	e111      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800779c:	4b8d      	ldr	r3, [pc, #564]	@ (80079d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800779e:	61bb      	str	r3, [r7, #24]
      break;
 80077a0:	e10e      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80077a2:	4b8d      	ldr	r3, [pc, #564]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077a4:	61bb      	str	r3, [r7, #24]
      break;
 80077a6:	e10b      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80077a8:	4b8c      	ldr	r3, [pc, #560]	@ (80079dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80077aa:	61bb      	str	r3, [r7, #24]
      break;
 80077ac:	e108      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077ae:	4b88      	ldr	r3, [pc, #544]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80077b8:	4b85      	ldr	r3, [pc, #532]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077bc:	091b      	lsrs	r3, r3, #4
 80077be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80077c4:	4b82      	ldr	r3, [pc, #520]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80077ce:	4b80      	ldr	r3, [pc, #512]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077d2:	08db      	lsrs	r3, r3, #3
 80077d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	fb02 f303 	mul.w	r3, r2, r3
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80e1 	beq.w	80079b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	f000 8083 	beq.w	8007900 <HAL_RCC_GetSysClockFreq+0x204>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	f200 80a1 	bhi.w	8007944 <HAL_RCC_GetSysClockFreq+0x248>
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <HAL_RCC_GetSysClockFreq+0x114>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d056      	beq.n	80078bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800780e:	e099      	b.n	8007944 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007810:	4b6f      	ldr	r3, [pc, #444]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b00      	cmp	r3, #0
 800781a:	d02d      	beq.n	8007878 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800781c:	4b6c      	ldr	r3, [pc, #432]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	08db      	lsrs	r3, r3, #3
 8007822:	f003 0303 	and.w	r3, r3, #3
 8007826:	4a6b      	ldr	r2, [pc, #428]	@ (80079d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007828:	fa22 f303 	lsr.w	r3, r2, r3
 800782c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	ee07 3a90 	vmov	s15, r3
 800783e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007846:	4b62      	ldr	r3, [pc, #392]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007856:	ed97 6a02 	vldr	s12, [r7, #8]
 800785a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800785e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007872:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007876:	e087      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007882:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80079e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788a:	4b51      	ldr	r3, [pc, #324]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800788c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789a:	ed97 6a02 	vldr	s12, [r7, #8]
 800789e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078ba:	e065      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	ee07 3a90 	vmov	s15, r3
 80078c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80079e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ce:	4b40      	ldr	r3, [pc, #256]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078de:	ed97 6a02 	vldr	s12, [r7, #8]
 80078e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078fe:	e043      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80079ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800790e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007912:	4b2f      	ldr	r3, [pc, #188]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007922:	ed97 6a02 	vldr	s12, [r7, #8]
 8007926:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800792a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800792e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007942:	e021      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80079e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007956:	4b1e      	ldr	r3, [pc, #120]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007966:	ed97 6a02 	vldr	s12, [r7, #8]
 800796a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800796e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800797a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007986:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007988:	4b11      	ldr	r3, [pc, #68]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798c:	0a5b      	lsrs	r3, r3, #9
 800798e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007992:	3301      	adds	r3, #1
 8007994:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ac:	ee17 3a90 	vmov	r3, s15
 80079b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80079b2:	e005      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	61bb      	str	r3, [r7, #24]
      break;
 80079b8:	e002      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80079ba:	4b07      	ldr	r3, [pc, #28]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079bc:	61bb      	str	r3, [r7, #24]
      break;
 80079be:	bf00      	nop
  }

  return sysclockfreq;
 80079c0:	69bb      	ldr	r3, [r7, #24]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3724      	adds	r7, #36	@ 0x24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	58024400 	.word	0x58024400
 80079d4:	03d09000 	.word	0x03d09000
 80079d8:	003d0900 	.word	0x003d0900
 80079dc:	017d7840 	.word	0x017d7840
 80079e0:	46000000 	.word	0x46000000
 80079e4:	4c742400 	.word	0x4c742400
 80079e8:	4a742400 	.word	0x4a742400
 80079ec:	4bbebc20 	.word	0x4bbebc20

080079f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80079f6:	f7ff fe81 	bl	80076fc <HAL_RCC_GetSysClockFreq>
 80079fa:	4602      	mov	r2, r0
 80079fc:	4b10      	ldr	r3, [pc, #64]	@ (8007a40 <HAL_RCC_GetHCLKFreq+0x50>)
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	0a1b      	lsrs	r3, r3, #8
 8007a02:	f003 030f 	and.w	r3, r3, #15
 8007a06:	490f      	ldr	r1, [pc, #60]	@ (8007a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a08:	5ccb      	ldrb	r3, [r1, r3]
 8007a0a:	f003 031f 	and.w	r3, r3, #31
 8007a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a12:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007a14:	4b0a      	ldr	r3, [pc, #40]	@ (8007a40 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	4a09      	ldr	r2, [pc, #36]	@ (8007a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a1e:	5cd3      	ldrb	r3, [r2, r3]
 8007a20:	f003 031f 	and.w	r3, r3, #31
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	fa22 f303 	lsr.w	r3, r2, r3
 8007a2a:	4a07      	ldr	r2, [pc, #28]	@ (8007a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a2e:	4a07      	ldr	r2, [pc, #28]	@ (8007a4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a34:	4b04      	ldr	r3, [pc, #16]	@ (8007a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a36:	681b      	ldr	r3, [r3, #0]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	58024400 	.word	0x58024400
 8007a44:	0800ad4c 	.word	0x0800ad4c
 8007a48:	24000004 	.word	0x24000004
 8007a4c:	24000000 	.word	0x24000000

08007a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007a54:	f7ff ffcc 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	4b06      	ldr	r3, [pc, #24]	@ (8007a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	091b      	lsrs	r3, r3, #4
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	4904      	ldr	r1, [pc, #16]	@ (8007a78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a66:	5ccb      	ldrb	r3, [r1, r3]
 8007a68:	f003 031f 	and.w	r3, r3, #31
 8007a6c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	58024400 	.word	0x58024400
 8007a78:	0800ad4c 	.word	0x0800ad4c

08007a7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a80:	b0c8      	sub	sp, #288	@ 0x120
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007aa0:	2500      	movs	r5, #0
 8007aa2:	ea54 0305 	orrs.w	r3, r4, r5
 8007aa6:	d049      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ab2:	d02f      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007ab4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ab8:	d828      	bhi.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007abe:	d01a      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007ac0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ac4:	d822      	bhi.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ace:	d007      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ad0:	e01c      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ad2:	4ba7      	ldr	r3, [pc, #668]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad6:	4aa6      	ldr	r2, [pc, #664]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ade:	e01a      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	2102      	movs	r1, #2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f002 fa6d 	bl	8009fc8 <RCCEx_PLL2_Config>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007af4:	e00f      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007afa:	3328      	adds	r3, #40	@ 0x28
 8007afc:	2102      	movs	r1, #2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f002 fb14 	bl	800a12c <RCCEx_PLL3_Config>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b0a:	e004      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b12:	e000      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b1e:	4b94      	ldr	r3, [pc, #592]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b2c:	4a90      	ldr	r2, [pc, #576]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b32:	e003      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007b48:	f04f 0900 	mov.w	r9, #0
 8007b4c:	ea58 0309 	orrs.w	r3, r8, r9
 8007b50:	d047      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d82a      	bhi.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b62:	bf00      	nop
 8007b64:	08007b79 	.word	0x08007b79
 8007b68:	08007b87 	.word	0x08007b87
 8007b6c:	08007b9d 	.word	0x08007b9d
 8007b70:	08007bbb 	.word	0x08007bbb
 8007b74:	08007bbb 	.word	0x08007bbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b78:	4b7d      	ldr	r3, [pc, #500]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	4a7c      	ldr	r2, [pc, #496]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b84:	e01a      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f002 fa1a 	bl	8009fc8 <RCCEx_PLL2_Config>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b9a:	e00f      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ba0:	3328      	adds	r3, #40	@ 0x28
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f002 fac1 	bl	800a12c <RCCEx_PLL3_Config>
 8007baa:	4603      	mov	r3, r0
 8007bac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bb0:	e004      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007bb8:	e000      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc8:	f023 0107 	bic.w	r1, r3, #7
 8007bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bd2:	4a67      	ldr	r2, [pc, #412]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bd8:	e003      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bde:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007bee:	f04f 0b00 	mov.w	fp, #0
 8007bf2:	ea5a 030b 	orrs.w	r3, sl, fp
 8007bf6:	d054      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bfe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007c02:	d036      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007c04:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007c08:	d82f      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c0e:	d032      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c14:	d829      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007c16:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c18:	d02f      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007c1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c1c:	d825      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007c1e:	2b80      	cmp	r3, #128	@ 0x80
 8007c20:	d018      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007c22:	2b80      	cmp	r3, #128	@ 0x80
 8007c24:	d821      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007c2a:	2b40      	cmp	r3, #64	@ 0x40
 8007c2c:	d007      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007c2e:	e01c      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c30:	4b4f      	ldr	r3, [pc, #316]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c34:	4a4e      	ldr	r2, [pc, #312]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007c3c:	e01e      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c42:	3308      	adds	r3, #8
 8007c44:	2100      	movs	r1, #0
 8007c46:	4618      	mov	r0, r3
 8007c48:	f002 f9be 	bl	8009fc8 <RCCEx_PLL2_Config>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007c52:	e013      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c58:	3328      	adds	r3, #40	@ 0x28
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f002 fa65 	bl	800a12c <RCCEx_PLL3_Config>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007c68:	e008      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c70:	e004      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007c72:	bf00      	nop
 8007c74:	e002      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007c76:	bf00      	nop
 8007c78:	e000      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007c84:	4b3a      	ldr	r3, [pc, #232]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c88:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c92:	4a37      	ldr	r2, [pc, #220]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c98:	e003      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c9e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007cae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007cb8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	d05c      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cc8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007ccc:	d03b      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007cce:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007cd2:	d834      	bhi.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cd8:	d037      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007cda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cde:	d82e      	bhi.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007ce0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007ce4:	d033      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007ce6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007cea:	d828      	bhi.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cf0:	d01a      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cf6:	d822      	bhi.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d00:	d007      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007d02:	e01c      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d04:	4b1a      	ldr	r3, [pc, #104]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d08:	4a19      	ldr	r2, [pc, #100]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007d10:	e01e      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d16:	3308      	adds	r3, #8
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f002 f954 	bl	8009fc8 <RCCEx_PLL2_Config>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007d26:	e013      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d2c:	3328      	adds	r3, #40	@ 0x28
 8007d2e:	2100      	movs	r1, #0
 8007d30:	4618      	mov	r0, r3
 8007d32:	f002 f9fb 	bl	800a12c <RCCEx_PLL3_Config>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007d3c:	e008      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d44:	e004      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007d46:	bf00      	nop
 8007d48:	e002      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007d4a:	bf00      	nop
 8007d4c:	e000      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10d      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007d58:	4b05      	ldr	r3, [pc, #20]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d5c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d66:	4a02      	ldr	r2, [pc, #8]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d6c:	e006      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007d6e:	bf00      	nop
 8007d70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007d88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007d96:	460b      	mov	r3, r1
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	d03a      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da2:	2b30      	cmp	r3, #48	@ 0x30
 8007da4:	d01f      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007da6:	2b30      	cmp	r3, #48	@ 0x30
 8007da8:	d819      	bhi.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	d00c      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	d815      	bhi.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d019      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007db6:	2b10      	cmp	r3, #16
 8007db8:	d111      	bne.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dba:	4bae      	ldr	r3, [pc, #696]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbe:	4aad      	ldr	r2, [pc, #692]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007dc6:	e011      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dcc:	3308      	adds	r3, #8
 8007dce:	2102      	movs	r1, #2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f002 f8f9 	bl	8009fc8 <RCCEx_PLL2_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007ddc:	e006      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007de4:	e002      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007de6:	bf00      	nop
 8007de8:	e000      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007df4:	4b9f      	ldr	r3, [pc, #636]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e02:	4a9c      	ldr	r2, [pc, #624]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e04:	430b      	orrs	r3, r1
 8007e06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e08:	e003      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007e1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e22:	2300      	movs	r3, #0
 8007e24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e28:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	d051      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e3c:	d035      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e42:	d82e      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007e44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e48:	d031      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007e4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e4e:	d828      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e54:	d01a      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e5a:	d822      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e64:	d007      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8007e66:	e01c      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e68:	4b82      	ldr	r3, [pc, #520]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6c:	4a81      	ldr	r2, [pc, #516]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e74:	e01c      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f002 f8a2 	bl	8009fc8 <RCCEx_PLL2_Config>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e8a:	e011      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e90:	3328      	adds	r3, #40	@ 0x28
 8007e92:	2100      	movs	r1, #0
 8007e94:	4618      	mov	r0, r3
 8007e96:	f002 f949 	bl	800a12c <RCCEx_PLL3_Config>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ea0:	e006      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ea8:	e002      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007eaa:	bf00      	nop
 8007eac:	e000      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007eb8:	4b6e      	ldr	r3, [pc, #440]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ebc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ec6:	4a6b      	ldr	r2, [pc, #428]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ecc:	e003      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ece:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ed2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007eec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	d053      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f00:	d033      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007f02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f06:	d82c      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007f08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f0c:	d02f      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007f0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f12:	d826      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007f14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f18:	d02b      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007f1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f1e:	d820      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f24:	d012      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007f26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f2a:	d81a      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d022      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f34:	d115      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f002 f842 	bl	8009fc8 <RCCEx_PLL2_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f4a:	e015      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f50:	3328      	adds	r3, #40	@ 0x28
 8007f52:	2101      	movs	r1, #1
 8007f54:	4618      	mov	r0, r3
 8007f56:	f002 f8e9 	bl	800a12c <RCCEx_PLL3_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f60:	e00a      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f68:	e006      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007f6a:	bf00      	nop
 8007f6c:	e004      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007f6e:	bf00      	nop
 8007f70:	e002      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007f72:	bf00      	nop
 8007f74:	e000      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f80:	4b3c      	ldr	r3, [pc, #240]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f8e:	4a39      	ldr	r2, [pc, #228]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f90:	430b      	orrs	r3, r1
 8007f92:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f94:	e003      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007faa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fb4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	d060      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007fc6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007fca:	d039      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007fcc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007fd0:	d832      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fd6:	d035      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fdc:	d82c      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe2:	d031      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe8:	d826      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007fea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fee:	d02d      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007ff0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ff4:	d820      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007ff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ffa:	d012      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008000:	d81a      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d024      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800800a:	d115      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800800c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008010:	3308      	adds	r3, #8
 8008012:	2101      	movs	r1, #1
 8008014:	4618      	mov	r0, r3
 8008016:	f001 ffd7 	bl	8009fc8 <RCCEx_PLL2_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008020:	e017      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008026:	3328      	adds	r3, #40	@ 0x28
 8008028:	2101      	movs	r1, #1
 800802a:	4618      	mov	r0, r3
 800802c:	f002 f87e 	bl	800a12c <RCCEx_PLL3_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008036:	e00c      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800803e:	e008      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008040:	bf00      	nop
 8008042:	e006      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008044:	bf00      	nop
 8008046:	e004      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008048:	bf00      	nop
 800804a:	e002      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800804c:	bf00      	nop
 800804e:	e000      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008052:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10e      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800805a:	4b06      	ldr	r3, [pc, #24]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800805c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800805e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800806a:	4a02      	ldr	r2, [pc, #8]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800806c:	430b      	orrs	r3, r1
 800806e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008070:	e006      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008072:	bf00      	nop
 8008074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008078:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800807c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800808c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008090:	2300      	movs	r3, #0
 8008092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008096:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800809a:	460b      	mov	r3, r1
 800809c:	4313      	orrs	r3, r2
 800809e:	d037      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80080a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080aa:	d00e      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80080ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080b0:	d816      	bhi.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d018      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80080b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ba:	d111      	bne.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080bc:	4bc4      	ldr	r3, [pc, #784]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c0:	4ac3      	ldr	r2, [pc, #780]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80080c8:	e00f      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ce:	3308      	adds	r3, #8
 80080d0:	2101      	movs	r1, #1
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 ff78 	bl	8009fc8 <RCCEx_PLL2_Config>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80080de:	e004      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080e6:	e000      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80080e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080f2:	4bb7      	ldr	r3, [pc, #732]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80080fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008100:	4ab3      	ldr	r2, [pc, #716]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008102:	430b      	orrs	r3, r1
 8008104:	6513      	str	r3, [r2, #80]	@ 0x50
 8008106:	e003      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008108:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800810c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800811c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008120:	2300      	movs	r3, #0
 8008122:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008126:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800812a:	460b      	mov	r3, r1
 800812c:	4313      	orrs	r3, r2
 800812e:	d039      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008136:	2b03      	cmp	r3, #3
 8008138:	d81c      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800813a:	a201      	add	r2, pc, #4	@ (adr r2, 8008140 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	0800817d 	.word	0x0800817d
 8008144:	08008151 	.word	0x08008151
 8008148:	0800815f 	.word	0x0800815f
 800814c:	0800817d 	.word	0x0800817d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008150:	4b9f      	ldr	r3, [pc, #636]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	4a9e      	ldr	r2, [pc, #632]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800815a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800815c:	e00f      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800815e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008162:	3308      	adds	r3, #8
 8008164:	2102      	movs	r1, #2
 8008166:	4618      	mov	r0, r3
 8008168:	f001 ff2e 	bl	8009fc8 <RCCEx_PLL2_Config>
 800816c:	4603      	mov	r3, r0
 800816e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008172:	e004      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800817a:	e000      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800817c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800817e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008186:	4b92      	ldr	r3, [pc, #584]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800818a:	f023 0103 	bic.w	r1, r3, #3
 800818e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008194:	4a8e      	ldr	r2, [pc, #568]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008196:	430b      	orrs	r3, r1
 8008198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800819a:	e003      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80081b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081b4:	2300      	movs	r3, #0
 80081b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80081be:	460b      	mov	r3, r1
 80081c0:	4313      	orrs	r3, r2
 80081c2:	f000 8099 	beq.w	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081c6:	4b83      	ldr	r3, [pc, #524]	@ (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a82      	ldr	r2, [pc, #520]	@ (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081d2:	f7f9 fbd7 	bl	8001984 <HAL_GetTick>
 80081d6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081da:	e00b      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081dc:	f7f9 fbd2 	bl	8001984 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	2b64      	cmp	r3, #100	@ 0x64
 80081ea:	d903      	bls.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081f2:	e005      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081f4:	4b77      	ldr	r3, [pc, #476]	@ (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0ed      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008200:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008204:	2b00      	cmp	r3, #0
 8008206:	d173      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008208:	4b71      	ldr	r3, [pc, #452]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800820a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800820c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008210:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008214:	4053      	eors	r3, r2
 8008216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800821a:	2b00      	cmp	r3, #0
 800821c:	d015      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800821e:	4b6c      	ldr	r3, [pc, #432]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008226:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800822a:	4b69      	ldr	r3, [pc, #420]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800822c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822e:	4a68      	ldr	r2, [pc, #416]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008234:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008236:	4b66      	ldr	r3, [pc, #408]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800823a:	4a65      	ldr	r2, [pc, #404]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800823c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008240:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008242:	4a63      	ldr	r2, [pc, #396]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008248:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800824a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800824e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008256:	d118      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008258:	f7f9 fb94 	bl	8001984 <HAL_GetTick>
 800825c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008260:	e00d      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008262:	f7f9 fb8f 	bl	8001984 <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800826c:	1ad2      	subs	r2, r2, r3
 800826e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008272:	429a      	cmp	r2, r3
 8008274:	d903      	bls.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800827c:	e005      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800827e:	4b54      	ldr	r3, [pc, #336]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0eb      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800828a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800828e:	2b00      	cmp	r3, #0
 8008290:	d129      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800829a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800829e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082a2:	d10e      	bne.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80082a4:	4b4a      	ldr	r3, [pc, #296]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80082ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082b4:	091a      	lsrs	r2, r3, #4
 80082b6:	4b48      	ldr	r3, [pc, #288]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	4a45      	ldr	r2, [pc, #276]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082bc:	430b      	orrs	r3, r1
 80082be:	6113      	str	r3, [r2, #16]
 80082c0:	e005      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 80082c2:	4b43      	ldr	r3, [pc, #268]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	4a42      	ldr	r2, [pc, #264]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80082cc:	6113      	str	r3, [r2, #16]
 80082ce:	4b40      	ldr	r3, [pc, #256]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80082d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082de:	4a3c      	ldr	r2, [pc, #240]	@ (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082e0:	430b      	orrs	r3, r1
 80082e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80082e4:	e008      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80082ee:	e003      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80082f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f002 0301 	and.w	r3, r2, #1
 8008304:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008308:	2300      	movs	r3, #0
 800830a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800830e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008312:	460b      	mov	r3, r1
 8008314:	4313      	orrs	r3, r2
 8008316:	f000 8090 	beq.w	800843a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800831a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800831e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008322:	2b28      	cmp	r3, #40	@ 0x28
 8008324:	d870      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008326:	a201      	add	r2, pc, #4	@ (adr r2, 800832c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	08008411 	.word	0x08008411
 8008330:	08008409 	.word	0x08008409
 8008334:	08008409 	.word	0x08008409
 8008338:	08008409 	.word	0x08008409
 800833c:	08008409 	.word	0x08008409
 8008340:	08008409 	.word	0x08008409
 8008344:	08008409 	.word	0x08008409
 8008348:	08008409 	.word	0x08008409
 800834c:	080083dd 	.word	0x080083dd
 8008350:	08008409 	.word	0x08008409
 8008354:	08008409 	.word	0x08008409
 8008358:	08008409 	.word	0x08008409
 800835c:	08008409 	.word	0x08008409
 8008360:	08008409 	.word	0x08008409
 8008364:	08008409 	.word	0x08008409
 8008368:	08008409 	.word	0x08008409
 800836c:	080083f3 	.word	0x080083f3
 8008370:	08008409 	.word	0x08008409
 8008374:	08008409 	.word	0x08008409
 8008378:	08008409 	.word	0x08008409
 800837c:	08008409 	.word	0x08008409
 8008380:	08008409 	.word	0x08008409
 8008384:	08008409 	.word	0x08008409
 8008388:	08008409 	.word	0x08008409
 800838c:	08008411 	.word	0x08008411
 8008390:	08008409 	.word	0x08008409
 8008394:	08008409 	.word	0x08008409
 8008398:	08008409 	.word	0x08008409
 800839c:	08008409 	.word	0x08008409
 80083a0:	08008409 	.word	0x08008409
 80083a4:	08008409 	.word	0x08008409
 80083a8:	08008409 	.word	0x08008409
 80083ac:	08008411 	.word	0x08008411
 80083b0:	08008409 	.word	0x08008409
 80083b4:	08008409 	.word	0x08008409
 80083b8:	08008409 	.word	0x08008409
 80083bc:	08008409 	.word	0x08008409
 80083c0:	08008409 	.word	0x08008409
 80083c4:	08008409 	.word	0x08008409
 80083c8:	08008409 	.word	0x08008409
 80083cc:	08008411 	.word	0x08008411
 80083d0:	58024400 	.word	0x58024400
 80083d4:	58024800 	.word	0x58024800
 80083d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e0:	3308      	adds	r3, #8
 80083e2:	2101      	movs	r1, #1
 80083e4:	4618      	mov	r0, r3
 80083e6:	f001 fdef 	bl	8009fc8 <RCCEx_PLL2_Config>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80083f0:	e00f      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f6:	3328      	adds	r3, #40	@ 0x28
 80083f8:	2101      	movs	r1, #1
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 fe96 	bl	800a12c <RCCEx_PLL3_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008406:	e004      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800840e:	e000      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008412:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10b      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800841a:	4bc0      	ldr	r3, [pc, #768]	@ (800871c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800841c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800841e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800842a:	4abc      	ldr	r2, [pc, #752]	@ (800871c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800842c:	430b      	orrs	r3, r1
 800842e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008430:	e003      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008432:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008436:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800843a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	f002 0302 	and.w	r3, r2, #2
 8008446:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800844a:	2300      	movs	r3, #0
 800844c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008450:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008454:	460b      	mov	r3, r1
 8008456:	4313      	orrs	r3, r2
 8008458:	d043      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800845a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008462:	2b05      	cmp	r3, #5
 8008464:	d824      	bhi.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008466:	a201      	add	r2, pc, #4	@ (adr r2, 800846c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	080084b9 	.word	0x080084b9
 8008470:	08008485 	.word	0x08008485
 8008474:	0800849b 	.word	0x0800849b
 8008478:	080084b9 	.word	0x080084b9
 800847c:	080084b9 	.word	0x080084b9
 8008480:	080084b9 	.word	0x080084b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008488:	3308      	adds	r3, #8
 800848a:	2101      	movs	r1, #1
 800848c:	4618      	mov	r0, r3
 800848e:	f001 fd9b 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008498:	e00f      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800849a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800849e:	3328      	adds	r3, #40	@ 0x28
 80084a0:	2101      	movs	r1, #1
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 fe42 	bl	800a12c <RCCEx_PLL3_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084ae:	e004      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084b6:	e000      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80084b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80084c2:	4b96      	ldr	r3, [pc, #600]	@ (800871c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80084c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084c6:	f023 0107 	bic.w	r1, r3, #7
 80084ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084d2:	4a92      	ldr	r2, [pc, #584]	@ (800871c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80084d4:	430b      	orrs	r3, r1
 80084d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80084d8:	e003      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f002 0304 	and.w	r3, r2, #4
 80084ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084f2:	2300      	movs	r3, #0
 80084f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084f8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80084fc:	460b      	mov	r3, r1
 80084fe:	4313      	orrs	r3, r2
 8008500:	d043      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008506:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800850a:	2b05      	cmp	r3, #5
 800850c:	d824      	bhi.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800850e:	a201      	add	r2, pc, #4	@ (adr r2, 8008514 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	08008561 	.word	0x08008561
 8008518:	0800852d 	.word	0x0800852d
 800851c:	08008543 	.word	0x08008543
 8008520:	08008561 	.word	0x08008561
 8008524:	08008561 	.word	0x08008561
 8008528:	08008561 	.word	0x08008561
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800852c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008530:	3308      	adds	r3, #8
 8008532:	2101      	movs	r1, #1
 8008534:	4618      	mov	r0, r3
 8008536:	f001 fd47 	bl	8009fc8 <RCCEx_PLL2_Config>
 800853a:	4603      	mov	r3, r0
 800853c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008540:	e00f      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008546:	3328      	adds	r3, #40	@ 0x28
 8008548:	2101      	movs	r1, #1
 800854a:	4618      	mov	r0, r3
 800854c:	f001 fdee 	bl	800a12c <RCCEx_PLL3_Config>
 8008550:	4603      	mov	r3, r0
 8008552:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008556:	e004      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800855e:	e000      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008562:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10b      	bne.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800856a:	4b6c      	ldr	r3, [pc, #432]	@ (800871c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800856c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800856e:	f023 0107 	bic.w	r1, r3, #7
 8008572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800857a:	4a68      	ldr	r2, [pc, #416]	@ (800871c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800857c:	430b      	orrs	r3, r1
 800857e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008580:	e003      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008582:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008586:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800858a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f002 0320 	and.w	r3, r2, #32
 8008596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800859a:	2300      	movs	r3, #0
 800859c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80085a4:	460b      	mov	r3, r1
 80085a6:	4313      	orrs	r3, r2
 80085a8:	d055      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80085aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80085b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085b6:	d033      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80085b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085bc:	d82c      	bhi.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80085be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c2:	d02f      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80085c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c8:	d826      	bhi.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80085ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085ce:	d02b      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80085d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085d4:	d820      	bhi.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80085d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085da:	d012      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80085dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085e0:	d81a      	bhi.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d022      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80085e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ea:	d115      	bne.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085f0:	3308      	adds	r3, #8
 80085f2:	2100      	movs	r1, #0
 80085f4:	4618      	mov	r0, r3
 80085f6:	f001 fce7 	bl	8009fc8 <RCCEx_PLL2_Config>
 80085fa:	4603      	mov	r3, r0
 80085fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008600:	e015      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008606:	3328      	adds	r3, #40	@ 0x28
 8008608:	2102      	movs	r1, #2
 800860a:	4618      	mov	r0, r3
 800860c:	f001 fd8e 	bl	800a12c <RCCEx_PLL3_Config>
 8008610:	4603      	mov	r3, r0
 8008612:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008616:	e00a      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800861e:	e006      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008620:	bf00      	nop
 8008622:	e004      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008624:	bf00      	nop
 8008626:	e002      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008628:	bf00      	nop
 800862a:	e000      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800862c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800862e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10b      	bne.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008636:	4b39      	ldr	r3, [pc, #228]	@ (800871c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800863e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008642:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008646:	4a35      	ldr	r2, [pc, #212]	@ (800871c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008648:	430b      	orrs	r3, r1
 800864a:	6553      	str	r3, [r2, #84]	@ 0x54
 800864c:	e003      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008652:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008666:	2300      	movs	r3, #0
 8008668:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800866c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008670:	460b      	mov	r3, r1
 8008672:	4313      	orrs	r3, r2
 8008674:	d058      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800867a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800867e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008682:	d033      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008684:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008688:	d82c      	bhi.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800868a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800868e:	d02f      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008694:	d826      	bhi.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008696:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800869a:	d02b      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800869c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086a0:	d820      	bhi.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80086a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086a6:	d012      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80086a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086ac:	d81a      	bhi.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d022      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80086b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086b6:	d115      	bne.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086bc:	3308      	adds	r3, #8
 80086be:	2100      	movs	r1, #0
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 fc81 	bl	8009fc8 <RCCEx_PLL2_Config>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80086cc:	e015      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086d2:	3328      	adds	r3, #40	@ 0x28
 80086d4:	2102      	movs	r1, #2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 fd28 	bl	800a12c <RCCEx_PLL3_Config>
 80086dc:	4603      	mov	r3, r0
 80086de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80086e2:	e00a      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80086ea:	e006      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80086ec:	bf00      	nop
 80086ee:	e004      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80086f0:	bf00      	nop
 80086f2:	e002      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80086f4:	bf00      	nop
 80086f6:	e000      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80086f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10e      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008702:	4b06      	ldr	r3, [pc, #24]	@ (800871c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008706:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800870a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800870e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008712:	4a02      	ldr	r2, [pc, #8]	@ (800871c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008714:	430b      	orrs	r3, r1
 8008716:	6593      	str	r3, [r2, #88]	@ 0x58
 8008718:	e006      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800871a:	bf00      	nop
 800871c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008720:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008724:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008734:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008738:	2300      	movs	r3, #0
 800873a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800873e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008742:	460b      	mov	r3, r1
 8008744:	4313      	orrs	r3, r2
 8008746:	d055      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800874c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008750:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008754:	d033      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008756:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800875a:	d82c      	bhi.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800875c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008760:	d02f      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008762:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008766:	d826      	bhi.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008768:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800876c:	d02b      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800876e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008772:	d820      	bhi.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008778:	d012      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800877a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800877e:	d81a      	bhi.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d022      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008788:	d115      	bne.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800878a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800878e:	3308      	adds	r3, #8
 8008790:	2100      	movs	r1, #0
 8008792:	4618      	mov	r0, r3
 8008794:	f001 fc18 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008798:	4603      	mov	r3, r0
 800879a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800879e:	e015      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087a4:	3328      	adds	r3, #40	@ 0x28
 80087a6:	2102      	movs	r1, #2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f001 fcbf 	bl	800a12c <RCCEx_PLL3_Config>
 80087ae:	4603      	mov	r3, r0
 80087b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087b4:	e00a      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087bc:	e006      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80087be:	bf00      	nop
 80087c0:	e004      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80087c2:	bf00      	nop
 80087c4:	e002      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80087c6:	bf00      	nop
 80087c8:	e000      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80087ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10b      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80087d4:	4ba1      	ldr	r3, [pc, #644]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80087d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80087dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80087e4:	4a9d      	ldr	r2, [pc, #628]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80087e6:	430b      	orrs	r3, r1
 80087e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80087ea:	e003      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80087f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	f002 0308 	and.w	r3, r2, #8
 8008800:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008804:	2300      	movs	r3, #0
 8008806:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800880a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800880e:	460b      	mov	r3, r1
 8008810:	4313      	orrs	r3, r2
 8008812:	d01e      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800881c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008820:	d10c      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008826:	3328      	adds	r3, #40	@ 0x28
 8008828:	2102      	movs	r1, #2
 800882a:	4618      	mov	r0, r3
 800882c:	f001 fc7e 	bl	800a12c <RCCEx_PLL3_Config>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800883c:	4b87      	ldr	r3, [pc, #540]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800883e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008840:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800884c:	4a83      	ldr	r2, [pc, #524]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800884e:	430b      	orrs	r3, r1
 8008850:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	f002 0310 	and.w	r3, r2, #16
 800885e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008862:	2300      	movs	r3, #0
 8008864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008868:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800886c:	460b      	mov	r3, r1
 800886e:	4313      	orrs	r3, r2
 8008870:	d01e      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008876:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800887a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800887e:	d10c      	bne.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008884:	3328      	adds	r3, #40	@ 0x28
 8008886:	2102      	movs	r1, #2
 8008888:	4618      	mov	r0, r3
 800888a:	f001 fc4f 	bl	800a12c <RCCEx_PLL3_Config>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800889a:	4b70      	ldr	r3, [pc, #448]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800889c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800889e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088aa:	4a6c      	ldr	r2, [pc, #432]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80088ac:	430b      	orrs	r3, r1
 80088ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80088bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088c0:	2300      	movs	r3, #0
 80088c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80088ca:	460b      	mov	r3, r1
 80088cc:	4313      	orrs	r3, r2
 80088ce:	d03e      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80088d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80088d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088dc:	d022      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80088de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088e2:	d81b      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80088e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088ec:	d00b      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80088ee:	e015      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088f4:	3308      	adds	r3, #8
 80088f6:	2100      	movs	r1, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 fb65 	bl	8009fc8 <RCCEx_PLL2_Config>
 80088fe:	4603      	mov	r3, r0
 8008900:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008904:	e00f      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800890a:	3328      	adds	r3, #40	@ 0x28
 800890c:	2102      	movs	r1, #2
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fc0c 	bl	800a12c <RCCEx_PLL3_Config>
 8008914:	4603      	mov	r3, r0
 8008916:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800891a:	e004      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008922:	e000      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008926:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10b      	bne.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800892e:	4b4b      	ldr	r3, [pc, #300]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008932:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800893a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800893e:	4a47      	ldr	r2, [pc, #284]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008940:	430b      	orrs	r3, r1
 8008942:	6593      	str	r3, [r2, #88]	@ 0x58
 8008944:	e003      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008946:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800894a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800894e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800895a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800895c:	2300      	movs	r3, #0
 800895e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008960:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008964:	460b      	mov	r3, r1
 8008966:	4313      	orrs	r3, r2
 8008968:	d03b      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800896a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800896e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008972:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008976:	d01f      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008978:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800897c:	d818      	bhi.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800897e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008982:	d003      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008984:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008988:	d007      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800898a:	e011      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800898c:	4b33      	ldr	r3, [pc, #204]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800898e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008990:	4a32      	ldr	r2, [pc, #200]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008998:	e00f      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800899a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800899e:	3328      	adds	r3, #40	@ 0x28
 80089a0:	2101      	movs	r1, #1
 80089a2:	4618      	mov	r0, r3
 80089a4:	f001 fbc2 	bl	800a12c <RCCEx_PLL3_Config>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80089ae:	e004      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089b6:	e000      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80089b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10b      	bne.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089c2:	4b26      	ldr	r3, [pc, #152]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80089c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80089ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089d2:	4a22      	ldr	r2, [pc, #136]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80089d4:	430b      	orrs	r3, r1
 80089d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80089d8:	e003      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80089e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80089ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80089f0:	2300      	movs	r3, #0
 80089f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80089f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80089f8:	460b      	mov	r3, r1
 80089fa:	4313      	orrs	r3, r2
 80089fc:	d034      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80089fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a0c:	d007      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008a0e:	e011      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a10:	4b12      	ldr	r3, [pc, #72]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a14:	4a11      	ldr	r2, [pc, #68]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a1c:	e00e      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a22:	3308      	adds	r3, #8
 8008a24:	2102      	movs	r1, #2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f001 face 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a32:	e003      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10d      	bne.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a44:	4b05      	ldr	r3, [pc, #20]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a52:	4a02      	ldr	r2, [pc, #8]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a54:	430b      	orrs	r3, r1
 8008a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a58:	e006      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008a5a:	bf00      	nop
 8008a5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008a74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a76:	2300      	movs	r3, #0
 8008a78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4313      	orrs	r3, r2
 8008a82:	d00c      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a88:	3328      	adds	r3, #40	@ 0x28
 8008a8a:	2102      	movs	r1, #2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f001 fb4d 	bl	800a12c <RCCEx_PLL3_Config>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008aaa:	663b      	str	r3, [r7, #96]	@ 0x60
 8008aac:	2300      	movs	r3, #0
 8008aae:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ab0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	d038      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ac6:	d018      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008ac8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008acc:	d811      	bhi.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad2:	d014      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad8:	d80b      	bhi.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d011      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ae2:	d106      	bne.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ae4:	4bc3      	ldr	r3, [pc, #780]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae8:	4ac2      	ldr	r2, [pc, #776]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008af0:	e008      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008af8:	e004      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008afa:	bf00      	nop
 8008afc:	e002      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008afe:	bf00      	nop
 8008b00:	e000      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10b      	bne.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b0c:	4bb9      	ldr	r3, [pc, #740]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b1c:	4ab5      	ldr	r2, [pc, #724]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008b1e:	430b      	orrs	r3, r1
 8008b20:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b22:	e003      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008b38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008b42:	460b      	mov	r3, r1
 8008b44:	4313      	orrs	r3, r2
 8008b46:	d009      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b48:	4baa      	ldr	r3, [pc, #680]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b56:	4aa7      	ldr	r2, [pc, #668]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b64:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008b68:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008b72:	460b      	mov	r3, r1
 8008b74:	4313      	orrs	r3, r2
 8008b76:	d009      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b78:	4b9e      	ldr	r3, [pc, #632]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b7c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b86:	4a9b      	ldr	r2, [pc, #620]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008b88:	430b      	orrs	r3, r1
 8008b8a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008b98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b9e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	d009      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008ba8:	4b92      	ldr	r3, [pc, #584]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bac:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bb6:	4a8f      	ldr	r2, [pc, #572]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008bb8:	430b      	orrs	r3, r1
 8008bba:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008bc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bca:	2300      	movs	r3, #0
 8008bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	d00e      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bd8:	4b86      	ldr	r3, [pc, #536]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	4a85      	ldr	r2, [pc, #532]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008bde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008be2:	6113      	str	r3, [r2, #16]
 8008be4:	4b83      	ldr	r3, [pc, #524]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008be6:	6919      	ldr	r1, [r3, #16]
 8008be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008bf0:	4a80      	ldr	r2, [pc, #512]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008bf2:	430b      	orrs	r3, r1
 8008bf4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c04:	2300      	movs	r3, #0
 8008c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c08:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	d009      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c12:	4b78      	ldr	r3, [pc, #480]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c20:	4a74      	ldr	r2, [pc, #464]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008c22:	430b      	orrs	r3, r1
 8008c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008c32:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c34:	2300      	movs	r3, #0
 8008c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	d00a      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c42:	4b6c      	ldr	r3, [pc, #432]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c46:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c52:	4a68      	ldr	r2, [pc, #416]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008c54:	430b      	orrs	r3, r1
 8008c56:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	2100      	movs	r1, #0
 8008c62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c6a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4313      	orrs	r3, r2
 8008c72:	d011      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c78:	3308      	adds	r3, #8
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f001 f9a3 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008c82:	4603      	mov	r3, r0
 8008c84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008c88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	6239      	str	r1, [r7, #32]
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008caa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	d011      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cb8:	3308      	adds	r3, #8
 8008cba:	2101      	movs	r1, #1
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f001 f983 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	61b9      	str	r1, [r7, #24]
 8008ce4:	f003 0304 	and.w	r3, r3, #4
 8008ce8:	61fb      	str	r3, [r7, #28]
 8008cea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	d011      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cf8:	3308      	adds	r3, #8
 8008cfa:	2102      	movs	r1, #2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f001 f963 	bl	8009fc8 <RCCEx_PLL2_Config>
 8008d02:	4603      	mov	r3, r0
 8008d04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008d08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d003      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	2100      	movs	r1, #0
 8008d22:	6139      	str	r1, [r7, #16]
 8008d24:	f003 0308 	and.w	r3, r3, #8
 8008d28:	617b      	str	r3, [r7, #20]
 8008d2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4313      	orrs	r3, r2
 8008d32:	d011      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d38:	3328      	adds	r3, #40	@ 0x28
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f001 f9f5 	bl	800a12c <RCCEx_PLL3_Config>
 8008d42:	4603      	mov	r3, r0
 8008d44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008d48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d54:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	2100      	movs	r1, #0
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4313      	orrs	r3, r2
 8008d72:	d011      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d78:	3328      	adds	r3, #40	@ 0x28
 8008d7a:	2101      	movs	r1, #1
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f001 f9d5 	bl	800a12c <RCCEx_PLL3_Config>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008d88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	2100      	movs	r1, #0
 8008da2:	6039      	str	r1, [r7, #0]
 8008da4:	f003 0320 	and.w	r3, r3, #32
 8008da8:	607b      	str	r3, [r7, #4]
 8008daa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008dae:	460b      	mov	r3, r1
 8008db0:	4313      	orrs	r3, r2
 8008db2:	d011      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db8:	3328      	adds	r3, #40	@ 0x28
 8008dba:	2102      	movs	r1, #2
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f001 f9b5 	bl	800a12c <RCCEx_PLL3_Config>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008dc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8008dd8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	e000      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008dec:	46bd      	mov	sp, r7
 8008dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008df2:	bf00      	nop
 8008df4:	58024400 	.word	0x58024400

08008df8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b090      	sub	sp, #64	@ 0x40
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e06:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	f040 8094 	bne.w	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008e10:	4b97      	ldr	r3, [pc, #604]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	f200 8087 	bhi.w	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008e22:	a201      	add	r2, pc, #4	@ (adr r2, 8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e28:	08008e3d 	.word	0x08008e3d
 8008e2c:	08008e65 	.word	0x08008e65
 8008e30:	08008e8d 	.word	0x08008e8d
 8008e34:	08008f29 	.word	0x08008f29
 8008e38:	08008eb5 	.word	0x08008eb5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e3c:	4b8c      	ldr	r3, [pc, #560]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e48:	d108      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 ff68 	bl	8009d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e58:	f000 bc97 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e60:	f000 bc93 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e64:	4b82      	ldr	r3, [pc, #520]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e70:	d108      	bne.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e72:	f107 0318 	add.w	r3, r7, #24
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fcac 	bl	80097d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e80:	f000 bc83 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e88:	f000 bc7f 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e8c:	4b78      	ldr	r3, [pc, #480]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e98:	d108      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e9a:	f107 030c 	add.w	r3, r7, #12
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fdec 	bl	8009a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ea8:	f000 bc6f 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb0:	f000 bc6b 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008eb4:	4b6e      	ldr	r3, [pc, #440]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ebc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ebe:	4b6c      	ldr	r3, [pc, #432]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0304 	and.w	r3, r3, #4
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d10c      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d109      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ed0:	4b67      	ldr	r3, [pc, #412]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	08db      	lsrs	r3, r3, #3
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	4a66      	ldr	r2, [pc, #408]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008edc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ee2:	e01f      	b.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ee4:	4b62      	ldr	r3, [pc, #392]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ef0:	d106      	bne.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ef8:	d102      	bne.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008efa:	4b5f      	ldr	r3, [pc, #380]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008efe:	e011      	b.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f00:	4b5b      	ldr	r3, [pc, #364]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f0c:	d106      	bne.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f14:	d102      	bne.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f16:	4b59      	ldr	r3, [pc, #356]	@ (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f1a:	e003      	b.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f20:	f000 bc33 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008f24:	f000 bc31 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f28:	4b55      	ldr	r3, [pc, #340]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f2c:	f000 bc2d 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f34:	f000 bc29 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f3c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008f40:	430b      	orrs	r3, r1
 8008f42:	f040 809f 	bne.w	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8008f46:	4b4a      	ldr	r3, [pc, #296]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008f4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f56:	d04d      	beq.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f5e:	f200 8084 	bhi.w	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f64:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f66:	d07d      	beq.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8008f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f6c:	d87d      	bhi.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	2b80      	cmp	r3, #128	@ 0x80
 8008f72:	d02d      	beq.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f76:	2b80      	cmp	r3, #128	@ 0x80
 8008f78:	d877      	bhi.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f82:	2b40      	cmp	r3, #64	@ 0x40
 8008f84:	d012      	beq.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008f86:	e070      	b.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f88:	4b39      	ldr	r3, [pc, #228]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f94:	d107      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 fec2 	bl	8009d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fa4:	e3f1      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008faa:	e3ee      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fac:	4b30      	ldr	r3, [pc, #192]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fb8:	d107      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fba:	f107 0318 	add.w	r3, r7, #24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fc08 	bl	80097d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fc8:	e3df      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fce:	e3dc      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fd0:	4b27      	ldr	r3, [pc, #156]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fdc:	d107      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fde:	f107 030c 	add.w	r3, r7, #12
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 fd4a 	bl	8009a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fec:	e3cd      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff2:	e3ca      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ff8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ffc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0304 	and.w	r3, r3, #4
 8009006:	2b04      	cmp	r3, #4
 8009008:	d10c      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800900a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009010:	4b17      	ldr	r3, [pc, #92]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	08db      	lsrs	r3, r3, #3
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	4a16      	ldr	r2, [pc, #88]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800901c:	fa22 f303 	lsr.w	r3, r2, r3
 8009020:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009022:	e01e      	b.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009024:	4b12      	ldr	r3, [pc, #72]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800902c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009030:	d106      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8009032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009038:	d102      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800903a:	4b0f      	ldr	r3, [pc, #60]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800903c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800903e:	e010      	b.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009040:	4b0b      	ldr	r3, [pc, #44]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009048:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800904c:	d106      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800904e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009054:	d102      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009056:	4b09      	ldr	r3, [pc, #36]	@ (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800905a:	e002      	b.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009060:	e393      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009062:	e392      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009064:	4b06      	ldr	r3, [pc, #24]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009068:	e38f      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800906e:	e38c      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009070:	58024400 	.word	0x58024400
 8009074:	03d09000 	.word	0x03d09000
 8009078:	003d0900 	.word	0x003d0900
 800907c:	017d7840 	.word	0x017d7840
 8009080:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009088:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800908c:	430b      	orrs	r3, r1
 800908e:	f040 809c 	bne.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8009092:	4b9e      	ldr	r3, [pc, #632]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009096:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800909a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090a2:	d054      	beq.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80090a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090aa:	f200 808b 	bhi.w	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80090ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80090b4:	f000 8083 	beq.w	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80090be:	f200 8081 	bhi.w	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090c8:	d02f      	beq.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80090ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090d0:	d878      	bhi.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80090d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d004      	beq.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80090d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090de:	d012      	beq.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80090e0:	e070      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090e2:	4b8a      	ldr	r3, [pc, #552]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090ee:	d107      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 fe15 	bl	8009d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090fe:	e344      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009104:	e341      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009106:	4b81      	ldr	r3, [pc, #516]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800910e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009112:	d107      	bne.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009114:	f107 0318 	add.w	r3, r7, #24
 8009118:	4618      	mov	r0, r3
 800911a:	f000 fb5b 	bl	80097d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009122:	e332      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009128:	e32f      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800912a:	4b78      	ldr	r3, [pc, #480]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009136:	d107      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009138:	f107 030c 	add.w	r3, r7, #12
 800913c:	4618      	mov	r0, r3
 800913e:	f000 fc9d 	bl	8009a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009146:	e320      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009148:	2300      	movs	r3, #0
 800914a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800914c:	e31d      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800914e:	4b6f      	ldr	r3, [pc, #444]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009152:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009156:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009158:	4b6c      	ldr	r3, [pc, #432]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b04      	cmp	r3, #4
 8009162:	d10c      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009166:	2b00      	cmp	r3, #0
 8009168:	d109      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800916a:	4b68      	ldr	r3, [pc, #416]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	08db      	lsrs	r3, r3, #3
 8009170:	f003 0303 	and.w	r3, r3, #3
 8009174:	4a66      	ldr	r2, [pc, #408]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8009176:	fa22 f303 	lsr.w	r3, r2, r3
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800917c:	e01e      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800917e:	4b63      	ldr	r3, [pc, #396]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800918a:	d106      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800918c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800918e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009192:	d102      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009194:	4b5f      	ldr	r3, [pc, #380]	@ (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009198:	e010      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800919a:	4b5c      	ldr	r3, [pc, #368]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091a6:	d106      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80091a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ae:	d102      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091b0:	4b59      	ldr	r3, [pc, #356]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80091b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091b4:	e002      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80091ba:	e2e6      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80091bc:	e2e5      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091be:	4b57      	ldr	r3, [pc, #348]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80091c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c2:	e2e2      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c8:	e2df      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80091ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80091d2:	430b      	orrs	r3, r1
 80091d4:	f040 80a7 	bne.w	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80091d8:	4b4c      	ldr	r3, [pc, #304]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80091da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80091e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80091e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091e8:	d055      	beq.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80091ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091f0:	f200 8096 	bhi.w	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80091f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091fa:	f000 8084 	beq.w	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80091fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009200:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009204:	f200 808c 	bhi.w	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800920e:	d030      	beq.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8009210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009216:	f200 8083 	bhi.w	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800921a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921c:	2b00      	cmp	r3, #0
 800921e:	d004      	beq.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009226:	d012      	beq.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8009228:	e07a      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800922a:	4b38      	ldr	r3, [pc, #224]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009232:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009236:	d107      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009238:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800923c:	4618      	mov	r0, r3
 800923e:	f000 fd71 	bl	8009d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009246:	e2a0      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800924c:	e29d      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800924e:	4b2f      	ldr	r3, [pc, #188]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009256:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800925a:	d107      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800925c:	f107 0318 	add.w	r3, r7, #24
 8009260:	4618      	mov	r0, r3
 8009262:	f000 fab7 	bl	80097d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800926a:	e28e      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009270:	e28b      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009272:	4b26      	ldr	r3, [pc, #152]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800927a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800927e:	d107      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009280:	f107 030c 	add.w	r3, r7, #12
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fbf9 	bl	8009a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800928e:	e27c      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009294:	e279      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009296:	4b1d      	ldr	r3, [pc, #116]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800929a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800929e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092a0:	4b1a      	ldr	r3, [pc, #104]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0304 	and.w	r3, r3, #4
 80092a8:	2b04      	cmp	r3, #4
 80092aa:	d10c      	bne.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80092ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d109      	bne.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092b2:	4b16      	ldr	r3, [pc, #88]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	08db      	lsrs	r3, r3, #3
 80092b8:	f003 0303 	and.w	r3, r3, #3
 80092bc:	4a14      	ldr	r2, [pc, #80]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80092be:	fa22 f303 	lsr.w	r3, r2, r3
 80092c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092c4:	e01e      	b.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092c6:	4b11      	ldr	r3, [pc, #68]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092d2:	d106      	bne.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80092d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092da:	d102      	bne.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80092de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092e0:	e010      	b.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092e2:	4b0a      	ldr	r3, [pc, #40]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092ee:	d106      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80092f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092f6:	d102      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092f8:	4b07      	ldr	r3, [pc, #28]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092fc:	e002      	b.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009302:	e242      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009304:	e241      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009306:	4b05      	ldr	r3, [pc, #20]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800930a:	e23e      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800930c:	58024400 	.word	0x58024400
 8009310:	03d09000 	.word	0x03d09000
 8009314:	003d0900 	.word	0x003d0900
 8009318:	017d7840 	.word	0x017d7840
 800931c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009320:	2300      	movs	r3, #0
 8009322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009324:	e231      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800932a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800932e:	430b      	orrs	r3, r1
 8009330:	f040 8085 	bne.w	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009334:	4b9c      	ldr	r3, [pc, #624]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009338:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800933c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800933e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009344:	d06b      	beq.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800934c:	d874      	bhi.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800934e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009350:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009354:	d056      	beq.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8009356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009358:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800935c:	d86c      	bhi.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800935e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009360:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009364:	d03b      	beq.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8009366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009368:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800936c:	d864      	bhi.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800936e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009374:	d021      	beq.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8009376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009378:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800937c:	d85c      	bhi.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800937e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009380:	2b00      	cmp	r3, #0
 8009382:	d004      	beq.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8009384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800938a:	d004      	beq.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800938c:	e054      	b.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800938e:	f7fe fb5f 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 8009392:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009394:	e1f9      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009396:	4b84      	ldr	r3, [pc, #528]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800939e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093a2:	d107      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093a4:	f107 0318 	add.w	r3, r7, #24
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 fa13 	bl	80097d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093b2:	e1ea      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093b8:	e1e7      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093ba:	4b7b      	ldr	r3, [pc, #492]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093c6:	d107      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c8:	f107 030c 	add.w	r3, r7, #12
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 fb55 	bl	8009a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093d6:	e1d8      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093dc:	e1d5      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093de:	4b72      	ldr	r3, [pc, #456]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0304 	and.w	r3, r3, #4
 80093e6:	2b04      	cmp	r3, #4
 80093e8:	d109      	bne.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093ea:	4b6f      	ldr	r3, [pc, #444]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	08db      	lsrs	r3, r3, #3
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	4a6d      	ldr	r2, [pc, #436]	@ (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80093f6:	fa22 f303 	lsr.w	r3, r2, r3
 80093fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093fc:	e1c5      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009402:	e1c2      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009404:	4b68      	ldr	r3, [pc, #416]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800940c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009410:	d102      	bne.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8009412:	4b67      	ldr	r3, [pc, #412]	@ (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009416:	e1b8      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800941c:	e1b5      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800941e:	4b62      	ldr	r3, [pc, #392]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009426:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800942a:	d102      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800942c:	4b61      	ldr	r3, [pc, #388]	@ (80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009430:	e1ab      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009436:	e1a8      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800943c:	e1a5      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800943e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009442:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009446:	430b      	orrs	r3, r1
 8009448:	d173      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800944a:	4b57      	ldr	r3, [pc, #348]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800944c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800944e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009452:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800945a:	d02f      	beq.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800945c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009462:	d863      	bhi.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009466:	2b00      	cmp	r3, #0
 8009468:	d004      	beq.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800946a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009470:	d012      	beq.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8009472:	e05b      	b.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009474:	4b4c      	ldr	r3, [pc, #304]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800947c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009480:	d107      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009482:	f107 0318 	add.w	r3, r7, #24
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f9a4 	bl	80097d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009490:	e17b      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009496:	e178      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009498:	4b43      	ldr	r3, [pc, #268]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a4:	d107      	bne.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094a6:	f107 030c 	add.w	r3, r7, #12
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fae6 	bl	8009a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094b4:	e169      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ba:	e166      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094bc:	4b3a      	ldr	r3, [pc, #232]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094c6:	4b38      	ldr	r3, [pc, #224]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d10c      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80094d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d109      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094d8:	4b33      	ldr	r3, [pc, #204]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	08db      	lsrs	r3, r3, #3
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	4a32      	ldr	r2, [pc, #200]	@ (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80094e4:	fa22 f303 	lsr.w	r3, r2, r3
 80094e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094ea:	e01e      	b.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094ec:	4b2e      	ldr	r3, [pc, #184]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094f8:	d106      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80094fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009500:	d102      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009502:	4b2b      	ldr	r3, [pc, #172]	@ (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009506:	e010      	b.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009508:	4b27      	ldr	r3, [pc, #156]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009514:	d106      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8009516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800951c:	d102      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800951e:	4b25      	ldr	r3, [pc, #148]	@ (80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009522:	e002      	b.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009524:	2300      	movs	r3, #0
 8009526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009528:	e12f      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800952a:	e12e      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009530:	e12b      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009536:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800953a:	430b      	orrs	r3, r1
 800953c:	d13c      	bne.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800953e:	4b1a      	ldr	r3, [pc, #104]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009546:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954a:	2b00      	cmp	r3, #0
 800954c:	d004      	beq.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800954e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009554:	d012      	beq.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009556:	e023      	b.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009558:	4b13      	ldr	r3, [pc, #76]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009560:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009564:	d107      	bne.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800956a:	4618      	mov	r0, r3
 800956c:	f000 fbda 	bl	8009d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009574:	e109      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800957a:	e106      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800957c:	4b0a      	ldr	r3, [pc, #40]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009588:	d107      	bne.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800958a:	f107 0318 	add.w	r3, r7, #24
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f920 	bl	80097d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009598:	e0f7      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800959a:	2300      	movs	r3, #0
 800959c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800959e:	e0f4      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a4:	e0f1      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80095a6:	bf00      	nop
 80095a8:	58024400 	.word	0x58024400
 80095ac:	03d09000 	.word	0x03d09000
 80095b0:	003d0900 	.word	0x003d0900
 80095b4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80095b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095bc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80095c0:	430b      	orrs	r3, r1
 80095c2:	f040 8091 	bne.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80095c6:	4b73      	ldr	r3, [pc, #460]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80095c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80095ce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80095d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80095d6:	f000 8081 	beq.w	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80095e0:	d87f      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80095e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095e8:	d06b      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80095ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095f0:	d877      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80095f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f8:	d056      	beq.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80095fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009600:	d86f      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009604:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009608:	d03b      	beq.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800960a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009610:	d867      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009618:	d021      	beq.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009620:	d85f      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009624:	2b00      	cmp	r3, #0
 8009626:	d004      	beq.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800962e:	d004      	beq.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009630:	e057      	b.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009632:	f000 f8b9 	bl	80097a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009636:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009638:	e0a7      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800963a:	4b56      	ldr	r3, [pc, #344]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009646:	d107      	bne.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009648:	f107 0318 	add.w	r3, r7, #24
 800964c:	4618      	mov	r0, r3
 800964e:	f000 f8c1 	bl	80097d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009656:	e098      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800965c:	e095      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800965e:	4b4d      	ldr	r3, [pc, #308]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800966a:	d107      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800966c:	f107 030c 	add.w	r3, r7, #12
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fa03 	bl	8009a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800967a:	e086      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800967c:	2300      	movs	r3, #0
 800967e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009680:	e083      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009682:	4b44      	ldr	r3, [pc, #272]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0304 	and.w	r3, r3, #4
 800968a:	2b04      	cmp	r3, #4
 800968c:	d109      	bne.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800968e:	4b41      	ldr	r3, [pc, #260]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	08db      	lsrs	r3, r3, #3
 8009694:	f003 0303 	and.w	r3, r3, #3
 8009698:	4a3f      	ldr	r2, [pc, #252]	@ (8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800969a:	fa22 f303 	lsr.w	r3, r2, r3
 800969e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096a0:	e073      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a6:	e070      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096a8:	4b3a      	ldr	r3, [pc, #232]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096b4:	d102      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80096b6:	4b39      	ldr	r3, [pc, #228]	@ (800979c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80096b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ba:	e066      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c0:	e063      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096c2:	4b34      	ldr	r3, [pc, #208]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096ce:	d102      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80096d0:	4b33      	ldr	r3, [pc, #204]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80096d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096d4:	e059      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096da:	e056      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096dc:	4b31      	ldr	r3, [pc, #196]	@ (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e0:	e053      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e6:	e050      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80096e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ec:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80096f0:	430b      	orrs	r3, r1
 80096f2:	d148      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80096f4:	4b27      	ldr	r3, [pc, #156]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80096f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80096fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009704:	d02a      	beq.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800970c:	d838      	bhi.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800970e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009710:	2b00      	cmp	r3, #0
 8009712:	d004      	beq.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800971a:	d00d      	beq.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800971c:	e030      	b.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800971e:	4b1d      	ldr	r3, [pc, #116]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800972a:	d102      	bne.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800972c:	4b1c      	ldr	r3, [pc, #112]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800972e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009730:	e02b      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009736:	e028      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009738:	4b16      	ldr	r3, [pc, #88]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009740:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009744:	d107      	bne.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800974a:	4618      	mov	r0, r3
 800974c:	f000 faea 	bl	8009d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009754:	e019      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800975a:	e016      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800975c:	4b0d      	ldr	r3, [pc, #52]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009768:	d107      	bne.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800976a:	f107 0318 	add.w	r3, r7, #24
 800976e:	4618      	mov	r0, r3
 8009770:	f000 f830 	bl	80097d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009778:	e007      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800977e:	e004      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009784:	e001      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800978a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800978c:	4618      	mov	r0, r3
 800978e:	3740      	adds	r7, #64	@ 0x40
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	58024400 	.word	0x58024400
 8009798:	03d09000 	.word	0x03d09000
 800979c:	003d0900 	.word	0x003d0900
 80097a0:	017d7840 	.word	0x017d7840
 80097a4:	00bb8000 	.word	0x00bb8000

080097a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80097ac:	f7fe f920 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 80097b0:	4602      	mov	r2, r0
 80097b2:	4b06      	ldr	r3, [pc, #24]	@ (80097cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	091b      	lsrs	r3, r3, #4
 80097b8:	f003 0307 	and.w	r3, r3, #7
 80097bc:	4904      	ldr	r1, [pc, #16]	@ (80097d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097be:	5ccb      	ldrb	r3, [r1, r3]
 80097c0:	f003 031f 	and.w	r3, r3, #31
 80097c4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	58024400 	.word	0x58024400
 80097d0:	0800ad4c 	.word	0x0800ad4c

080097d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b089      	sub	sp, #36	@ 0x24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097dc:	4ba1      	ldr	r3, [pc, #644]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e0:	f003 0303 	and.w	r3, r3, #3
 80097e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80097e6:	4b9f      	ldr	r3, [pc, #636]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ea:	0b1b      	lsrs	r3, r3, #12
 80097ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097f2:	4b9c      	ldr	r3, [pc, #624]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f6:	091b      	lsrs	r3, r3, #4
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80097fe:	4b99      	ldr	r3, [pc, #612]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009802:	08db      	lsrs	r3, r3, #3
 8009804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	fb02 f303 	mul.w	r3, r2, r3
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009816:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8111 	beq.w	8009a44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b02      	cmp	r3, #2
 8009826:	f000 8083 	beq.w	8009930 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	2b02      	cmp	r3, #2
 800982e:	f200 80a1 	bhi.w	8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d056      	beq.n	80098ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800983e:	e099      	b.n	8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009840:	4b88      	ldr	r3, [pc, #544]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 0320 	and.w	r3, r3, #32
 8009848:	2b00      	cmp	r3, #0
 800984a:	d02d      	beq.n	80098a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800984c:	4b85      	ldr	r3, [pc, #532]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	08db      	lsrs	r3, r3, #3
 8009852:	f003 0303 	and.w	r3, r3, #3
 8009856:	4a84      	ldr	r2, [pc, #528]	@ (8009a68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009858:	fa22 f303 	lsr.w	r3, r2, r3
 800985c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	ee07 3a90 	vmov	s15, r3
 8009864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009876:	4b7b      	ldr	r3, [pc, #492]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800987a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800987e:	ee07 3a90 	vmov	s15, r3
 8009882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009886:	ed97 6a03 	vldr	s12, [r7, #12]
 800988a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800988e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800989a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800989e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098a6:	e087      	b.n	80099b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ba:	4b6a      	ldr	r3, [pc, #424]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c2:	ee07 3a90 	vmov	s15, r3
 80098c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098ea:	e065      	b.n	80099b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	ee07 3a90 	vmov	s15, r3
 80098f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80098fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098fe:	4b59      	ldr	r3, [pc, #356]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009906:	ee07 3a90 	vmov	s15, r3
 800990a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800990e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009912:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800991e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800992e:	e043      	b.n	80099b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800993e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009942:	4b48      	ldr	r3, [pc, #288]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994a:	ee07 3a90 	vmov	s15, r3
 800994e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009952:	ed97 6a03 	vldr	s12, [r7, #12]
 8009956:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800995a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800995e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009972:	e021      	b.n	80099b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009986:	4b37      	ldr	r3, [pc, #220]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800998a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998e:	ee07 3a90 	vmov	s15, r3
 8009992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009996:	ed97 6a03 	vldr	s12, [r7, #12]
 800999a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800999e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80099b8:	4b2a      	ldr	r3, [pc, #168]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099bc:	0a5b      	lsrs	r3, r3, #9
 80099be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099de:	ee17 2a90 	vmov	r2, s15
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80099e6:	4b1f      	ldr	r3, [pc, #124]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ea:	0c1b      	lsrs	r3, r3, #16
 80099ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099f0:	ee07 3a90 	vmov	s15, r3
 80099f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a0c:	ee17 2a90 	vmov	r2, s15
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009a14:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a18:	0e1b      	lsrs	r3, r3, #24
 8009a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a1e:	ee07 3a90 	vmov	s15, r3
 8009a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a3a:	ee17 2a90 	vmov	r2, s15
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a42:	e008      	b.n	8009a56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	609a      	str	r2, [r3, #8]
}
 8009a56:	bf00      	nop
 8009a58:	3724      	adds	r7, #36	@ 0x24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	58024400 	.word	0x58024400
 8009a68:	03d09000 	.word	0x03d09000
 8009a6c:	46000000 	.word	0x46000000
 8009a70:	4c742400 	.word	0x4c742400
 8009a74:	4a742400 	.word	0x4a742400
 8009a78:	4bbebc20 	.word	0x4bbebc20

08009a7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b089      	sub	sp, #36	@ 0x24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a84:	4ba1      	ldr	r3, [pc, #644]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a88:	f003 0303 	and.w	r3, r3, #3
 8009a8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009a8e:	4b9f      	ldr	r3, [pc, #636]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a92:	0d1b      	lsrs	r3, r3, #20
 8009a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009a9a:	4b9c      	ldr	r3, [pc, #624]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a9e:	0a1b      	lsrs	r3, r3, #8
 8009aa0:	f003 0301 	and.w	r3, r3, #1
 8009aa4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009aa6:	4b99      	ldr	r3, [pc, #612]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aaa:	08db      	lsrs	r3, r3, #3
 8009aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	fb02 f303 	mul.w	r3, r2, r3
 8009ab6:	ee07 3a90 	vmov	s15, r3
 8009aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009abe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 8111 	beq.w	8009cec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	f000 8083 	beq.w	8009bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	f200 80a1 	bhi.w	8009c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d056      	beq.n	8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ae6:	e099      	b.n	8009c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ae8:	4b88      	ldr	r3, [pc, #544]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0320 	and.w	r3, r3, #32
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d02d      	beq.n	8009b50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009af4:	4b85      	ldr	r3, [pc, #532]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	08db      	lsrs	r3, r3, #3
 8009afa:	f003 0303 	and.w	r3, r3, #3
 8009afe:	4a84      	ldr	r2, [pc, #528]	@ (8009d10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b00:	fa22 f303 	lsr.w	r3, r2, r3
 8009b04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	ee07 3a90 	vmov	s15, r3
 8009b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b1e:	4b7b      	ldr	r3, [pc, #492]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b4e:	e087      	b.n	8009c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	ee07 3a90 	vmov	s15, r3
 8009b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b62:	4b6a      	ldr	r3, [pc, #424]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6a:	ee07 3a90 	vmov	s15, r3
 8009b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b92:	e065      	b.n	8009c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	ee07 3a90 	vmov	s15, r3
 8009b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ba6:	4b59      	ldr	r3, [pc, #356]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bae:	ee07 3a90 	vmov	s15, r3
 8009bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bd6:	e043      	b.n	8009c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bea:	4b48      	ldr	r3, [pc, #288]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf2:	ee07 3a90 	vmov	s15, r3
 8009bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c1a:	e021      	b.n	8009c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	ee07 3a90 	vmov	s15, r3
 8009c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c2e:	4b37      	ldr	r3, [pc, #220]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c36:	ee07 3a90 	vmov	s15, r3
 8009c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009c60:	4b2a      	ldr	r3, [pc, #168]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c64:	0a5b      	lsrs	r3, r3, #9
 8009c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c6a:	ee07 3a90 	vmov	s15, r3
 8009c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c86:	ee17 2a90 	vmov	r2, s15
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c92:	0c1b      	lsrs	r3, r3, #16
 8009c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c98:	ee07 3a90 	vmov	s15, r3
 8009c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cb4:	ee17 2a90 	vmov	r2, s15
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009cbc:	4b13      	ldr	r3, [pc, #76]	@ (8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc0:	0e1b      	lsrs	r3, r3, #24
 8009cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc6:	ee07 3a90 	vmov	s15, r3
 8009cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ce2:	ee17 2a90 	vmov	r2, s15
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009cea:	e008      	b.n	8009cfe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	609a      	str	r2, [r3, #8]
}
 8009cfe:	bf00      	nop
 8009d00:	3724      	adds	r7, #36	@ 0x24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	58024400 	.word	0x58024400
 8009d10:	03d09000 	.word	0x03d09000
 8009d14:	46000000 	.word	0x46000000
 8009d18:	4c742400 	.word	0x4c742400
 8009d1c:	4a742400 	.word	0x4a742400
 8009d20:	4bbebc20 	.word	0x4bbebc20

08009d24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b089      	sub	sp, #36	@ 0x24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d2c:	4ba0      	ldr	r3, [pc, #640]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d30:	f003 0303 	and.w	r3, r3, #3
 8009d34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009d36:	4b9e      	ldr	r3, [pc, #632]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d3a:	091b      	lsrs	r3, r3, #4
 8009d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d42:	4b9b      	ldr	r3, [pc, #620]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009d4c:	4b98      	ldr	r3, [pc, #608]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d50:	08db      	lsrs	r3, r3, #3
 8009d52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	fb02 f303 	mul.w	r3, r2, r3
 8009d5c:	ee07 3a90 	vmov	s15, r3
 8009d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 8111 	beq.w	8009f92 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	f000 8083 	beq.w	8009e7e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	f200 80a1 	bhi.w	8009ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d056      	beq.n	8009e3a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009d8c:	e099      	b.n	8009ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d8e:	4b88      	ldr	r3, [pc, #544]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d02d      	beq.n	8009df6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d9a:	4b85      	ldr	r3, [pc, #532]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	08db      	lsrs	r3, r3, #3
 8009da0:	f003 0303 	and.w	r3, r3, #3
 8009da4:	4a83      	ldr	r2, [pc, #524]	@ (8009fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009da6:	fa22 f303 	lsr.w	r3, r2, r3
 8009daa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	ee07 3a90 	vmov	s15, r3
 8009dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc4:	4b7a      	ldr	r3, [pc, #488]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dcc:	ee07 3a90 	vmov	s15, r3
 8009dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dd8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ddc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009df4:	e087      	b.n	8009f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	ee07 3a90 	vmov	s15, r3
 8009dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e00:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e08:	4b69      	ldr	r3, [pc, #420]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e10:	ee07 3a90 	vmov	s15, r3
 8009e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e18:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e38:	e065      	b.n	8009f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	ee07 3a90 	vmov	s15, r3
 8009e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e44:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4c:	4b58      	ldr	r3, [pc, #352]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e54:	ee07 3a90 	vmov	s15, r3
 8009e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e60:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e7c:	e043      	b.n	8009f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	ee07 3a90 	vmov	s15, r3
 8009e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e88:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e90:	4b47      	ldr	r3, [pc, #284]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e98:	ee07 3a90 	vmov	s15, r3
 8009e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ebc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ec0:	e021      	b.n	8009f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	ee07 3a90 	vmov	s15, r3
 8009ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ecc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009fbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ed4:	4b36      	ldr	r3, [pc, #216]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009edc:	ee07 3a90 	vmov	s15, r3
 8009ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ee8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ef4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f04:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009f06:	4b2a      	ldr	r3, [pc, #168]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f0a:	0a5b      	lsrs	r3, r3, #9
 8009f0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f10:	ee07 3a90 	vmov	s15, r3
 8009f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f2c:	ee17 2a90 	vmov	r2, s15
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009f34:	4b1e      	ldr	r3, [pc, #120]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f38:	0c1b      	lsrs	r3, r3, #16
 8009f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f3e:	ee07 3a90 	vmov	s15, r3
 8009f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f5a:	ee17 2a90 	vmov	r2, s15
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009f62:	4b13      	ldr	r3, [pc, #76]	@ (8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f66:	0e1b      	lsrs	r3, r3, #24
 8009f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f6c:	ee07 3a90 	vmov	s15, r3
 8009f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f88:	ee17 2a90 	vmov	r2, s15
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009f90:	e008      	b.n	8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	609a      	str	r2, [r3, #8]
}
 8009fa4:	bf00      	nop
 8009fa6:	3724      	adds	r7, #36	@ 0x24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	58024400 	.word	0x58024400
 8009fb4:	03d09000 	.word	0x03d09000
 8009fb8:	46000000 	.word	0x46000000
 8009fbc:	4c742400 	.word	0x4c742400
 8009fc0:	4a742400 	.word	0x4a742400
 8009fc4:	4bbebc20 	.word	0x4bbebc20

08009fc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fd6:	4b53      	ldr	r3, [pc, #332]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 8009fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d101      	bne.n	8009fe6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e099      	b.n	800a11a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009fe6:	4b4f      	ldr	r3, [pc, #316]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a4e      	ldr	r2, [pc, #312]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 8009fec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ff2:	f7f7 fcc7 	bl	8001984 <HAL_GetTick>
 8009ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ff8:	e008      	b.n	800a00c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ffa:	f7f7 fcc3 	bl	8001984 <HAL_GetTick>
 8009ffe:	4602      	mov	r2, r0
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	2b02      	cmp	r3, #2
 800a006:	d901      	bls.n	800a00c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e086      	b.n	800a11a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a00c:	4b45      	ldr	r3, [pc, #276]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1f0      	bne.n	8009ffa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a018:	4b42      	ldr	r3, [pc, #264]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a01c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	031b      	lsls	r3, r3, #12
 800a026:	493f      	ldr	r1, [pc, #252]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a028:	4313      	orrs	r3, r2
 800a02a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	3b01      	subs	r3, #1
 800a032:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	3b01      	subs	r3, #1
 800a03c:	025b      	lsls	r3, r3, #9
 800a03e:	b29b      	uxth	r3, r3
 800a040:	431a      	orrs	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	3b01      	subs	r3, #1
 800a048:	041b      	lsls	r3, r3, #16
 800a04a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a04e:	431a      	orrs	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	3b01      	subs	r3, #1
 800a056:	061b      	lsls	r3, r3, #24
 800a058:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a05c:	4931      	ldr	r1, [pc, #196]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a05e:	4313      	orrs	r3, r2
 800a060:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a062:	4b30      	ldr	r3, [pc, #192]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a066:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	492d      	ldr	r1, [pc, #180]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a070:	4313      	orrs	r3, r2
 800a072:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a074:	4b2b      	ldr	r3, [pc, #172]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a078:	f023 0220 	bic.w	r2, r3, #32
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	4928      	ldr	r1, [pc, #160]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a082:	4313      	orrs	r3, r2
 800a084:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a086:	4b27      	ldr	r3, [pc, #156]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08a:	4a26      	ldr	r2, [pc, #152]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a08c:	f023 0310 	bic.w	r3, r3, #16
 800a090:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a092:	4b24      	ldr	r3, [pc, #144]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a096:	4b24      	ldr	r3, [pc, #144]	@ (800a128 <RCCEx_PLL2_Config+0x160>)
 800a098:	4013      	ands	r3, r2
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	69d2      	ldr	r2, [r2, #28]
 800a09e:	00d2      	lsls	r2, r2, #3
 800a0a0:	4920      	ldr	r1, [pc, #128]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0aa:	4a1e      	ldr	r2, [pc, #120]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0ac:	f043 0310 	orr.w	r3, r3, #16
 800a0b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0bc:	4a19      	ldr	r2, [pc, #100]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a0c4:	e00f      	b.n	800a0e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d106      	bne.n	800a0da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0cc:	4b15      	ldr	r3, [pc, #84]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d0:	4a14      	ldr	r2, [pc, #80]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a0d8:	e005      	b.n	800a0e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0da:	4b12      	ldr	r3, [pc, #72]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0de:	4a11      	ldr	r2, [pc, #68]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a0e      	ldr	r2, [pc, #56]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a0ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a0f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0f2:	f7f7 fc47 	bl	8001984 <HAL_GetTick>
 800a0f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0f8:	e008      	b.n	800a10c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0fa:	f7f7 fc43 	bl	8001984 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	2b02      	cmp	r3, #2
 800a106:	d901      	bls.n	800a10c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e006      	b.n	800a11a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a10c:	4b05      	ldr	r3, [pc, #20]	@ (800a124 <RCCEx_PLL2_Config+0x15c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0f0      	beq.n	800a0fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a118:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	58024400 	.word	0x58024400
 800a128:	ffff0007 	.word	0xffff0007

0800a12c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a13a:	4b53      	ldr	r3, [pc, #332]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a13c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13e:	f003 0303 	and.w	r3, r3, #3
 800a142:	2b03      	cmp	r3, #3
 800a144:	d101      	bne.n	800a14a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e099      	b.n	800a27e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a14a:	4b4f      	ldr	r3, [pc, #316]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a4e      	ldr	r2, [pc, #312]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a156:	f7f7 fc15 	bl	8001984 <HAL_GetTick>
 800a15a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a15c:	e008      	b.n	800a170 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a15e:	f7f7 fc11 	bl	8001984 <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d901      	bls.n	800a170 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e086      	b.n	800a27e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a170:	4b45      	ldr	r3, [pc, #276]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1f0      	bne.n	800a15e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a17c:	4b42      	ldr	r3, [pc, #264]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a180:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	051b      	lsls	r3, r3, #20
 800a18a:	493f      	ldr	r1, [pc, #252]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a18c:	4313      	orrs	r3, r2
 800a18e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	3b01      	subs	r3, #1
 800a196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	025b      	lsls	r3, r3, #9
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	041b      	lsls	r3, r3, #16
 800a1ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	061b      	lsls	r3, r3, #24
 800a1bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a1c0:	4931      	ldr	r1, [pc, #196]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1c6:	4b30      	ldr	r3, [pc, #192]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	492d      	ldr	r1, [pc, #180]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1d8:	4b2b      	ldr	r3, [pc, #172]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	4928      	ldr	r1, [pc, #160]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1ea:	4b27      	ldr	r3, [pc, #156]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ee:	4a26      	ldr	r2, [pc, #152]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1f6:	4b24      	ldr	r3, [pc, #144]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a1f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1fa:	4b24      	ldr	r3, [pc, #144]	@ (800a28c <RCCEx_PLL3_Config+0x160>)
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	69d2      	ldr	r2, [r2, #28]
 800a202:	00d2      	lsls	r2, r2, #3
 800a204:	4920      	ldr	r1, [pc, #128]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a206:	4313      	orrs	r3, r2
 800a208:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a20a:	4b1f      	ldr	r3, [pc, #124]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a20e:	4a1e      	ldr	r2, [pc, #120]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a214:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d106      	bne.n	800a22a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a21c:	4b1a      	ldr	r3, [pc, #104]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a220:	4a19      	ldr	r2, [pc, #100]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a222:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a226:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a228:	e00f      	b.n	800a24a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d106      	bne.n	800a23e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a230:	4b15      	ldr	r3, [pc, #84]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a234:	4a14      	ldr	r2, [pc, #80]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a236:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a23a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a23c:	e005      	b.n	800a24a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a23e:	4b12      	ldr	r3, [pc, #72]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a242:	4a11      	ldr	r2, [pc, #68]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a244:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a248:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a24a:	4b0f      	ldr	r3, [pc, #60]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a0e      	ldr	r2, [pc, #56]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a256:	f7f7 fb95 	bl	8001984 <HAL_GetTick>
 800a25a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a25c:	e008      	b.n	800a270 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a25e:	f7f7 fb91 	bl	8001984 <HAL_GetTick>
 800a262:	4602      	mov	r2, r0
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d901      	bls.n	800a270 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e006      	b.n	800a27e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a270:	4b05      	ldr	r3, [pc, #20]	@ (800a288 <RCCEx_PLL3_Config+0x15c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d0f0      	beq.n	800a25e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	58024400 	.word	0x58024400
 800a28c:	ffff0007 	.word	0xffff0007

0800a290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e049      	b.n	800a336 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7f7 f98c 	bl	80015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	f000 fae0 	bl	800a894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b01      	cmp	r3, #1
 800a352:	d001      	beq.n	800a358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e054      	b.n	800a402 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68da      	ldr	r2, [r3, #12]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f042 0201 	orr.w	r2, r2, #1
 800a36e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a26      	ldr	r2, [pc, #152]	@ (800a410 <HAL_TIM_Base_Start_IT+0xd0>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d022      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x80>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a382:	d01d      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x80>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a22      	ldr	r2, [pc, #136]	@ (800a414 <HAL_TIM_Base_Start_IT+0xd4>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d018      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x80>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a21      	ldr	r2, [pc, #132]	@ (800a418 <HAL_TIM_Base_Start_IT+0xd8>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d013      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x80>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a1f      	ldr	r2, [pc, #124]	@ (800a41c <HAL_TIM_Base_Start_IT+0xdc>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d00e      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x80>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a1e      	ldr	r2, [pc, #120]	@ (800a420 <HAL_TIM_Base_Start_IT+0xe0>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d009      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x80>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a1c      	ldr	r2, [pc, #112]	@ (800a424 <HAL_TIM_Base_Start_IT+0xe4>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d004      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x80>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a1b      	ldr	r2, [pc, #108]	@ (800a428 <HAL_TIM_Base_Start_IT+0xe8>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d115      	bne.n	800a3ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	689a      	ldr	r2, [r3, #8]
 800a3c6:	4b19      	ldr	r3, [pc, #100]	@ (800a42c <HAL_TIM_Base_Start_IT+0xec>)
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2b06      	cmp	r3, #6
 800a3d0:	d015      	beq.n	800a3fe <HAL_TIM_Base_Start_IT+0xbe>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3d8:	d011      	beq.n	800a3fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f042 0201 	orr.w	r2, r2, #1
 800a3e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ea:	e008      	b.n	800a3fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f042 0201 	orr.w	r2, r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	e000      	b.n	800a400 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	40010000 	.word	0x40010000
 800a414:	40000400 	.word	0x40000400
 800a418:	40000800 	.word	0x40000800
 800a41c:	40000c00 	.word	0x40000c00
 800a420:	40010400 	.word	0x40010400
 800a424:	40001800 	.word	0x40001800
 800a428:	40014000 	.word	0x40014000
 800a42c:	00010007 	.word	0x00010007

0800a430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d020      	beq.n	800a494 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f003 0302 	and.w	r3, r3, #2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d01b      	beq.n	800a494 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f06f 0202 	mvn.w	r2, #2
 800a464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	f003 0303 	and.w	r3, r3, #3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f9ec 	bl	800a858 <HAL_TIM_IC_CaptureCallback>
 800a480:	e005      	b.n	800a48e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f9de 	bl	800a844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f9ef 	bl	800a86c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f003 0304 	and.w	r3, r3, #4
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d020      	beq.n	800a4e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f003 0304 	and.w	r3, r3, #4
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d01b      	beq.n	800a4e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f06f 0204 	mvn.w	r2, #4
 800a4b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f9c6 	bl	800a858 <HAL_TIM_IC_CaptureCallback>
 800a4cc:	e005      	b.n	800a4da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f9b8 	bl	800a844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f9c9 	bl	800a86c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f003 0308 	and.w	r3, r3, #8
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d020      	beq.n	800a52c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f003 0308 	and.w	r3, r3, #8
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d01b      	beq.n	800a52c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f06f 0208 	mvn.w	r2, #8
 800a4fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2204      	movs	r2, #4
 800a502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	f003 0303 	and.w	r3, r3, #3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d003      	beq.n	800a51a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f9a0 	bl	800a858 <HAL_TIM_IC_CaptureCallback>
 800a518:	e005      	b.n	800a526 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f992 	bl	800a844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f9a3 	bl	800a86c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	f003 0310 	and.w	r3, r3, #16
 800a532:	2b00      	cmp	r3, #0
 800a534:	d020      	beq.n	800a578 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f003 0310 	and.w	r3, r3, #16
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d01b      	beq.n	800a578 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f06f 0210 	mvn.w	r2, #16
 800a548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2208      	movs	r2, #8
 800a54e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f97a 	bl	800a858 <HAL_TIM_IC_CaptureCallback>
 800a564:	e005      	b.n	800a572 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f96c 	bl	800a844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f97d 	bl	800a86c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00c      	beq.n	800a59c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f003 0301 	and.w	r3, r3, #1
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d007      	beq.n	800a59c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f06f 0201 	mvn.w	r2, #1
 800a594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f94a 	bl	800a830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d104      	bne.n	800a5b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00c      	beq.n	800a5ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d007      	beq.n	800a5ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a5c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fb41 	bl	800ac4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00c      	beq.n	800a5ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d007      	beq.n	800a5ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a5e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fb39 	bl	800ac60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00c      	beq.n	800a612 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d007      	beq.n	800a612 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a60a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f937 	bl	800a880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f003 0320 	and.w	r3, r3, #32
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00c      	beq.n	800a636 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d007      	beq.n	800a636 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f06f 0220 	mvn.w	r2, #32
 800a62e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fb01 	bl	800ac38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a636:	bf00      	nop
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a654:	2b01      	cmp	r3, #1
 800a656:	d101      	bne.n	800a65c <HAL_TIM_ConfigClockSource+0x1c>
 800a658:	2302      	movs	r3, #2
 800a65a:	e0dc      	b.n	800a816 <HAL_TIM_ConfigClockSource+0x1d6>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2202      	movs	r2, #2
 800a668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	4b6a      	ldr	r3, [pc, #424]	@ (800a820 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a678:	4013      	ands	r3, r2
 800a67a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a64      	ldr	r2, [pc, #400]	@ (800a824 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a692:	4293      	cmp	r3, r2
 800a694:	f000 80a9 	beq.w	800a7ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a698:	4a62      	ldr	r2, [pc, #392]	@ (800a824 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	f200 80ae 	bhi.w	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a6a0:	4a61      	ldr	r2, [pc, #388]	@ (800a828 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	f000 80a1 	beq.w	800a7ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a6a8:	4a5f      	ldr	r2, [pc, #380]	@ (800a828 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	f200 80a6 	bhi.w	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a6b0:	4a5e      	ldr	r2, [pc, #376]	@ (800a82c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	f000 8099 	beq.w	800a7ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a6b8:	4a5c      	ldr	r2, [pc, #368]	@ (800a82c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	f200 809e 	bhi.w	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a6c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a6c4:	f000 8091 	beq.w	800a7ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a6c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a6cc:	f200 8096 	bhi.w	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a6d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6d4:	f000 8089 	beq.w	800a7ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a6d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6dc:	f200 808e 	bhi.w	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a6e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6e4:	d03e      	beq.n	800a764 <HAL_TIM_ConfigClockSource+0x124>
 800a6e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6ea:	f200 8087 	bhi.w	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a6ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6f2:	f000 8086 	beq.w	800a802 <HAL_TIM_ConfigClockSource+0x1c2>
 800a6f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6fa:	d87f      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a6fc:	2b70      	cmp	r3, #112	@ 0x70
 800a6fe:	d01a      	beq.n	800a736 <HAL_TIM_ConfigClockSource+0xf6>
 800a700:	2b70      	cmp	r3, #112	@ 0x70
 800a702:	d87b      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a704:	2b60      	cmp	r3, #96	@ 0x60
 800a706:	d050      	beq.n	800a7aa <HAL_TIM_ConfigClockSource+0x16a>
 800a708:	2b60      	cmp	r3, #96	@ 0x60
 800a70a:	d877      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a70c:	2b50      	cmp	r3, #80	@ 0x50
 800a70e:	d03c      	beq.n	800a78a <HAL_TIM_ConfigClockSource+0x14a>
 800a710:	2b50      	cmp	r3, #80	@ 0x50
 800a712:	d873      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a714:	2b40      	cmp	r3, #64	@ 0x40
 800a716:	d058      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0x18a>
 800a718:	2b40      	cmp	r3, #64	@ 0x40
 800a71a:	d86f      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a71c:	2b30      	cmp	r3, #48	@ 0x30
 800a71e:	d064      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a720:	2b30      	cmp	r3, #48	@ 0x30
 800a722:	d86b      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a724:	2b20      	cmp	r3, #32
 800a726:	d060      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a728:	2b20      	cmp	r3, #32
 800a72a:	d867      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d05c      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a730:	2b10      	cmp	r3, #16
 800a732:	d05a      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a734:	e062      	b.n	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a746:	f000 f9c9 	bl	800aadc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a758:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	609a      	str	r2, [r3, #8]
      break;
 800a762:	e04f      	b.n	800a804 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a774:	f000 f9b2 	bl	800aadc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689a      	ldr	r2, [r3, #8]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a786:	609a      	str	r2, [r3, #8]
      break;
 800a788:	e03c      	b.n	800a804 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a796:	461a      	mov	r2, r3
 800a798:	f000 f922 	bl	800a9e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2150      	movs	r1, #80	@ 0x50
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 f97c 	bl	800aaa0 <TIM_ITRx_SetConfig>
      break;
 800a7a8:	e02c      	b.n	800a804 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f000 f941 	bl	800aa3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2160      	movs	r1, #96	@ 0x60
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 f96c 	bl	800aaa0 <TIM_ITRx_SetConfig>
      break;
 800a7c8:	e01c      	b.n	800a804 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f000 f902 	bl	800a9e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2140      	movs	r1, #64	@ 0x40
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 f95c 	bl	800aaa0 <TIM_ITRx_SetConfig>
      break;
 800a7e8:	e00c      	b.n	800a804 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	f000 f953 	bl	800aaa0 <TIM_ITRx_SetConfig>
      break;
 800a7fa:	e003      	b.n	800a804 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a800:	e000      	b.n	800a804 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a814:	7bfb      	ldrb	r3, [r7, #15]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	ffceff88 	.word	0xffceff88
 800a824:	00100040 	.word	0x00100040
 800a828:	00100030 	.word	0x00100030
 800a82c:	00100020 	.word	0x00100020

0800a830 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a84c:	bf00      	nop
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a888:	bf00      	nop
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a46      	ldr	r2, [pc, #280]	@ (800a9c0 <TIM_Base_SetConfig+0x12c>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d013      	beq.n	800a8d4 <TIM_Base_SetConfig+0x40>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8b2:	d00f      	beq.n	800a8d4 <TIM_Base_SetConfig+0x40>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a43      	ldr	r2, [pc, #268]	@ (800a9c4 <TIM_Base_SetConfig+0x130>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d00b      	beq.n	800a8d4 <TIM_Base_SetConfig+0x40>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a42      	ldr	r2, [pc, #264]	@ (800a9c8 <TIM_Base_SetConfig+0x134>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d007      	beq.n	800a8d4 <TIM_Base_SetConfig+0x40>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a41      	ldr	r2, [pc, #260]	@ (800a9cc <TIM_Base_SetConfig+0x138>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d003      	beq.n	800a8d4 <TIM_Base_SetConfig+0x40>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a40      	ldr	r2, [pc, #256]	@ (800a9d0 <TIM_Base_SetConfig+0x13c>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d108      	bne.n	800a8e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a35      	ldr	r2, [pc, #212]	@ (800a9c0 <TIM_Base_SetConfig+0x12c>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d01f      	beq.n	800a92e <TIM_Base_SetConfig+0x9a>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8f4:	d01b      	beq.n	800a92e <TIM_Base_SetConfig+0x9a>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a32      	ldr	r2, [pc, #200]	@ (800a9c4 <TIM_Base_SetConfig+0x130>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d017      	beq.n	800a92e <TIM_Base_SetConfig+0x9a>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a31      	ldr	r2, [pc, #196]	@ (800a9c8 <TIM_Base_SetConfig+0x134>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d013      	beq.n	800a92e <TIM_Base_SetConfig+0x9a>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a30      	ldr	r2, [pc, #192]	@ (800a9cc <TIM_Base_SetConfig+0x138>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d00f      	beq.n	800a92e <TIM_Base_SetConfig+0x9a>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a2f      	ldr	r2, [pc, #188]	@ (800a9d0 <TIM_Base_SetConfig+0x13c>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d00b      	beq.n	800a92e <TIM_Base_SetConfig+0x9a>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a2e      	ldr	r2, [pc, #184]	@ (800a9d4 <TIM_Base_SetConfig+0x140>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d007      	beq.n	800a92e <TIM_Base_SetConfig+0x9a>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a2d      	ldr	r2, [pc, #180]	@ (800a9d8 <TIM_Base_SetConfig+0x144>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d003      	beq.n	800a92e <TIM_Base_SetConfig+0x9a>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a2c      	ldr	r2, [pc, #176]	@ (800a9dc <TIM_Base_SetConfig+0x148>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d108      	bne.n	800a940 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	689a      	ldr	r2, [r3, #8]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a16      	ldr	r2, [pc, #88]	@ (800a9c0 <TIM_Base_SetConfig+0x12c>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d00f      	beq.n	800a98c <TIM_Base_SetConfig+0xf8>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a18      	ldr	r2, [pc, #96]	@ (800a9d0 <TIM_Base_SetConfig+0x13c>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d00b      	beq.n	800a98c <TIM_Base_SetConfig+0xf8>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a17      	ldr	r2, [pc, #92]	@ (800a9d4 <TIM_Base_SetConfig+0x140>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d007      	beq.n	800a98c <TIM_Base_SetConfig+0xf8>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a16      	ldr	r2, [pc, #88]	@ (800a9d8 <TIM_Base_SetConfig+0x144>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d003      	beq.n	800a98c <TIM_Base_SetConfig+0xf8>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a15      	ldr	r2, [pc, #84]	@ (800a9dc <TIM_Base_SetConfig+0x148>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d103      	bne.n	800a994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	691a      	ldr	r2, [r3, #16]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d105      	bne.n	800a9b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	f023 0201 	bic.w	r2, r3, #1
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	611a      	str	r2, [r3, #16]
  }
}
 800a9b2:	bf00      	nop
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	40010000 	.word	0x40010000
 800a9c4:	40000400 	.word	0x40000400
 800a9c8:	40000800 	.word	0x40000800
 800a9cc:	40000c00 	.word	0x40000c00
 800a9d0:	40010400 	.word	0x40010400
 800a9d4:	40014000 	.word	0x40014000
 800a9d8:	40014400 	.word	0x40014400
 800a9dc:	40014800 	.word	0x40014800

0800a9e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6a1b      	ldr	r3, [r3, #32]
 800a9f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	f023 0201 	bic.w	r2, r3, #1
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	011b      	lsls	r3, r3, #4
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f023 030a 	bic.w	r3, r3, #10
 800aa1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	621a      	str	r2, [r3, #32]
}
 800aa32:	bf00      	nop
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b087      	sub	sp, #28
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6a1b      	ldr	r3, [r3, #32]
 800aa54:	f023 0210 	bic.w	r2, r3, #16
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aa68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	031b      	lsls	r3, r3, #12
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aa7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	011b      	lsls	r3, r3, #4
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	621a      	str	r2, [r3, #32]
}
 800aa92:	bf00      	nop
 800aa94:	371c      	adds	r7, #28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
	...

0800aaa0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	4b09      	ldr	r3, [pc, #36]	@ (800aad8 <TIM_ITRx_SetConfig+0x38>)
 800aab4:	4013      	ands	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	f043 0307 	orr.w	r3, r3, #7
 800aac2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	609a      	str	r2, [r3, #8]
}
 800aaca:	bf00      	nop
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	ffcfff8f 	.word	0xffcfff8f

0800aadc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aadc:	b480      	push	{r7}
 800aade:	b087      	sub	sp, #28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
 800aae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aaf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	021a      	lsls	r2, r3, #8
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	431a      	orrs	r2, r3
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	609a      	str	r2, [r3, #8]
}
 800ab10:	bf00      	nop
 800ab12:	371c      	adds	r7, #28
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d101      	bne.n	800ab34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab30:	2302      	movs	r3, #2
 800ab32:	e06d      	b.n	800ac10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a30      	ldr	r2, [pc, #192]	@ (800ac1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d004      	beq.n	800ab68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a2f      	ldr	r2, [pc, #188]	@ (800ac20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d108      	bne.n	800ab7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ab6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a20      	ldr	r2, [pc, #128]	@ (800ac1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d022      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aba6:	d01d      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a1d      	ldr	r2, [pc, #116]	@ (800ac24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d018      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a1c      	ldr	r2, [pc, #112]	@ (800ac28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d013      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a1a      	ldr	r2, [pc, #104]	@ (800ac2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d00e      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a15      	ldr	r2, [pc, #84]	@ (800ac20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d009      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a16      	ldr	r2, [pc, #88]	@ (800ac30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d004      	beq.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a15      	ldr	r2, [pc, #84]	@ (800ac34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d10c      	bne.n	800abfe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2201      	movs	r2, #1
 800ac02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	40010000 	.word	0x40010000
 800ac20:	40010400 	.word	0x40010400
 800ac24:	40000400 	.word	0x40000400
 800ac28:	40000800 	.word	0x40000800
 800ac2c:	40000c00 	.word	0x40000c00
 800ac30:	40001800 	.word	0x40001800
 800ac34:	40014000 	.word	0x40014000

0800ac38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <memset>:
 800ac74:	4402      	add	r2, r0
 800ac76:	4603      	mov	r3, r0
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d100      	bne.n	800ac7e <memset+0xa>
 800ac7c:	4770      	bx	lr
 800ac7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac82:	e7f9      	b.n	800ac78 <memset+0x4>

0800ac84 <__libc_init_array>:
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	4d0d      	ldr	r5, [pc, #52]	@ (800acbc <__libc_init_array+0x38>)
 800ac88:	4c0d      	ldr	r4, [pc, #52]	@ (800acc0 <__libc_init_array+0x3c>)
 800ac8a:	1b64      	subs	r4, r4, r5
 800ac8c:	10a4      	asrs	r4, r4, #2
 800ac8e:	2600      	movs	r6, #0
 800ac90:	42a6      	cmp	r6, r4
 800ac92:	d109      	bne.n	800aca8 <__libc_init_array+0x24>
 800ac94:	4d0b      	ldr	r5, [pc, #44]	@ (800acc4 <__libc_init_array+0x40>)
 800ac96:	4c0c      	ldr	r4, [pc, #48]	@ (800acc8 <__libc_init_array+0x44>)
 800ac98:	f000 f826 	bl	800ace8 <_init>
 800ac9c:	1b64      	subs	r4, r4, r5
 800ac9e:	10a4      	asrs	r4, r4, #2
 800aca0:	2600      	movs	r6, #0
 800aca2:	42a6      	cmp	r6, r4
 800aca4:	d105      	bne.n	800acb2 <__libc_init_array+0x2e>
 800aca6:	bd70      	pop	{r4, r5, r6, pc}
 800aca8:	f855 3b04 	ldr.w	r3, [r5], #4
 800acac:	4798      	blx	r3
 800acae:	3601      	adds	r6, #1
 800acb0:	e7ee      	b.n	800ac90 <__libc_init_array+0xc>
 800acb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800acb6:	4798      	blx	r3
 800acb8:	3601      	adds	r6, #1
 800acba:	e7f2      	b.n	800aca2 <__libc_init_array+0x1e>
 800acbc:	0800ad74 	.word	0x0800ad74
 800acc0:	0800ad74 	.word	0x0800ad74
 800acc4:	0800ad74 	.word	0x0800ad74
 800acc8:	0800ad78 	.word	0x0800ad78

0800accc <memcpy>:
 800accc:	440a      	add	r2, r1
 800acce:	4291      	cmp	r1, r2
 800acd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800acd4:	d100      	bne.n	800acd8 <memcpy+0xc>
 800acd6:	4770      	bx	lr
 800acd8:	b510      	push	{r4, lr}
 800acda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ace2:	4291      	cmp	r1, r2
 800ace4:	d1f9      	bne.n	800acda <memcpy+0xe>
 800ace6:	bd10      	pop	{r4, pc}

0800ace8 <_init>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	bf00      	nop
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr

0800acf4 <_fini>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	bf00      	nop
 800acf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfa:	bc08      	pop	{r3}
 800acfc:	469e      	mov	lr, r3
 800acfe:	4770      	bx	lr

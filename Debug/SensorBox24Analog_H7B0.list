
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad58  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800b004  0800b004  0000c004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b078  0800b078  0000c078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b07c  0800b07c  0000c07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800b080  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000088c  24000010  0800b090  0000d010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400089c  0800b090  0000d89c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c87d  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002fc9  00000000  00000000  000298bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018d8  00000000  00000000  0002c884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001362  00000000  00000000  0002e15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033e75  00000000  00000000  0002f4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f680  00000000  00000000  00063333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a19c  00000000  00000000  000829b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001dcb4f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006d68  00000000  00000000  001dcb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800afec 	.word	0x0800afec

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800afec 	.word	0x0800afec

080002ec <Config_Setup>:

#include "config.h"

#define ID 1

void Config_Setup(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

#if ID == 1
	Config_1();
 80002f0:	f000 f802 	bl	80002f8 <Config_1>
#elif ID == 2
	Config_2();
#elif ID == 3
	Config_3();
#endif
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Config_1>:

void Config_1(){
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

	CAN_interval = 100;
 80002fc:	4b33      	ldr	r3, [pc, #204]	@ (80003cc <Config_1+0xd4>)
 80002fe:	2264      	movs	r2, #100	@ 0x64
 8000300:	801a      	strh	r2, [r3, #0]

	transfer_functions[0] = VOLTAGE_3V3;		// PA6
 8000302:	4b33      	ldr	r3, [pc, #204]	@ (80003d0 <Config_1+0xd8>)
 8000304:	2200      	movs	r2, #0
 8000306:	801a      	strh	r2, [r3, #0]
	transfer_functions[1] = VOLTAGE_3V3;	// PC4
 8000308:	4b31      	ldr	r3, [pc, #196]	@ (80003d0 <Config_1+0xd8>)
 800030a:	2200      	movs	r2, #0
 800030c:	805a      	strh	r2, [r3, #2]
	transfer_functions[2] = VOLTAGE_24V;		//PB1
 800030e:	4b30      	ldr	r3, [pc, #192]	@ (80003d0 <Config_1+0xd8>)
 8000310:	2202      	movs	r2, #2
 8000312:	809a      	strh	r2, [r3, #4]
	transfer_functions[3] = VOLTAGE_3V3;		//PA7
 8000314:	4b2e      	ldr	r3, [pc, #184]	@ (80003d0 <Config_1+0xd8>)
 8000316:	2200      	movs	r2, #0
 8000318:	80da      	strh	r2, [r3, #6]
	transfer_functions[4] = VOLTAGE_24V;		//PC5
 800031a:	4b2d      	ldr	r3, [pc, #180]	@ (80003d0 <Config_1+0xd8>)
 800031c:	2202      	movs	r2, #2
 800031e:	811a      	strh	r2, [r3, #8]
	transfer_functions[5] = VOLTAGE_24V;			//PB0
 8000320:	4b2b      	ldr	r3, [pc, #172]	@ (80003d0 <Config_1+0xd8>)
 8000322:	2202      	movs	r2, #2
 8000324:	815a      	strh	r2, [r3, #10]
	transfer_functions[6] = VOLTAGE_3V3;			//PC0
 8000326:	4b2a      	ldr	r3, [pc, #168]	@ (80003d0 <Config_1+0xd8>)
 8000328:	2200      	movs	r2, #0
 800032a:	819a      	strh	r2, [r3, #12]
	transfer_functions[7] = VOLTAGE_3V3;			//PC1
 800032c:	4b28      	ldr	r3, [pc, #160]	@ (80003d0 <Config_1+0xd8>)
 800032e:	2200      	movs	r2, #0
 8000330:	81da      	strh	r2, [r3, #14]
	transfer_functions[8] = VOLTAGE_5V;		//PC2
 8000332:	4b27      	ldr	r3, [pc, #156]	@ (80003d0 <Config_1+0xd8>)
 8000334:	2201      	movs	r2, #1
 8000336:	821a      	strh	r2, [r3, #16]
	transfer_functions[9] = VOLTAGE_5V;		//PC3
 8000338:	4b25      	ldr	r3, [pc, #148]	@ (80003d0 <Config_1+0xd8>)
 800033a:	2201      	movs	r2, #1
 800033c:	825a      	strh	r2, [r3, #18]
	transfer_functions[10] = VOLTAGE_5V;	//PA2
 800033e:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <Config_1+0xd8>)
 8000340:	2201      	movs	r2, #1
 8000342:	829a      	strh	r2, [r3, #20]
	transfer_functions[11] = VOLTAGE_5V;	//PA3
 8000344:	4b22      	ldr	r3, [pc, #136]	@ (80003d0 <Config_1+0xd8>)
 8000346:	2201      	movs	r2, #1
 8000348:	82da      	strh	r2, [r3, #22]
	transfer_functions[12] = VOLTAGE_5V;	//PA0
 800034a:	4b21      	ldr	r3, [pc, #132]	@ (80003d0 <Config_1+0xd8>)
 800034c:	2201      	movs	r2, #1
 800034e:	831a      	strh	r2, [r3, #24]
	transfer_functions[13] = VOLTAGE_5V;	//PA1
 8000350:	4b1f      	ldr	r3, [pc, #124]	@ (80003d0 <Config_1+0xd8>)
 8000352:	2201      	movs	r2, #1
 8000354:	835a      	strh	r2, [r3, #26]
	transfer_functions[14] = VOLTAGE_5V;	//PA4
 8000356:	4b1e      	ldr	r3, [pc, #120]	@ (80003d0 <Config_1+0xd8>)
 8000358:	2201      	movs	r2, #1
 800035a:	839a      	strh	r2, [r3, #28]
	transfer_functions[15] = VOLTAGE_3V3;	//PA5
 800035c:	4b1c      	ldr	r3, [pc, #112]	@ (80003d0 <Config_1+0xd8>)
 800035e:	2200      	movs	r2, #0
 8000360:	83da      	strh	r2, [r3, #30]

	CAN_ID[0] = 1;
 8000362:	4b1c      	ldr	r3, [pc, #112]	@ (80003d4 <Config_1+0xdc>)
 8000364:	2201      	movs	r2, #1
 8000366:	801a      	strh	r2, [r3, #0]
	CAN_ID[1] = 2;
 8000368:	4b1a      	ldr	r3, [pc, #104]	@ (80003d4 <Config_1+0xdc>)
 800036a:	2202      	movs	r2, #2
 800036c:	805a      	strh	r2, [r3, #2]
	CAN_ID[2] = 3;
 800036e:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <Config_1+0xdc>)
 8000370:	2203      	movs	r2, #3
 8000372:	809a      	strh	r2, [r3, #4]
	CAN_ID[3] = 4;
 8000374:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <Config_1+0xdc>)
 8000376:	2204      	movs	r2, #4
 8000378:	80da      	strh	r2, [r3, #6]
	CAN_ID[4] = 5;
 800037a:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <Config_1+0xdc>)
 800037c:	2205      	movs	r2, #5
 800037e:	811a      	strh	r2, [r3, #8]
	CAN_ID[5] = 6;
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <Config_1+0xdc>)
 8000382:	2206      	movs	r2, #6
 8000384:	815a      	strh	r2, [r3, #10]
	CAN_ID[6] = 7;
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <Config_1+0xdc>)
 8000388:	2207      	movs	r2, #7
 800038a:	819a      	strh	r2, [r3, #12]
	CAN_ID[7] = 8;
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <Config_1+0xdc>)
 800038e:	2208      	movs	r2, #8
 8000390:	81da      	strh	r2, [r3, #14]
	CAN_ID[8] = 9;
 8000392:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <Config_1+0xdc>)
 8000394:	2209      	movs	r2, #9
 8000396:	821a      	strh	r2, [r3, #16]
	CAN_ID[9] = 10;
 8000398:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <Config_1+0xdc>)
 800039a:	220a      	movs	r2, #10
 800039c:	825a      	strh	r2, [r3, #18]
	CAN_ID[10] = 11;
 800039e:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <Config_1+0xdc>)
 80003a0:	220b      	movs	r2, #11
 80003a2:	829a      	strh	r2, [r3, #20]
	CAN_ID[11] = 12;
 80003a4:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <Config_1+0xdc>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	82da      	strh	r2, [r3, #22]
	CAN_ID[12] = 13;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <Config_1+0xdc>)
 80003ac:	220d      	movs	r2, #13
 80003ae:	831a      	strh	r2, [r3, #24]
	CAN_ID[13] = 14;
 80003b0:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <Config_1+0xdc>)
 80003b2:	220e      	movs	r2, #14
 80003b4:	835a      	strh	r2, [r3, #26]
	CAN_ID[14] = 15;
 80003b6:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <Config_1+0xdc>)
 80003b8:	220f      	movs	r2, #15
 80003ba:	839a      	strh	r2, [r3, #28]
	CAN_ID[15] = 16;
 80003bc:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <Config_1+0xdc>)
 80003be:	2210      	movs	r2, #16
 80003c0:	83da      	strh	r2, [r3, #30]

}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	24000802 	.word	0x24000802
 80003d0:	24000828 	.word	0x24000828
 80003d4:	24000804 	.word	0x24000804

080003d8 <CanSend>:

uint8_t TxData[8];
uint8_t RxData[8];


void CanSend(uint8_t *TxData){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80003e0:	e001      	b.n	80003e6 <CanSend+0xe>
		Error_Handler();
 80003e2:	f000 fe77 	bl	80010d4 <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80003e6:	4809      	ldr	r0, [pc, #36]	@ (800040c <CanSend+0x34>)
 80003e8:	f005 fc48 	bl	8005c7c <HAL_FDCAN_GetTxFifoFreeLevel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d007      	beq.n	8000402 <CanSend+0x2a>
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	4906      	ldr	r1, [pc, #24]	@ (8000410 <CanSend+0x38>)
 80003f6:	4805      	ldr	r0, [pc, #20]	@ (800040c <CanSend+0x34>)
 80003f8:	f005 fa79 	bl	80058ee <HAL_FDCAN_AddMessageToTxFifoQ>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1ef      	bne.n	80003e2 <CanSend+0xa>
	}
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	24000118 	.word	0x24000118
 8000410:	24000848 	.word	0x24000848

08000414 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	2b00      	cmp	r3, #0
 8000426:	d017      	beq.n	8000458 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000428:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800042a:	4a0e      	ldr	r2, [pc, #56]	@ (8000464 <HAL_FDCAN_RxFifo0Callback+0x50>)
 800042c:	2140      	movs	r1, #64	@ 0x40
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f005 fab8 	bl	80059a4 <HAL_FDCAN_GetRxMessage>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d002      	beq.n	8000440 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 800043a:	f000 fe4b 	bl	80010d4 <Error_Handler>
 800043e:	e001      	b.n	8000444 <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 8000440:	f000 f848 	bl	80004d4 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000444:	2200      	movs	r2, #0
 8000446:	2101      	movs	r1, #1
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f005 fc29 	bl	8005ca0 <HAL_FDCAN_ActivateNotification>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 8000454:	f000 fe3e 	bl	80010d4 <Error_Handler>
		}
	}
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	24000034 	.word	0x24000034
 8000464:	2400086c 	.word	0x2400086c

08000468 <print>:



void print(uint16_t select){
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
		uint16_t Data = TF_Select(1,averages[select],transfer_functions[select]);
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	4a12      	ldr	r2, [pc, #72]	@ (80004c0 <print+0x58>)
 8000476:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	4a11      	ldr	r2, [pc, #68]	@ (80004c4 <print+0x5c>)
 800047e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	461a      	mov	r2, r3
 8000486:	2001      	movs	r0, #1
 8000488:	f001 f9d4 	bl	8001834 <TF_Select>
 800048c:	4603      	mov	r3, r0
 800048e:	81fb      	strh	r3, [r7, #14]
		TxData[0] = Data;
 8000490:	89fb      	ldrh	r3, [r7, #14]
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <print+0x60>)
 8000496:	701a      	strb	r2, [r3, #0]
		TxData[1] = Data >> 8;
 8000498:	89fb      	ldrh	r3, [r7, #14]
 800049a:	0a1b      	lsrs	r3, r3, #8
 800049c:	b29b      	uxth	r3, r3
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <print+0x60>)
 80004a2:	705a      	strb	r2, [r3, #1]
		TxHeader.Identifier = CAN_ID[select];
 80004a4:	88fb      	ldrh	r3, [r7, #6]
 80004a6:	4a09      	ldr	r2, [pc, #36]	@ (80004cc <print+0x64>)
 80004a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <print+0x68>)
 80004b0:	601a      	str	r2, [r3, #0]

		CanSend(TxData);
 80004b2:	4805      	ldr	r0, [pc, #20]	@ (80004c8 <print+0x60>)
 80004b4:	f7ff ff90 	bl	80003d8 <CanSend>
}
 80004b8:	bf00      	nop
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	240007c0 	.word	0x240007c0
 80004c4:	24000828 	.word	0x24000828
 80004c8:	2400002c 	.word	0x2400002c
 80004cc:	24000804 	.word	0x24000804
 80004d0:	24000848 	.word	0x24000848

080004d4 <decode>:

void decode(){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
	switch(TxData[0]){
 80004da:	4b19      	ldr	r3, [pc, #100]	@ (8000540 <decode+0x6c>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d01d      	beq.n	800051e <decode+0x4a>
 80004e2:	2b03      	cmp	r3, #3
 80004e4:	dc26      	bgt.n	8000534 <decode+0x60>
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d002      	beq.n	80004f0 <decode+0x1c>
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d00b      	beq.n	8000506 <decode+0x32>
		break;
	case 3:					//change CAN_id for sensor (most probably not to be used but in case let's have it)
		uint8_t select_id = TxData[1];
		CAN_ID[select_id] = TxData[2];
	}
}
 80004ee:	e021      	b.n	8000534 <decode+0x60>
		uint8_t select_type = TxData[1];
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <decode+0x6c>)
 80004f2:	785b      	ldrb	r3, [r3, #1]
 80004f4:	717b      	strb	r3, [r7, #5]
		transfer_functions[select_type] = TxData[2];
 80004f6:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <decode+0x6c>)
 80004f8:	789a      	ldrb	r2, [r3, #2]
 80004fa:	797b      	ldrb	r3, [r7, #5]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a11      	ldr	r2, [pc, #68]	@ (8000544 <decode+0x70>)
 8000500:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 8000504:	e016      	b.n	8000534 <decode+0x60>
		uint8_t divider = TxData[1];
 8000506:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <decode+0x6c>)
 8000508:	785b      	ldrb	r3, [r3, #1]
 800050a:	71bb      	strb	r3, [r7, #6]
		CAN_interval = 1000 / divider;
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000512:	fb92 f3f3 	sdiv	r3, r2, r3
 8000516:	b29a      	uxth	r2, r3
 8000518:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <decode+0x74>)
 800051a:	801a      	strh	r2, [r3, #0]
		break;
 800051c:	e00a      	b.n	8000534 <decode+0x60>
		uint8_t select_id = TxData[1];
 800051e:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <decode+0x6c>)
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	71fb      	strb	r3, [r7, #7]
		CAN_ID[select_id] = TxData[2];
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <decode+0x6c>)
 8000526:	789a      	ldrb	r2, [r3, #2]
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4611      	mov	r1, r2
 800052c:	4a07      	ldr	r2, [pc, #28]	@ (800054c <decode+0x78>)
 800052e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000532:	e7ff      	b.n	8000534 <decode+0x60>
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	2400002c 	.word	0x2400002c
 8000544:	24000828 	.word	0x24000828
 8000548:	24000802 	.word	0x24000802
 800054c:	24000804 	.word	0x24000804

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f001 fb11 	bl	8001b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f87d 	bl	8000658 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800055e:	f000 f8e9 	bl	8000734 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  Config_Setup();
 8000562:	f7ff fec3 	bl	80002ec <Config_Setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 fcc7 	bl	8000ef8 <MX_GPIO_Init>
  MX_DMA_Init();
 800056a:	f000 fca5 	bl	8000eb8 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800056e:	f000 fa89 	bl	8000a84 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000572:	f000 fb0d 	bl	8000b90 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000576:	f000 fb91 	bl	8000c9c <MX_I2C1_Init>
  MX_I2C3_Init();
 800057a:	f000 fbcf 	bl	8000d1c <MX_I2C3_Init>
  MX_ADC1_Init();
 800057e:	f000 f90b 	bl	8000798 <MX_ADC1_Init>
  MX_I2C4_Init();
 8000582:	f000 fc0b 	bl	8000d9c <MX_I2C4_Init>
  MX_TIM3_Init();
 8000586:	f000 fc49 	bl	8000e1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 800058a:	482a      	ldr	r0, [pc, #168]	@ (8000634 <main+0xe4>)
 800058c:	f00a f85a 	bl	800a644 <HAL_TIM_Base_Start_IT>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <main+0x4a>
 8000596:	f000 fd9d 	bl	80010d4 <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 800059a:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <main+0xe8>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	461a      	mov	r2, r3
 80005a0:	4926      	ldr	r1, [pc, #152]	@ (800063c <main+0xec>)
 80005a2:	4825      	ldr	r0, [pc, #148]	@ (8000638 <main+0xe8>)
 80005a4:	f001 febe 	bl	8002324 <HAL_ADC_Start_DMA>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <main+0x62>
 80005ae:	f000 fd91 	bl	80010d4 <Error_Handler>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 80005b2:	4823      	ldr	r0, [pc, #140]	@ (8000640 <main+0xf0>)
 80005b4:	f005 f970 	bl	8005898 <HAL_FDCAN_Start>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <main+0x74>
 80005be:	f000 fd89 	bl	80010d4 <Error_Handler>
 80005c2:	e008      	b.n	80005d6 <main+0x86>
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005ca:	481e      	ldr	r0, [pc, #120]	@ (8000644 <main+0xf4>)
 80005cc:	f006 fa8e 	bl	8006aec <HAL_GPIO_WritePin>
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <main+0xf8>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 80005d6:	2200      	movs	r2, #0
 80005d8:	2101      	movs	r1, #1
 80005da:	4819      	ldr	r0, [pc, #100]	@ (8000640 <main+0xf0>)
 80005dc:	f005 fb60 	bl	8005ca0 <HAL_FDCAN_ActivateNotification>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <main+0x9a>
 80005e6:	f000 fd75 	bl	80010d4 <Error_Handler>


  uint8_t counter = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 80005ee:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <main+0xf8>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d1fb      	bne.n	80005ee <main+0x9e>
		  if(millis % CAN_interval == 0){
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <main+0xfc>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <main+0x100>)
 80005fc:	8812      	ldrh	r2, [r2, #0]
 80005fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8000602:	fb01 f202 	mul.w	r2, r1, r2
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	b29b      	uxth	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1ef      	bne.n	80005ee <main+0x9e>
			  print(counter);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	b29b      	uxth	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff28 	bl	8000468 <print>
			  counter++;
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	3301      	adds	r3, #1
 800061c:	71fb      	strb	r3, [r7, #7]
			  if(counter == 16){
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b10      	cmp	r3, #16
 8000622:	d1e4      	bne.n	80005ee <main+0x9e>
				  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8000624:	2140      	movs	r1, #64	@ 0x40
 8000626:	480b      	ldr	r0, [pc, #44]	@ (8000654 <main+0x104>)
 8000628:	f006 fa79 	bl	8006b1e <HAL_GPIO_TogglePin>
				  counter = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 8000630:	e7dd      	b.n	80005ee <main+0x9e>
 8000632:	bf00      	nop
 8000634:	24000354 	.word	0x24000354
 8000638:	2400003c 	.word	0x2400003c
 800063c:	240003a0 	.word	0x240003a0
 8000640:	24000118 	.word	0x24000118
 8000644:	58020400 	.word	0x58020400
 8000648:	24000826 	.word	0x24000826
 800064c:	24000824 	.word	0x24000824
 8000650:	24000802 	.word	0x24000802
 8000654:	58020800 	.word	0x58020800

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09c      	sub	sp, #112	@ 0x70
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000662:	224c      	movs	r2, #76	@ 0x4c
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f00a fc86 	bl	800af78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2220      	movs	r2, #32
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f00a fc80 	bl	800af78 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000678:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <SystemClock_Config+0xd4>)
 800067a:	f04f 32ff 	mov.w	r2, #4294967295
 800067e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000682:	2002      	movs	r0, #2
 8000684:	f006 fb9a 	bl	8006dbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <SystemClock_Config+0xd8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a27      	ldr	r2, [pc, #156]	@ (8000730 <SystemClock_Config+0xd8>)
 8000692:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <SystemClock_Config+0xd8>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a4:	bf00      	nop
 80006a6:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <SystemClock_Config+0xd8>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006b2:	d1f8      	bne.n	80006a6 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006b4:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <SystemClock_Config+0xd4>)
 80006b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006b8:	f023 0303 	bic.w	r3, r3, #3
 80006bc:	4a1b      	ldr	r2, [pc, #108]	@ (800072c <SystemClock_Config+0xd4>)
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006c4:	2303      	movs	r3, #3
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006d2:	2340      	movs	r3, #64	@ 0x40
 80006d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 fba6 	bl	8006e30 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ea:	f000 fcf3 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	233f      	movs	r3, #63	@ 0x3f
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006fe:	2340      	movs	r3, #64	@ 0x40
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000702:	2340      	movs	r3, #64	@ 0x40
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800070c:	2340      	movs	r3, #64	@ 0x40
 800070e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2102      	movs	r1, #2
 8000714:	4618      	mov	r0, r3
 8000716:	f006 ffbd 	bl	8007694 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000720:	f000 fcd8 	bl	80010d4 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3770      	adds	r7, #112	@ 0x70
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58024400 	.word	0x58024400
 8000730:	58024800 	.word	0x58024800

08000734 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b0b0      	sub	sp, #192	@ 0xc0
 8000738:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	22c0      	movs	r2, #192	@ 0xc0
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f00a fc19 	bl	800af78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 8000746:	f44f 2208 	mov.w	r2, #557056	@ 0x88000
 800074a:	f04f 0300 	mov.w	r3, #0
 800074e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8000756:	2320      	movs	r3, #32
 8000758:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800075a:	2308      	movs	r3, #8
 800075c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 25;
 800075e:	2319      	movs	r3, #25
 8000760:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000766:	23c0      	movs	r3, #192	@ 0xc0
 8000768:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000772:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000776:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4618      	mov	r0, r3
 8000782:	f007 fafd 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800078c:	f000 fca2 	bl	80010d4 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	37c0      	adds	r7, #192	@ 0xc0
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007bc:	4b9f      	ldr	r3, [pc, #636]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80007be:	4aa0      	ldr	r2, [pc, #640]	@ (8000a40 <MX_ADC1_Init+0x2a8>)
 80007c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007c2:	4b9e      	ldr	r3, [pc, #632]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80007c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ca:	4b9c      	ldr	r3, [pc, #624]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80007cc:	2208      	movs	r2, #8
 80007ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007d0:	4b9a      	ldr	r3, [pc, #616]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d6:	4b99      	ldr	r3, [pc, #612]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80007d8:	2204      	movs	r2, #4
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007dc:	4b97      	ldr	r3, [pc, #604]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007e2:	4b96      	ldr	r3, [pc, #600]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 80007e8:	4b94      	ldr	r3, [pc, #592]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80007ea:	2210      	movs	r2, #16
 80007ec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ee:	4b93      	ldr	r3, [pc, #588]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b91      	ldr	r3, [pc, #580]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fa:	4b90      	ldr	r3, [pc, #576]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000800:	4b8e      	ldr	r3, [pc, #568]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000802:	2203      	movs	r2, #3
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000806:	4b8d      	ldr	r3, [pc, #564]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800080c:	4b8b      	ldr	r3, [pc, #556]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 800080e:	2200      	movs	r2, #0
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000812:	4b8a      	ldr	r3, [pc, #552]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081a:	4888      	ldr	r0, [pc, #544]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 800081c:	f001 fc28 	bl	8002070 <HAL_ADC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000826:	f000 fc55 	bl	80010d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4881      	ldr	r0, [pc, #516]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000836:	f002 fb2b 	bl	8002e90 <HAL_ADCEx_MultiModeConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000840:	f000 fc48 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000844:	4b7f      	ldr	r3, [pc, #508]	@ (8000a44 <MX_ADC1_Init+0x2ac>)
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000848:	2306      	movs	r3, #6
 800084a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800084c:	2306      	movs	r3, #6
 800084e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000850:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000854:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000856:	2304      	movs	r3, #4
 8000858:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4875      	ldr	r0, [pc, #468]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000868:	f001 fe24 	bl	80024b4 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000872:	f000 fc2f 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000876:	4b74      	ldr	r3, [pc, #464]	@ (8000a48 <MX_ADC1_Init+0x2b0>)
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800087a:	230c      	movs	r3, #12
 800087c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	486e      	ldr	r0, [pc, #440]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000884:	f001 fe16 	bl	80024b4 <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800088e:	f000 fc21 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000892:	4b6e      	ldr	r3, [pc, #440]	@ (8000a4c <MX_ADC1_Init+0x2b4>)
 8000894:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000896:	2312      	movs	r3, #18
 8000898:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	4867      	ldr	r0, [pc, #412]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80008a0:	f001 fe08 	bl	80024b4 <HAL_ADC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80008aa:	f000 fc13 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008ae:	4b68      	ldr	r3, [pc, #416]	@ (8000a50 <MX_ADC1_Init+0x2b8>)
 80008b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008b2:	2318      	movs	r3, #24
 80008b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4860      	ldr	r0, [pc, #384]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80008bc:	f001 fdfa 	bl	80024b4 <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80008c6:	f000 fc05 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008ca:	4b62      	ldr	r3, [pc, #392]	@ (8000a54 <MX_ADC1_Init+0x2bc>)
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80008ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	4858      	ldr	r0, [pc, #352]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80008da:	f001 fdeb 	bl	80024b4 <HAL_ADC_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80008e4:	f000 fbf6 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008e8:	4b5b      	ldr	r3, [pc, #364]	@ (8000a58 <MX_ADC1_Init+0x2c0>)
 80008ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008ec:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80008f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	4619      	mov	r1, r3
 80008f6:	4851      	ldr	r0, [pc, #324]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80008f8:	f001 fddc 	bl	80024b4 <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000902:	f000 fbe7 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000906:	4b55      	ldr	r3, [pc, #340]	@ (8000a5c <MX_ADC1_Init+0x2c4>)
 8000908:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800090a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800090e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4849      	ldr	r0, [pc, #292]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000916:	f001 fdcd 	bl	80024b4 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000920:	f000 fbd8 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000924:	4b4e      	ldr	r3, [pc, #312]	@ (8000a60 <MX_ADC1_Init+0x2c8>)
 8000926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000928:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800092c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	4842      	ldr	r0, [pc, #264]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000934:	f001 fdbe 	bl	80024b4 <HAL_ADC_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 800093e:	f000 fbc9 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000942:	4b48      	ldr	r3, [pc, #288]	@ (8000a64 <MX_ADC1_Init+0x2cc>)
 8000944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000946:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800094a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	483a      	ldr	r0, [pc, #232]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000952:	f001 fdaf 	bl	80024b4 <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 800095c:	f000 fbba 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000960:	4b41      	ldr	r3, [pc, #260]	@ (8000a68 <MX_ADC1_Init+0x2d0>)
 8000962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000968:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4833      	ldr	r0, [pc, #204]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000970:	f001 fda0 	bl	80024b4 <HAL_ADC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 800097a:	f000 fbab 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800097e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a6c <MX_ADC1_Init+0x2d4>)
 8000980:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000982:	f240 2306 	movw	r3, #518	@ 0x206
 8000986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	482b      	ldr	r0, [pc, #172]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 800098e:	f001 fd91 	bl	80024b4 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 8000998:	f000 fb9c 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800099c:	4b34      	ldr	r3, [pc, #208]	@ (8000a70 <MX_ADC1_Init+0x2d8>)
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80009a0:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	4824      	ldr	r0, [pc, #144]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80009ac:	f001 fd82 	bl	80024b4 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 80009b6:	f000 fb8d 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80009ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000a74 <MX_ADC1_Init+0x2dc>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80009be:	f240 2312 	movw	r3, #530	@ 0x212
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	481c      	ldr	r0, [pc, #112]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80009ca:	f001 fd73 	bl	80024b4 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 80009d4:	f000 fb7e 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80009d8:	4b27      	ldr	r3, [pc, #156]	@ (8000a78 <MX_ADC1_Init+0x2e0>)
 80009da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80009dc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80009e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	4815      	ldr	r0, [pc, #84]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 80009e8:	f001 fd64 	bl	80024b4 <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 80009f2:	f000 fb6f 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <MX_ADC1_Init+0x2e4>)
 80009f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80009fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000a06:	f001 fd55 	bl	80024b4 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 8000a10:	f000 fb60 	bl	80010d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_ADC1_Init+0x2e8>)
 8000a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000a18:	f240 3306 	movw	r3, #774	@ 0x306
 8000a1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	@ (8000a3c <MX_ADC1_Init+0x2a4>)
 8000a24:	f001 fd46 	bl	80024b4 <HAL_ADC_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 8000a2e:	f000 fb51 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	@ 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2400003c 	.word	0x2400003c
 8000a40:	40022000 	.word	0x40022000
 8000a44:	0c900008 	.word	0x0c900008
 8000a48:	10c00010 	.word	0x10c00010
 8000a4c:	14f00020 	.word	0x14f00020
 8000a50:	1d500080 	.word	0x1d500080
 8000a54:	21800100 	.word	0x21800100
 8000a58:	25b00200 	.word	0x25b00200
 8000a5c:	2a000400 	.word	0x2a000400
 8000a60:	2e300800 	.word	0x2e300800
 8000a64:	32601000 	.word	0x32601000
 8000a68:	36902000 	.word	0x36902000
 8000a6c:	3ac04000 	.word	0x3ac04000
 8000a70:	3ef08000 	.word	0x3ef08000
 8000a74:	43210000 	.word	0x43210000
 8000a78:	47520000 	.word	0x47520000
 8000a7c:	4b840000 	.word	0x4b840000
 8000a80:	4fb80000 	.word	0x4fb80000

08000a84 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a88:	4b3d      	ldr	r3, [pc, #244]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8000b84 <MX_FDCAN1_Init+0x100>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a94:	4b3a      	ldr	r3, [pc, #232]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000a9a:	4b39      	ldr	r3, [pc, #228]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000aa0:	4b37      	ldr	r3, [pc, #220]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000aa6:	4b36      	ldr	r3, [pc, #216]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000aac:	4b34      	ldr	r3, [pc, #208]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ab2:	4b33      	ldr	r3, [pc, #204]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000aba:	220d      	movs	r2, #13
 8000abc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000abe:	4b30      	ldr	r3, [pc, #192]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000adc:	4b28      	ldr	r3, [pc, #160]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 28;
 8000ae2:	4b27      	ldr	r3, [pc, #156]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000ae4:	221c      	movs	r2, #28
 8000ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ae8:	4b25      	ldr	r3, [pc, #148]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000aee:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000af6:	2204      	movs	r2, #4
 8000af8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000b0e:	2204      	movs	r2, #4
 8000b10:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b30:	4813      	ldr	r0, [pc, #76]	@ (8000b80 <MX_FDCAN1_Init+0xfc>)
 8000b32:	f004 fcd3 	bl	80054dc <HAL_FDCAN_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b3c:	f000 faca 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_FDCAN1_Init+0x104>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_FDCAN1_Init+0x108>)
 8000b48:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <MX_FDCAN1_Init+0x108>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_FDCAN1_Init+0x108>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <MX_FDCAN1_Init+0x108>)
 8000b58:	2202      	movs	r2, #2
 8000b5a:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <MX_FDCAN1_Init+0x108>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <MX_FDCAN1_Init+0x108>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <MX_FDCAN1_Init+0x108>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MX_FDCAN1_Init+0x108>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000b74:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <MX_FDCAN1_Init+0x108>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	24000118 	.word	0x24000118
 8000b84:	4000a000 	.word	0x4000a000
 8000b88:	24000804 	.word	0x24000804
 8000b8c:	24000848 	.word	0x24000848

08000b90 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b94:	4b3d      	ldr	r3, [pc, #244]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000b96:	4a3e      	ldr	r2, [pc, #248]	@ (8000c90 <MX_FDCAN2_Init+0x100>)
 8000b98:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ba6:	4b39      	ldr	r3, [pc, #228]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bac:	4b37      	ldr	r3, [pc, #220]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bb2:	4b36      	ldr	r3, [pc, #216]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000bb8:	4b34      	ldr	r3, [pc, #208]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000bbe:	4b33      	ldr	r3, [pc, #204]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 8000bc4:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bc6:	220d      	movs	r2, #13
 8000bc8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000bca:	4b30      	ldr	r3, [pc, #192]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000be2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000be8:	4b28      	ldr	r3, [pc, #160]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000bee:	4b27      	ldr	r3, [pc, #156]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000bf4:	4b25      	ldr	r3, [pc, #148]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000bfa:	4b24      	ldr	r3, [pc, #144]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c00:	4b22      	ldr	r3, [pc, #136]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c06:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000c0e:	2204      	movs	r2, #4
 8000c10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c18:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c24:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c30:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000c38:	2204      	movs	r2, #4
 8000c3a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c3c:	4813      	ldr	r0, [pc, #76]	@ (8000c8c <MX_FDCAN2_Init+0xfc>)
 8000c3e:	f004 fc4d 	bl	80054dc <HAL_FDCAN_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c48:	f000 fa44 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_FDCAN2_Init+0x104>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_FDCAN2_Init+0x108>)
 8000c54:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_FDCAN2_Init+0x108>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_FDCAN2_Init+0x108>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <MX_FDCAN2_Init+0x108>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <MX_FDCAN2_Init+0x108>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <MX_FDCAN2_Init+0x108>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_FDCAN2_Init+0x108>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <MX_FDCAN2_Init+0x108>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <MX_FDCAN2_Init+0x108>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	240001b8 	.word	0x240001b8
 8000c90:	4000a400 	.word	0x4000a400
 8000c94:	24000804 	.word	0x24000804
 8000c98:	24000848 	.word	0x24000848

08000c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <MX_I2C1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d18 <MX_I2C1_Init+0x7c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd6:	480e      	ldr	r0, [pc, #56]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cd8:	f005 ff3c 	bl	8006b54 <HAL_I2C_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 f9f7 	bl	80010d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cea:	f005 ffcf 	bl	8006c8c <HAL_I2CEx_ConfigAnalogFilter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f000 f9ee 	bl	80010d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cfc:	f006 f811 	bl	8006d22 <HAL_I2CEx_ConfigDigitalFilter>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f9e5 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	24000258 	.word	0x24000258
 8000d14:	40005400 	.word	0x40005400
 8000d18:	00707cbb 	.word	0x00707cbb

08000d1c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d22:	4a1c      	ldr	r2, [pc, #112]	@ (8000d94 <MX_I2C3_Init+0x78>)
 8000d24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d28:	4a1b      	ldr	r2, [pc, #108]	@ (8000d98 <MX_I2C3_Init+0x7c>)
 8000d2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d56:	480e      	ldr	r0, [pc, #56]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d58:	f005 fefc 	bl	8006b54 <HAL_I2C_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d62:	f000 f9b7 	bl	80010d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d6a:	f005 ff8f 	bl	8006c8c <HAL_I2CEx_ConfigAnalogFilter>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d74:	f000 f9ae 	bl	80010d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_I2C3_Init+0x74>)
 8000d7c:	f005 ffd1 	bl	8006d22 <HAL_I2CEx_ConfigDigitalFilter>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d86:	f000 f9a5 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	240002ac 	.word	0x240002ac
 8000d94:	40005c00 	.word	0x40005c00
 8000d98:	00707cbb 	.word	0x00707cbb

08000d9c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000da2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e14 <MX_I2C4_Init+0x78>)
 8000da4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000da8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e18 <MX_I2C4_Init+0x7c>)
 8000daa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000dac:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db2:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000dd6:	480e      	ldr	r0, [pc, #56]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000dd8:	f005 febc 	bl	8006b54 <HAL_I2C_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000de2:	f000 f977 	bl	80010d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4809      	ldr	r0, [pc, #36]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000dea:	f005 ff4f 	bl	8006c8c <HAL_I2CEx_ConfigAnalogFilter>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000df4:	f000 f96e 	bl	80010d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_I2C4_Init+0x74>)
 8000dfc:	f005 ff91 	bl	8006d22 <HAL_I2CEx_ConfigDigitalFilter>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e06:	f000 f965 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	24000300 	.word	0x24000300
 8000e14:	58001c00 	.word	0x58001c00
 8000e18:	00707cbb 	.word	0x00707cbb

08000e1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <MX_TIM3_Init+0x94>)
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <MX_TIM3_Init+0x98>)
 8000e3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <MX_TIM3_Init+0x94>)
 8000e42:	223f      	movs	r2, #63	@ 0x3f
 8000e44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <MX_TIM3_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <MX_TIM3_Init+0x94>)
 8000e4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <MX_TIM3_Init+0x94>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <MX_TIM3_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e60:	4813      	ldr	r0, [pc, #76]	@ (8000eb0 <MX_TIM3_Init+0x94>)
 8000e62:	f009 fb97 	bl	800a594 <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e6c:	f000 f932 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <MX_TIM3_Init+0x94>)
 8000e7e:	f009 fd61 	bl	800a944 <HAL_TIM_ConfigClockSource>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e88:	f000 f924 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_TIM3_Init+0x94>)
 8000e9a:	f009 ffc1 	bl	800ae20 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ea4:	f000 f916 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	24000354 	.word	0x24000354
 8000eb4:	40000400 	.word	0x40000400

08000eb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <MX_DMA_Init+0x3c>)
 8000ec0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef4 <MX_DMA_Init+0x3c>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_DMA_Init+0x3c>)
 8000ed0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	200b      	movs	r0, #11
 8000ee2:	f002 f94c 	bl	800317e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ee6:	200b      	movs	r0, #11
 8000ee8:	f002 f963 	bl	80031b2 <HAL_NVIC_EnableIRQ>

}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	58024400 	.word	0x58024400

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0e:	4b34      	ldr	r3, [pc, #208]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f14:	4a32      	ldr	r2, [pc, #200]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f1a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f1e:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f32:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f3c:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f50:	4a23      	ldr	r2, [pc, #140]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f5a:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <MX_GPIO_Init+0xe8>)
 8000f7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f8c:	4815      	ldr	r0, [pc, #84]	@ (8000fe4 <MX_GPIO_Init+0xec>)
 8000f8e:	f005 fdad 	bl	8006aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2140      	movs	r1, #64	@ 0x40
 8000f96:	4814      	ldr	r0, [pc, #80]	@ (8000fe8 <MX_GPIO_Init+0xf0>)
 8000f98:	f005 fda8 	bl	8006aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <MX_GPIO_Init+0xec>)
 8000fb6:	f005 fbe9 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000fba:	2340      	movs	r3, #64	@ 0x40
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_GPIO_Init+0xf0>)
 8000fd2:	f005 fbdb 	bl	800678c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	@ 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	58020400 	.word	0x58020400
 8000fe8:	58020800 	.word	0x58020800

08000fec <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a31      	ldr	r2, [pc, #196]	@ (80010c0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d159      	bne.n	80010b2 <HAL_ADC_ConvCpltCallback+0xc6>
		if(AVE_POS < ROLLING_AVE){
 8000ffe:	4b31      	ldr	r3, [pc, #196]	@ (80010c4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b1f      	cmp	r3, #31
 8001004:	d806      	bhi.n	8001014 <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 8001006:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	e035      	b.n	8001080 <HAL_ADC_ConvCpltCallback+0x94>
		}
		else{
			AVE_POS = 0;
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	e02a      	b.n	8001076 <HAL_ADC_ConvCpltCallback+0x8a>
				for(int z = 0; z < ROLLING_AVE;z++){
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	e021      	b.n	800106a <HAL_ADC_ConvCpltCallback+0x7e>
					if(z == 0){
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10a      	bne.n	8001042 <HAL_ADC_ConvCpltCallback+0x56>
						averages[i] = all_raw_data[i][0];
 800102c:	4a26      	ldr	r2, [pc, #152]	@ (80010c8 <HAL_ADC_ConvCpltCallback+0xdc>)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	019b      	lsls	r3, r3, #6
 8001032:	4413      	add	r3, r2
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	4a24      	ldr	r2, [pc, #144]	@ (80010cc <HAL_ADC_ConvCpltCallback+0xe0>)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001040:	e010      	b.n	8001064 <HAL_ADC_ConvCpltCallback+0x78>
					}else{
						averages[i]=(averages[i] + all_raw_data[i][z])/2;
 8001042:	4a22      	ldr	r2, [pc, #136]	@ (80010cc <HAL_ADC_ConvCpltCallback+0xe0>)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	481f      	ldr	r0, [pc, #124]	@ (80010c8 <HAL_ADC_ConvCpltCallback+0xdc>)
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	0151      	lsls	r1, r2, #5
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	440a      	add	r2, r1
 8001054:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001058:	4413      	add	r3, r2
 800105a:	085a      	lsrs	r2, r3, #1
 800105c:	491b      	ldr	r1, [pc, #108]	@ (80010cc <HAL_ADC_ConvCpltCallback+0xe0>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int z = 0; z < ROLLING_AVE;z++){
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	3301      	adds	r3, #1
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	2b1f      	cmp	r3, #31
 800106e:	ddda      	ble.n	8001026 <HAL_ADC_ConvCpltCallback+0x3a>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3301      	adds	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699a      	ldr	r2, [r3, #24]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8cf      	bhi.n	8001020 <HAL_ADC_ConvCpltCallback+0x34>
					}
				}
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e010      	b.n	80010a8 <HAL_ADC_ConvCpltCallback+0xbc>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3b01      	subs	r3, #1
 800108c:	4910      	ldr	r1, [pc, #64]	@ (80010d0 <HAL_ADC_ConvCpltCallback+0xe4>)
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8001094:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	0152      	lsls	r2, r2, #5
 800109a:	4413      	add	r3, r2
 800109c:	4602      	mov	r2, r0
 800109e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3301      	adds	r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	699a      	ldr	r2, [r3, #24]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d8e9      	bhi.n	8001086 <HAL_ADC_ConvCpltCallback+0x9a>
		}
	}
}
 80010b2:	bf00      	nop
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40022000 	.word	0x40022000
 80010c4:	24000800 	.word	0x24000800
 80010c8:	240003c0 	.word	0x240003c0
 80010cc:	240007c0 	.word	0x240007c0
 80010d0:	240003a0 	.word	0x240003a0

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <Error_Handler+0x8>

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <HAL_MspInit+0x3c>)
 80010e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010ec:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <HAL_MspInit+0x3c>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_MspInit+0x3c>)
 80010f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2005      	movs	r0, #5
 800110a:	f002 f838 	bl	800317e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800110e:	2005      	movs	r0, #5
 8001110:	f002 f84f 	bl	80031b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58024400 	.word	0x58024400

08001120 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	@ 0x30
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a4b      	ldr	r2, [pc, #300]	@ (800126c <HAL_ADC_MspInit+0x14c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	f040 8090 	bne.w	8001264 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001144:	4b4a      	ldr	r3, [pc, #296]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 8001146:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800114a:	4a49      	ldr	r2, [pc, #292]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001154:	4b46      	ldr	r3, [pc, #280]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 8001156:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b43      	ldr	r3, [pc, #268]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 8001164:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001168:	4a41      	ldr	r2, [pc, #260]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001172:	4b3f      	ldr	r3, [pc, #252]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 8001174:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 8001182:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001186:	4a3a      	ldr	r2, [pc, #232]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001190:	4b37      	ldr	r3, [pc, #220]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 8001192:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b34      	ldr	r3, [pc, #208]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 80011a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011a4:	4a32      	ldr	r2, [pc, #200]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011ae:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <HAL_ADC_MspInit+0x150>)
 80011b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011bc:	233f      	movs	r3, #63	@ 0x3f
 80011be:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4829      	ldr	r0, [pc, #164]	@ (8001274 <HAL_ADC_MspInit+0x154>)
 80011d0:	f005 fadc 	bl	800678c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011d4:	23ff      	movs	r3, #255	@ 0xff
 80011d6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	2303      	movs	r3, #3
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4824      	ldr	r0, [pc, #144]	@ (8001278 <HAL_ADC_MspInit+0x158>)
 80011e8:	f005 fad0 	bl	800678c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ec:	2303      	movs	r3, #3
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	481f      	ldr	r0, [pc, #124]	@ (800127c <HAL_ADC_MspInit+0x15c>)
 8001200:	f005 fac4 	bl	800678c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001204:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 8001206:	4a1f      	ldr	r2, [pc, #124]	@ (8001284 <HAL_ADC_MspInit+0x164>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800120a:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 800120c:	2209      	movs	r2, #9
 800120e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 800121e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001222:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001224:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 8001226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800122a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 800122e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001232:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 8001236:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800123a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800123c:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001248:	480d      	ldr	r0, [pc, #52]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 800124a:	f001 ffcd 	bl	80031e8 <HAL_DMA_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001254:	f7ff ff3e 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a09      	ldr	r2, [pc, #36]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 800125c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800125e:	4a08      	ldr	r2, [pc, #32]	@ (8001280 <HAL_ADC_MspInit+0x160>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	3730      	adds	r7, #48	@ 0x30
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40022000 	.word	0x40022000
 8001270:	58024400 	.word	0x58024400
 8001274:	58020800 	.word	0x58020800
 8001278:	58020000 	.word	0x58020000
 800127c:	58020400 	.word	0x58020400
 8001280:	240000a0 	.word	0x240000a0
 8001284:	40020010 	.word	0x40020010

08001288 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	@ 0x30
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a42      	ldr	r2, [pc, #264]	@ (80013b0 <HAL_FDCAN_MspInit+0x128>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d140      	bne.n	800132c <HAL_FDCAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80012aa:	4b42      	ldr	r3, [pc, #264]	@ (80013b4 <HAL_FDCAN_MspInit+0x12c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a40      	ldr	r2, [pc, #256]	@ (80013b4 <HAL_FDCAN_MspInit+0x12c>)
 80012b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80012b4:	4b3f      	ldr	r3, [pc, #252]	@ (80013b4 <HAL_FDCAN_MspInit+0x12c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d10e      	bne.n	80012da <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80012bc:	4b3e      	ldr	r3, [pc, #248]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 80012be:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80012c2:	4a3d      	ldr	r2, [pc, #244]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 80012c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c8:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80012cc:	4b3a      	ldr	r3, [pc, #232]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 80012ce:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80012d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b37      	ldr	r3, [pc, #220]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 80012dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012e0:	4a35      	ldr	r2, [pc, #212]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012ea:	4b33      	ldr	r3, [pc, #204]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 80012ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800130a:	2309      	movs	r3, #9
 800130c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	4829      	ldr	r0, [pc, #164]	@ (80013bc <HAL_FDCAN_MspInit+0x134>)
 8001316:	f005 fa39 	bl	800678c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2013      	movs	r0, #19
 8001320:	f001 ff2d 	bl	800317e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001324:	2013      	movs	r0, #19
 8001326:	f001 ff44 	bl	80031b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800132a:	e03c      	b.n	80013a6 <HAL_FDCAN_MspInit+0x11e>
  else if(hfdcan->Instance==FDCAN2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a23      	ldr	r2, [pc, #140]	@ (80013c0 <HAL_FDCAN_MspInit+0x138>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d137      	bne.n	80013a6 <HAL_FDCAN_MspInit+0x11e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001336:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <HAL_FDCAN_MspInit+0x12c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	4a1d      	ldr	r2, [pc, #116]	@ (80013b4 <HAL_FDCAN_MspInit+0x12c>)
 800133e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001340:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <HAL_FDCAN_MspInit+0x12c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d10e      	bne.n	8001366 <HAL_FDCAN_MspInit+0xde>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 800134a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800134e:	4a1a      	ldr	r2, [pc, #104]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001354:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001358:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 800135a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800135e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 8001368:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800136c:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <HAL_FDCAN_MspInit+0x130>)
 8001378:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001384:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001396:	2309      	movs	r3, #9
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <HAL_FDCAN_MspInit+0x13c>)
 80013a2:	f005 f9f3 	bl	800678c <HAL_GPIO_Init>
}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	@ 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	4000a000 	.word	0x4000a000
 80013b4:	24000894 	.word	0x24000894
 80013b8:	58024400 	.word	0x58024400
 80013bc:	58020000 	.word	0x58020000
 80013c0:	4000a400 	.word	0x4000a400
 80013c4:	58020400 	.word	0x58020400

080013c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0c0      	sub	sp, #256	@ 0x100
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013e4:	22c0      	movs	r2, #192	@ 0xc0
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f009 fdc5 	bl	800af78 <memset>
  if(hi2c->Instance==I2C1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a86      	ldr	r2, [pc, #536]	@ (800160c <HAL_I2C_MspInit+0x244>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d146      	bne.n	8001486 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013f8:	f04f 0208 	mov.w	r2, #8
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800140e:	4618      	mov	r0, r3
 8001410:	f006 fcb6 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800141a:	f7ff fe5b 	bl	80010d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b7c      	ldr	r3, [pc, #496]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 8001420:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001424:	4a7a      	ldr	r2, [pc, #488]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800142e:	4b78      	ldr	r3, [pc, #480]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 8001430:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800143c:	23c0      	movs	r3, #192	@ 0xc0
 800143e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001442:	2312      	movs	r3, #18
 8001444:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001454:	2304      	movs	r3, #4
 8001456:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800145e:	4619      	mov	r1, r3
 8001460:	486c      	ldr	r0, [pc, #432]	@ (8001614 <HAL_I2C_MspInit+0x24c>)
 8001462:	f005 f993 	bl	800678c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001466:	4b6a      	ldr	r3, [pc, #424]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 8001468:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800146c:	4a68      	ldr	r2, [pc, #416]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 800146e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001472:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001476:	4b66      	ldr	r3, [pc, #408]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 8001478:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800147c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001480:	623b      	str	r3, [r7, #32]
 8001482:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001484:	e0bd      	b.n	8001602 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a63      	ldr	r2, [pc, #396]	@ (8001618 <HAL_I2C_MspInit+0x250>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d16c      	bne.n	800156a <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001490:	f04f 0208 	mov.w	r2, #8
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a6:	4618      	mov	r0, r3
 80014a8:	f006 fc6a 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80014b2:	f7ff fe0f 	bl	80010d4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b56      	ldr	r3, [pc, #344]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 80014b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014bc:	4a54      	ldr	r2, [pc, #336]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014c6:	4b52      	ldr	r3, [pc, #328]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 80014c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 80014d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014da:	4a4d      	ldr	r2, [pc, #308]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 80014e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fa:	2312      	movs	r3, #18
 80014fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800150c:	2304      	movs	r3, #4
 800150e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001516:	4619      	mov	r1, r3
 8001518:	4840      	ldr	r0, [pc, #256]	@ (800161c <HAL_I2C_MspInit+0x254>)
 800151a:	f005 f937 	bl	800678c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800151e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001522:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001526:	2312      	movs	r3, #18
 8001528:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001538:	2304      	movs	r3, #4
 800153a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001542:	4619      	mov	r1, r3
 8001544:	4836      	ldr	r0, [pc, #216]	@ (8001620 <HAL_I2C_MspInit+0x258>)
 8001546:	f005 f921 	bl	800678c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800154a:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 800154c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001550:	4a2f      	ldr	r2, [pc, #188]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 8001552:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001556:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800155a:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 800155c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]
}
 8001568:	e04b      	b.n	8001602 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2d      	ldr	r2, [pc, #180]	@ (8001624 <HAL_I2C_MspInit+0x25c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d146      	bne.n	8001602 <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001574:	f04f 0210 	mov.w	r2, #16
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001586:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158a:	4618      	mov	r0, r3
 800158c:	f006 fbf8 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8001596:	f7ff fd9d 	bl	80010d4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 800159c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 80015ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c0:	2312      	movs	r3, #18
 80015c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80015d2:	2306      	movs	r3, #6
 80015d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	@ (8001614 <HAL_I2C_MspInit+0x24c>)
 80015e0:	f005 f8d4 	bl	800678c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80015e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 80015e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80015ea:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_I2C_MspInit+0x248>)
 80015f6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80015fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
}
 8001602:	bf00      	nop
 8001604:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40005400 	.word	0x40005400
 8001610:	58024400 	.word	0x58024400
 8001614:	58020400 	.word	0x58020400
 8001618:	40005c00 	.word	0x40005c00
 800161c:	58020800 	.word	0x58020800
 8001620:	58020000 	.word	0x58020000
 8001624:	58001c00 	.word	0x58001c00

08001628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0e      	ldr	r2, [pc, #56]	@ (8001670 <HAL_TIM_Base_MspInit+0x48>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d116      	bne.n	8001668 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 800163c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001640:	4a0c      	ldr	r2, [pc, #48]	@ (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 800164c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	201d      	movs	r0, #29
 800165e:	f001 fd8e 	bl	800317e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001662:	201d      	movs	r0, #29
 8001664:	f001 fda5 	bl	80031b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40000400 	.word	0x40000400
 8001674:	58024400 	.word	0x58024400

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <NMI_Handler+0x4>

08001680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <MemManage_Handler+0x4>

08001690 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <UsageFault_Handler+0x4>

080016a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ce:	f000 fac7 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <DMA1_Stream0_IRQHandler+0x10>)
 80016ea:	f002 fb75 	bl	8003dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	240000a0 	.word	0x240000a0

080016f8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <FDCAN1_IT0_IRQHandler+0x10>)
 80016fe:	f004 fb49 	bl	8005d94 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	24000118 	.word	0x24000118

0800170c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <TIM3_IRQHandler+0x2c>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <TIM3_IRQHandler+0x2c>)
 800171a:	801a      	strh	r2, [r3, #0]
	if(millis == 1000){
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <TIM3_IRQHandler+0x2c>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001724:	d102      	bne.n	800172c <TIM3_IRQHandler+0x20>
		CAN_enable = 1;
 8001726:	4b05      	ldr	r3, [pc, #20]	@ (800173c <TIM3_IRQHandler+0x30>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800172c:	4804      	ldr	r0, [pc, #16]	@ (8001740 <TIM3_IRQHandler+0x34>)
 800172e:	f009 f801 	bl	800a734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	24000824 	.word	0x24000824
 800173c:	24000826 	.word	0x24000826
 8001740:	24000354 	.word	0x24000354

08001744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001748:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <SystemInit+0xd0>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174e:	4a31      	ldr	r2, [pc, #196]	@ (8001814 <SystemInit+0xd0>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001758:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <SystemInit+0xd4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	2b02      	cmp	r3, #2
 8001762:	d807      	bhi.n	8001774 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001764:	4b2c      	ldr	r3, [pc, #176]	@ (8001818 <SystemInit+0xd4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 030f 	bic.w	r3, r3, #15
 800176c:	4a2a      	ldr	r2, [pc, #168]	@ (8001818 <SystemInit+0xd4>)
 800176e:	f043 0303 	orr.w	r3, r3, #3
 8001772:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001774:	4b29      	ldr	r3, [pc, #164]	@ (800181c <SystemInit+0xd8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a28      	ldr	r2, [pc, #160]	@ (800181c <SystemInit+0xd8>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001780:	4b26      	ldr	r3, [pc, #152]	@ (800181c <SystemInit+0xd8>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001786:	4b25      	ldr	r3, [pc, #148]	@ (800181c <SystemInit+0xd8>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4924      	ldr	r1, [pc, #144]	@ (800181c <SystemInit+0xd8>)
 800178c:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <SystemInit+0xdc>)
 800178e:	4013      	ands	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001792:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <SystemInit+0xd4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <SystemInit+0xd4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 030f 	bic.w	r3, r3, #15
 80017a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001818 <SystemInit+0xd4>)
 80017a8:	f043 0303 	orr.w	r3, r3, #3
 80017ac:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80017ae:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <SystemInit+0xd8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <SystemInit+0xd8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80017ba:	4b18      	ldr	r3, [pc, #96]	@ (800181c <SystemInit+0xd8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017c0:	4b16      	ldr	r3, [pc, #88]	@ (800181c <SystemInit+0xd8>)
 80017c2:	4a18      	ldr	r2, [pc, #96]	@ (8001824 <SystemInit+0xe0>)
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <SystemInit+0xd8>)
 80017c8:	4a17      	ldr	r2, [pc, #92]	@ (8001828 <SystemInit+0xe4>)
 80017ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <SystemInit+0xd8>)
 80017ce:	4a17      	ldr	r2, [pc, #92]	@ (800182c <SystemInit+0xe8>)
 80017d0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <SystemInit+0xd8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017d8:	4b10      	ldr	r3, [pc, #64]	@ (800181c <SystemInit+0xd8>)
 80017da:	4a14      	ldr	r2, [pc, #80]	@ (800182c <SystemInit+0xe8>)
 80017dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <SystemInit+0xd8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <SystemInit+0xd8>)
 80017e6:	4a11      	ldr	r2, [pc, #68]	@ (800182c <SystemInit+0xe8>)
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <SystemInit+0xd8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <SystemInit+0xd8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a09      	ldr	r2, [pc, #36]	@ (800181c <SystemInit+0xd8>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017fc:	4b07      	ldr	r3, [pc, #28]	@ (800181c <SystemInit+0xd8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001802:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <SystemInit+0xec>)
 8001804:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001808:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00
 8001818:	52002000 	.word	0x52002000
 800181c:	58024400 	.word	0x58024400
 8001820:	eaf6ed7f 	.word	0xeaf6ed7f
 8001824:	02020200 	.word	0x02020200
 8001828:	01ff0000 	.word	0x01ff0000
 800182c:	01010280 	.word	0x01010280
 8001830:	52004000 	.word	0x52004000

08001834 <TF_Select>:
#include "functions.h"
#include "main.h"



uint16_t TF_Select(uint8_t bytes, uint32_t raw, uint8_t sensor){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	4613      	mov	r3, r2
 8001842:	71bb      	strb	r3, [r7, #6]

	uint16_t transmit = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	81fb      	strh	r3, [r7, #14]

	switch(sensor){
 8001848:	79bb      	ldrb	r3, [r7, #6]
 800184a:	2b0c      	cmp	r3, #12
 800184c:	f200 8085 	bhi.w	800195a <TF_Select+0x126>
 8001850:	a201      	add	r2, pc, #4	@ (adr r2, 8001858 <TF_Select+0x24>)
 8001852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001856:	bf00      	nop
 8001858:	0800188d 	.word	0x0800188d
 800185c:	0800189d 	.word	0x0800189d
 8001860:	080018ad 	.word	0x080018ad
 8001864:	080018bd 	.word	0x080018bd
 8001868:	080018cd 	.word	0x080018cd
 800186c:	080018dd 	.word	0x080018dd
 8001870:	080018fd 	.word	0x080018fd
 8001874:	080018ed 	.word	0x080018ed
 8001878:	0800190d 	.word	0x0800190d
 800187c:	0800191d 	.word	0x0800191d
 8001880:	0800192d 	.word	0x0800192d
 8001884:	0800193d 	.word	0x0800193d
 8001888:	0800194d 	.word	0x0800194d
	case VOLTAGE_3V3:
		transmit = TF_3V3(bytes, raw);
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	6839      	ldr	r1, [r7, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f869 	bl	8001968 <TF_3V3>
 8001896:	4603      	mov	r3, r0
 8001898:	81fb      	strh	r3, [r7, #14]
		break;
 800189a:	e05f      	b.n	800195c <TF_Select+0x128>
	case VOLTAGE_5V:
		transmit = TF_5V(bytes, raw);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	6839      	ldr	r1, [r7, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f87f 	bl	80019a4 <TF_5V>
 80018a6:	4603      	mov	r3, r0
 80018a8:	81fb      	strh	r3, [r7, #14]
		break;
 80018aa:	e057      	b.n	800195c <TF_Select+0x128>
	case VOLTAGE_24V:
		transmit = TF_24V(bytes,raw);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 f886 	bl	80019c2 <TF_24V>
 80018b6:	4603      	mov	r3, r0
 80018b8:	81fb      	strh	r3, [r7, #14]
		break;
 80018ba:	e04f      	b.n	800195c <TF_Select+0x128>
	case BPPS:
		transmit = TF_BPPS(bytes, raw);
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 f88d 	bl	80019e0 <TF_BPPS>
 80018c6:	4603      	mov	r3, r0
 80018c8:	81fb      	strh	r3, [r7, #14]
		break;
 80018ca:	e047      	b.n	800195c <TF_Select+0x128>
	case APPS:
		transmit = TF_APPS(bytes, raw);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 f8a3 	bl	8001a1c <TF_APPS>
 80018d6:	4603      	mov	r3, r0
 80018d8:	81fb      	strh	r3, [r7, #14]
		break;
 80018da:	e03f      	b.n	800195c <TF_Select+0x128>
	case FRONT_HEAVE:
		transmit = TF_FRONT_HEAVE(bytes, raw);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 f8b9 	bl	8001a58 <TF_FRONT_HEAVE>
 80018e6:	4603      	mov	r3, r0
 80018e8:	81fb      	strh	r3, [r7, #14]
		break;
 80018ea:	e037      	b.n	800195c <TF_Select+0x128>
	case REAR_HEAVE:
		transmit = TF_REAR_HEAVE(bytes, raw);
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	6839      	ldr	r1, [r7, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f8be 	bl	8001a72 <TF_REAR_HEAVE>
 80018f6:	4603      	mov	r3, r0
 80018f8:	81fb      	strh	r3, [r7, #14]
		break;
 80018fa:	e02f      	b.n	800195c <TF_Select+0x128>
	case FRONT_ROLL:
		transmit = TF_FRONT_ROLL(bytes, raw);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f8c3 	bl	8001a8c <TF_FRONT_ROLL>
 8001906:	4603      	mov	r3, r0
 8001908:	81fb      	strh	r3, [r7, #14]
		break;
 800190a:	e027      	b.n	800195c <TF_Select+0x128>
	case REAR_ROLL:
		transmit = TF_REAR_ROLL(bytes, raw);
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	6839      	ldr	r1, [r7, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f8c8 	bl	8001aa6 <TF_REAR_ROLL>
 8001916:	4603      	mov	r3, r0
 8001918:	81fb      	strh	r3, [r7, #14]
		break;
 800191a:	e01f      	b.n	800195c <TF_Select+0x128>
	case TYRE_TEMP:
		transmit = TF_TYRE_TEMP(bytes, raw);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f8cd 	bl	8001ac0 <TF_TYRE_TEMP>
 8001926:	4603      	mov	r3, r0
 8001928:	81fb      	strh	r3, [r7, #14]
		break;
 800192a:	e017      	b.n	800195c <TF_Select+0x128>
	case ANGLE_GEAR:
		transmit = TF_ANGLE_GEAR(bytes, raw);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 f8d2 	bl	8001ada <TF_ANGLE_GEAR>
 8001936:	4603      	mov	r3, r0
 8001938:	81fb      	strh	r3, [r7, #14]
		break;
 800193a:	e00f      	b.n	800195c <TF_Select+0x128>
	case WATER_LVL:
		transmit = TF_WATER_LVL(bytes, raw);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f8d7 	bl	8001af4 <TF_WATER_LVL>
 8001946:	4603      	mov	r3, r0
 8001948:	81fb      	strh	r3, [r7, #14]
		break;
 800194a:	e007      	b.n	800195c <TF_Select+0x128>
	case BRK_PRES:
		transmit = TF_BRK_PRES(bytes, raw);
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	6839      	ldr	r1, [r7, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f8dc 	bl	8001b0e <TF_BRK_PRES>
 8001956:	4603      	mov	r3, r0
 8001958:	81fb      	strh	r3, [r7, #14]
	default:
		//TODO implement error here
		break;
 800195a:	bf00      	nop
	}

	return transmit;
 800195c:	89fb      	ldrh	r3, [r7, #14]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop

08001968 <TF_3V3>:

uint16_t TF_3V3(uint8_t bytes, uint32_t raw){
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 3300;
 8001974:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001978:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	fb03 f202 	mul.w	r2, r3, r2
 8001982:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <TF_3V3+0x38>)
 8001984:	fba3 1302 	umull	r1, r3, r3, r2
 8001988:	1ad2      	subs	r2, r2, r3
 800198a:	0852      	lsrs	r2, r2, #1
 800198c:	4413      	add	r3, r2
 800198e:	0adb      	lsrs	r3, r3, #11
 8001990:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001992:	89bb      	ldrh	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	00100101 	.word	0x00100101

080019a4 <TF_5V>:

uint16_t TF_5V(uint8_t bytes, uint32_t raw){
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
	//uint16_t max_volt = 5000;

	//uint16_t voltage = raw*max_volt / 4095;
	uint16_t voltage = raw;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	81fb      	strh	r3, [r7, #14]
	return voltage;
 80019b4:	89fb      	ldrh	r3, [r7, #14]

}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <TF_24V>:

uint16_t TF_24V(uint8_t bytes, uint32_t raw){
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	6039      	str	r1, [r7, #0]
 80019cc:	71fb      	strb	r3, [r7, #7]
	//uint16_t max_volt = 24000;

	//uint16_t voltage = raw*max_volt / 4095;
	uint16_t voltage = raw;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	81fb      	strh	r3, [r7, #14]
	return voltage;
 80019d2:	89fb      	ldrh	r3, [r7, #14]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <TF_BPPS>:
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw){ //brake pedal position sensor
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
	uint16_t max_brake_pres = 200;
 80019ec:	23c8      	movs	r3, #200	@ 0xc8
 80019ee:	81fb      	strh	r3, [r7, #14]

	uint16_t brake_pres = raw*max_brake_pres / 4095;
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	fb03 f202 	mul.w	r2, r3, r2
 80019f8:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <TF_BPPS+0x38>)
 80019fa:	fba3 1302 	umull	r1, r3, r3, r2
 80019fe:	1ad2      	subs	r2, r2, r3
 8001a00:	0852      	lsrs	r2, r2, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	0adb      	lsrs	r3, r3, #11
 8001a06:	81bb      	strh	r3, [r7, #12]
	return brake_pres;
 8001a08:	89bb      	ldrh	r3, [r7, #12]

}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	00100101 	.word	0x00100101

08001a1c <TF_APPS>:
uint16_t TF_APPS(uint8_t bytes, uint32_t raw){
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 8001a28:	2364      	movs	r3, #100	@ 0x64
 8001a2a:	81fb      	strh	r3, [r7, #14]

	uint16_t apps = raw*max_pos / 4095;
 8001a2c:	89fb      	ldrh	r3, [r7, #14]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	fb03 f202 	mul.w	r2, r3, r2
 8001a34:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <TF_APPS+0x38>)
 8001a36:	fba3 1302 	umull	r1, r3, r3, r2
 8001a3a:	1ad2      	subs	r2, r2, r3
 8001a3c:	0852      	lsrs	r2, r2, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	0adb      	lsrs	r3, r3, #11
 8001a42:	81bb      	strh	r3, [r7, #12]
	return apps;
 8001a44:	89bb      	ldrh	r3, [r7, #12]

}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	00100101 	.word	0x00100101

08001a58 <TF_FRONT_HEAVE>:
uint16_t TF_FRONT_HEAVE(uint8_t bytes, uint32_t raw){
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]

}
 8001a64:	bf00      	nop
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <TF_REAR_HEAVE>:
uint16_t TF_REAR_HEAVE(uint8_t bytes, uint32_t raw){
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	6039      	str	r1, [r7, #0]
 8001a7c:	71fb      	strb	r3, [r7, #7]

}
 8001a7e:	bf00      	nop
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <TF_FRONT_ROLL>:
uint16_t TF_FRONT_ROLL(uint8_t bytes, uint32_t raw){
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]

}
 8001a98:	bf00      	nop
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <TF_REAR_ROLL>:
uint16_t TF_REAR_ROLL(uint8_t bytes, uint32_t raw){
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	6039      	str	r1, [r7, #0]
 8001ab0:	71fb      	strb	r3, [r7, #7]

}
 8001ab2:	bf00      	nop
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <TF_TYRE_TEMP>:
uint16_t TF_TYRE_TEMP(uint8_t bytes, uint32_t raw){
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]

}
 8001acc:	bf00      	nop
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <TF_ANGLE_GEAR>:
uint16_t TF_ANGLE_GEAR(uint8_t bytes, uint32_t raw){
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	6039      	str	r1, [r7, #0]
 8001ae4:	71fb      	strb	r3, [r7, #7]

}
 8001ae6:	bf00      	nop
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <TF_WATER_LVL>:
uint16_t TF_WATER_LVL(uint8_t bytes, uint32_t raw){
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]

}
 8001b00:	bf00      	nop
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <TF_BRK_PRES>:

uint16_t TF_BRK_PRES(uint8_t bytes, uint32_t raw){
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	6039      	str	r1, [r7, #0]
 8001b18:	71fb      	strb	r3, [r7, #7]

}
 8001b1a:	bf00      	nop
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <Reset_Handler>:
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b60 <LoopFillZerobss+0xe>
 8001b2c:	f7ff fe0a 	bl	8001744 <SystemInit>
 8001b30:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <LoopFillZerobss+0x12>)
 8001b32:	490d      	ldr	r1, [pc, #52]	@ (8001b68 <LoopFillZerobss+0x16>)
 8001b34:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <LoopFillZerobss+0x1a>)
 8001b36:	2300      	movs	r3, #0
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:
 8001b3a:	58d4      	ldr	r4, [r2, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:
 8001b40:	18c4      	adds	r4, r0, r3
 8001b42:	428c      	cmp	r4, r1
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <LoopFillZerobss+0x1e>)
 8001b48:	4c0a      	ldr	r4, [pc, #40]	@ (8001b74 <LoopFillZerobss+0x22>)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:
 8001b52:	42a2      	cmp	r2, r4
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>
 8001b56:	f009 fa17 	bl	800af88 <__libc_init_array>
 8001b5a:	f7fe fcf9 	bl	8000550 <main>
 8001b5e:	4770      	bx	lr
 8001b60:	24100000 	.word	0x24100000
 8001b64:	24000000 	.word	0x24000000
 8001b68:	24000010 	.word	0x24000010
 8001b6c:	0800b080 	.word	0x0800b080
 8001b70:	24000010 	.word	0x24000010
 8001b74:	2400089c 	.word	0x2400089c

08001b78 <ADC_IRQHandler>:
 8001b78:	e7fe      	b.n	8001b78 <ADC_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b82:	2003      	movs	r0, #3
 8001b84:	f001 faf0 	bl	8003168 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b88:	f005 ff3a 	bl	8007a00 <HAL_RCC_GetSysClockFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_Init+0x68>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	4913      	ldr	r1, [pc, #76]	@ (8001be8 <HAL_Init+0x6c>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <HAL_Init+0x68>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	4a0e      	ldr	r2, [pc, #56]	@ (8001be8 <HAL_Init+0x6c>)
 8001bb0:	5cd3      	ldrb	r3, [r2, r3]
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001bec <HAL_Init+0x70>)
 8001bbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf0 <HAL_Init+0x74>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	f000 f814 	bl	8001bf4 <HAL_InitTick>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e002      	b.n	8001bdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd6:	f7ff fa83 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	58024400 	.word	0x58024400
 8001be8:	0800b050 	.word	0x0800b050
 8001bec:	24000004 	.word	0x24000004
 8001bf0:	24000000 	.word	0x24000000

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bfc:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <HAL_InitTick+0x60>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e021      	b.n	8001c4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <HAL_InitTick+0x64>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <HAL_InitTick+0x60>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 fad5 	bl	80031ce <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00e      	b.n	8001c4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d80a      	bhi.n	8001c4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f001 fa9f 	bl	800317e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c40:	4a06      	ldr	r2, [pc, #24]	@ (8001c5c <HAL_InitTick+0x68>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2400000c 	.word	0x2400000c
 8001c58:	24000000 	.word	0x24000000
 8001c5c:	24000008 	.word	0x24000008

08001c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	2400000c 	.word	0x2400000c
 8001c84:	24000898 	.word	0x24000898

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	24000898 	.word	0x24000898

08001ca0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3360      	adds	r3, #96	@ 0x60
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	371c      	adds	r7, #28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b087      	sub	sp, #28
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3360      	adds	r3, #96	@ 0x60
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	601a      	str	r2, [r3, #0]
  }
}
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b087      	sub	sp, #28
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3330      	adds	r3, #48	@ 0x30
 8001de6:	461a      	mov	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	4413      	add	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	211f      	movs	r1, #31
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	401a      	ands	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	f003 011f 	and.w	r1, r3, #31
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e22:	bf00      	nop
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f023 0203 	bic.w	r2, r3, #3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	60da      	str	r2, [r3, #12]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3314      	adds	r3, #20
 8001e64:	461a      	mov	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	0e5b      	lsrs	r3, r3, #25
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	4413      	add	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	0d1b      	lsrs	r3, r3, #20
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	2107      	movs	r1, #7
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	401a      	ands	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	0d1b      	lsrs	r3, r3, #20
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e9e:	bf00      	nop
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0318 	and.w	r3, r3, #24
 8001ece:	4908      	ldr	r1, [pc, #32]	@ (8001ef0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ed0:	40d9      	lsrs	r1, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	000fffff 	.word	0x000fffff

08001ef4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 031f 	and.w	r3, r3, #31
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6093      	str	r3, [r2, #8]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	5fffffc0 	.word	0x5fffffc0

08001f34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	6fffffc0 	.word	0x6fffffc0

08001f84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f98:	d101      	bne.n	8001f9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <LL_ADC_Enable+0x24>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	7fffffc0 	.word	0x7fffffc0

08001fd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <LL_ADC_IsEnabled+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <LL_ADC_IsEnabled+0x1a>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <LL_ADC_REG_StartConversion+0x24>)
 800200a:	4013      	ands	r3, r2
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	7fffffc0 	.word	0x7fffffc0

08002024 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b04      	cmp	r3, #4
 8002036:	d101      	bne.n	800203c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b08      	cmp	r3, #8
 800205c:	d101      	bne.n	8002062 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e138      	b.n	80022fc <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff f841 	bl	8001120 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff3f 	bl	8001f34 <LL_ADC_IsDeepPowerDownEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff25 	bl	8001f10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff5a 	bl	8001f84 <LL_ADC_IsInternalRegulatorEnabled>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d114      	bne.n	8002100 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff3e 	bl	8001f5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020e0:	4b88      	ldr	r3, [pc, #544]	@ (8002304 <HAL_ADC_Init+0x294>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	4a88      	ldr	r2, [pc, #544]	@ (8002308 <HAL_ADC_Init+0x298>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	3301      	adds	r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020f2:	e002      	b.n	80020fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f9      	bne.n	80020f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff3d 	bl	8001f84 <LL_ADC_IsInternalRegulatorEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10d      	bne.n	800212c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002114:	f043 0210 	orr.w	r2, r3, #16
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff77 	bl	8002024 <LL_ADC_REG_IsConversionOngoing>
 8002136:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 80d2 	bne.w	80022ea <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	f040 80ce 	bne.w	80022ea <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002152:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002156:	f043 0202 	orr.w	r2, r3, #2
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff36 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d110      	bne.n	8002190 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800216e:	4867      	ldr	r0, [pc, #412]	@ (800230c <HAL_ADC_Init+0x29c>)
 8002170:	f7ff ff30 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002174:	4604      	mov	r4, r0
 8002176:	4866      	ldr	r0, [pc, #408]	@ (8002310 <HAL_ADC_Init+0x2a0>)
 8002178:	f7ff ff2c 	bl	8001fd4 <LL_ADC_IsEnabled>
 800217c:	4603      	mov	r3, r0
 800217e:	4323      	orrs	r3, r4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4619      	mov	r1, r3
 800218a:	4862      	ldr	r0, [pc, #392]	@ (8002314 <HAL_ADC_Init+0x2a4>)
 800218c:	f7ff fd88 	bl	8001ca0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7d5b      	ldrb	r3, [r3, #21]
 8002194:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800219a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80021a0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7f1b      	ldrb	r3, [r3, #28]
 80021a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7f1b      	ldrb	r3, [r3, #28]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d106      	bne.n	80021c2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	045b      	lsls	r3, r3, #17
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002318 <HAL_ADC_Init+0x2a8>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	69b9      	ldr	r1, [r7, #24]
 80021ee:	430b      	orrs	r3, r1
 80021f0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ff14 	bl	8002024 <LL_ADC_REG_IsConversionOngoing>
 80021fc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ff21 	bl	800204a <LL_ADC_INJ_IsConversionOngoing>
 8002208:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d14a      	bne.n	80022a6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d147      	bne.n	80022a6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7d1b      	ldrb	r3, [r3, #20]
 800221a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	4b3c      	ldr	r3, [pc, #240]	@ (800231c <HAL_ADC_Init+0x2ac>)
 800222c:	4013      	ands	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	69b9      	ldr	r1, [r7, #24]
 8002234:	430b      	orrs	r3, r1
 8002236:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800223e:	2b01      	cmp	r3, #1
 8002240:	d11b      	bne.n	800227a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <HAL_ADC_Init+0x2b0>)
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002256:	3a01      	subs	r2, #1
 8002258:	0411      	lsls	r1, r2, #16
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002264:	4311      	orrs	r1, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800226a:	430a      	orrs	r2, r1
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	611a      	str	r2, [r3, #16]
 8002278:	e007      	b.n	800228a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fd01 	bl	8002ca8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10c      	bne.n	80022c8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	f023 010f 	bic.w	r1, r3, #15
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80022c6:	e007      	b.n	80022d8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 020f 	bic.w	r2, r2, #15
 80022d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022dc:	f023 0303 	bic.w	r3, r3, #3
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80022e8:	e007      	b.n	80022fa <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3724      	adds	r7, #36	@ 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd90      	pop	{r4, r7, pc}
 8002304:	24000000 	.word	0x24000000
 8002308:	053e2d63 	.word	0x053e2d63
 800230c:	40022000 	.word	0x40022000
 8002310:	40022100 	.word	0x40022100
 8002314:	40022300 	.word	0x40022300
 8002318:	fff0c003 	.word	0xfff0c003
 800231c:	ffffbffc 	.word	0xffffbffc
 8002320:	fc00f81e 	.word	0xfc00f81e

08002324 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002330:	484f      	ldr	r0, [pc, #316]	@ (8002470 <HAL_ADC_Start_DMA+0x14c>)
 8002332:	f7ff fddf 	bl	8001ef4 <LL_ADC_GetMultimode>
 8002336:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fe71 	bl	8002024 <LL_ADC_REG_IsConversionOngoing>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	f040 808c 	bne.w	8002462 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_ADC_Start_DMA+0x34>
 8002354:	2302      	movs	r3, #2
 8002356:	e087      	b.n	8002468 <HAL_ADC_Start_DMA+0x144>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b05      	cmp	r3, #5
 800236a:	d002      	beq.n	8002372 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b09      	cmp	r3, #9
 8002370:	d170      	bne.n	8002454 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 fb88 	bl	8002a88 <ADC_Enable>
 8002378:	4603      	mov	r3, r0
 800237a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d163      	bne.n	800244a <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002386:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <HAL_ADC_Start_DMA+0x150>)
 8002388:	4013      	ands	r3, r2
 800238a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a38      	ldr	r2, [pc, #224]	@ (8002478 <HAL_ADC_Start_DMA+0x154>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d002      	beq.n	80023a2 <HAL_ADC_Start_DMA+0x7e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	e000      	b.n	80023a4 <HAL_ADC_Start_DMA+0x80>
 80023a2:	4b36      	ldr	r3, [pc, #216]	@ (800247c <HAL_ADC_Start_DMA+0x158>)
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d002      	beq.n	80023b2 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ce:	f023 0206 	bic.w	r2, r3, #6
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80023d6:	e002      	b.n	80023de <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e2:	4a27      	ldr	r2, [pc, #156]	@ (8002480 <HAL_ADC_Start_DMA+0x15c>)
 80023e4:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ea:	4a26      	ldr	r2, [pc, #152]	@ (8002484 <HAL_ADC_Start_DMA+0x160>)
 80023ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f2:	4a25      	ldr	r2, [pc, #148]	@ (8002488 <HAL_ADC_Start_DMA+0x164>)
 80023f4:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	221c      	movs	r2, #28
 80023fc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0210 	orr.w	r2, r2, #16
 8002414:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7ff fd04 	bl	8001e2e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3340      	adds	r3, #64	@ 0x40
 8002430:	4619      	mov	r1, r3
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f001 fa65 	bl	8003904 <HAL_DMA_Start_IT>
 800243a:	4603      	mov	r3, r0
 800243c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fdda 	bl	8001ffc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002448:	e00d      	b.n	8002466 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002452:	e008      	b.n	8002466 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002460:	e001      	b.n	8002466 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002462:	2302      	movs	r3, #2
 8002464:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002466:	7dfb      	ldrb	r3, [r7, #23]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40022300 	.word	0x40022300
 8002474:	fffff0fe 	.word	0xfffff0fe
 8002478:	40022100 	.word	0x40022100
 800247c:	40022000 	.word	0x40022000
 8002480:	08002b81 	.word	0x08002b81
 8002484:	08002c59 	.word	0x08002c59
 8002488:	08002c75 	.word	0x08002c75

0800248c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b0a1      	sub	sp, #132	@ 0x84
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a95      	ldr	r2, [pc, #596]	@ (8002724 <HAL_ADC_ConfigChannel+0x270>)
 80024ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x2a>
 80024da:	2302      	movs	r3, #2
 80024dc:	e2c0      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x5ac>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fd9a 	bl	8002024 <LL_ADC_REG_IsConversionOngoing>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 82a5 	bne.w	8002a42 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db2c      	blt.n	800255a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002508:	2b00      	cmp	r3, #0
 800250a:	d108      	bne.n	800251e <HAL_ADC_ConfigChannel+0x6a>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0e9b      	lsrs	r3, r3, #26
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2201      	movs	r2, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	e016      	b.n	800254c <HAL_ADC_ConfigChannel+0x98>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800252c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800252e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002530:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e003      	b.n	8002542 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800253a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2201      	movs	r2, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	69d1      	ldr	r1, [r2, #28]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	430b      	orrs	r3, r1
 8002558:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	f7ff fc35 	bl	8001dd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fd57 	bl	8002024 <LL_ADC_REG_IsConversionOngoing>
 8002576:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fd64 	bl	800204a <LL_ADC_INJ_IsConversionOngoing>
 8002582:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002584:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 80a0 	bne.w	80026cc <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800258c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 809c 	bne.w	80026cc <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6819      	ldr	r1, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	461a      	mov	r2, r3
 80025a2:	f7ff fc57 	bl	8001e54 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10b      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x118>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	e00a      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x12e>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d027      	beq.n	800263c <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6919      	ldr	r1, [r3, #16]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025fa:	f7ff fb85 	bl	8001d08 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6919      	ldr	r1, [r3, #16]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	7e5b      	ldrb	r3, [r3, #25]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d102      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x160>
 800260e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002612:	e000      	b.n	8002616 <HAL_ADC_ConfigChannel+0x162>
 8002614:	2300      	movs	r3, #0
 8002616:	461a      	mov	r2, r3
 8002618:	f7ff fbaf 	bl	8001d7a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	6919      	ldr	r1, [r3, #16]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	7e1b      	ldrb	r3, [r3, #24]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d102      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x17e>
 800262c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002630:	e000      	b.n	8002634 <HAL_ADC_ConfigChannel+0x180>
 8002632:	2300      	movs	r3, #0
 8002634:	461a      	mov	r2, r3
 8002636:	f7ff fb87 	bl	8001d48 <LL_ADC_SetDataRightShift>
 800263a:	e047      	b.n	80026cc <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002642:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	069b      	lsls	r3, r3, #26
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800265e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002666:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	069b      	lsls	r3, r3, #26
 8002670:	429a      	cmp	r2, r3
 8002672:	d107      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002682:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800268a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	069b      	lsls	r3, r3, #26
 8002694:	429a      	cmp	r2, r3
 8002696:	d107      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026a6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	069b      	lsls	r3, r3, #26
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d107      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026ca:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fc7f 	bl	8001fd4 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f040 81bb 	bne.w	8002a54 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f7ff fbde 	bl	8001eac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002724 <HAL_ADC_ConfigChannel+0x270>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	f040 8130 	bne.w	800295c <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10d      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x274>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	3301      	adds	r3, #1
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	2b09      	cmp	r3, #9
 800271a:	bf94      	ite	ls
 800271c:	2301      	movls	r3, #1
 800271e:	2300      	movhi	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e01b      	b.n	800275c <HAL_ADC_ConfigChannel+0x2a8>
 8002724:	47ff0000 	.word	0x47ff0000
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002738:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800273a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8002740:	2320      	movs	r3, #32
 8002742:	e003      	b.n	800274c <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2b09      	cmp	r3, #9
 8002754:	bf94      	ite	ls
 8002756:	2301      	movls	r3, #1
 8002758:	2300      	movhi	r3, #0
 800275a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275c:	2b00      	cmp	r3, #0
 800275e:	d079      	beq.n	8002854 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002768:	2b00      	cmp	r3, #0
 800276a:	d107      	bne.n	800277c <HAL_ADC_ConfigChannel+0x2c8>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	3301      	adds	r3, #1
 8002774:	069b      	lsls	r3, r3, #26
 8002776:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800277a:	e015      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x2f4>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800278a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800278c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800278e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	e003      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	069b      	lsls	r3, r3, #26
 80027a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x314>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0e9b      	lsrs	r3, r3, #26
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	e017      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x344>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80027d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80027da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80027e0:	2320      	movs	r3, #32
 80027e2:	e003      	b.n	80027ec <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 80027e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	ea42 0103 	orr.w	r1, r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <HAL_ADC_ConfigChannel+0x36a>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	3301      	adds	r3, #1
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	051b      	lsls	r3, r3, #20
 800281c:	e018      	b.n	8002850 <HAL_ADC_ConfigChannel+0x39c>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800282c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002836:	2320      	movs	r3, #32
 8002838:	e003      	b.n	8002842 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800283a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002850:	430b      	orrs	r3, r1
 8002852:	e07e      	b.n	8002952 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x3bc>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	3301      	adds	r3, #1
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800286e:	e015      	b.n	800289c <HAL_ADC_ConfigChannel+0x3e8>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002888:	2320      	movs	r3, #32
 800288a:	e003      	b.n	8002894 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 800288c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3301      	adds	r3, #1
 8002896:	069b      	lsls	r3, r3, #26
 8002898:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x408>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	e017      	b.n	80028ec <HAL_ADC_ConfigChannel+0x438>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	61bb      	str	r3, [r7, #24]
  return result;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 80028d4:	2320      	movs	r3, #32
 80028d6:	e003      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2101      	movs	r1, #1
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	ea42 0103 	orr.w	r1, r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10d      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x464>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	3301      	adds	r3, #1
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	3b1e      	subs	r3, #30
 8002910:	051b      	lsls	r3, r3, #20
 8002912:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002916:	e01b      	b.n	8002950 <HAL_ADC_ConfigChannel+0x49c>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	60fb      	str	r3, [r7, #12]
  return result;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e003      	b.n	800293c <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f003 021f 	and.w	r2, r3, #31
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	3b1e      	subs	r3, #30
 800294a:	051b      	lsls	r3, r3, #20
 800294c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002950:	430b      	orrs	r3, r1
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	6892      	ldr	r2, [r2, #8]
 8002956:	4619      	mov	r1, r3
 8002958:	f7ff fa7c 	bl	8001e54 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	da77      	bge.n	8002a54 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002964:	4840      	ldr	r0, [pc, #256]	@ (8002a68 <HAL_ADC_ConfigChannel+0x5b4>)
 8002966:	f7ff f9c1 	bl	8001cec <LL_ADC_GetCommonPathInternalCh>
 800296a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800296c:	483f      	ldr	r0, [pc, #252]	@ (8002a6c <HAL_ADC_ConfigChannel+0x5b8>)
 800296e:	f7ff fb31 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002972:	4604      	mov	r4, r0
 8002974:	483e      	ldr	r0, [pc, #248]	@ (8002a70 <HAL_ADC_ConfigChannel+0x5bc>)
 8002976:	f7ff fb2d 	bl	8001fd4 <LL_ADC_IsEnabled>
 800297a:	4603      	mov	r3, r0
 800297c:	4323      	orrs	r3, r4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d155      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a3b      	ldr	r2, [pc, #236]	@ (8002a74 <HAL_ADC_ConfigChannel+0x5c0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d122      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x51e>
 800298c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800298e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11d      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a35      	ldr	r2, [pc, #212]	@ (8002a70 <HAL_ADC_ConfigChannel+0x5bc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d159      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80029a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029a6:	4619      	mov	r1, r3
 80029a8:	482f      	ldr	r0, [pc, #188]	@ (8002a68 <HAL_ADC_ConfigChannel+0x5b4>)
 80029aa:	f7ff f98c 	bl	8001cc6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ae:	4b32      	ldr	r3, [pc, #200]	@ (8002a78 <HAL_ADC_ConfigChannel+0x5c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	099b      	lsrs	r3, r3, #6
 80029b4:	4a31      	ldr	r2, [pc, #196]	@ (8002a7c <HAL_ADC_ConfigChannel+0x5c8>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	099b      	lsrs	r3, r3, #6
 80029bc:	3301      	adds	r3, #1
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029c2:	e002      	b.n	80029ca <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f9      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029d0:	e040      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002a80 <HAL_ADC_ConfigChannel+0x5cc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d111      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x54c>
 80029dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a21      	ldr	r2, [pc, #132]	@ (8002a70 <HAL_ADC_ConfigChannel+0x5bc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d131      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80029f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029f6:	4619      	mov	r1, r3
 80029f8:	481b      	ldr	r0, [pc, #108]	@ (8002a68 <HAL_ADC_ConfigChannel+0x5b4>)
 80029fa:	f7ff f964 	bl	8001cc6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029fe:	e029      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	@ (8002a84 <HAL_ADC_ConfigChannel+0x5d0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d124      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x5a0>
 8002a0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d11f      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a15      	ldr	r2, [pc, #84]	@ (8002a70 <HAL_ADC_ConfigChannel+0x5bc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d11a      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a24:	4619      	mov	r1, r3
 8002a26:	4810      	ldr	r0, [pc, #64]	@ (8002a68 <HAL_ADC_ConfigChannel+0x5b4>)
 8002a28:	f7ff f94d 	bl	8001cc6 <LL_ADC_SetCommonPathInternalCh>
 8002a2c:	e012      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a40:	e008      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a5c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3784      	adds	r7, #132	@ 0x84
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd90      	pop	{r4, r7, pc}
 8002a68:	40022300 	.word	0x40022300
 8002a6c:	40022000 	.word	0x40022000
 8002a70:	40022100 	.word	0x40022100
 8002a74:	cb840000 	.word	0xcb840000
 8002a78:	24000000 	.word	0x24000000
 8002a7c:	053e2d63 	.word	0x053e2d63
 8002a80:	bac04000 	.word	0xbac04000
 8002a84:	cfb80000 	.word	0xcfb80000

08002a88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fa9d 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d161      	bne.n	8002b64 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	4b32      	ldr	r3, [pc, #200]	@ (8002b70 <ADC_Enable+0xe8>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00d      	beq.n	8002aca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab2:	f043 0210 	orr.w	r2, r3, #16
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abe:	f043 0201 	orr.w	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e04d      	b.n	8002b66 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fa6c 	bl	8001fac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ad4:	f7ff f8d8 	bl	8001c88 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ada:	4826      	ldr	r0, [pc, #152]	@ (8002b74 <ADC_Enable+0xec>)
 8002adc:	f7ff fa0a 	bl	8001ef4 <LL_ADC_GetMultimode>
 8002ae0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a24      	ldr	r2, [pc, #144]	@ (8002b78 <ADC_Enable+0xf0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d002      	beq.n	8002af2 <ADC_Enable+0x6a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	e000      	b.n	8002af4 <ADC_Enable+0x6c>
 8002af2:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <ADC_Enable+0xf4>)
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d02c      	beq.n	8002b56 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d130      	bne.n	8002b64 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b02:	e028      	b.n	8002b56 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fa63 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fa47 	bl	8001fac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b1e:	f7ff f8b3 	bl	8001c88 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d914      	bls.n	8002b56 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d00d      	beq.n	8002b56 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e007      	b.n	8002b66 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d1cf      	bne.n	8002b04 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	8000003f 	.word	0x8000003f
 8002b74:	40022300 	.word	0x40022300
 8002b78:	40022100 	.word	0x40022100
 8002b7c:	40022000 	.word	0x40022000

08002b80 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b92:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d14b      	bne.n	8002c32 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d021      	beq.n	8002bf8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff f8f9 	bl	8001db0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d032      	beq.n	8002c2a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d12b      	bne.n	8002c2a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11f      	bne.n	8002c2a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bf6:	e018      	b.n	8002c2a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d111      	bne.n	8002c2a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d105      	bne.n	8002c2a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7fe f9de 	bl	8000fec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c30:	e00e      	b.n	8002c50 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7ff fc2e 	bl	80024a0 <HAL_ADC_ErrorCallback>
}
 8002c44:	e004      	b.n	8002c50 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4798      	blx	r3
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7ff fc10 	bl	800248c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	f043 0204 	orr.w	r2, r3, #4
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f7ff fc00 	bl	80024a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002cb0:	4b60      	ldr	r3, [pc, #384]	@ (8002e34 <ADC_ConfigureBoostMode+0x18c>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01c      	beq.n	8002cf6 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002cbc:	f005 f81a 	bl	8007cf4 <HAL_RCC_GetHCLKFreq>
 8002cc0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cca:	d010      	beq.n	8002cee <ADC_ConfigureBoostMode+0x46>
 8002ccc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cd0:	d873      	bhi.n	8002dba <ADC_ConfigureBoostMode+0x112>
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd6:	d002      	beq.n	8002cde <ADC_ConfigureBoostMode+0x36>
 8002cd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cdc:	d16d      	bne.n	8002dba <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	60fb      	str	r3, [r7, #12]
        break;
 8002cec:	e068      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	60fb      	str	r3, [r7, #12]
        break;
 8002cf4:	e064      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002cf6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	f006 f9fd 	bl	80090fc <HAL_RCCEx_GetPeriphCLKFreq>
 8002d02:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d0c:	d051      	beq.n	8002db2 <ADC_ConfigureBoostMode+0x10a>
 8002d0e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d12:	d854      	bhi.n	8002dbe <ADC_ConfigureBoostMode+0x116>
 8002d14:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d18:	d047      	beq.n	8002daa <ADC_ConfigureBoostMode+0x102>
 8002d1a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d1e:	d84e      	bhi.n	8002dbe <ADC_ConfigureBoostMode+0x116>
 8002d20:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d24:	d03d      	beq.n	8002da2 <ADC_ConfigureBoostMode+0xfa>
 8002d26:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d2a:	d848      	bhi.n	8002dbe <ADC_ConfigureBoostMode+0x116>
 8002d2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d30:	d033      	beq.n	8002d9a <ADC_ConfigureBoostMode+0xf2>
 8002d32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d36:	d842      	bhi.n	8002dbe <ADC_ConfigureBoostMode+0x116>
 8002d38:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002d3c:	d029      	beq.n	8002d92 <ADC_ConfigureBoostMode+0xea>
 8002d3e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002d42:	d83c      	bhi.n	8002dbe <ADC_ConfigureBoostMode+0x116>
 8002d44:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002d48:	d01a      	beq.n	8002d80 <ADC_ConfigureBoostMode+0xd8>
 8002d4a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002d4e:	d836      	bhi.n	8002dbe <ADC_ConfigureBoostMode+0x116>
 8002d50:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002d54:	d014      	beq.n	8002d80 <ADC_ConfigureBoostMode+0xd8>
 8002d56:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002d5a:	d830      	bhi.n	8002dbe <ADC_ConfigureBoostMode+0x116>
 8002d5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d60:	d00e      	beq.n	8002d80 <ADC_ConfigureBoostMode+0xd8>
 8002d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d66:	d82a      	bhi.n	8002dbe <ADC_ConfigureBoostMode+0x116>
 8002d68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d6c:	d008      	beq.n	8002d80 <ADC_ConfigureBoostMode+0xd8>
 8002d6e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d72:	d824      	bhi.n	8002dbe <ADC_ConfigureBoostMode+0x116>
 8002d74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d78:	d002      	beq.n	8002d80 <ADC_ConfigureBoostMode+0xd8>
 8002d7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d7e:	d11e      	bne.n	8002dbe <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0c9b      	lsrs	r3, r3, #18
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	60fb      	str	r3, [r7, #12]
        break;
 8002d90:	e016      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]
        break;
 8002d98:	e012      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	60fb      	str	r3, [r7, #12]
        break;
 8002da0:	e00e      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	60fb      	str	r3, [r7, #12]
        break;
 8002da8:	e00a      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	09db      	lsrs	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]
        break;
 8002db0:	e006      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	60fb      	str	r3, [r7, #12]
        break;
 8002db8:	e002      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x118>
        break;
 8002dba:	bf00      	nop
 8002dbc:	e000      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002dbe:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e38 <ADC_ConfigureBoostMode+0x190>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d808      	bhi.n	8002de0 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ddc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002dde:	e025      	b.n	8002e2c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a16      	ldr	r2, [pc, #88]	@ (8002e3c <ADC_ConfigureBoostMode+0x194>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d80a      	bhi.n	8002dfe <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	e016      	b.n	8002e2c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4a0f      	ldr	r2, [pc, #60]	@ (8002e40 <ADC_ConfigureBoostMode+0x198>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d80a      	bhi.n	8002e1c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e18:	609a      	str	r2, [r3, #8]
}
 8002e1a:	e007      	b.n	8002e2c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002e2a:	609a      	str	r2, [r3, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40022300 	.word	0x40022300
 8002e38:	005f5e10 	.word	0x005f5e10
 8002e3c:	00bebc20 	.word	0x00bebc20
 8002e40:	017d7840 	.word	0x017d7840

08002e44 <LL_ADC_IsEnabled>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <LL_ADC_IsEnabled+0x18>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <LL_ADC_IsEnabled+0x1a>
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_ADC_REG_IsConversionOngoing>:
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d101      	bne.n	8002e82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b09f      	sub	sp, #124	@ 0x7c
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e080      	b.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a3d      	ldr	r2, [pc, #244]	@ (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d102      	bne.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	e001      	b.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e05f      	b.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ffb9 	bl	8002e6a <LL_ADC_REG_IsConversionOngoing>
 8002ef8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ffb3 	bl	8002e6a <LL_ADC_REG_IsConversionOngoing>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d141      	bne.n	8002f8e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d13e      	bne.n	8002f8e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f10:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002f12:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f2c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f2e:	4822      	ldr	r0, [pc, #136]	@ (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f30:	f7ff ff88 	bl	8002e44 <LL_ADC_IsEnabled>
 8002f34:	4604      	mov	r4, r0
 8002f36:	4821      	ldr	r0, [pc, #132]	@ (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f38:	f7ff ff84 	bl	8002e44 <LL_ADC_IsEnabled>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4323      	orrs	r3, r4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d12e      	bne.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	6811      	ldr	r1, [r2, #0]
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	6892      	ldr	r2, [r2, #8]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	431a      	orrs	r2, r3
 8002f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f5a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f5c:	e021      	b.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f68:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f6a:	4813      	ldr	r0, [pc, #76]	@ (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f6c:	f7ff ff6a 	bl	8002e44 <LL_ADC_IsEnabled>
 8002f70:	4604      	mov	r4, r0
 8002f72:	4812      	ldr	r0, [pc, #72]	@ (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f74:	f7ff ff66 	bl	8002e44 <LL_ADC_IsEnabled>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4323      	orrs	r3, r4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d110      	bne.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f8a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f8c:	e009      	b.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f92:	f043 0220 	orr.w	r2, r3, #32
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002fa0:	e000      	b.n	8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	377c      	adds	r7, #124	@ 0x7c
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd90      	pop	{r4, r7, pc}
 8002fb8:	40022000 	.word	0x40022000
 8002fbc:	40022100 	.word	0x40022100
 8002fc0:	40022300 	.word	0x40022300
 8002fc4:	fffff0e0 	.word	0xfffff0e0

08002fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <__NVIC_SetPriorityGrouping+0x40>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff6:	4a04      	ldr	r2, [pc, #16]	@ (8003008 <__NVIC_SetPriorityGrouping+0x40>)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	60d3      	str	r3, [r2, #12]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00
 800300c:	05fa0000 	.word	0x05fa0000

08003010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003014:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <__NVIC_GetPriorityGrouping+0x18>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800303a:	2b00      	cmp	r3, #0
 800303c:	db0b      	blt.n	8003056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	4907      	ldr	r1, [pc, #28]	@ (8003064 <__NVIC_EnableIRQ+0x38>)
 8003046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2001      	movs	r0, #1
 800304e:	fa00 f202 	lsl.w	r2, r0, r2
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	e000e100 	.word	0xe000e100

08003068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	6039      	str	r1, [r7, #0]
 8003072:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003078:	2b00      	cmp	r3, #0
 800307a:	db0a      	blt.n	8003092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	490c      	ldr	r1, [pc, #48]	@ (80030b4 <__NVIC_SetPriority+0x4c>)
 8003082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003086:	0112      	lsls	r2, r2, #4
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	440b      	add	r3, r1
 800308c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003090:	e00a      	b.n	80030a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	4908      	ldr	r1, [pc, #32]	@ (80030b8 <__NVIC_SetPriority+0x50>)
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	3b04      	subs	r3, #4
 80030a0:	0112      	lsls	r2, r2, #4
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	440b      	add	r3, r1
 80030a6:	761a      	strb	r2, [r3, #24]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000e100 	.word	0xe000e100
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	@ 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f1c3 0307 	rsb	r3, r3, #7
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	bf28      	it	cs
 80030da:	2304      	movcs	r3, #4
 80030dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	d902      	bls.n	80030ec <NVIC_EncodePriority+0x30>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3b03      	subs	r3, #3
 80030ea:	e000      	b.n	80030ee <NVIC_EncodePriority+0x32>
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	f04f 32ff 	mov.w	r2, #4294967295
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	401a      	ands	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003104:	f04f 31ff 	mov.w	r1, #4294967295
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	43d9      	mvns	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	4313      	orrs	r3, r2
         );
}
 8003116:	4618      	mov	r0, r3
 8003118:	3724      	adds	r7, #36	@ 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003134:	d301      	bcc.n	800313a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003136:	2301      	movs	r3, #1
 8003138:	e00f      	b.n	800315a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800313a:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <SysTick_Config+0x40>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003142:	210f      	movs	r1, #15
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	f7ff ff8e 	bl	8003068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800314c:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <SysTick_Config+0x40>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003152:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <SysTick_Config+0x40>)
 8003154:	2207      	movs	r2, #7
 8003156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	e000e010 	.word	0xe000e010

08003168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff29 	bl	8002fc8 <__NVIC_SetPriorityGrouping>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	4603      	mov	r3, r0
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800318c:	f7ff ff40 	bl	8003010 <__NVIC_GetPriorityGrouping>
 8003190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	6978      	ldr	r0, [r7, #20]
 8003198:	f7ff ff90 	bl	80030bc <NVIC_EncodePriority>
 800319c:	4602      	mov	r2, r0
 800319e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff5f 	bl	8003068 <__NVIC_SetPriority>
}
 80031aa:	bf00      	nop
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff33 	bl	800302c <__NVIC_EnableIRQ>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ffa4 	bl	8003124 <SysTick_Config>
 80031dc:	4603      	mov	r3, r0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80031f0:	f7fe fd4a 	bl	8001c88 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e37d      	b.n	80038fc <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a66      	ldr	r2, [pc, #408]	@ (80033a0 <HAL_DMA_Init+0x1b8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d04a      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a65      	ldr	r2, [pc, #404]	@ (80033a4 <HAL_DMA_Init+0x1bc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d045      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a63      	ldr	r2, [pc, #396]	@ (80033a8 <HAL_DMA_Init+0x1c0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d040      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a62      	ldr	r2, [pc, #392]	@ (80033ac <HAL_DMA_Init+0x1c4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d03b      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a60      	ldr	r2, [pc, #384]	@ (80033b0 <HAL_DMA_Init+0x1c8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d036      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a5f      	ldr	r2, [pc, #380]	@ (80033b4 <HAL_DMA_Init+0x1cc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d031      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a5d      	ldr	r2, [pc, #372]	@ (80033b8 <HAL_DMA_Init+0x1d0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d02c      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a5c      	ldr	r2, [pc, #368]	@ (80033bc <HAL_DMA_Init+0x1d4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d027      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a5a      	ldr	r2, [pc, #360]	@ (80033c0 <HAL_DMA_Init+0x1d8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d022      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a59      	ldr	r2, [pc, #356]	@ (80033c4 <HAL_DMA_Init+0x1dc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d01d      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a57      	ldr	r2, [pc, #348]	@ (80033c8 <HAL_DMA_Init+0x1e0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d018      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a56      	ldr	r2, [pc, #344]	@ (80033cc <HAL_DMA_Init+0x1e4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a54      	ldr	r2, [pc, #336]	@ (80033d0 <HAL_DMA_Init+0x1e8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00e      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a53      	ldr	r2, [pc, #332]	@ (80033d4 <HAL_DMA_Init+0x1ec>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a51      	ldr	r2, [pc, #324]	@ (80033d8 <HAL_DMA_Init+0x1f0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_DMA_Init+0xb8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a50      	ldr	r2, [pc, #320]	@ (80033dc <HAL_DMA_Init+0x1f4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_DMA_Init+0xbc>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_DMA_Init+0xbe>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 813c 	beq.w	8003524 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a37      	ldr	r2, [pc, #220]	@ (80033a0 <HAL_DMA_Init+0x1b8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d04a      	beq.n	800335c <HAL_DMA_Init+0x174>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a36      	ldr	r2, [pc, #216]	@ (80033a4 <HAL_DMA_Init+0x1bc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d045      	beq.n	800335c <HAL_DMA_Init+0x174>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a34      	ldr	r2, [pc, #208]	@ (80033a8 <HAL_DMA_Init+0x1c0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d040      	beq.n	800335c <HAL_DMA_Init+0x174>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a33      	ldr	r2, [pc, #204]	@ (80033ac <HAL_DMA_Init+0x1c4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d03b      	beq.n	800335c <HAL_DMA_Init+0x174>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a31      	ldr	r2, [pc, #196]	@ (80033b0 <HAL_DMA_Init+0x1c8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d036      	beq.n	800335c <HAL_DMA_Init+0x174>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a30      	ldr	r2, [pc, #192]	@ (80033b4 <HAL_DMA_Init+0x1cc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d031      	beq.n	800335c <HAL_DMA_Init+0x174>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2e      	ldr	r2, [pc, #184]	@ (80033b8 <HAL_DMA_Init+0x1d0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d02c      	beq.n	800335c <HAL_DMA_Init+0x174>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2d      	ldr	r2, [pc, #180]	@ (80033bc <HAL_DMA_Init+0x1d4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d027      	beq.n	800335c <HAL_DMA_Init+0x174>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a2b      	ldr	r2, [pc, #172]	@ (80033c0 <HAL_DMA_Init+0x1d8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d022      	beq.n	800335c <HAL_DMA_Init+0x174>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2a      	ldr	r2, [pc, #168]	@ (80033c4 <HAL_DMA_Init+0x1dc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d01d      	beq.n	800335c <HAL_DMA_Init+0x174>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a28      	ldr	r2, [pc, #160]	@ (80033c8 <HAL_DMA_Init+0x1e0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d018      	beq.n	800335c <HAL_DMA_Init+0x174>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a27      	ldr	r2, [pc, #156]	@ (80033cc <HAL_DMA_Init+0x1e4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d013      	beq.n	800335c <HAL_DMA_Init+0x174>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a25      	ldr	r2, [pc, #148]	@ (80033d0 <HAL_DMA_Init+0x1e8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00e      	beq.n	800335c <HAL_DMA_Init+0x174>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a24      	ldr	r2, [pc, #144]	@ (80033d4 <HAL_DMA_Init+0x1ec>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d009      	beq.n	800335c <HAL_DMA_Init+0x174>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a22      	ldr	r2, [pc, #136]	@ (80033d8 <HAL_DMA_Init+0x1f0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d004      	beq.n	800335c <HAL_DMA_Init+0x174>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a21      	ldr	r2, [pc, #132]	@ (80033dc <HAL_DMA_Init+0x1f4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d108      	bne.n	800336e <HAL_DMA_Init+0x186>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e007      	b.n	800337e <HAL_DMA_Init+0x196>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800337e:	e02f      	b.n	80033e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003380:	f7fe fc82 	bl	8001c88 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b05      	cmp	r3, #5
 800338c:	d928      	bls.n	80033e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2203      	movs	r2, #3
 8003398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e2ad      	b.n	80038fc <HAL_DMA_Init+0x714>
 80033a0:	40020010 	.word	0x40020010
 80033a4:	40020028 	.word	0x40020028
 80033a8:	40020040 	.word	0x40020040
 80033ac:	40020058 	.word	0x40020058
 80033b0:	40020070 	.word	0x40020070
 80033b4:	40020088 	.word	0x40020088
 80033b8:	400200a0 	.word	0x400200a0
 80033bc:	400200b8 	.word	0x400200b8
 80033c0:	40020410 	.word	0x40020410
 80033c4:	40020428 	.word	0x40020428
 80033c8:	40020440 	.word	0x40020440
 80033cc:	40020458 	.word	0x40020458
 80033d0:	40020470 	.word	0x40020470
 80033d4:	40020488 	.word	0x40020488
 80033d8:	400204a0 	.word	0x400204a0
 80033dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1c8      	bne.n	8003380 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4b73      	ldr	r3, [pc, #460]	@ (80035c8 <HAL_DMA_Init+0x3e0>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003406:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003412:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	2b04      	cmp	r3, #4
 8003432:	d107      	bne.n	8003444 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	4313      	orrs	r3, r2
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b28      	cmp	r3, #40	@ 0x28
 800344a:	d903      	bls.n	8003454 <HAL_DMA_Init+0x26c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b2e      	cmp	r3, #46	@ 0x2e
 8003452:	d91f      	bls.n	8003494 <HAL_DMA_Init+0x2ac>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b3e      	cmp	r3, #62	@ 0x3e
 800345a:	d903      	bls.n	8003464 <HAL_DMA_Init+0x27c>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b42      	cmp	r3, #66	@ 0x42
 8003462:	d917      	bls.n	8003494 <HAL_DMA_Init+0x2ac>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b46      	cmp	r3, #70	@ 0x46
 800346a:	d903      	bls.n	8003474 <HAL_DMA_Init+0x28c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b48      	cmp	r3, #72	@ 0x48
 8003472:	d90f      	bls.n	8003494 <HAL_DMA_Init+0x2ac>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b4e      	cmp	r3, #78	@ 0x4e
 800347a:	d903      	bls.n	8003484 <HAL_DMA_Init+0x29c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b52      	cmp	r3, #82	@ 0x52
 8003482:	d907      	bls.n	8003494 <HAL_DMA_Init+0x2ac>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b73      	cmp	r3, #115	@ 0x73
 800348a:	d905      	bls.n	8003498 <HAL_DMA_Init+0x2b0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b77      	cmp	r3, #119	@ 0x77
 8003492:	d801      	bhi.n	8003498 <HAL_DMA_Init+0x2b0>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <HAL_DMA_Init+0x2b2>
 8003498:	2300      	movs	r3, #0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034a4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f023 0307 	bic.w	r3, r3, #7
 80034bc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d117      	bne.n	8003500 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00e      	beq.n	8003500 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f001 fe70 	bl	80051c8 <DMA_CheckFifoParam>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2240      	movs	r2, #64	@ 0x40
 80034f2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e1fd      	b.n	80038fc <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f001 fdab 	bl	8005064 <DMA_CalcBaseAndBitshift>
 800350e:	4603      	mov	r3, r0
 8003510:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	223f      	movs	r2, #63	@ 0x3f
 800351c:	409a      	lsls	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	e0fd      	b.n	8003720 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a28      	ldr	r2, [pc, #160]	@ (80035cc <HAL_DMA_Init+0x3e4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d04a      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a27      	ldr	r2, [pc, #156]	@ (80035d0 <HAL_DMA_Init+0x3e8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d045      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a25      	ldr	r2, [pc, #148]	@ (80035d4 <HAL_DMA_Init+0x3ec>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d040      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a24      	ldr	r2, [pc, #144]	@ (80035d8 <HAL_DMA_Init+0x3f0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d03b      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a22      	ldr	r2, [pc, #136]	@ (80035dc <HAL_DMA_Init+0x3f4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d036      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a21      	ldr	r2, [pc, #132]	@ (80035e0 <HAL_DMA_Init+0x3f8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d031      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1f      	ldr	r2, [pc, #124]	@ (80035e4 <HAL_DMA_Init+0x3fc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d02c      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1e      	ldr	r2, [pc, #120]	@ (80035e8 <HAL_DMA_Init+0x400>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d027      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1c      	ldr	r2, [pc, #112]	@ (80035ec <HAL_DMA_Init+0x404>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d022      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1b      	ldr	r2, [pc, #108]	@ (80035f0 <HAL_DMA_Init+0x408>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d01d      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a19      	ldr	r2, [pc, #100]	@ (80035f4 <HAL_DMA_Init+0x40c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d018      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a18      	ldr	r2, [pc, #96]	@ (80035f8 <HAL_DMA_Init+0x410>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d013      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a16      	ldr	r2, [pc, #88]	@ (80035fc <HAL_DMA_Init+0x414>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00e      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a15      	ldr	r2, [pc, #84]	@ (8003600 <HAL_DMA_Init+0x418>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d009      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a13      	ldr	r2, [pc, #76]	@ (8003604 <HAL_DMA_Init+0x41c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_DMA_Init+0x3dc>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a12      	ldr	r2, [pc, #72]	@ (8003608 <HAL_DMA_Init+0x420>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d123      	bne.n	800360c <HAL_DMA_Init+0x424>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e022      	b.n	800360e <HAL_DMA_Init+0x426>
 80035c8:	fe10803f 	.word	0xfe10803f
 80035cc:	48022c08 	.word	0x48022c08
 80035d0:	48022c1c 	.word	0x48022c1c
 80035d4:	48022c30 	.word	0x48022c30
 80035d8:	48022c44 	.word	0x48022c44
 80035dc:	48022c58 	.word	0x48022c58
 80035e0:	48022c6c 	.word	0x48022c6c
 80035e4:	48022c80 	.word	0x48022c80
 80035e8:	48022c94 	.word	0x48022c94
 80035ec:	58025408 	.word	0x58025408
 80035f0:	5802541c 	.word	0x5802541c
 80035f4:	58025430 	.word	0x58025430
 80035f8:	58025444 	.word	0x58025444
 80035fc:	58025458 	.word	0x58025458
 8003600:	5802546c 	.word	0x5802546c
 8003604:	58025480 	.word	0x58025480
 8003608:	58025494 	.word	0x58025494
 800360c:	2300      	movs	r3, #0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d07d      	beq.n	800370e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a7f      	ldr	r2, [pc, #508]	@ (8003814 <HAL_DMA_Init+0x62c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d021      	beq.n	8003660 <HAL_DMA_Init+0x478>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a7d      	ldr	r2, [pc, #500]	@ (8003818 <HAL_DMA_Init+0x630>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01c      	beq.n	8003660 <HAL_DMA_Init+0x478>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7c      	ldr	r2, [pc, #496]	@ (800381c <HAL_DMA_Init+0x634>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d017      	beq.n	8003660 <HAL_DMA_Init+0x478>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a7a      	ldr	r2, [pc, #488]	@ (8003820 <HAL_DMA_Init+0x638>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d012      	beq.n	8003660 <HAL_DMA_Init+0x478>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a79      	ldr	r2, [pc, #484]	@ (8003824 <HAL_DMA_Init+0x63c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00d      	beq.n	8003660 <HAL_DMA_Init+0x478>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a77      	ldr	r2, [pc, #476]	@ (8003828 <HAL_DMA_Init+0x640>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d008      	beq.n	8003660 <HAL_DMA_Init+0x478>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a76      	ldr	r2, [pc, #472]	@ (800382c <HAL_DMA_Init+0x644>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <HAL_DMA_Init+0x478>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a74      	ldr	r2, [pc, #464]	@ (8003830 <HAL_DMA_Init+0x648>)
 800365e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4b6e      	ldr	r3, [pc, #440]	@ (8003834 <HAL_DMA_Init+0x64c>)
 800367c:	4013      	ands	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b40      	cmp	r3, #64	@ 0x40
 8003686:	d008      	beq.n	800369a <HAL_DMA_Init+0x4b2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b80      	cmp	r3, #128	@ 0x80
 800368e:	d102      	bne.n	8003696 <HAL_DMA_Init+0x4ae>
 8003690:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003694:	e002      	b.n	800369c <HAL_DMA_Init+0x4b4>
 8003696:	2300      	movs	r3, #0
 8003698:	e000      	b.n	800369c <HAL_DMA_Init+0x4b4>
 800369a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68d2      	ldr	r2, [r2, #12]
 80036a0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036a2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80036aa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80036b2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80036ba:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80036c2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80036ca:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	4b55      	ldr	r3, [pc, #340]	@ (8003838 <HAL_DMA_Init+0x650>)
 80036e2:	4413      	add	r3, r2
 80036e4:	4a55      	ldr	r2, [pc, #340]	@ (800383c <HAL_DMA_Init+0x654>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	009a      	lsls	r2, r3, #2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f001 fcb6 	bl	8005064 <DMA_CalcBaseAndBitshift>
 80036f8:	4603      	mov	r3, r0
 80036fa:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2201      	movs	r2, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	e008      	b.n	8003720 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2240      	movs	r2, #64	@ 0x40
 8003712:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2203      	movs	r2, #3
 8003718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0ed      	b.n	80038fc <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a46      	ldr	r2, [pc, #280]	@ (8003840 <HAL_DMA_Init+0x658>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d072      	beq.n	8003810 <HAL_DMA_Init+0x628>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a45      	ldr	r2, [pc, #276]	@ (8003844 <HAL_DMA_Init+0x65c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d06d      	beq.n	8003810 <HAL_DMA_Init+0x628>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a43      	ldr	r2, [pc, #268]	@ (8003848 <HAL_DMA_Init+0x660>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d068      	beq.n	8003810 <HAL_DMA_Init+0x628>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a42      	ldr	r2, [pc, #264]	@ (800384c <HAL_DMA_Init+0x664>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d063      	beq.n	8003810 <HAL_DMA_Init+0x628>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a40      	ldr	r2, [pc, #256]	@ (8003850 <HAL_DMA_Init+0x668>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d05e      	beq.n	8003810 <HAL_DMA_Init+0x628>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a3f      	ldr	r2, [pc, #252]	@ (8003854 <HAL_DMA_Init+0x66c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d059      	beq.n	8003810 <HAL_DMA_Init+0x628>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a3d      	ldr	r2, [pc, #244]	@ (8003858 <HAL_DMA_Init+0x670>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d054      	beq.n	8003810 <HAL_DMA_Init+0x628>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a3c      	ldr	r2, [pc, #240]	@ (800385c <HAL_DMA_Init+0x674>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d04f      	beq.n	8003810 <HAL_DMA_Init+0x628>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a3a      	ldr	r2, [pc, #232]	@ (8003860 <HAL_DMA_Init+0x678>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d04a      	beq.n	8003810 <HAL_DMA_Init+0x628>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a39      	ldr	r2, [pc, #228]	@ (8003864 <HAL_DMA_Init+0x67c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d045      	beq.n	8003810 <HAL_DMA_Init+0x628>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a37      	ldr	r2, [pc, #220]	@ (8003868 <HAL_DMA_Init+0x680>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d040      	beq.n	8003810 <HAL_DMA_Init+0x628>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a36      	ldr	r2, [pc, #216]	@ (800386c <HAL_DMA_Init+0x684>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d03b      	beq.n	8003810 <HAL_DMA_Init+0x628>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a34      	ldr	r2, [pc, #208]	@ (8003870 <HAL_DMA_Init+0x688>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d036      	beq.n	8003810 <HAL_DMA_Init+0x628>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a33      	ldr	r2, [pc, #204]	@ (8003874 <HAL_DMA_Init+0x68c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d031      	beq.n	8003810 <HAL_DMA_Init+0x628>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a31      	ldr	r2, [pc, #196]	@ (8003878 <HAL_DMA_Init+0x690>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d02c      	beq.n	8003810 <HAL_DMA_Init+0x628>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a30      	ldr	r2, [pc, #192]	@ (800387c <HAL_DMA_Init+0x694>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d027      	beq.n	8003810 <HAL_DMA_Init+0x628>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a13      	ldr	r2, [pc, #76]	@ (8003814 <HAL_DMA_Init+0x62c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d022      	beq.n	8003810 <HAL_DMA_Init+0x628>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a12      	ldr	r2, [pc, #72]	@ (8003818 <HAL_DMA_Init+0x630>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d01d      	beq.n	8003810 <HAL_DMA_Init+0x628>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a10      	ldr	r2, [pc, #64]	@ (800381c <HAL_DMA_Init+0x634>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d018      	beq.n	8003810 <HAL_DMA_Init+0x628>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003820 <HAL_DMA_Init+0x638>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d013      	beq.n	8003810 <HAL_DMA_Init+0x628>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003824 <HAL_DMA_Init+0x63c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00e      	beq.n	8003810 <HAL_DMA_Init+0x628>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003828 <HAL_DMA_Init+0x640>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_DMA_Init+0x628>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0a      	ldr	r2, [pc, #40]	@ (800382c <HAL_DMA_Init+0x644>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_DMA_Init+0x628>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a09      	ldr	r2, [pc, #36]	@ (8003830 <HAL_DMA_Init+0x648>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d137      	bne.n	8003880 <HAL_DMA_Init+0x698>
 8003810:	2301      	movs	r3, #1
 8003812:	e036      	b.n	8003882 <HAL_DMA_Init+0x69a>
 8003814:	58025408 	.word	0x58025408
 8003818:	5802541c 	.word	0x5802541c
 800381c:	58025430 	.word	0x58025430
 8003820:	58025444 	.word	0x58025444
 8003824:	58025458 	.word	0x58025458
 8003828:	5802546c 	.word	0x5802546c
 800382c:	58025480 	.word	0x58025480
 8003830:	58025494 	.word	0x58025494
 8003834:	fffe000f 	.word	0xfffe000f
 8003838:	a7fdabf8 	.word	0xa7fdabf8
 800383c:	cccccccd 	.word	0xcccccccd
 8003840:	40020010 	.word	0x40020010
 8003844:	40020028 	.word	0x40020028
 8003848:	40020040 	.word	0x40020040
 800384c:	40020058 	.word	0x40020058
 8003850:	40020070 	.word	0x40020070
 8003854:	40020088 	.word	0x40020088
 8003858:	400200a0 	.word	0x400200a0
 800385c:	400200b8 	.word	0x400200b8
 8003860:	40020410 	.word	0x40020410
 8003864:	40020428 	.word	0x40020428
 8003868:	40020440 	.word	0x40020440
 800386c:	40020458 	.word	0x40020458
 8003870:	40020470 	.word	0x40020470
 8003874:	40020488 	.word	0x40020488
 8003878:	400204a0 	.word	0x400204a0
 800387c:	400204b8 	.word	0x400204b8
 8003880:	2300      	movs	r3, #0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d032      	beq.n	80038ec <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f001 fd1a 	bl	80052c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b80      	cmp	r3, #128	@ 0x80
 8003892:	d102      	bne.n	800389a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038ae:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d010      	beq.n	80038da <HAL_DMA_Init+0x6f2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d80c      	bhi.n	80038da <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f001 fd97 	bl	80053f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	e008      	b.n	80038ec <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e226      	b.n	8003d6e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_DMA_Start_IT+0x2a>
 800392a:	2302      	movs	r3, #2
 800392c:	e21f      	b.n	8003d6e <HAL_DMA_Start_IT+0x46a>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	f040 820a 	bne.w	8003d58 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a68      	ldr	r2, [pc, #416]	@ (8003af8 <HAL_DMA_Start_IT+0x1f4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d04a      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a66      	ldr	r2, [pc, #408]	@ (8003afc <HAL_DMA_Start_IT+0x1f8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d045      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a65      	ldr	r2, [pc, #404]	@ (8003b00 <HAL_DMA_Start_IT+0x1fc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d040      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a63      	ldr	r2, [pc, #396]	@ (8003b04 <HAL_DMA_Start_IT+0x200>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d03b      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a62      	ldr	r2, [pc, #392]	@ (8003b08 <HAL_DMA_Start_IT+0x204>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d036      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a60      	ldr	r2, [pc, #384]	@ (8003b0c <HAL_DMA_Start_IT+0x208>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d031      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5f      	ldr	r2, [pc, #380]	@ (8003b10 <HAL_DMA_Start_IT+0x20c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d02c      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5d      	ldr	r2, [pc, #372]	@ (8003b14 <HAL_DMA_Start_IT+0x210>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d027      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b18 <HAL_DMA_Start_IT+0x214>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b1c <HAL_DMA_Start_IT+0x218>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01d      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a59      	ldr	r2, [pc, #356]	@ (8003b20 <HAL_DMA_Start_IT+0x21c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d018      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a57      	ldr	r2, [pc, #348]	@ (8003b24 <HAL_DMA_Start_IT+0x220>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a56      	ldr	r2, [pc, #344]	@ (8003b28 <HAL_DMA_Start_IT+0x224>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a54      	ldr	r2, [pc, #336]	@ (8003b2c <HAL_DMA_Start_IT+0x228>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a53      	ldr	r2, [pc, #332]	@ (8003b30 <HAL_DMA_Start_IT+0x22c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_DMA_Start_IT+0xee>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a51      	ldr	r2, [pc, #324]	@ (8003b34 <HAL_DMA_Start_IT+0x230>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d108      	bne.n	8003a04 <HAL_DMA_Start_IT+0x100>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e007      	b.n	8003a14 <HAL_DMA_Start_IT+0x110>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f001 f93e 	bl	8004c9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a34      	ldr	r2, [pc, #208]	@ (8003af8 <HAL_DMA_Start_IT+0x1f4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d04a      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a33      	ldr	r2, [pc, #204]	@ (8003afc <HAL_DMA_Start_IT+0x1f8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d045      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a31      	ldr	r2, [pc, #196]	@ (8003b00 <HAL_DMA_Start_IT+0x1fc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d040      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a30      	ldr	r2, [pc, #192]	@ (8003b04 <HAL_DMA_Start_IT+0x200>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d03b      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b08 <HAL_DMA_Start_IT+0x204>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d036      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2d      	ldr	r2, [pc, #180]	@ (8003b0c <HAL_DMA_Start_IT+0x208>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d031      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a2b      	ldr	r2, [pc, #172]	@ (8003b10 <HAL_DMA_Start_IT+0x20c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02c      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003b14 <HAL_DMA_Start_IT+0x210>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d027      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a28      	ldr	r2, [pc, #160]	@ (8003b18 <HAL_DMA_Start_IT+0x214>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d022      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a27      	ldr	r2, [pc, #156]	@ (8003b1c <HAL_DMA_Start_IT+0x218>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d01d      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a25      	ldr	r2, [pc, #148]	@ (8003b20 <HAL_DMA_Start_IT+0x21c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d018      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a24      	ldr	r2, [pc, #144]	@ (8003b24 <HAL_DMA_Start_IT+0x220>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d013      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a22      	ldr	r2, [pc, #136]	@ (8003b28 <HAL_DMA_Start_IT+0x224>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00e      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a21      	ldr	r2, [pc, #132]	@ (8003b2c <HAL_DMA_Start_IT+0x228>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b30 <HAL_DMA_Start_IT+0x22c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x1bc>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1e      	ldr	r2, [pc, #120]	@ (8003b34 <HAL_DMA_Start_IT+0x230>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <HAL_DMA_Start_IT+0x1c0>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_DMA_Start_IT+0x1c2>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d036      	beq.n	8003b38 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 021e 	bic.w	r2, r3, #30
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0216 	orr.w	r2, r2, #22
 8003adc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d03e      	beq.n	8003b64 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0208 	orr.w	r2, r2, #8
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e035      	b.n	8003b64 <HAL_DMA_Start_IT+0x260>
 8003af8:	40020010 	.word	0x40020010
 8003afc:	40020028 	.word	0x40020028
 8003b00:	40020040 	.word	0x40020040
 8003b04:	40020058 	.word	0x40020058
 8003b08:	40020070 	.word	0x40020070
 8003b0c:	40020088 	.word	0x40020088
 8003b10:	400200a0 	.word	0x400200a0
 8003b14:	400200b8 	.word	0x400200b8
 8003b18:	40020410 	.word	0x40020410
 8003b1c:	40020428 	.word	0x40020428
 8003b20:	40020440 	.word	0x40020440
 8003b24:	40020458 	.word	0x40020458
 8003b28:	40020470 	.word	0x40020470
 8003b2c:	40020488 	.word	0x40020488
 8003b30:	400204a0 	.word	0x400204a0
 8003b34:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 020e 	bic.w	r2, r3, #14
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 020a 	orr.w	r2, r2, #10
 8003b4a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0204 	orr.w	r2, r2, #4
 8003b62:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a83      	ldr	r2, [pc, #524]	@ (8003d78 <HAL_DMA_Start_IT+0x474>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d072      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a82      	ldr	r2, [pc, #520]	@ (8003d7c <HAL_DMA_Start_IT+0x478>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d06d      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a80      	ldr	r2, [pc, #512]	@ (8003d80 <HAL_DMA_Start_IT+0x47c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d068      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a7f      	ldr	r2, [pc, #508]	@ (8003d84 <HAL_DMA_Start_IT+0x480>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d063      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a7d      	ldr	r2, [pc, #500]	@ (8003d88 <HAL_DMA_Start_IT+0x484>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d05e      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d8c <HAL_DMA_Start_IT+0x488>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d059      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a7a      	ldr	r2, [pc, #488]	@ (8003d90 <HAL_DMA_Start_IT+0x48c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d054      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a79      	ldr	r2, [pc, #484]	@ (8003d94 <HAL_DMA_Start_IT+0x490>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d04f      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a77      	ldr	r2, [pc, #476]	@ (8003d98 <HAL_DMA_Start_IT+0x494>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d04a      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a76      	ldr	r2, [pc, #472]	@ (8003d9c <HAL_DMA_Start_IT+0x498>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d045      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a74      	ldr	r2, [pc, #464]	@ (8003da0 <HAL_DMA_Start_IT+0x49c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d040      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a73      	ldr	r2, [pc, #460]	@ (8003da4 <HAL_DMA_Start_IT+0x4a0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d03b      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a71      	ldr	r2, [pc, #452]	@ (8003da8 <HAL_DMA_Start_IT+0x4a4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d036      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a70      	ldr	r2, [pc, #448]	@ (8003dac <HAL_DMA_Start_IT+0x4a8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d031      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a6e      	ldr	r2, [pc, #440]	@ (8003db0 <HAL_DMA_Start_IT+0x4ac>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02c      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6d      	ldr	r2, [pc, #436]	@ (8003db4 <HAL_DMA_Start_IT+0x4b0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d027      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a6b      	ldr	r2, [pc, #428]	@ (8003db8 <HAL_DMA_Start_IT+0x4b4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d022      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6a      	ldr	r2, [pc, #424]	@ (8003dbc <HAL_DMA_Start_IT+0x4b8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d01d      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a68      	ldr	r2, [pc, #416]	@ (8003dc0 <HAL_DMA_Start_IT+0x4bc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d018      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a67      	ldr	r2, [pc, #412]	@ (8003dc4 <HAL_DMA_Start_IT+0x4c0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a65      	ldr	r2, [pc, #404]	@ (8003dc8 <HAL_DMA_Start_IT+0x4c4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00e      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a64      	ldr	r2, [pc, #400]	@ (8003dcc <HAL_DMA_Start_IT+0x4c8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d009      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a62      	ldr	r2, [pc, #392]	@ (8003dd0 <HAL_DMA_Start_IT+0x4cc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_DMA_Start_IT+0x350>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a61      	ldr	r2, [pc, #388]	@ (8003dd4 <HAL_DMA_Start_IT+0x4d0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d101      	bne.n	8003c58 <HAL_DMA_Start_IT+0x354>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_DMA_Start_IT+0x356>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01a      	beq.n	8003c94 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c7a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c92:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a37      	ldr	r2, [pc, #220]	@ (8003d78 <HAL_DMA_Start_IT+0x474>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d04a      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a36      	ldr	r2, [pc, #216]	@ (8003d7c <HAL_DMA_Start_IT+0x478>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d045      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a34      	ldr	r2, [pc, #208]	@ (8003d80 <HAL_DMA_Start_IT+0x47c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d040      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a33      	ldr	r2, [pc, #204]	@ (8003d84 <HAL_DMA_Start_IT+0x480>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d03b      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a31      	ldr	r2, [pc, #196]	@ (8003d88 <HAL_DMA_Start_IT+0x484>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d036      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a30      	ldr	r2, [pc, #192]	@ (8003d8c <HAL_DMA_Start_IT+0x488>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d031      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d90 <HAL_DMA_Start_IT+0x48c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d02c      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2d      	ldr	r2, [pc, #180]	@ (8003d94 <HAL_DMA_Start_IT+0x490>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d027      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d98 <HAL_DMA_Start_IT+0x494>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d9c <HAL_DMA_Start_IT+0x498>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d01d      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a28      	ldr	r2, [pc, #160]	@ (8003da0 <HAL_DMA_Start_IT+0x49c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a27      	ldr	r2, [pc, #156]	@ (8003da4 <HAL_DMA_Start_IT+0x4a0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a25      	ldr	r2, [pc, #148]	@ (8003da8 <HAL_DMA_Start_IT+0x4a4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a24      	ldr	r2, [pc, #144]	@ (8003dac <HAL_DMA_Start_IT+0x4a8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a22      	ldr	r2, [pc, #136]	@ (8003db0 <HAL_DMA_Start_IT+0x4ac>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_DMA_Start_IT+0x430>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a21      	ldr	r2, [pc, #132]	@ (8003db4 <HAL_DMA_Start_IT+0x4b0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d108      	bne.n	8003d46 <HAL_DMA_Start_IT+0x442>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e012      	b.n	8003d6c <HAL_DMA_Start_IT+0x468>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e009      	b.n	8003d6c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40020010 	.word	0x40020010
 8003d7c:	40020028 	.word	0x40020028
 8003d80:	40020040 	.word	0x40020040
 8003d84:	40020058 	.word	0x40020058
 8003d88:	40020070 	.word	0x40020070
 8003d8c:	40020088 	.word	0x40020088
 8003d90:	400200a0 	.word	0x400200a0
 8003d94:	400200b8 	.word	0x400200b8
 8003d98:	40020410 	.word	0x40020410
 8003d9c:	40020428 	.word	0x40020428
 8003da0:	40020440 	.word	0x40020440
 8003da4:	40020458 	.word	0x40020458
 8003da8:	40020470 	.word	0x40020470
 8003dac:	40020488 	.word	0x40020488
 8003db0:	400204a0 	.word	0x400204a0
 8003db4:	400204b8 	.word	0x400204b8
 8003db8:	58025408 	.word	0x58025408
 8003dbc:	5802541c 	.word	0x5802541c
 8003dc0:	58025430 	.word	0x58025430
 8003dc4:	58025444 	.word	0x58025444
 8003dc8:	58025458 	.word	0x58025458
 8003dcc:	5802546c 	.word	0x5802546c
 8003dd0:	58025480 	.word	0x58025480
 8003dd4:	58025494 	.word	0x58025494

08003dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	@ 0x28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003de4:	4b67      	ldr	r3, [pc, #412]	@ (8003f84 <HAL_DMA_IRQHandler+0x1ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a67      	ldr	r2, [pc, #412]	@ (8003f88 <HAL_DMA_IRQHandler+0x1b0>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	0a9b      	lsrs	r3, r3, #10
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a5f      	ldr	r2, [pc, #380]	@ (8003f8c <HAL_DMA_IRQHandler+0x1b4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d04a      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a5d      	ldr	r2, [pc, #372]	@ (8003f90 <HAL_DMA_IRQHandler+0x1b8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d045      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a5c      	ldr	r2, [pc, #368]	@ (8003f94 <HAL_DMA_IRQHandler+0x1bc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d040      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a5a      	ldr	r2, [pc, #360]	@ (8003f98 <HAL_DMA_IRQHandler+0x1c0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d03b      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a59      	ldr	r2, [pc, #356]	@ (8003f9c <HAL_DMA_IRQHandler+0x1c4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d036      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a57      	ldr	r2, [pc, #348]	@ (8003fa0 <HAL_DMA_IRQHandler+0x1c8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d031      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a56      	ldr	r2, [pc, #344]	@ (8003fa4 <HAL_DMA_IRQHandler+0x1cc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d02c      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a54      	ldr	r2, [pc, #336]	@ (8003fa8 <HAL_DMA_IRQHandler+0x1d0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d027      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a53      	ldr	r2, [pc, #332]	@ (8003fac <HAL_DMA_IRQHandler+0x1d4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d022      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a51      	ldr	r2, [pc, #324]	@ (8003fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01d      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a50      	ldr	r2, [pc, #320]	@ (8003fb4 <HAL_DMA_IRQHandler+0x1dc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d018      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb8 <HAL_DMA_IRQHandler+0x1e0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a4d      	ldr	r2, [pc, #308]	@ (8003fbc <HAL_DMA_IRQHandler+0x1e4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00e      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a4b      	ldr	r2, [pc, #300]	@ (8003fc0 <HAL_DMA_IRQHandler+0x1e8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d009      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a4a      	ldr	r2, [pc, #296]	@ (8003fc4 <HAL_DMA_IRQHandler+0x1ec>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_DMA_IRQHandler+0xd2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a48      	ldr	r2, [pc, #288]	@ (8003fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d101      	bne.n	8003eae <HAL_DMA_IRQHandler+0xd6>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <HAL_DMA_IRQHandler+0xd8>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 842b 	beq.w	800470c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80a2 	beq.w	8004010 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f8c <HAL_DMA_IRQHandler+0x1b4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d04a      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2d      	ldr	r2, [pc, #180]	@ (8003f90 <HAL_DMA_IRQHandler+0x1b8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d045      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f94 <HAL_DMA_IRQHandler+0x1bc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d040      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2a      	ldr	r2, [pc, #168]	@ (8003f98 <HAL_DMA_IRQHandler+0x1c0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d03b      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a28      	ldr	r2, [pc, #160]	@ (8003f9c <HAL_DMA_IRQHandler+0x1c4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d036      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a27      	ldr	r2, [pc, #156]	@ (8003fa0 <HAL_DMA_IRQHandler+0x1c8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d031      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	@ (8003fa4 <HAL_DMA_IRQHandler+0x1cc>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d02c      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a24      	ldr	r2, [pc, #144]	@ (8003fa8 <HAL_DMA_IRQHandler+0x1d0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d027      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a22      	ldr	r2, [pc, #136]	@ (8003fac <HAL_DMA_IRQHandler+0x1d4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d022      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a21      	ldr	r2, [pc, #132]	@ (8003fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d01d      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb4 <HAL_DMA_IRQHandler+0x1dc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d018      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb8 <HAL_DMA_IRQHandler+0x1e0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	@ (8003fbc <HAL_DMA_IRQHandler+0x1e4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00e      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc0 <HAL_DMA_IRQHandler+0x1e8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a19      	ldr	r2, [pc, #100]	@ (8003fc4 <HAL_DMA_IRQHandler+0x1ec>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x194>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d12f      	bne.n	8003fcc <HAL_DMA_IRQHandler+0x1f4>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	bf14      	ite	ne
 8003f7a:	2301      	movne	r3, #1
 8003f7c:	2300      	moveq	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e02e      	b.n	8003fe0 <HAL_DMA_IRQHandler+0x208>
 8003f82:	bf00      	nop
 8003f84:	24000000 	.word	0x24000000
 8003f88:	1b4e81b5 	.word	0x1b4e81b5
 8003f8c:	40020010 	.word	0x40020010
 8003f90:	40020028 	.word	0x40020028
 8003f94:	40020040 	.word	0x40020040
 8003f98:	40020058 	.word	0x40020058
 8003f9c:	40020070 	.word	0x40020070
 8003fa0:	40020088 	.word	0x40020088
 8003fa4:	400200a0 	.word	0x400200a0
 8003fa8:	400200b8 	.word	0x400200b8
 8003fac:	40020410 	.word	0x40020410
 8003fb0:	40020428 	.word	0x40020428
 8003fb4:	40020440 	.word	0x40020440
 8003fb8:	40020458 	.word	0x40020458
 8003fbc:	40020470 	.word	0x40020470
 8003fc0:	40020488 	.word	0x40020488
 8003fc4:	400204a0 	.word	0x400204a0
 8003fc8:	400204b8 	.word	0x400204b8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bf14      	ite	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	2300      	moveq	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d015      	beq.n	8004010 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0204 	bic.w	r2, r2, #4
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	409a      	lsls	r2, r3
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d06e      	beq.n	8004104 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a69      	ldr	r2, [pc, #420]	@ (80041d0 <HAL_DMA_IRQHandler+0x3f8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d04a      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a67      	ldr	r2, [pc, #412]	@ (80041d4 <HAL_DMA_IRQHandler+0x3fc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d045      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a66      	ldr	r2, [pc, #408]	@ (80041d8 <HAL_DMA_IRQHandler+0x400>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d040      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a64      	ldr	r2, [pc, #400]	@ (80041dc <HAL_DMA_IRQHandler+0x404>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d03b      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a63      	ldr	r2, [pc, #396]	@ (80041e0 <HAL_DMA_IRQHandler+0x408>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d036      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a61      	ldr	r2, [pc, #388]	@ (80041e4 <HAL_DMA_IRQHandler+0x40c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d031      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a60      	ldr	r2, [pc, #384]	@ (80041e8 <HAL_DMA_IRQHandler+0x410>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d02c      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a5e      	ldr	r2, [pc, #376]	@ (80041ec <HAL_DMA_IRQHandler+0x414>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d027      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a5d      	ldr	r2, [pc, #372]	@ (80041f0 <HAL_DMA_IRQHandler+0x418>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d022      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a5b      	ldr	r2, [pc, #364]	@ (80041f4 <HAL_DMA_IRQHandler+0x41c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01d      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a5a      	ldr	r2, [pc, #360]	@ (80041f8 <HAL_DMA_IRQHandler+0x420>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d018      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a58      	ldr	r2, [pc, #352]	@ (80041fc <HAL_DMA_IRQHandler+0x424>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a57      	ldr	r2, [pc, #348]	@ (8004200 <HAL_DMA_IRQHandler+0x428>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00e      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a55      	ldr	r2, [pc, #340]	@ (8004204 <HAL_DMA_IRQHandler+0x42c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a54      	ldr	r2, [pc, #336]	@ (8004208 <HAL_DMA_IRQHandler+0x430>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x2ee>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a52      	ldr	r2, [pc, #328]	@ (800420c <HAL_DMA_IRQHandler+0x434>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d10a      	bne.n	80040dc <HAL_DMA_IRQHandler+0x304>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e003      	b.n	80040e4 <HAL_DMA_IRQHandler+0x30c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	2201      	movs	r2, #1
 80040f2:	409a      	lsls	r2, r3
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fc:	f043 0202 	orr.w	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2204      	movs	r2, #4
 800410e:	409a      	lsls	r2, r3
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 808f 	beq.w	8004238 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2c      	ldr	r2, [pc, #176]	@ (80041d0 <HAL_DMA_IRQHandler+0x3f8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d04a      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2a      	ldr	r2, [pc, #168]	@ (80041d4 <HAL_DMA_IRQHandler+0x3fc>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d045      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a29      	ldr	r2, [pc, #164]	@ (80041d8 <HAL_DMA_IRQHandler+0x400>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d040      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a27      	ldr	r2, [pc, #156]	@ (80041dc <HAL_DMA_IRQHandler+0x404>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d03b      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a26      	ldr	r2, [pc, #152]	@ (80041e0 <HAL_DMA_IRQHandler+0x408>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d036      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a24      	ldr	r2, [pc, #144]	@ (80041e4 <HAL_DMA_IRQHandler+0x40c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d031      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a23      	ldr	r2, [pc, #140]	@ (80041e8 <HAL_DMA_IRQHandler+0x410>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d02c      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a21      	ldr	r2, [pc, #132]	@ (80041ec <HAL_DMA_IRQHandler+0x414>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d027      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a20      	ldr	r2, [pc, #128]	@ (80041f0 <HAL_DMA_IRQHandler+0x418>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d022      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1e      	ldr	r2, [pc, #120]	@ (80041f4 <HAL_DMA_IRQHandler+0x41c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01d      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1d      	ldr	r2, [pc, #116]	@ (80041f8 <HAL_DMA_IRQHandler+0x420>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d018      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1b      	ldr	r2, [pc, #108]	@ (80041fc <HAL_DMA_IRQHandler+0x424>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1a      	ldr	r2, [pc, #104]	@ (8004200 <HAL_DMA_IRQHandler+0x428>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00e      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a18      	ldr	r2, [pc, #96]	@ (8004204 <HAL_DMA_IRQHandler+0x42c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a17      	ldr	r2, [pc, #92]	@ (8004208 <HAL_DMA_IRQHandler+0x430>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_DMA_IRQHandler+0x3e2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a15      	ldr	r2, [pc, #84]	@ (800420c <HAL_DMA_IRQHandler+0x434>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d12a      	bne.n	8004210 <HAL_DMA_IRQHandler+0x438>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf14      	ite	ne
 80041c8:	2301      	movne	r3, #1
 80041ca:	2300      	moveq	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	e023      	b.n	8004218 <HAL_DMA_IRQHandler+0x440>
 80041d0:	40020010 	.word	0x40020010
 80041d4:	40020028 	.word	0x40020028
 80041d8:	40020040 	.word	0x40020040
 80041dc:	40020058 	.word	0x40020058
 80041e0:	40020070 	.word	0x40020070
 80041e4:	40020088 	.word	0x40020088
 80041e8:	400200a0 	.word	0x400200a0
 80041ec:	400200b8 	.word	0x400200b8
 80041f0:	40020410 	.word	0x40020410
 80041f4:	40020428 	.word	0x40020428
 80041f8:	40020440 	.word	0x40020440
 80041fc:	40020458 	.word	0x40020458
 8004200:	40020470 	.word	0x40020470
 8004204:	40020488 	.word	0x40020488
 8004208:	400204a0 	.word	0x400204a0
 800420c:	400204b8 	.word	0x400204b8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2204      	movs	r2, #4
 8004226:	409a      	lsls	r2, r3
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004230:	f043 0204 	orr.w	r2, r3, #4
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2210      	movs	r2, #16
 8004242:	409a      	lsls	r2, r3
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80a6 	beq.w	800439a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a85      	ldr	r2, [pc, #532]	@ (8004468 <HAL_DMA_IRQHandler+0x690>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d04a      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a83      	ldr	r2, [pc, #524]	@ (800446c <HAL_DMA_IRQHandler+0x694>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d045      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a82      	ldr	r2, [pc, #520]	@ (8004470 <HAL_DMA_IRQHandler+0x698>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d040      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a80      	ldr	r2, [pc, #512]	@ (8004474 <HAL_DMA_IRQHandler+0x69c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d03b      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a7f      	ldr	r2, [pc, #508]	@ (8004478 <HAL_DMA_IRQHandler+0x6a0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d036      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a7d      	ldr	r2, [pc, #500]	@ (800447c <HAL_DMA_IRQHandler+0x6a4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d031      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a7c      	ldr	r2, [pc, #496]	@ (8004480 <HAL_DMA_IRQHandler+0x6a8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d02c      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a7a      	ldr	r2, [pc, #488]	@ (8004484 <HAL_DMA_IRQHandler+0x6ac>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d027      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a79      	ldr	r2, [pc, #484]	@ (8004488 <HAL_DMA_IRQHandler+0x6b0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a77      	ldr	r2, [pc, #476]	@ (800448c <HAL_DMA_IRQHandler+0x6b4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01d      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a76      	ldr	r2, [pc, #472]	@ (8004490 <HAL_DMA_IRQHandler+0x6b8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d018      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a74      	ldr	r2, [pc, #464]	@ (8004494 <HAL_DMA_IRQHandler+0x6bc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a73      	ldr	r2, [pc, #460]	@ (8004498 <HAL_DMA_IRQHandler+0x6c0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a71      	ldr	r2, [pc, #452]	@ (800449c <HAL_DMA_IRQHandler+0x6c4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d009      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a70      	ldr	r2, [pc, #448]	@ (80044a0 <HAL_DMA_IRQHandler+0x6c8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_DMA_IRQHandler+0x516>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a6e      	ldr	r2, [pc, #440]	@ (80044a4 <HAL_DMA_IRQHandler+0x6cc>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10a      	bne.n	8004304 <HAL_DMA_IRQHandler+0x52c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf14      	ite	ne
 80042fc:	2301      	movne	r3, #1
 80042fe:	2300      	moveq	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	e009      	b.n	8004318 <HAL_DMA_IRQHandler+0x540>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	bf14      	ite	ne
 8004312:	2301      	movne	r3, #1
 8004314:	2300      	moveq	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d03e      	beq.n	800439a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	2210      	movs	r2, #16
 8004326:	409a      	lsls	r2, r3
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d018      	beq.n	800436c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d024      	beq.n	800439a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
 8004358:	e01f      	b.n	800439a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01b      	beq.n	800439a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
 800436a:	e016      	b.n	800439a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004376:	2b00      	cmp	r3, #0
 8004378:	d107      	bne.n	800438a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0208 	bic.w	r2, r2, #8
 8004388:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	2220      	movs	r2, #32
 80043a4:	409a      	lsls	r2, r3
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8110 	beq.w	80045d0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004468 <HAL_DMA_IRQHandler+0x690>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d04a      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a2b      	ldr	r2, [pc, #172]	@ (800446c <HAL_DMA_IRQHandler+0x694>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d045      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a29      	ldr	r2, [pc, #164]	@ (8004470 <HAL_DMA_IRQHandler+0x698>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d040      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a28      	ldr	r2, [pc, #160]	@ (8004474 <HAL_DMA_IRQHandler+0x69c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d03b      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a26      	ldr	r2, [pc, #152]	@ (8004478 <HAL_DMA_IRQHandler+0x6a0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d036      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a25      	ldr	r2, [pc, #148]	@ (800447c <HAL_DMA_IRQHandler+0x6a4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d031      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a23      	ldr	r2, [pc, #140]	@ (8004480 <HAL_DMA_IRQHandler+0x6a8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d02c      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a22      	ldr	r2, [pc, #136]	@ (8004484 <HAL_DMA_IRQHandler+0x6ac>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d027      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a20      	ldr	r2, [pc, #128]	@ (8004488 <HAL_DMA_IRQHandler+0x6b0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d022      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1f      	ldr	r2, [pc, #124]	@ (800448c <HAL_DMA_IRQHandler+0x6b4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d01d      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1d      	ldr	r2, [pc, #116]	@ (8004490 <HAL_DMA_IRQHandler+0x6b8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d018      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1c      	ldr	r2, [pc, #112]	@ (8004494 <HAL_DMA_IRQHandler+0x6bc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1a      	ldr	r2, [pc, #104]	@ (8004498 <HAL_DMA_IRQHandler+0x6c0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00e      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a19      	ldr	r2, [pc, #100]	@ (800449c <HAL_DMA_IRQHandler+0x6c4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a17      	ldr	r2, [pc, #92]	@ (80044a0 <HAL_DMA_IRQHandler+0x6c8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_DMA_IRQHandler+0x678>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a16      	ldr	r2, [pc, #88]	@ (80044a4 <HAL_DMA_IRQHandler+0x6cc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d12b      	bne.n	80044a8 <HAL_DMA_IRQHandler+0x6d0>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	e02a      	b.n	80044bc <HAL_DMA_IRQHandler+0x6e4>
 8004466:	bf00      	nop
 8004468:	40020010 	.word	0x40020010
 800446c:	40020028 	.word	0x40020028
 8004470:	40020040 	.word	0x40020040
 8004474:	40020058 	.word	0x40020058
 8004478:	40020070 	.word	0x40020070
 800447c:	40020088 	.word	0x40020088
 8004480:	400200a0 	.word	0x400200a0
 8004484:	400200b8 	.word	0x400200b8
 8004488:	40020410 	.word	0x40020410
 800448c:	40020428 	.word	0x40020428
 8004490:	40020440 	.word	0x40020440
 8004494:	40020458 	.word	0x40020458
 8004498:	40020470 	.word	0x40020470
 800449c:	40020488 	.word	0x40020488
 80044a0:	400204a0 	.word	0x400204a0
 80044a4:	400204b8 	.word	0x400204b8
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bf14      	ite	ne
 80044b6:	2301      	movne	r3, #1
 80044b8:	2300      	moveq	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8087 	beq.w	80045d0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	2220      	movs	r2, #32
 80044cc:	409a      	lsls	r2, r3
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d139      	bne.n	8004552 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0216 	bic.w	r2, r2, #22
 80044ec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044fc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <HAL_DMA_IRQHandler+0x736>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0208 	bic.w	r2, r2, #8
 800451c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	223f      	movs	r2, #63	@ 0x3f
 8004528:	409a      	lsls	r2, r3
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8382 	beq.w	8004c4c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	4798      	blx	r3
          }
          return;
 8004550:	e37c      	b.n	8004c4c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d018      	beq.n	8004592 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d108      	bne.n	8004580 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02c      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
 800457e:	e027      	b.n	80045d0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d023      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	4798      	blx	r3
 8004590:	e01e      	b.n	80045d0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10f      	bne.n	80045c0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0210 	bic.w	r2, r2, #16
 80045ae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 833e 	beq.w	8004c56 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 8088 	beq.w	80046f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2204      	movs	r2, #4
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a89      	ldr	r2, [pc, #548]	@ (800481c <HAL_DMA_IRQHandler+0xa44>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d04a      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a88      	ldr	r2, [pc, #544]	@ (8004820 <HAL_DMA_IRQHandler+0xa48>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d045      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a86      	ldr	r2, [pc, #536]	@ (8004824 <HAL_DMA_IRQHandler+0xa4c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d040      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a85      	ldr	r2, [pc, #532]	@ (8004828 <HAL_DMA_IRQHandler+0xa50>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d03b      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a83      	ldr	r2, [pc, #524]	@ (800482c <HAL_DMA_IRQHandler+0xa54>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d036      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a82      	ldr	r2, [pc, #520]	@ (8004830 <HAL_DMA_IRQHandler+0xa58>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d031      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a80      	ldr	r2, [pc, #512]	@ (8004834 <HAL_DMA_IRQHandler+0xa5c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d02c      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a7f      	ldr	r2, [pc, #508]	@ (8004838 <HAL_DMA_IRQHandler+0xa60>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d027      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a7d      	ldr	r2, [pc, #500]	@ (800483c <HAL_DMA_IRQHandler+0xa64>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d022      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7c      	ldr	r2, [pc, #496]	@ (8004840 <HAL_DMA_IRQHandler+0xa68>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d01d      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a7a      	ldr	r2, [pc, #488]	@ (8004844 <HAL_DMA_IRQHandler+0xa6c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a79      	ldr	r2, [pc, #484]	@ (8004848 <HAL_DMA_IRQHandler+0xa70>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a77      	ldr	r2, [pc, #476]	@ (800484c <HAL_DMA_IRQHandler+0xa74>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a76      	ldr	r2, [pc, #472]	@ (8004850 <HAL_DMA_IRQHandler+0xa78>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a74      	ldr	r2, [pc, #464]	@ (8004854 <HAL_DMA_IRQHandler+0xa7c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_DMA_IRQHandler+0x8b8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a73      	ldr	r2, [pc, #460]	@ (8004858 <HAL_DMA_IRQHandler+0xa80>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d108      	bne.n	80046a2 <HAL_DMA_IRQHandler+0x8ca>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e007      	b.n	80046b2 <HAL_DMA_IRQHandler+0x8da>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d307      	bcc.n	80046ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f2      	bne.n	80046b2 <HAL_DMA_IRQHandler+0x8da>
 80046cc:	e000      	b.n	80046d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80046ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2203      	movs	r2, #3
 80046e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80046e6:	e003      	b.n	80046f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 82aa 	beq.w	8004c56 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
 800470a:	e2a4      	b.n	8004c56 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a52      	ldr	r2, [pc, #328]	@ (800485c <HAL_DMA_IRQHandler+0xa84>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d04a      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a51      	ldr	r2, [pc, #324]	@ (8004860 <HAL_DMA_IRQHandler+0xa88>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d045      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a4f      	ldr	r2, [pc, #316]	@ (8004864 <HAL_DMA_IRQHandler+0xa8c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d040      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a4e      	ldr	r2, [pc, #312]	@ (8004868 <HAL_DMA_IRQHandler+0xa90>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d03b      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a4c      	ldr	r2, [pc, #304]	@ (800486c <HAL_DMA_IRQHandler+0xa94>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d036      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a4b      	ldr	r2, [pc, #300]	@ (8004870 <HAL_DMA_IRQHandler+0xa98>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d031      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a49      	ldr	r2, [pc, #292]	@ (8004874 <HAL_DMA_IRQHandler+0xa9c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d02c      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a48      	ldr	r2, [pc, #288]	@ (8004878 <HAL_DMA_IRQHandler+0xaa0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d027      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a46      	ldr	r2, [pc, #280]	@ (800487c <HAL_DMA_IRQHandler+0xaa4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d022      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a45      	ldr	r2, [pc, #276]	@ (8004880 <HAL_DMA_IRQHandler+0xaa8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d01d      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a43      	ldr	r2, [pc, #268]	@ (8004884 <HAL_DMA_IRQHandler+0xaac>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d018      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a42      	ldr	r2, [pc, #264]	@ (8004888 <HAL_DMA_IRQHandler+0xab0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a40      	ldr	r2, [pc, #256]	@ (800488c <HAL_DMA_IRQHandler+0xab4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a3f      	ldr	r2, [pc, #252]	@ (8004890 <HAL_DMA_IRQHandler+0xab8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a3d      	ldr	r2, [pc, #244]	@ (8004894 <HAL_DMA_IRQHandler+0xabc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_DMA_IRQHandler+0x9d4>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a3c      	ldr	r2, [pc, #240]	@ (8004898 <HAL_DMA_IRQHandler+0xac0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d101      	bne.n	80047b0 <HAL_DMA_IRQHandler+0x9d8>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_DMA_IRQHandler+0x9da>
 80047b0:	2300      	movs	r3, #0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 824f 	beq.w	8004c56 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	2204      	movs	r2, #4
 80047ca:	409a      	lsls	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80dd 	beq.w	8004990 <HAL_DMA_IRQHandler+0xbb8>
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80d7 	beq.w	8004990 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	2204      	movs	r2, #4
 80047ec:	409a      	lsls	r2, r3
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d059      	beq.n	80048b0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d14a      	bne.n	800489c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8220 	beq.w	8004c50 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004818:	e21a      	b.n	8004c50 <HAL_DMA_IRQHandler+0xe78>
 800481a:	bf00      	nop
 800481c:	40020010 	.word	0x40020010
 8004820:	40020028 	.word	0x40020028
 8004824:	40020040 	.word	0x40020040
 8004828:	40020058 	.word	0x40020058
 800482c:	40020070 	.word	0x40020070
 8004830:	40020088 	.word	0x40020088
 8004834:	400200a0 	.word	0x400200a0
 8004838:	400200b8 	.word	0x400200b8
 800483c:	40020410 	.word	0x40020410
 8004840:	40020428 	.word	0x40020428
 8004844:	40020440 	.word	0x40020440
 8004848:	40020458 	.word	0x40020458
 800484c:	40020470 	.word	0x40020470
 8004850:	40020488 	.word	0x40020488
 8004854:	400204a0 	.word	0x400204a0
 8004858:	400204b8 	.word	0x400204b8
 800485c:	48022c08 	.word	0x48022c08
 8004860:	48022c1c 	.word	0x48022c1c
 8004864:	48022c30 	.word	0x48022c30
 8004868:	48022c44 	.word	0x48022c44
 800486c:	48022c58 	.word	0x48022c58
 8004870:	48022c6c 	.word	0x48022c6c
 8004874:	48022c80 	.word	0x48022c80
 8004878:	48022c94 	.word	0x48022c94
 800487c:	58025408 	.word	0x58025408
 8004880:	5802541c 	.word	0x5802541c
 8004884:	58025430 	.word	0x58025430
 8004888:	58025444 	.word	0x58025444
 800488c:	58025458 	.word	0x58025458
 8004890:	5802546c 	.word	0x5802546c
 8004894:	58025480 	.word	0x58025480
 8004898:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 81d5 	beq.w	8004c50 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ae:	e1cf      	b.n	8004c50 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d160      	bne.n	800497c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a7f      	ldr	r2, [pc, #508]	@ (8004abc <HAL_DMA_IRQHandler+0xce4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d04a      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a7d      	ldr	r2, [pc, #500]	@ (8004ac0 <HAL_DMA_IRQHandler+0xce8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d045      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a7c      	ldr	r2, [pc, #496]	@ (8004ac4 <HAL_DMA_IRQHandler+0xcec>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d040      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a7a      	ldr	r2, [pc, #488]	@ (8004ac8 <HAL_DMA_IRQHandler+0xcf0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d03b      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a79      	ldr	r2, [pc, #484]	@ (8004acc <HAL_DMA_IRQHandler+0xcf4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d036      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a77      	ldr	r2, [pc, #476]	@ (8004ad0 <HAL_DMA_IRQHandler+0xcf8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d031      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a76      	ldr	r2, [pc, #472]	@ (8004ad4 <HAL_DMA_IRQHandler+0xcfc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d02c      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a74      	ldr	r2, [pc, #464]	@ (8004ad8 <HAL_DMA_IRQHandler+0xd00>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d027      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a73      	ldr	r2, [pc, #460]	@ (8004adc <HAL_DMA_IRQHandler+0xd04>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d022      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a71      	ldr	r2, [pc, #452]	@ (8004ae0 <HAL_DMA_IRQHandler+0xd08>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01d      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a70      	ldr	r2, [pc, #448]	@ (8004ae4 <HAL_DMA_IRQHandler+0xd0c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d018      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6e      	ldr	r2, [pc, #440]	@ (8004ae8 <HAL_DMA_IRQHandler+0xd10>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6d      	ldr	r2, [pc, #436]	@ (8004aec <HAL_DMA_IRQHandler+0xd14>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00e      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6b      	ldr	r2, [pc, #428]	@ (8004af0 <HAL_DMA_IRQHandler+0xd18>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d009      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6a      	ldr	r2, [pc, #424]	@ (8004af4 <HAL_DMA_IRQHandler+0xd1c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d004      	beq.n	800495a <HAL_DMA_IRQHandler+0xb82>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a68      	ldr	r2, [pc, #416]	@ (8004af8 <HAL_DMA_IRQHandler+0xd20>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d108      	bne.n	800496c <HAL_DMA_IRQHandler+0xb94>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0208 	bic.w	r2, r2, #8
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e007      	b.n	800497c <HAL_DMA_IRQHandler+0xba4>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0204 	bic.w	r2, r2, #4
 800497a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8165 	beq.w	8004c50 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800498e:	e15f      	b.n	8004c50 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	2202      	movs	r2, #2
 800499a:	409a      	lsls	r2, r3
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80c5 	beq.w	8004b30 <HAL_DMA_IRQHandler+0xd58>
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80bf 	beq.w	8004b30 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	2202      	movs	r2, #2
 80049bc:	409a      	lsls	r2, r3
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d018      	beq.n	80049fe <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 813a 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049e8:	e134      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 8130 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049fc:	e12a      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f040 8089 	bne.w	8004b1c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004abc <HAL_DMA_IRQHandler+0xce4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d04a      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a29      	ldr	r2, [pc, #164]	@ (8004ac0 <HAL_DMA_IRQHandler+0xce8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d045      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a28      	ldr	r2, [pc, #160]	@ (8004ac4 <HAL_DMA_IRQHandler+0xcec>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d040      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a26      	ldr	r2, [pc, #152]	@ (8004ac8 <HAL_DMA_IRQHandler+0xcf0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d03b      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a25      	ldr	r2, [pc, #148]	@ (8004acc <HAL_DMA_IRQHandler+0xcf4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d036      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a23      	ldr	r2, [pc, #140]	@ (8004ad0 <HAL_DMA_IRQHandler+0xcf8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d031      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a22      	ldr	r2, [pc, #136]	@ (8004ad4 <HAL_DMA_IRQHandler+0xcfc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d02c      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a20      	ldr	r2, [pc, #128]	@ (8004ad8 <HAL_DMA_IRQHandler+0xd00>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d027      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004adc <HAL_DMA_IRQHandler+0xd04>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d022      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae0 <HAL_DMA_IRQHandler+0xd08>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01d      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae4 <HAL_DMA_IRQHandler+0xd0c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d018      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae8 <HAL_DMA_IRQHandler+0xd10>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <HAL_DMA_IRQHandler+0xd14>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00e      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <HAL_DMA_IRQHandler+0xd18>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a16      	ldr	r2, [pc, #88]	@ (8004af4 <HAL_DMA_IRQHandler+0xd1c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d004      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xcd2>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a14      	ldr	r2, [pc, #80]	@ (8004af8 <HAL_DMA_IRQHandler+0xd20>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d128      	bne.n	8004afc <HAL_DMA_IRQHandler+0xd24>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0214 	bic.w	r2, r2, #20
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e027      	b.n	8004b0c <HAL_DMA_IRQHandler+0xd34>
 8004abc:	40020010 	.word	0x40020010
 8004ac0:	40020028 	.word	0x40020028
 8004ac4:	40020040 	.word	0x40020040
 8004ac8:	40020058 	.word	0x40020058
 8004acc:	40020070 	.word	0x40020070
 8004ad0:	40020088 	.word	0x40020088
 8004ad4:	400200a0 	.word	0x400200a0
 8004ad8:	400200b8 	.word	0x400200b8
 8004adc:	40020410 	.word	0x40020410
 8004ae0:	40020428 	.word	0x40020428
 8004ae4:	40020440 	.word	0x40020440
 8004ae8:	40020458 	.word	0x40020458
 8004aec:	40020470 	.word	0x40020470
 8004af0:	40020488 	.word	0x40020488
 8004af4:	400204a0 	.word	0x400204a0
 8004af8:	400204b8 	.word	0x400204b8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 020a 	bic.w	r2, r2, #10
 8004b0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8097 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b2e:	e091      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	2208      	movs	r2, #8
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8088 	beq.w	8004c56 <HAL_DMA_IRQHandler+0xe7e>
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8082 	beq.w	8004c56 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a41      	ldr	r2, [pc, #260]	@ (8004c5c <HAL_DMA_IRQHandler+0xe84>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d04a      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a3f      	ldr	r2, [pc, #252]	@ (8004c60 <HAL_DMA_IRQHandler+0xe88>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d045      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c64 <HAL_DMA_IRQHandler+0xe8c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d040      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a3c      	ldr	r2, [pc, #240]	@ (8004c68 <HAL_DMA_IRQHandler+0xe90>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d03b      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8004c6c <HAL_DMA_IRQHandler+0xe94>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d036      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a39      	ldr	r2, [pc, #228]	@ (8004c70 <HAL_DMA_IRQHandler+0xe98>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d031      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a38      	ldr	r2, [pc, #224]	@ (8004c74 <HAL_DMA_IRQHandler+0xe9c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d02c      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a36      	ldr	r2, [pc, #216]	@ (8004c78 <HAL_DMA_IRQHandler+0xea0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d027      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a35      	ldr	r2, [pc, #212]	@ (8004c7c <HAL_DMA_IRQHandler+0xea4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d022      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a33      	ldr	r2, [pc, #204]	@ (8004c80 <HAL_DMA_IRQHandler+0xea8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01d      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a32      	ldr	r2, [pc, #200]	@ (8004c84 <HAL_DMA_IRQHandler+0xeac>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d018      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a30      	ldr	r2, [pc, #192]	@ (8004c88 <HAL_DMA_IRQHandler+0xeb0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2f      	ldr	r2, [pc, #188]	@ (8004c8c <HAL_DMA_IRQHandler+0xeb4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00e      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004c90 <HAL_DMA_IRQHandler+0xeb8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d009      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c94 <HAL_DMA_IRQHandler+0xebc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d004      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0xe1a>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a2a      	ldr	r2, [pc, #168]	@ (8004c98 <HAL_DMA_IRQHandler+0xec0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d108      	bne.n	8004c04 <HAL_DMA_IRQHandler+0xe2c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 021c 	bic.w	r2, r2, #28
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e007      	b.n	8004c14 <HAL_DMA_IRQHandler+0xe3c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 020e 	bic.w	r2, r2, #14
 8004c12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	4798      	blx	r3
 8004c4a:	e004      	b.n	8004c56 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004c4c:	bf00      	nop
 8004c4e:	e002      	b.n	8004c56 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c50:	bf00      	nop
 8004c52:	e000      	b.n	8004c56 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c56:	3728      	adds	r7, #40	@ 0x28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40020010 	.word	0x40020010
 8004c60:	40020028 	.word	0x40020028
 8004c64:	40020040 	.word	0x40020040
 8004c68:	40020058 	.word	0x40020058
 8004c6c:	40020070 	.word	0x40020070
 8004c70:	40020088 	.word	0x40020088
 8004c74:	400200a0 	.word	0x400200a0
 8004c78:	400200b8 	.word	0x400200b8
 8004c7c:	40020410 	.word	0x40020410
 8004c80:	40020428 	.word	0x40020428
 8004c84:	40020440 	.word	0x40020440
 8004c88:	40020458 	.word	0x40020458
 8004c8c:	40020470 	.word	0x40020470
 8004c90:	40020488 	.word	0x40020488
 8004c94:	400204a0 	.word	0x400204a0
 8004c98:	400204b8 	.word	0x400204b8

08004c9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a7f      	ldr	r2, [pc, #508]	@ (8004eb8 <DMA_SetConfig+0x21c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d072      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a7d      	ldr	r2, [pc, #500]	@ (8004ebc <DMA_SetConfig+0x220>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d06d      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a7c      	ldr	r2, [pc, #496]	@ (8004ec0 <DMA_SetConfig+0x224>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d068      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a7a      	ldr	r2, [pc, #488]	@ (8004ec4 <DMA_SetConfig+0x228>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d063      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a79      	ldr	r2, [pc, #484]	@ (8004ec8 <DMA_SetConfig+0x22c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d05e      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a77      	ldr	r2, [pc, #476]	@ (8004ecc <DMA_SetConfig+0x230>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d059      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a76      	ldr	r2, [pc, #472]	@ (8004ed0 <DMA_SetConfig+0x234>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d054      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a74      	ldr	r2, [pc, #464]	@ (8004ed4 <DMA_SetConfig+0x238>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d04f      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a73      	ldr	r2, [pc, #460]	@ (8004ed8 <DMA_SetConfig+0x23c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d04a      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a71      	ldr	r2, [pc, #452]	@ (8004edc <DMA_SetConfig+0x240>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d045      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a70      	ldr	r2, [pc, #448]	@ (8004ee0 <DMA_SetConfig+0x244>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d040      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a6e      	ldr	r2, [pc, #440]	@ (8004ee4 <DMA_SetConfig+0x248>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d03b      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a6d      	ldr	r2, [pc, #436]	@ (8004ee8 <DMA_SetConfig+0x24c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d036      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a6b      	ldr	r2, [pc, #428]	@ (8004eec <DMA_SetConfig+0x250>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d031      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a6a      	ldr	r2, [pc, #424]	@ (8004ef0 <DMA_SetConfig+0x254>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d02c      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a68      	ldr	r2, [pc, #416]	@ (8004ef4 <DMA_SetConfig+0x258>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d027      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a67      	ldr	r2, [pc, #412]	@ (8004ef8 <DMA_SetConfig+0x25c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d022      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a65      	ldr	r2, [pc, #404]	@ (8004efc <DMA_SetConfig+0x260>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d01d      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a64      	ldr	r2, [pc, #400]	@ (8004f00 <DMA_SetConfig+0x264>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d018      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a62      	ldr	r2, [pc, #392]	@ (8004f04 <DMA_SetConfig+0x268>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a61      	ldr	r2, [pc, #388]	@ (8004f08 <DMA_SetConfig+0x26c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00e      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a5f      	ldr	r2, [pc, #380]	@ (8004f0c <DMA_SetConfig+0x270>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d009      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a5e      	ldr	r2, [pc, #376]	@ (8004f10 <DMA_SetConfig+0x274>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d004      	beq.n	8004da6 <DMA_SetConfig+0x10a>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5c      	ldr	r2, [pc, #368]	@ (8004f14 <DMA_SetConfig+0x278>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d101      	bne.n	8004daa <DMA_SetConfig+0x10e>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <DMA_SetConfig+0x110>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00d      	beq.n	8004dcc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004db8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d004      	beq.n	8004dcc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004dca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a39      	ldr	r2, [pc, #228]	@ (8004eb8 <DMA_SetConfig+0x21c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d04a      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a38      	ldr	r2, [pc, #224]	@ (8004ebc <DMA_SetConfig+0x220>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d045      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a36      	ldr	r2, [pc, #216]	@ (8004ec0 <DMA_SetConfig+0x224>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d040      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a35      	ldr	r2, [pc, #212]	@ (8004ec4 <DMA_SetConfig+0x228>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d03b      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a33      	ldr	r2, [pc, #204]	@ (8004ec8 <DMA_SetConfig+0x22c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d036      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a32      	ldr	r2, [pc, #200]	@ (8004ecc <DMA_SetConfig+0x230>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d031      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a30      	ldr	r2, [pc, #192]	@ (8004ed0 <DMA_SetConfig+0x234>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d02c      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2f      	ldr	r2, [pc, #188]	@ (8004ed4 <DMA_SetConfig+0x238>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d027      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a2d      	ldr	r2, [pc, #180]	@ (8004ed8 <DMA_SetConfig+0x23c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d022      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004edc <DMA_SetConfig+0x240>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d01d      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee0 <DMA_SetConfig+0x244>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d018      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a29      	ldr	r2, [pc, #164]	@ (8004ee4 <DMA_SetConfig+0x248>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a27      	ldr	r2, [pc, #156]	@ (8004ee8 <DMA_SetConfig+0x24c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00e      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a26      	ldr	r2, [pc, #152]	@ (8004eec <DMA_SetConfig+0x250>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d009      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a24      	ldr	r2, [pc, #144]	@ (8004ef0 <DMA_SetConfig+0x254>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <DMA_SetConfig+0x1d0>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a23      	ldr	r2, [pc, #140]	@ (8004ef4 <DMA_SetConfig+0x258>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d101      	bne.n	8004e70 <DMA_SetConfig+0x1d4>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <DMA_SetConfig+0x1d6>
 8004e70:	2300      	movs	r3, #0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d059      	beq.n	8004f2a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	223f      	movs	r2, #63	@ 0x3f
 8004e80:	409a      	lsls	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e94:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b40      	cmp	r3, #64	@ 0x40
 8004ea4:	d138      	bne.n	8004f18 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004eb6:	e0ae      	b.n	8005016 <DMA_SetConfig+0x37a>
 8004eb8:	40020010 	.word	0x40020010
 8004ebc:	40020028 	.word	0x40020028
 8004ec0:	40020040 	.word	0x40020040
 8004ec4:	40020058 	.word	0x40020058
 8004ec8:	40020070 	.word	0x40020070
 8004ecc:	40020088 	.word	0x40020088
 8004ed0:	400200a0 	.word	0x400200a0
 8004ed4:	400200b8 	.word	0x400200b8
 8004ed8:	40020410 	.word	0x40020410
 8004edc:	40020428 	.word	0x40020428
 8004ee0:	40020440 	.word	0x40020440
 8004ee4:	40020458 	.word	0x40020458
 8004ee8:	40020470 	.word	0x40020470
 8004eec:	40020488 	.word	0x40020488
 8004ef0:	400204a0 	.word	0x400204a0
 8004ef4:	400204b8 	.word	0x400204b8
 8004ef8:	58025408 	.word	0x58025408
 8004efc:	5802541c 	.word	0x5802541c
 8004f00:	58025430 	.word	0x58025430
 8004f04:	58025444 	.word	0x58025444
 8004f08:	58025458 	.word	0x58025458
 8004f0c:	5802546c 	.word	0x5802546c
 8004f10:	58025480 	.word	0x58025480
 8004f14:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]
}
 8004f28:	e075      	b.n	8005016 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a3d      	ldr	r2, [pc, #244]	@ (8005024 <DMA_SetConfig+0x388>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d04a      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a3b      	ldr	r2, [pc, #236]	@ (8005028 <DMA_SetConfig+0x38c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d045      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a3a      	ldr	r2, [pc, #232]	@ (800502c <DMA_SetConfig+0x390>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d040      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a38      	ldr	r2, [pc, #224]	@ (8005030 <DMA_SetConfig+0x394>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d03b      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a37      	ldr	r2, [pc, #220]	@ (8005034 <DMA_SetConfig+0x398>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d036      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a35      	ldr	r2, [pc, #212]	@ (8005038 <DMA_SetConfig+0x39c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d031      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a34      	ldr	r2, [pc, #208]	@ (800503c <DMA_SetConfig+0x3a0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d02c      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a32      	ldr	r2, [pc, #200]	@ (8005040 <DMA_SetConfig+0x3a4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d027      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a31      	ldr	r2, [pc, #196]	@ (8005044 <DMA_SetConfig+0x3a8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d022      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2f      	ldr	r2, [pc, #188]	@ (8005048 <DMA_SetConfig+0x3ac>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d01d      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2e      	ldr	r2, [pc, #184]	@ (800504c <DMA_SetConfig+0x3b0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d018      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005050 <DMA_SetConfig+0x3b4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2b      	ldr	r2, [pc, #172]	@ (8005054 <DMA_SetConfig+0x3b8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00e      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a29      	ldr	r2, [pc, #164]	@ (8005058 <DMA_SetConfig+0x3bc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d009      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a28      	ldr	r2, [pc, #160]	@ (800505c <DMA_SetConfig+0x3c0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d004      	beq.n	8004fca <DMA_SetConfig+0x32e>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a26      	ldr	r2, [pc, #152]	@ (8005060 <DMA_SetConfig+0x3c4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d101      	bne.n	8004fce <DMA_SetConfig+0x332>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <DMA_SetConfig+0x334>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	2201      	movs	r2, #1
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b40      	cmp	r3, #64	@ 0x40
 8004ff2:	d108      	bne.n	8005006 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	60da      	str	r2, [r3, #12]
}
 8005004:	e007      	b.n	8005016 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	48022c08 	.word	0x48022c08
 8005028:	48022c1c 	.word	0x48022c1c
 800502c:	48022c30 	.word	0x48022c30
 8005030:	48022c44 	.word	0x48022c44
 8005034:	48022c58 	.word	0x48022c58
 8005038:	48022c6c 	.word	0x48022c6c
 800503c:	48022c80 	.word	0x48022c80
 8005040:	48022c94 	.word	0x48022c94
 8005044:	58025408 	.word	0x58025408
 8005048:	5802541c 	.word	0x5802541c
 800504c:	58025430 	.word	0x58025430
 8005050:	58025444 	.word	0x58025444
 8005054:	58025458 	.word	0x58025458
 8005058:	5802546c 	.word	0x5802546c
 800505c:	58025480 	.word	0x58025480
 8005060:	58025494 	.word	0x58025494

08005064 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a42      	ldr	r2, [pc, #264]	@ (800517c <DMA_CalcBaseAndBitshift+0x118>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d04a      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a41      	ldr	r2, [pc, #260]	@ (8005180 <DMA_CalcBaseAndBitshift+0x11c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d045      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a3f      	ldr	r2, [pc, #252]	@ (8005184 <DMA_CalcBaseAndBitshift+0x120>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d040      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a3e      	ldr	r2, [pc, #248]	@ (8005188 <DMA_CalcBaseAndBitshift+0x124>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d03b      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a3c      	ldr	r2, [pc, #240]	@ (800518c <DMA_CalcBaseAndBitshift+0x128>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d036      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a3b      	ldr	r2, [pc, #236]	@ (8005190 <DMA_CalcBaseAndBitshift+0x12c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d031      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a39      	ldr	r2, [pc, #228]	@ (8005194 <DMA_CalcBaseAndBitshift+0x130>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d02c      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a38      	ldr	r2, [pc, #224]	@ (8005198 <DMA_CalcBaseAndBitshift+0x134>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d027      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a36      	ldr	r2, [pc, #216]	@ (800519c <DMA_CalcBaseAndBitshift+0x138>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d022      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a35      	ldr	r2, [pc, #212]	@ (80051a0 <DMA_CalcBaseAndBitshift+0x13c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d01d      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a33      	ldr	r2, [pc, #204]	@ (80051a4 <DMA_CalcBaseAndBitshift+0x140>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d018      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a32      	ldr	r2, [pc, #200]	@ (80051a8 <DMA_CalcBaseAndBitshift+0x144>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d013      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a30      	ldr	r2, [pc, #192]	@ (80051ac <DMA_CalcBaseAndBitshift+0x148>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00e      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2f      	ldr	r2, [pc, #188]	@ (80051b0 <DMA_CalcBaseAndBitshift+0x14c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d009      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a2d      	ldr	r2, [pc, #180]	@ (80051b4 <DMA_CalcBaseAndBitshift+0x150>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d004      	beq.n	800510c <DMA_CalcBaseAndBitshift+0xa8>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a2c      	ldr	r2, [pc, #176]	@ (80051b8 <DMA_CalcBaseAndBitshift+0x154>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d101      	bne.n	8005110 <DMA_CalcBaseAndBitshift+0xac>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <DMA_CalcBaseAndBitshift+0xae>
 8005110:	2300      	movs	r3, #0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d024      	beq.n	8005160 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	3b10      	subs	r3, #16
 800511e:	4a27      	ldr	r2, [pc, #156]	@ (80051bc <DMA_CalcBaseAndBitshift+0x158>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	4a24      	ldr	r2, [pc, #144]	@ (80051c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005130:	5cd3      	ldrb	r3, [r2, r3]
 8005132:	461a      	mov	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d908      	bls.n	8005150 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	4b1f      	ldr	r3, [pc, #124]	@ (80051c4 <DMA_CalcBaseAndBitshift+0x160>)
 8005146:	4013      	ands	r3, r2
 8005148:	1d1a      	adds	r2, r3, #4
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	659a      	str	r2, [r3, #88]	@ 0x58
 800514e:	e00d      	b.n	800516c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	4b1b      	ldr	r3, [pc, #108]	@ (80051c4 <DMA_CalcBaseAndBitshift+0x160>)
 8005158:	4013      	ands	r3, r2
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6593      	str	r3, [r2, #88]	@ 0x58
 800515e:	e005      	b.n	800516c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40020010 	.word	0x40020010
 8005180:	40020028 	.word	0x40020028
 8005184:	40020040 	.word	0x40020040
 8005188:	40020058 	.word	0x40020058
 800518c:	40020070 	.word	0x40020070
 8005190:	40020088 	.word	0x40020088
 8005194:	400200a0 	.word	0x400200a0
 8005198:	400200b8 	.word	0x400200b8
 800519c:	40020410 	.word	0x40020410
 80051a0:	40020428 	.word	0x40020428
 80051a4:	40020440 	.word	0x40020440
 80051a8:	40020458 	.word	0x40020458
 80051ac:	40020470 	.word	0x40020470
 80051b0:	40020488 	.word	0x40020488
 80051b4:	400204a0 	.word	0x400204a0
 80051b8:	400204b8 	.word	0x400204b8
 80051bc:	aaaaaaab 	.word	0xaaaaaaab
 80051c0:	0800b060 	.word	0x0800b060
 80051c4:	fffffc00 	.word	0xfffffc00

080051c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d120      	bne.n	800521e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d858      	bhi.n	8005296 <DMA_CheckFifoParam+0xce>
 80051e4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <DMA_CheckFifoParam+0x24>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	080051fd 	.word	0x080051fd
 80051f0:	0800520f 	.word	0x0800520f
 80051f4:	080051fd 	.word	0x080051fd
 80051f8:	08005297 	.word	0x08005297
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d048      	beq.n	800529a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800520c:	e045      	b.n	800529a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005216:	d142      	bne.n	800529e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800521c:	e03f      	b.n	800529e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005226:	d123      	bne.n	8005270 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522c:	2b03      	cmp	r3, #3
 800522e:	d838      	bhi.n	80052a2 <DMA_CheckFifoParam+0xda>
 8005230:	a201      	add	r2, pc, #4	@ (adr r2, 8005238 <DMA_CheckFifoParam+0x70>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	08005249 	.word	0x08005249
 800523c:	0800524f 	.word	0x0800524f
 8005240:	08005249 	.word	0x08005249
 8005244:	08005261 	.word	0x08005261
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
        break;
 800524c:	e030      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d025      	beq.n	80052a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800525e:	e022      	b.n	80052a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005268:	d11f      	bne.n	80052aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800526e:	e01c      	b.n	80052aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005274:	2b02      	cmp	r3, #2
 8005276:	d902      	bls.n	800527e <DMA_CheckFifoParam+0xb6>
 8005278:	2b03      	cmp	r3, #3
 800527a:	d003      	beq.n	8005284 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800527c:	e018      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
        break;
 8005282:	e015      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005288:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00e      	beq.n	80052ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
    break;
 8005294:	e00b      	b.n	80052ae <DMA_CheckFifoParam+0xe6>
        break;
 8005296:	bf00      	nop
 8005298:	e00a      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
        break;
 800529a:	bf00      	nop
 800529c:	e008      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
        break;
 800529e:	bf00      	nop
 80052a0:	e006      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
        break;
 80052a2:	bf00      	nop
 80052a4:	e004      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
        break;
 80052a6:	bf00      	nop
 80052a8:	e002      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
        break;
 80052aa:	bf00      	nop
 80052ac:	e000      	b.n	80052b0 <DMA_CheckFifoParam+0xe8>
    break;
 80052ae:	bf00      	nop
    }
  }

  return status;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop

080052c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a38      	ldr	r2, [pc, #224]	@ (80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d022      	beq.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a36      	ldr	r2, [pc, #216]	@ (80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d01d      	beq.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a35      	ldr	r2, [pc, #212]	@ (80053bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d018      	beq.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a33      	ldr	r2, [pc, #204]	@ (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a32      	ldr	r2, [pc, #200]	@ (80053c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00e      	beq.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a30      	ldr	r2, [pc, #192]	@ (80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d009      	beq.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2f      	ldr	r2, [pc, #188]	@ (80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d004      	beq.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2d      	ldr	r2, [pc, #180]	@ (80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d101      	bne.n	8005322 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005322:	2300      	movs	r3, #0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01a      	beq.n	800535e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	3b08      	subs	r3, #8
 8005330:	4a28      	ldr	r2, [pc, #160]	@ (80053d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4b26      	ldr	r3, [pc, #152]	@ (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	461a      	mov	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a24      	ldr	r2, [pc, #144]	@ (80053dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800534c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2201      	movs	r2, #1
 8005356:	409a      	lsls	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800535c:	e024      	b.n	80053a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	3b10      	subs	r3, #16
 8005366:	4a1e      	ldr	r2, [pc, #120]	@ (80053e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	091b      	lsrs	r3, r3, #4
 800536e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a1c      	ldr	r2, [pc, #112]	@ (80053e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d806      	bhi.n	8005386 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d902      	bls.n	8005386 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3308      	adds	r3, #8
 8005384:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4b18      	ldr	r3, [pc, #96]	@ (80053ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a16      	ldr	r2, [pc, #88]	@ (80053f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005398:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	2201      	movs	r2, #1
 80053a2:	409a      	lsls	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	58025408 	.word	0x58025408
 80053b8:	5802541c 	.word	0x5802541c
 80053bc:	58025430 	.word	0x58025430
 80053c0:	58025444 	.word	0x58025444
 80053c4:	58025458 	.word	0x58025458
 80053c8:	5802546c 	.word	0x5802546c
 80053cc:	58025480 	.word	0x58025480
 80053d0:	58025494 	.word	0x58025494
 80053d4:	cccccccd 	.word	0xcccccccd
 80053d8:	16009600 	.word	0x16009600
 80053dc:	58025880 	.word	0x58025880
 80053e0:	aaaaaaab 	.word	0xaaaaaaab
 80053e4:	400204b8 	.word	0x400204b8
 80053e8:	4002040f 	.word	0x4002040f
 80053ec:	10008200 	.word	0x10008200
 80053f0:	40020880 	.word	0x40020880

080053f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d04a      	beq.n	80054a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d847      	bhi.n	80054a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a25      	ldr	r2, [pc, #148]	@ (80054ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d022      	beq.n	8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a24      	ldr	r2, [pc, #144]	@ (80054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d01d      	beq.n	8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a22      	ldr	r2, [pc, #136]	@ (80054b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d018      	beq.n	8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a21      	ldr	r2, [pc, #132]	@ (80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d013      	beq.n	8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1f      	ldr	r2, [pc, #124]	@ (80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00e      	beq.n	8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1e      	ldr	r2, [pc, #120]	@ (80054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d009      	beq.n	8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1c      	ldr	r2, [pc, #112]	@ (80054c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d004      	beq.n	8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1b      	ldr	r2, [pc, #108]	@ (80054c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d101      	bne.n	8005464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005464:	2300      	movs	r3, #0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4b17      	ldr	r3, [pc, #92]	@ (80054cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	461a      	mov	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a15      	ldr	r2, [pc, #84]	@ (80054d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800547c:	671a      	str	r2, [r3, #112]	@ 0x70
 800547e:	e009      	b.n	8005494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4b14      	ldr	r3, [pc, #80]	@ (80054d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	461a      	mov	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a11      	ldr	r2, [pc, #68]	@ (80054d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005492:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3b01      	subs	r3, #1
 8005498:	2201      	movs	r2, #1
 800549a:	409a      	lsls	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80054a0:	bf00      	nop
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	58025408 	.word	0x58025408
 80054b0:	5802541c 	.word	0x5802541c
 80054b4:	58025430 	.word	0x58025430
 80054b8:	58025444 	.word	0x58025444
 80054bc:	58025458 	.word	0x58025458
 80054c0:	5802546c 	.word	0x5802546c
 80054c4:	58025480 	.word	0x58025480
 80054c8:	58025494 	.word	0x58025494
 80054cc:	1600963f 	.word	0x1600963f
 80054d0:	58025940 	.word	0x58025940
 80054d4:	1000823f 	.word	0x1000823f
 80054d8:	40020940 	.word	0x40020940

080054dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b098      	sub	sp, #96	@ 0x60
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80054e4:	4a84      	ldr	r2, [pc, #528]	@ (80056f8 <HAL_FDCAN_Init+0x21c>)
 80054e6:	f107 030c 	add.w	r3, r7, #12
 80054ea:	4611      	mov	r1, r2
 80054ec:	224c      	movs	r2, #76	@ 0x4c
 80054ee:	4618      	mov	r0, r3
 80054f0:	f005 fd6e 	bl	800afd0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e1c6      	b.n	800588c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a7e      	ldr	r2, [pc, #504]	@ (80056fc <HAL_FDCAN_Init+0x220>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d106      	bne.n	8005516 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005510:	461a      	mov	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fb feac 	bl	8001288 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0210 	bic.w	r2, r2, #16
 800553e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005540:	f7fc fba2 	bl	8001c88 <HAL_GetTick>
 8005544:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005546:	e014      	b.n	8005572 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005548:	f7fc fb9e 	bl	8001c88 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b0a      	cmp	r3, #10
 8005554:	d90d      	bls.n	8005572 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800555c:	f043 0201 	orr.w	r2, r3, #1
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2203      	movs	r2, #3
 800556a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e18c      	b.n	800588c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b08      	cmp	r3, #8
 800557e:	d0e3      	beq.n	8005548 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005590:	f7fc fb7a 	bl	8001c88 <HAL_GetTick>
 8005594:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005596:	e014      	b.n	80055c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005598:	f7fc fb76 	bl	8001c88 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b0a      	cmp	r3, #10
 80055a4:	d90d      	bls.n	80055c2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055ac:	f043 0201 	orr.w	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2203      	movs	r2, #3
 80055ba:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e164      	b.n	800588c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0e3      	beq.n	8005598 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0202 	orr.w	r2, r2, #2
 80055de:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	7c1b      	ldrb	r3, [r3, #16]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d108      	bne.n	80055fa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055f6:	619a      	str	r2, [r3, #24]
 80055f8:	e007      	b.n	800560a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005608:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	7c5b      	ldrb	r3, [r3, #17]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d108      	bne.n	8005624 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005620:	619a      	str	r2, [r3, #24]
 8005622:	e007      	b.n	8005634 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005632:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7c9b      	ldrb	r3, [r3, #18]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d108      	bne.n	800564e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800564a:	619a      	str	r2, [r3, #24]
 800564c:	e007      	b.n	800565e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699a      	ldr	r2, [r3, #24]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800565c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005682:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0210 	bic.w	r2, r2, #16
 8005692:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d108      	bne.n	80056ae <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0204 	orr.w	r2, r2, #4
 80056aa:	619a      	str	r2, [r3, #24]
 80056ac:	e030      	b.n	8005710 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d02c      	beq.n	8005710 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d020      	beq.n	8005700 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056cc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0210 	orr.w	r2, r2, #16
 80056dc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d114      	bne.n	8005710 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699a      	ldr	r2, [r3, #24]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0220 	orr.w	r2, r2, #32
 80056f4:	619a      	str	r2, [r3, #24]
 80056f6:	e00b      	b.n	8005710 <HAL_FDCAN_Init+0x234>
 80056f8:	0800b004 	.word	0x0800b004
 80056fc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0220 	orr.w	r2, r2, #32
 800570e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	3b01      	subs	r3, #1
 8005716:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	3b01      	subs	r3, #1
 800571e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005720:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005728:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	3b01      	subs	r3, #1
 8005732:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005738:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800573a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005744:	d115      	bne.n	8005772 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	3b01      	subs	r3, #1
 8005752:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005754:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	3b01      	subs	r3, #1
 800575c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800575e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005766:	3b01      	subs	r3, #1
 8005768:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800576e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005770:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005798:	4413      	add	r3, r2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d011      	beq.n	80057c2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80057a6:	f023 0107 	bic.w	r1, r3, #7
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	3360      	adds	r3, #96	@ 0x60
 80057b2:	443b      	add	r3, r7
 80057b4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d011      	beq.n	80057ee <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057d2:	f023 0107 	bic.w	r1, r3, #7
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	3360      	adds	r3, #96	@ 0x60
 80057de:	443b      	add	r3, r7
 80057e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d012      	beq.n	800581c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057fe:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	3360      	adds	r3, #96	@ 0x60
 800580a:	443b      	add	r3, r7
 800580c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005810:	011a      	lsls	r2, r3, #4
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800582c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	3360      	adds	r3, #96	@ 0x60
 8005838:	443b      	add	r3, r7
 800583a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800583e:	021a      	lsls	r2, r3, #8
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a11      	ldr	r2, [pc, #68]	@ (8005894 <HAL_FDCAN_Init+0x3b8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d107      	bne.n	8005864 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f022 0203 	bic.w	r2, r2, #3
 8005862:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fd81 	bl	8006384 <FDCAN_CalcultateRamBlockAddresses>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005888:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800588c:	4618      	mov	r0, r3
 800588e:	3760      	adds	r7, #96	@ 0x60
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	4000a000 	.word	0x4000a000

08005898 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d111      	bne.n	80058d0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0201 	bic.w	r2, r2, #1
 80058c2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e008      	b.n	80058e2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d6:	f043 0204 	orr.w	r2, r3, #4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
  }
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b086      	sub	sp, #24
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d141      	bne.n	800598a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800590e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e038      	b.n	800599c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005940:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e026      	b.n	800599c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005956:	0c1b      	lsrs	r3, r3, #16
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 fe93 	bl	8006690 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2101      	movs	r1, #1
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	fa01 f202 	lsl.w	r2, r1, r2
 8005976:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800597a:	2201      	movs	r2, #1
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	409a      	lsls	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	e008      	b.n	800599c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005990:	f043 0208 	orr.w	r2, r3, #8
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
  }
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b08b      	sub	sp, #44	@ 0x2c
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80059bc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80059be:	7efb      	ldrb	r3, [r7, #27]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	f040 8149 	bne.w	8005c58 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b40      	cmp	r3, #64	@ 0x40
 80059ca:	d14c      	bne.n	8005a66 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059d4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e13c      	b.n	8005c6a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e12a      	b.n	8005c6a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a1c:	0e1b      	lsrs	r3, r3, #24
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d10a      	bne.n	8005a3c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a2e:	0fdb      	lsrs	r3, r3, #31
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a58:	69f9      	ldr	r1, [r7, #28]
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a64:	e068      	b.n	8005b38 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b41      	cmp	r3, #65	@ 0x41
 8005a6a:	d14c      	bne.n	8005b06 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a74:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d109      	bne.n	8005a90 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a82:	f043 0220 	orr.w	r2, r3, #32
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0ec      	b.n	8005c6a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0da      	b.n	8005c6a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005abc:	0e1b      	lsrs	r3, r3, #24
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d10a      	bne.n	8005adc <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ace:	0fdb      	lsrs	r3, r3, #31
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ae4:	0a1b      	lsrs	r3, r3, #8
 8005ae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af8:	69f9      	ldr	r1, [r7, #28]
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b04:	e018      	b.n	8005b38 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d309      	bcc.n	8005b24 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b16:	f043 0220 	orr.w	r2, r3, #32
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0a2      	b.n	8005c6a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	fb01 f303 	mul.w	r3, r1, r3
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d107      	bne.n	8005b5c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	0c9b      	lsrs	r3, r3, #18
 8005b52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e005      	b.n	8005b68 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	3304      	adds	r3, #4
 8005b84:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	f003 020f 	and.w	r2, r3, #15
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	0e1b      	lsrs	r3, r3, #24
 8005bbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	0fda      	lsrs	r2, r3, #31
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	623b      	str	r3, [r7, #32]
 8005bdc:	e00a      	b.n	8005bf4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	441a      	add	r2, r3
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	440b      	add	r3, r1
 8005bea:	7812      	ldrb	r2, [r2, #0]
 8005bec:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	623b      	str	r3, [r7, #32]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c78 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005bfa:	5cd3      	ldrb	r3, [r2, r3]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d3ec      	bcc.n	8005bde <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b40      	cmp	r3, #64	@ 0x40
 8005c08:	d105      	bne.n	8005c16 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005c14:	e01e      	b.n	8005c54 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b41      	cmp	r3, #65	@ 0x41
 8005c1a:	d105      	bne.n	8005c28 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005c26:	e015      	b.n	8005c54 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b1f      	cmp	r3, #31
 8005c2c:	d808      	bhi.n	8005c40 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2101      	movs	r1, #1
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	fa01 f202 	lsl.w	r2, r1, r2
 8005c3a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005c3e:	e009      	b.n	8005c54 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 021f 	and.w	r2, r3, #31
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e008      	b.n	8005c6a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c5e:	f043 0208 	orr.w	r2, r3, #8
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
  }
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	372c      	adds	r7, #44	@ 0x2c
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	0800b068 	.word	0x0800b068

08005c7c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005c92:	68fb      	ldr	r3, [r7, #12]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005cb2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d002      	beq.n	8005cc0 <HAL_FDCAN_ActivateNotification+0x20>
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d155      	bne.n	8005d6c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d108      	bne.n	8005ce0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005cde:	e014      	b.n	8005d0a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d108      	bne.n	8005d02 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0202 	orr.w	r2, r2, #2
 8005cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d00:	e003      	b.n	8005d0a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2203      	movs	r2, #3
 8005d08:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d009      	beq.n	8005d28 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d8c <HAL_FDCAN_ActivateNotification+0xec>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	430b      	orrs	r3, r1
 8005d58:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d90 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	0f9b      	lsrs	r3, r3, #30
 8005d62:	490b      	ldr	r1, [pc, #44]	@ (8005d90 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e008      	b.n	8005d7e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d72:	f043 0202 	orr.w	r2, r3, #2
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
  }
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	3fcfffff 	.word	0x3fcfffff
 8005d90:	4000a800 	.word	0x4000a800

08005d94 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b096      	sub	sp, #88	@ 0x58
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005d9c:	4b95      	ldr	r3, [pc, #596]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	079b      	lsls	r3, r3, #30
 8005da2:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005da4:	4b93      	ldr	r3, [pc, #588]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	079b      	lsls	r3, r3, #30
 8005daa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005dac:	4013      	ands	r3, r2
 8005dae:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005dba:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ddc:	4013      	ands	r3, r2
 8005dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005df4:	4013      	ands	r3, r2
 8005df6:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfe:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005e02:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e16:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e24:	4013      	ands	r3, r2
 8005e26:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00f      	beq.n	8005e62 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e54:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e56:	4b67      	ldr	r3, [pc, #412]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa44 	bl	80062ea <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01c      	beq.n	8005ea6 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d017      	beq.n	8005ea6 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005e7e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e96:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e98:	4b56      	ldr	r3, [pc, #344]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005e9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f9f9 	bl	8006298 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00d      	beq.n	8005ec8 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005eb2:	4b51      	ldr	r3, [pc, #324]	@ (8005ff8 <HAL_FDCAN_IRQHandler+0x264>)
 8005eb4:	400b      	ands	r3, r1
 8005eb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005eb8:	4a4e      	ldr	r2, [pc, #312]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ebc:	0f9b      	lsrs	r3, r3, #30
 8005ebe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005ec0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f9b2 	bl	800622c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00d      	beq.n	8005eea <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ed4:	4b48      	ldr	r3, [pc, #288]	@ (8005ff8 <HAL_FDCAN_IRQHandler+0x264>)
 8005ed6:	400b      	ands	r3, r1
 8005ed8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005eda:	4a46      	ldr	r2, [pc, #280]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ede:	0f9b      	lsrs	r3, r3, #30
 8005ee0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005ee2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f9ac 	bl	8006242 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00d      	beq.n	8005f0c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005ef6:	4b40      	ldr	r3, [pc, #256]	@ (8005ff8 <HAL_FDCAN_IRQHandler+0x264>)
 8005ef8:	400b      	ands	r3, r1
 8005efa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005efc:	4a3d      	ldr	r2, [pc, #244]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f00:	0f9b      	lsrs	r3, r3, #30
 8005f02:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005f04:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fa fa84 	bl	8000414 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00d      	beq.n	8005f2e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005f18:	4b37      	ldr	r3, [pc, #220]	@ (8005ff8 <HAL_FDCAN_IRQHandler+0x264>)
 8005f1a:	400b      	ands	r3, r1
 8005f1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f1e:	4a35      	ldr	r2, [pc, #212]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f22:	0f9b      	lsrs	r3, r3, #30
 8005f24:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005f26:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f995 	bl	8006258 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00f      	beq.n	8005f58 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f4c:	4b29      	ldr	r3, [pc, #164]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f98b 	bl	800626e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01c      	beq.n	8005f9c <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d017      	beq.n	8005f9c <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f74:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f80:	4013      	ands	r3, r2
 8005f82:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f8e:	4b19      	ldr	r3, [pc, #100]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005f94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f973 	bl	8006282 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00f      	beq.n	8005fc6 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005fb8:	651a      	str	r2, [r3, #80]	@ 0x50
 8005fba:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f974 	bl	80062ae <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d015      	beq.n	8005ffc <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d010      	beq.n	8005ffc <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005fe2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005fe4:	4b03      	ldr	r3, [pc, #12]	@ (8005ff4 <HAL_FDCAN_IRQHandler+0x260>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f969 	bl	80062c2 <HAL_FDCAN_TimestampWraparoundCallback>
 8005ff0:	e004      	b.n	8005ffc <HAL_FDCAN_IRQHandler+0x268>
 8005ff2:	bf00      	nop
 8005ff4:	4000a800 	.word	0x4000a800
 8005ff8:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ffe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00f      	beq.n	8006026 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006008:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006018:	651a      	str	r2, [r3, #80]	@ 0x50
 800601a:	4b81      	ldr	r3, [pc, #516]	@ (8006220 <HAL_FDCAN_IRQHandler+0x48c>)
 800601c:	2200      	movs	r2, #0
 800601e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f958 	bl	80062d6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d014      	beq.n	800605a <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00f      	beq.n	800605a <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006042:	651a      	str	r2, [r3, #80]	@ 0x50
 8006044:	4b76      	ldr	r3, [pc, #472]	@ (8006220 <HAL_FDCAN_IRQHandler+0x48c>)
 8006046:	2200      	movs	r2, #0
 8006048:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006050:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800605a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00d      	beq.n	800607c <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006066:	4b6f      	ldr	r3, [pc, #444]	@ (8006224 <HAL_FDCAN_IRQHandler+0x490>)
 8006068:	400b      	ands	r3, r1
 800606a:	6513      	str	r3, [r2, #80]	@ 0x50
 800606c:	4a6c      	ldr	r2, [pc, #432]	@ (8006220 <HAL_FDCAN_IRQHandler+0x48c>)
 800606e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006070:	0f9b      	lsrs	r3, r3, #30
 8006072:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006074:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f94b 	bl	8006312 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800607c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800607e:	2b00      	cmp	r3, #0
 8006080:	d011      	beq.n	80060a6 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006088:	4b66      	ldr	r3, [pc, #408]	@ (8006224 <HAL_FDCAN_IRQHandler+0x490>)
 800608a:	400b      	ands	r3, r1
 800608c:	6513      	str	r3, [r2, #80]	@ 0x50
 800608e:	4a64      	ldr	r2, [pc, #400]	@ (8006220 <HAL_FDCAN_IRQHandler+0x48c>)
 8006090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006092:	0f9b      	lsrs	r3, r3, #30
 8006094:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800609c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a5f      	ldr	r2, [pc, #380]	@ (8006228 <HAL_FDCAN_IRQHandler+0x494>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	f040 80aa 	bne.w	8006206 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 0303 	and.w	r3, r3, #3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80a2 	beq.w	8006206 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060d6:	4013      	ands	r3, r2
 80060d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ee:	4013      	ands	r3, r2
 80060f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006106:	4013      	ands	r3, r2
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8006114:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	4013      	ands	r3, r2
 8006120:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800612c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	4013      	ands	r3, r2
 8006138:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800614a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006156:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006158:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f8e4 	bl	8006328 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006162:	2b00      	cmp	r3, #0
 8006164:	d007      	beq.n	8006176 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800616c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800616e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8e4 	bl	800633e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d019      	beq.n	80061b4 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d014      	beq.n	80061b4 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006190:	0c1b      	lsrs	r3, r3, #16
 8006192:	b29b      	uxth	r3, r3
 8006194:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061a0:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2240      	movs	r2, #64	@ 0x40
 80061a8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	6939      	ldr	r1, [r7, #16]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f8d0 	bl	8006354 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80061c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f8d1 	bl	800636c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00b      	beq.n	8006206 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f874 	bl	80062fe <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006216:	bf00      	nop
 8006218:	3758      	adds	r7, #88	@ 0x58
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	4000a800 	.word	0x4000a800
 8006224:	3fcfffff 	.word	0x3fcfffff
 8006228:	4000a000 	.word	0x4000a000

0800622c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
	...

08006384 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006390:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800639a:	4ba7      	ldr	r3, [pc, #668]	@ (8006638 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800639c:	4013      	ands	r3, r2
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	0091      	lsls	r1, r2, #2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	430b      	orrs	r3, r1
 80063a8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063b4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063bc:	041a      	lsls	r2, r3, #16
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	4413      	add	r3, r2
 80063d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80063da:	4b97      	ldr	r3, [pc, #604]	@ (8006638 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80063dc:	4013      	ands	r3, r2
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	0091      	lsls	r1, r2, #2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	430b      	orrs	r3, r1
 80063e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fc:	041a      	lsls	r2, r3, #16
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	4413      	add	r3, r2
 8006412:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800641c:	4b86      	ldr	r3, [pc, #536]	@ (8006638 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800641e:	4013      	ands	r3, r2
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	0091      	lsls	r1, r2, #2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6812      	ldr	r2, [r2, #0]
 8006428:	430b      	orrs	r3, r1
 800642a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006436:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	041a      	lsls	r2, r3, #16
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006452:	fb02 f303 	mul.w	r3, r2, r3
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	4413      	add	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006464:	4b74      	ldr	r3, [pc, #464]	@ (8006638 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006466:	4013      	ands	r3, r2
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	0091      	lsls	r1, r2, #2
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	430b      	orrs	r3, r1
 8006472:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800647e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006486:	041a      	lsls	r2, r3, #16
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800649a:	fb02 f303 	mul.w	r3, r2, r3
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80064ac:	4b62      	ldr	r3, [pc, #392]	@ (8006638 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	0091      	lsls	r1, r2, #2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	430b      	orrs	r3, r1
 80064ba:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80064c6:	fb02 f303 	mul.w	r3, r2, r3
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	4413      	add	r3, r2
 80064ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80064d8:	4b57      	ldr	r3, [pc, #348]	@ (8006638 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80064da:	4013      	ands	r3, r2
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	0091      	lsls	r1, r2, #2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	430b      	orrs	r3, r1
 80064e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064f2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064fa:	041a      	lsls	r2, r3, #16
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	4413      	add	r3, r2
 8006510:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800651a:	4b47      	ldr	r3, [pc, #284]	@ (8006638 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800651c:	4013      	ands	r3, r2
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	0091      	lsls	r1, r2, #2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	430b      	orrs	r3, r1
 8006528:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006534:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800653c:	041a      	lsls	r2, r3, #16
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006550:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006558:	061a      	lsls	r2, r3, #24
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006568:	4b34      	ldr	r3, [pc, #208]	@ (800663c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800656a:	4413      	add	r3, r2
 800656c:	009a      	lsls	r2, r3, #2
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	441a      	add	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	441a      	add	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800659e:	fb01 f303 	mul.w	r3, r1, r3
 80065a2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80065a4:	441a      	add	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80065bc:	441a      	add	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80065d4:	441a      	add	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	441a      	add	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	441a      	add	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800661a:	fb01 f303 	mul.w	r3, r1, r3
 800661e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006620:	441a      	add	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800662e:	4a04      	ldr	r2, [pc, #16]	@ (8006640 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d915      	bls.n	8006660 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006634:	e006      	b.n	8006644 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006636:	bf00      	nop
 8006638:	ffff0003 	.word	0xffff0003
 800663c:	10002b00 	.word	0x10002b00
 8006640:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800664a:	f043 0220 	orr.w	r2, r3, #32
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2203      	movs	r2, #3
 8006658:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e010      	b.n	8006682 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	e005      	b.n	8006674 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3304      	adds	r3, #4
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	429a      	cmp	r2, r3
 800667e:	d3f3      	bcc.n	8006668 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop

08006690 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006690:	b480      	push	{r7}
 8006692:	b089      	sub	sp, #36	@ 0x24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80066ae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80066b6:	4313      	orrs	r3, r2
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	e00a      	b.n	80066d2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80066c4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80066ca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80066cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066d0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80066dc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80066e2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80066e8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	3304      	adds	r3, #4
 8006714:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	3304      	adds	r3, #4
 8006720:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006722:	2300      	movs	r3, #0
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	e020      	b.n	800676a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	3303      	adds	r3, #3
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	4413      	add	r3, r2
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	3302      	adds	r3, #2
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	440b      	add	r3, r1
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006740:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	3301      	adds	r3, #1
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	440b      	add	r3, r1
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800674e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	440a      	add	r2, r1
 8006756:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006758:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	3304      	adds	r3, #4
 8006762:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	3304      	adds	r3, #4
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	4a06      	ldr	r2, [pc, #24]	@ (8006788 <FDCAN_CopyMessageToRAM+0xf8>)
 8006770:	5cd3      	ldrb	r3, [r2, r3]
 8006772:	461a      	mov	r2, r3
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	4293      	cmp	r3, r2
 8006778:	d3d6      	bcc.n	8006728 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800677a:	bf00      	nop
 800677c:	bf00      	nop
 800677e:	3724      	adds	r7, #36	@ 0x24
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	0800b068 	.word	0x0800b068

0800678c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800678c:	b480      	push	{r7}
 800678e:	b089      	sub	sp, #36	@ 0x24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800679a:	4b89      	ldr	r3, [pc, #548]	@ (80069c0 <HAL_GPIO_Init+0x234>)
 800679c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800679e:	e194      	b.n	8006aca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	2101      	movs	r1, #1
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ac:	4013      	ands	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8186 	beq.w	8006ac4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d005      	beq.n	80067d0 <HAL_GPIO_Init+0x44>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f003 0303 	and.w	r3, r3, #3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d130      	bne.n	8006832 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	2203      	movs	r2, #3
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	43db      	mvns	r3, r3
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	4013      	ands	r3, r2
 80067e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006806:	2201      	movs	r2, #1
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	43db      	mvns	r3, r3
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	4013      	ands	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	091b      	lsrs	r3, r3, #4
 800681c:	f003 0201 	and.w	r2, r3, #1
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	4313      	orrs	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	2b03      	cmp	r3, #3
 800683c:	d017      	beq.n	800686e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	2203      	movs	r2, #3
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	43db      	mvns	r3, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4013      	ands	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	fa02 f303 	lsl.w	r3, r2, r3
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	4313      	orrs	r3, r2
 8006866:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d123      	bne.n	80068c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	08da      	lsrs	r2, r3, #3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3208      	adds	r2, #8
 8006882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	220f      	movs	r2, #15
 8006892:	fa02 f303 	lsl.w	r3, r2, r3
 8006896:	43db      	mvns	r3, r3
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	4013      	ands	r3, r2
 800689c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	08da      	lsrs	r2, r3, #3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3208      	adds	r2, #8
 80068bc:	69b9      	ldr	r1, [r7, #24]
 80068be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	2203      	movs	r2, #3
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	43db      	mvns	r3, r3
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	4013      	ands	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f003 0203 	and.w	r2, r3, #3
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 80e0 	beq.w	8006ac4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006904:	4b2f      	ldr	r3, [pc, #188]	@ (80069c4 <HAL_GPIO_Init+0x238>)
 8006906:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800690a:	4a2e      	ldr	r2, [pc, #184]	@ (80069c4 <HAL_GPIO_Init+0x238>)
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006914:	4b2b      	ldr	r3, [pc, #172]	@ (80069c4 <HAL_GPIO_Init+0x238>)
 8006916:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006922:	4a29      	ldr	r2, [pc, #164]	@ (80069c8 <HAL_GPIO_Init+0x23c>)
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	089b      	lsrs	r3, r3, #2
 8006928:	3302      	adds	r3, #2
 800692a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800692e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	220f      	movs	r2, #15
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	43db      	mvns	r3, r3
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	4013      	ands	r3, r2
 8006944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a20      	ldr	r2, [pc, #128]	@ (80069cc <HAL_GPIO_Init+0x240>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d052      	beq.n	80069f4 <HAL_GPIO_Init+0x268>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1f      	ldr	r2, [pc, #124]	@ (80069d0 <HAL_GPIO_Init+0x244>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d031      	beq.n	80069ba <HAL_GPIO_Init+0x22e>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1e      	ldr	r2, [pc, #120]	@ (80069d4 <HAL_GPIO_Init+0x248>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d02b      	beq.n	80069b6 <HAL_GPIO_Init+0x22a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a1d      	ldr	r2, [pc, #116]	@ (80069d8 <HAL_GPIO_Init+0x24c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d025      	beq.n	80069b2 <HAL_GPIO_Init+0x226>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a1c      	ldr	r2, [pc, #112]	@ (80069dc <HAL_GPIO_Init+0x250>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01f      	beq.n	80069ae <HAL_GPIO_Init+0x222>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a1b      	ldr	r2, [pc, #108]	@ (80069e0 <HAL_GPIO_Init+0x254>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d019      	beq.n	80069aa <HAL_GPIO_Init+0x21e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a1a      	ldr	r2, [pc, #104]	@ (80069e4 <HAL_GPIO_Init+0x258>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <HAL_GPIO_Init+0x21a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a19      	ldr	r2, [pc, #100]	@ (80069e8 <HAL_GPIO_Init+0x25c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00d      	beq.n	80069a2 <HAL_GPIO_Init+0x216>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a18      	ldr	r2, [pc, #96]	@ (80069ec <HAL_GPIO_Init+0x260>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d007      	beq.n	800699e <HAL_GPIO_Init+0x212>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a17      	ldr	r2, [pc, #92]	@ (80069f0 <HAL_GPIO_Init+0x264>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d101      	bne.n	800699a <HAL_GPIO_Init+0x20e>
 8006996:	2309      	movs	r3, #9
 8006998:	e02d      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 800699a:	230a      	movs	r3, #10
 800699c:	e02b      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 800699e:	2308      	movs	r3, #8
 80069a0:	e029      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069a2:	2307      	movs	r3, #7
 80069a4:	e027      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069a6:	2306      	movs	r3, #6
 80069a8:	e025      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069aa:	2305      	movs	r3, #5
 80069ac:	e023      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069ae:	2304      	movs	r3, #4
 80069b0:	e021      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069b2:	2303      	movs	r3, #3
 80069b4:	e01f      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e01d      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e01b      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069be:	bf00      	nop
 80069c0:	58000080 	.word	0x58000080
 80069c4:	58024400 	.word	0x58024400
 80069c8:	58000400 	.word	0x58000400
 80069cc:	58020000 	.word	0x58020000
 80069d0:	58020400 	.word	0x58020400
 80069d4:	58020800 	.word	0x58020800
 80069d8:	58020c00 	.word	0x58020c00
 80069dc:	58021000 	.word	0x58021000
 80069e0:	58021400 	.word	0x58021400
 80069e4:	58021800 	.word	0x58021800
 80069e8:	58021c00 	.word	0x58021c00
 80069ec:	58022000 	.word	0x58022000
 80069f0:	58022400 	.word	0x58022400
 80069f4:	2300      	movs	r3, #0
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	f002 0203 	and.w	r2, r2, #3
 80069fc:	0092      	lsls	r2, r2, #2
 80069fe:	4093      	lsls	r3, r2
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a06:	4938      	ldr	r1, [pc, #224]	@ (8006ae8 <HAL_GPIO_Init+0x35c>)
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	089b      	lsrs	r3, r3, #2
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4013      	ands	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	4013      	ands	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	43db      	mvns	r3, r3
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f47f ae63 	bne.w	80067a0 <HAL_GPIO_Init+0x14>
  }
}
 8006ada:	bf00      	nop
 8006adc:	bf00      	nop
 8006ade:	3724      	adds	r7, #36	@ 0x24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	58000400 	.word	0x58000400

08006aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	807b      	strh	r3, [r7, #2]
 8006af8:	4613      	mov	r3, r2
 8006afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006afc:	787b      	ldrb	r3, [r7, #1]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b02:	887a      	ldrh	r2, [r7, #2]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006b08:	e003      	b.n	8006b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006b0a:	887b      	ldrh	r3, [r7, #2]
 8006b0c:	041a      	lsls	r2, r3, #16
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	619a      	str	r2, [r3, #24]
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b085      	sub	sp, #20
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	460b      	mov	r3, r1
 8006b28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b30:	887a      	ldrh	r2, [r7, #2]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4013      	ands	r3, r2
 8006b36:	041a      	lsls	r2, r3, #16
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	43d9      	mvns	r1, r3
 8006b3c:	887b      	ldrh	r3, [r7, #2]
 8006b3e:	400b      	ands	r3, r1
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	619a      	str	r2, [r3, #24]
}
 8006b46:	bf00      	nop
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e08b      	b.n	8006c7e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fa fc24 	bl	80013c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2224      	movs	r2, #36	@ 0x24
 8006b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0201 	bic.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006ba4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d107      	bne.n	8006bce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bca:	609a      	str	r2, [r3, #8]
 8006bcc:	e006      	b.n	8006bdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006bda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d108      	bne.n	8006bf6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bf2:	605a      	str	r2, [r3, #4]
 8006bf4:	e007      	b.n	8006c06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6859      	ldr	r1, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	4b1d      	ldr	r3, [pc, #116]	@ (8006c88 <HAL_I2C_Init+0x134>)
 8006c12:	430b      	orrs	r3, r1
 8006c14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	69d9      	ldr	r1, [r3, #28]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a1a      	ldr	r2, [r3, #32]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	02008000 	.word	0x02008000

08006c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d138      	bne.n	8006d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cac:	2302      	movs	r3, #2
 8006cae:	e032      	b.n	8006d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2224      	movs	r2, #36	@ 0x24
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0201 	bic.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6819      	ldr	r1, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d139      	bne.n	8006dac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e033      	b.n	8006dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2224      	movs	r2, #36	@ 0x24
 8006d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	e000      	b.n	8006dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dac:	2302      	movs	r3, #2
  }
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006dc4:	4b19      	ldr	r3, [pc, #100]	@ (8006e2c <HAL_PWREx_ConfigSupply+0x70>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d00a      	beq.n	8006de6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006dd0:	4b16      	ldr	r3, [pc, #88]	@ (8006e2c <HAL_PWREx_ConfigSupply+0x70>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d001      	beq.n	8006de2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e01f      	b.n	8006e22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	e01d      	b.n	8006e22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006de6:	4b11      	ldr	r3, [pc, #68]	@ (8006e2c <HAL_PWREx_ConfigSupply+0x70>)
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f023 0207 	bic.w	r2, r3, #7
 8006dee:	490f      	ldr	r1, [pc, #60]	@ (8006e2c <HAL_PWREx_ConfigSupply+0x70>)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006df6:	f7fa ff47 	bl	8001c88 <HAL_GetTick>
 8006dfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006dfc:	e009      	b.n	8006e12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006dfe:	f7fa ff43 	bl	8001c88 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e0c:	d901      	bls.n	8006e12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e007      	b.n	8006e22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e12:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <HAL_PWREx_ConfigSupply+0x70>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1e:	d1ee      	bne.n	8006dfe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	58024800 	.word	0x58024800

08006e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08c      	sub	sp, #48	@ 0x30
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d102      	bne.n	8006e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f000 bc1f 	b.w	8007682 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 80b3 	beq.w	8006fb8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e52:	4b95      	ldr	r3, [pc, #596]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e5c:	4b92      	ldr	r3, [pc, #584]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d007      	beq.n	8006e78 <HAL_RCC_OscConfig+0x48>
 8006e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e6a:	2b18      	cmp	r3, #24
 8006e6c:	d112      	bne.n	8006e94 <HAL_RCC_OscConfig+0x64>
 8006e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d10d      	bne.n	8006e94 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e78:	4b8b      	ldr	r3, [pc, #556]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 8098 	beq.w	8006fb6 <HAL_RCC_OscConfig+0x186>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f040 8093 	bne.w	8006fb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e3f6      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e9c:	d106      	bne.n	8006eac <HAL_RCC_OscConfig+0x7c>
 8006e9e:	4b82      	ldr	r3, [pc, #520]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a81      	ldr	r2, [pc, #516]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ea8:	6013      	str	r3, [r2, #0]
 8006eaa:	e058      	b.n	8006f5e <HAL_RCC_OscConfig+0x12e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d112      	bne.n	8006eda <HAL_RCC_OscConfig+0xaa>
 8006eb4:	4b7c      	ldr	r3, [pc, #496]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a7b      	ldr	r2, [pc, #492]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	4b79      	ldr	r3, [pc, #484]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a78      	ldr	r2, [pc, #480]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006ec6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	4b76      	ldr	r3, [pc, #472]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a75      	ldr	r2, [pc, #468]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e041      	b.n	8006f5e <HAL_RCC_OscConfig+0x12e>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ee2:	d112      	bne.n	8006f0a <HAL_RCC_OscConfig+0xda>
 8006ee4:	4b70      	ldr	r3, [pc, #448]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a6f      	ldr	r2, [pc, #444]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006eea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	4b6d      	ldr	r3, [pc, #436]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a6c      	ldr	r2, [pc, #432]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006ef6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	4b6a      	ldr	r3, [pc, #424]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a69      	ldr	r2, [pc, #420]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	e029      	b.n	8006f5e <HAL_RCC_OscConfig+0x12e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006f12:	d112      	bne.n	8006f3a <HAL_RCC_OscConfig+0x10a>
 8006f14:	4b64      	ldr	r3, [pc, #400]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a63      	ldr	r2, [pc, #396]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	4b61      	ldr	r3, [pc, #388]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a60      	ldr	r2, [pc, #384]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a5d      	ldr	r2, [pc, #372]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	e011      	b.n	8006f5e <HAL_RCC_OscConfig+0x12e>
 8006f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a5a      	ldr	r2, [pc, #360]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	4b58      	ldr	r3, [pc, #352]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a57      	ldr	r2, [pc, #348]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	4b55      	ldr	r3, [pc, #340]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a54      	ldr	r2, [pc, #336]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f58:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d013      	beq.n	8006f8e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f66:	f7fa fe8f 	bl	8001c88 <HAL_GetTick>
 8006f6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f6c:	e008      	b.n	8006f80 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f6e:	f7fa fe8b 	bl	8001c88 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b64      	cmp	r3, #100	@ 0x64
 8006f7a:	d901      	bls.n	8006f80 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e380      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f80:	4b49      	ldr	r3, [pc, #292]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0f0      	beq.n	8006f6e <HAL_RCC_OscConfig+0x13e>
 8006f8c:	e014      	b.n	8006fb8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8e:	f7fa fe7b 	bl	8001c88 <HAL_GetTick>
 8006f92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f96:	f7fa fe77 	bl	8001c88 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b64      	cmp	r3, #100	@ 0x64
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e36c      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fa8:	4b3f      	ldr	r3, [pc, #252]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f0      	bne.n	8006f96 <HAL_RCC_OscConfig+0x166>
 8006fb4:	e000      	b.n	8006fb8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fb6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 808c 	beq.w	80070de <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fc6:	4b38      	ldr	r3, [pc, #224]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fce:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fd0:	4b35      	ldr	r3, [pc, #212]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <HAL_RCC_OscConfig+0x1bc>
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	2b18      	cmp	r3, #24
 8006fe0:	d137      	bne.n	8007052 <HAL_RCC_OscConfig+0x222>
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d132      	bne.n	8007052 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fec:	4b2e      	ldr	r3, [pc, #184]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <HAL_RCC_OscConfig+0x1d4>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e33e      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007004:	4b28      	ldr	r3, [pc, #160]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f023 0219 	bic.w	r2, r3, #25
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4925      	ldr	r1, [pc, #148]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8007012:	4313      	orrs	r3, r2
 8007014:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007016:	f7fa fe37 	bl	8001c88 <HAL_GetTick>
 800701a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800701c:	e008      	b.n	8007030 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800701e:	f7fa fe33 	bl	8001c88 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d901      	bls.n	8007030 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e328      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007030:	4b1d      	ldr	r3, [pc, #116]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d0f0      	beq.n	800701e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800703c:	4b1a      	ldr	r3, [pc, #104]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	061b      	lsls	r3, r3, #24
 800704a:	4917      	ldr	r1, [pc, #92]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 800704c:	4313      	orrs	r3, r2
 800704e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007050:	e045      	b.n	80070de <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d028      	beq.n	80070ac <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800705a:	4b13      	ldr	r3, [pc, #76]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f023 0219 	bic.w	r2, r3, #25
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	4910      	ldr	r1, [pc, #64]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8007068:	4313      	orrs	r3, r2
 800706a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fa fe0c 	bl	8001c88 <HAL_GetTick>
 8007070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007074:	f7fa fe08 	bl	8001c88 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e2fd      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007086:	4b08      	ldr	r3, [pc, #32]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0304 	and.w	r3, r3, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0f0      	beq.n	8007074 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007092:	4b05      	ldr	r3, [pc, #20]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	061b      	lsls	r3, r3, #24
 80070a0:	4901      	ldr	r1, [pc, #4]	@ (80070a8 <HAL_RCC_OscConfig+0x278>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	604b      	str	r3, [r1, #4]
 80070a6:	e01a      	b.n	80070de <HAL_RCC_OscConfig+0x2ae>
 80070a8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070ac:	4b97      	ldr	r3, [pc, #604]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a96      	ldr	r2, [pc, #600]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 80070b2:	f023 0301 	bic.w	r3, r3, #1
 80070b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b8:	f7fa fde6 	bl	8001c88 <HAL_GetTick>
 80070bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070c0:	f7fa fde2 	bl	8001c88 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e2d7      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80070d2:	4b8e      	ldr	r3, [pc, #568]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d06a      	beq.n	80071c0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ea:	4b88      	ldr	r3, [pc, #544]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070f4:	4b85      	ldr	r3, [pc, #532]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 80070f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d007      	beq.n	8007110 <HAL_RCC_OscConfig+0x2e0>
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b18      	cmp	r3, #24
 8007104:	d11b      	bne.n	800713e <HAL_RCC_OscConfig+0x30e>
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f003 0303 	and.w	r3, r3, #3
 800710c:	2b01      	cmp	r3, #1
 800710e:	d116      	bne.n	800713e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007110:	4b7e      	ldr	r3, [pc, #504]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <HAL_RCC_OscConfig+0x2f8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	2b80      	cmp	r3, #128	@ 0x80
 8007122:	d001      	beq.n	8007128 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e2ac      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007128:	4b78      	ldr	r3, [pc, #480]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	061b      	lsls	r3, r3, #24
 8007136:	4975      	ldr	r1, [pc, #468]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007138:	4313      	orrs	r3, r2
 800713a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800713c:	e040      	b.n	80071c0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d023      	beq.n	800718e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007146:	4b71      	ldr	r3, [pc, #452]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a70      	ldr	r2, [pc, #448]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 800714c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007152:	f7fa fd99 	bl	8001c88 <HAL_GetTick>
 8007156:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800715a:	f7fa fd95 	bl	8001c88 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e28a      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800716c:	4b67      	ldr	r3, [pc, #412]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0f0      	beq.n	800715a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007178:	4b64      	ldr	r3, [pc, #400]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	061b      	lsls	r3, r3, #24
 8007186:	4961      	ldr	r1, [pc, #388]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007188:	4313      	orrs	r3, r2
 800718a:	60cb      	str	r3, [r1, #12]
 800718c:	e018      	b.n	80071c0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800718e:	4b5f      	ldr	r3, [pc, #380]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a5e      	ldr	r2, [pc, #376]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007194:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719a:	f7fa fd75 	bl	8001c88 <HAL_GetTick>
 800719e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071a0:	e008      	b.n	80071b4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80071a2:	f7fa fd71 	bl	8001c88 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e266      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071b4:	4b55      	ldr	r3, [pc, #340]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f0      	bne.n	80071a2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0308 	and.w	r3, r3, #8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d036      	beq.n	800723a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d019      	beq.n	8007208 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071d4:	4b4d      	ldr	r3, [pc, #308]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 80071d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071d8:	4a4c      	ldr	r2, [pc, #304]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 80071da:	f043 0301 	orr.w	r3, r3, #1
 80071de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e0:	f7fa fd52 	bl	8001c88 <HAL_GetTick>
 80071e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071e8:	f7fa fd4e 	bl	8001c88 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e243      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071fa:	4b44      	ldr	r3, [pc, #272]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 80071fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0f0      	beq.n	80071e8 <HAL_RCC_OscConfig+0x3b8>
 8007206:	e018      	b.n	800723a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007208:	4b40      	ldr	r3, [pc, #256]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 800720a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800720c:	4a3f      	ldr	r2, [pc, #252]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 800720e:	f023 0301 	bic.w	r3, r3, #1
 8007212:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007214:	f7fa fd38 	bl	8001c88 <HAL_GetTick>
 8007218:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800721c:	f7fa fd34 	bl	8001c88 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e229      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800722e:	4b37      	ldr	r3, [pc, #220]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b00      	cmp	r3, #0
 8007244:	d036      	beq.n	80072b4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d019      	beq.n	8007282 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800724e:	4b2f      	ldr	r3, [pc, #188]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a2e      	ldr	r2, [pc, #184]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007254:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007258:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800725a:	f7fa fd15 	bl	8001c88 <HAL_GetTick>
 800725e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007260:	e008      	b.n	8007274 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007262:	f7fa fd11 	bl	8001c88 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e206      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007274:	4b25      	ldr	r3, [pc, #148]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0f0      	beq.n	8007262 <HAL_RCC_OscConfig+0x432>
 8007280:	e018      	b.n	80072b4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007282:	4b22      	ldr	r3, [pc, #136]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a21      	ldr	r2, [pc, #132]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007288:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800728c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800728e:	f7fa fcfb 	bl	8001c88 <HAL_GetTick>
 8007292:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007294:	e008      	b.n	80072a8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007296:	f7fa fcf7 	bl	8001c88 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d901      	bls.n	80072a8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e1ec      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072a8:	4b18      	ldr	r3, [pc, #96]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1f0      	bne.n	8007296 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80af 	beq.w	8007420 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072c2:	4b13      	ldr	r3, [pc, #76]	@ (8007310 <HAL_RCC_OscConfig+0x4e0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a12      	ldr	r2, [pc, #72]	@ (8007310 <HAL_RCC_OscConfig+0x4e0>)
 80072c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072ce:	f7fa fcdb 	bl	8001c88 <HAL_GetTick>
 80072d2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d6:	f7fa fcd7 	bl	8001c88 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b64      	cmp	r3, #100	@ 0x64
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e1cc      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072e8:	4b09      	ldr	r3, [pc, #36]	@ (8007310 <HAL_RCC_OscConfig+0x4e0>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d10b      	bne.n	8007314 <HAL_RCC_OscConfig+0x4e4>
 80072fc:	4b03      	ldr	r3, [pc, #12]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 80072fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007300:	4a02      	ldr	r2, [pc, #8]	@ (800730c <HAL_RCC_OscConfig+0x4dc>)
 8007302:	f043 0301 	orr.w	r3, r3, #1
 8007306:	6713      	str	r3, [r2, #112]	@ 0x70
 8007308:	e05b      	b.n	80073c2 <HAL_RCC_OscConfig+0x592>
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
 8007310:	58024800 	.word	0x58024800
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d112      	bne.n	8007342 <HAL_RCC_OscConfig+0x512>
 800731c:	4b9d      	ldr	r3, [pc, #628]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800731e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007320:	4a9c      	ldr	r2, [pc, #624]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007322:	f023 0301 	bic.w	r3, r3, #1
 8007326:	6713      	str	r3, [r2, #112]	@ 0x70
 8007328:	4b9a      	ldr	r3, [pc, #616]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800732a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800732c:	4a99      	ldr	r2, [pc, #612]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800732e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007332:	6713      	str	r3, [r2, #112]	@ 0x70
 8007334:	4b97      	ldr	r3, [pc, #604]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007338:	4a96      	ldr	r2, [pc, #600]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800733a:	f023 0304 	bic.w	r3, r3, #4
 800733e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007340:	e03f      	b.n	80073c2 <HAL_RCC_OscConfig+0x592>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	2b05      	cmp	r3, #5
 8007348:	d112      	bne.n	8007370 <HAL_RCC_OscConfig+0x540>
 800734a:	4b92      	ldr	r3, [pc, #584]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800734e:	4a91      	ldr	r2, [pc, #580]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007350:	f043 0304 	orr.w	r3, r3, #4
 8007354:	6713      	str	r3, [r2, #112]	@ 0x70
 8007356:	4b8f      	ldr	r3, [pc, #572]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735a:	4a8e      	ldr	r2, [pc, #568]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800735c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007360:	6713      	str	r3, [r2, #112]	@ 0x70
 8007362:	4b8c      	ldr	r3, [pc, #560]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007366:	4a8b      	ldr	r2, [pc, #556]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	6713      	str	r3, [r2, #112]	@ 0x70
 800736e:	e028      	b.n	80073c2 <HAL_RCC_OscConfig+0x592>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2b85      	cmp	r3, #133	@ 0x85
 8007376:	d112      	bne.n	800739e <HAL_RCC_OscConfig+0x56e>
 8007378:	4b86      	ldr	r3, [pc, #536]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737c:	4a85      	ldr	r2, [pc, #532]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800737e:	f043 0304 	orr.w	r3, r3, #4
 8007382:	6713      	str	r3, [r2, #112]	@ 0x70
 8007384:	4b83      	ldr	r3, [pc, #524]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007388:	4a82      	ldr	r2, [pc, #520]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800738a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800738e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007390:	4b80      	ldr	r3, [pc, #512]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007394:	4a7f      	ldr	r2, [pc, #508]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007396:	f043 0301 	orr.w	r3, r3, #1
 800739a:	6713      	str	r3, [r2, #112]	@ 0x70
 800739c:	e011      	b.n	80073c2 <HAL_RCC_OscConfig+0x592>
 800739e:	4b7d      	ldr	r3, [pc, #500]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a2:	4a7c      	ldr	r2, [pc, #496]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80073a4:	f023 0301 	bic.w	r3, r3, #1
 80073a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80073aa:	4b7a      	ldr	r3, [pc, #488]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80073ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ae:	4a79      	ldr	r2, [pc, #484]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80073b0:	f023 0304 	bic.w	r3, r3, #4
 80073b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80073b6:	4b77      	ldr	r3, [pc, #476]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80073b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ba:	4a76      	ldr	r2, [pc, #472]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80073bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d015      	beq.n	80073f6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ca:	f7fa fc5d 	bl	8001c88 <HAL_GetTick>
 80073ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073d0:	e00a      	b.n	80073e8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073d2:	f7fa fc59 	bl	8001c88 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e14c      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0ee      	beq.n	80073d2 <HAL_RCC_OscConfig+0x5a2>
 80073f4:	e014      	b.n	8007420 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f6:	f7fa fc47 	bl	8001c88 <HAL_GetTick>
 80073fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073fc:	e00a      	b.n	8007414 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073fe:	f7fa fc43 	bl	8001c88 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800740c:	4293      	cmp	r3, r2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e136      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007414:	4b5f      	ldr	r3, [pc, #380]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1ee      	bne.n	80073fe <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 812b 	beq.w	8007680 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800742a:	4b5a      	ldr	r3, [pc, #360]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007432:	2b18      	cmp	r3, #24
 8007434:	f000 80bb 	beq.w	80075ae <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743c:	2b02      	cmp	r3, #2
 800743e:	f040 8095 	bne.w	800756c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007442:	4b54      	ldr	r3, [pc, #336]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a53      	ldr	r2, [pc, #332]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007448:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800744c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744e:	f7fa fc1b 	bl	8001c88 <HAL_GetTick>
 8007452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007454:	e008      	b.n	8007468 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007456:	f7fa fc17 	bl	8001c88 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d901      	bls.n	8007468 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e10c      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007468:	4b4a      	ldr	r3, [pc, #296]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1f0      	bne.n	8007456 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007474:	4b47      	ldr	r3, [pc, #284]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007476:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007478:	4b47      	ldr	r3, [pc, #284]	@ (8007598 <HAL_RCC_OscConfig+0x768>)
 800747a:	4013      	ands	r3, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007484:	0112      	lsls	r2, r2, #4
 8007486:	430a      	orrs	r2, r1
 8007488:	4942      	ldr	r1, [pc, #264]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800748a:	4313      	orrs	r3, r2
 800748c:	628b      	str	r3, [r1, #40]	@ 0x28
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007492:	3b01      	subs	r3, #1
 8007494:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800749c:	3b01      	subs	r3, #1
 800749e:	025b      	lsls	r3, r3, #9
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a8:	3b01      	subs	r3, #1
 80074aa:	041b      	lsls	r3, r3, #16
 80074ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b6:	3b01      	subs	r3, #1
 80074b8:	061b      	lsls	r3, r3, #24
 80074ba:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80074be:	4935      	ldr	r1, [pc, #212]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80074c4:	4b33      	ldr	r3, [pc, #204]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	4a32      	ldr	r2, [pc, #200]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80074ca:	f023 0301 	bic.w	r3, r3, #1
 80074ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074d0:	4b30      	ldr	r3, [pc, #192]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80074d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074d4:	4b31      	ldr	r3, [pc, #196]	@ (800759c <HAL_RCC_OscConfig+0x76c>)
 80074d6:	4013      	ands	r3, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80074dc:	00d2      	lsls	r2, r2, #3
 80074de:	492d      	ldr	r1, [pc, #180]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80074e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80074e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e8:	f023 020c 	bic.w	r2, r3, #12
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f0:	4928      	ldr	r1, [pc, #160]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80074f6:	4b27      	ldr	r3, [pc, #156]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 80074f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fa:	f023 0202 	bic.w	r2, r3, #2
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007502:	4924      	ldr	r1, [pc, #144]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007504:	4313      	orrs	r3, r2
 8007506:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007508:	4b22      	ldr	r3, [pc, #136]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800750a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750c:	4a21      	ldr	r2, [pc, #132]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800750e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007514:	4b1f      	ldr	r3, [pc, #124]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007518:	4a1e      	ldr	r2, [pc, #120]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800751a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800751e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007520:	4b1c      	ldr	r3, [pc, #112]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	4a1b      	ldr	r2, [pc, #108]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800752a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800752c:	4b19      	ldr	r3, [pc, #100]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800752e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007530:	4a18      	ldr	r2, [pc, #96]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007538:	4b16      	ldr	r3, [pc, #88]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a15      	ldr	r2, [pc, #84]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800753e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007544:	f7fa fba0 	bl	8001c88 <HAL_GetTick>
 8007548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800754a:	e008      	b.n	800755e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800754c:	f7fa fb9c 	bl	8001c88 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d901      	bls.n	800755e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e091      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800755e:	4b0d      	ldr	r3, [pc, #52]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d0f0      	beq.n	800754c <HAL_RCC_OscConfig+0x71c>
 800756a:	e089      	b.n	8007680 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800756c:	4b09      	ldr	r3, [pc, #36]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a08      	ldr	r2, [pc, #32]	@ (8007594 <HAL_RCC_OscConfig+0x764>)
 8007572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007578:	f7fa fb86 	bl	8001c88 <HAL_GetTick>
 800757c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800757e:	e00f      	b.n	80075a0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007580:	f7fa fb82 	bl	8001c88 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d908      	bls.n	80075a0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e077      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
 8007592:	bf00      	nop
 8007594:	58024400 	.word	0x58024400
 8007598:	fffffc0c 	.word	0xfffffc0c
 800759c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075a0:	4b3a      	ldr	r3, [pc, #232]	@ (800768c <HAL_RCC_OscConfig+0x85c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e9      	bne.n	8007580 <HAL_RCC_OscConfig+0x750>
 80075ac:	e068      	b.n	8007680 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80075ae:	4b37      	ldr	r3, [pc, #220]	@ (800768c <HAL_RCC_OscConfig+0x85c>)
 80075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80075b4:	4b35      	ldr	r3, [pc, #212]	@ (800768c <HAL_RCC_OscConfig+0x85c>)
 80075b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d031      	beq.n	8007626 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	f003 0203 	and.w	r2, r3, #3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d12a      	bne.n	8007626 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	091b      	lsrs	r3, r3, #4
 80075d4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075dc:	429a      	cmp	r2, r3
 80075de:	d122      	bne.n	8007626 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d11a      	bne.n	8007626 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	0a5b      	lsrs	r3, r3, #9
 80075f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075fe:	429a      	cmp	r2, r3
 8007600:	d111      	bne.n	8007626 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	0c1b      	lsrs	r3, r3, #16
 8007606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007610:	429a      	cmp	r2, r3
 8007612:	d108      	bne.n	8007626 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	0e1b      	lsrs	r3, r3, #24
 8007618:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007620:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007622:	429a      	cmp	r2, r3
 8007624:	d001      	beq.n	800762a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e02b      	b.n	8007682 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800762a:	4b18      	ldr	r3, [pc, #96]	@ (800768c <HAL_RCC_OscConfig+0x85c>)
 800762c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800762e:	08db      	lsrs	r3, r3, #3
 8007630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007634:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	429a      	cmp	r2, r3
 800763e:	d01f      	beq.n	8007680 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007640:	4b12      	ldr	r3, [pc, #72]	@ (800768c <HAL_RCC_OscConfig+0x85c>)
 8007642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007644:	4a11      	ldr	r2, [pc, #68]	@ (800768c <HAL_RCC_OscConfig+0x85c>)
 8007646:	f023 0301 	bic.w	r3, r3, #1
 800764a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800764c:	f7fa fb1c 	bl	8001c88 <HAL_GetTick>
 8007650:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007652:	bf00      	nop
 8007654:	f7fa fb18 	bl	8001c88 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	4293      	cmp	r3, r2
 800765e:	d0f9      	beq.n	8007654 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007660:	4b0a      	ldr	r3, [pc, #40]	@ (800768c <HAL_RCC_OscConfig+0x85c>)
 8007662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007664:	4b0a      	ldr	r3, [pc, #40]	@ (8007690 <HAL_RCC_OscConfig+0x860>)
 8007666:	4013      	ands	r3, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800766c:	00d2      	lsls	r2, r2, #3
 800766e:	4907      	ldr	r1, [pc, #28]	@ (800768c <HAL_RCC_OscConfig+0x85c>)
 8007670:	4313      	orrs	r3, r2
 8007672:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007674:	4b05      	ldr	r3, [pc, #20]	@ (800768c <HAL_RCC_OscConfig+0x85c>)
 8007676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007678:	4a04      	ldr	r2, [pc, #16]	@ (800768c <HAL_RCC_OscConfig+0x85c>)
 800767a:	f043 0301 	orr.w	r3, r3, #1
 800767e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3730      	adds	r7, #48	@ 0x30
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	58024400 	.word	0x58024400
 8007690:	ffff0007 	.word	0xffff0007

08007694 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e19c      	b.n	80079e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076a8:	4b8a      	ldr	r3, [pc, #552]	@ (80078d4 <HAL_RCC_ClockConfig+0x240>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d910      	bls.n	80076d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076b6:	4b87      	ldr	r3, [pc, #540]	@ (80078d4 <HAL_RCC_ClockConfig+0x240>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f023 020f 	bic.w	r2, r3, #15
 80076be:	4985      	ldr	r1, [pc, #532]	@ (80078d4 <HAL_RCC_ClockConfig+0x240>)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076c6:	4b83      	ldr	r3, [pc, #524]	@ (80078d4 <HAL_RCC_ClockConfig+0x240>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d001      	beq.n	80076d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e184      	b.n	80079e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d010      	beq.n	8007706 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	4b7b      	ldr	r3, [pc, #492]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d908      	bls.n	8007706 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076f4:	4b78      	ldr	r3, [pc, #480]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	4975      	ldr	r1, [pc, #468]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007702:	4313      	orrs	r3, r2
 8007704:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0308 	and.w	r3, r3, #8
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	695a      	ldr	r2, [r3, #20]
 8007716:	4b70      	ldr	r3, [pc, #448]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800771e:	429a      	cmp	r2, r3
 8007720:	d908      	bls.n	8007734 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007722:	4b6d      	ldr	r3, [pc, #436]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	496a      	ldr	r1, [pc, #424]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007730:	4313      	orrs	r3, r2
 8007732:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0310 	and.w	r3, r3, #16
 800773c:	2b00      	cmp	r3, #0
 800773e:	d010      	beq.n	8007762 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	699a      	ldr	r2, [r3, #24]
 8007744:	4b64      	ldr	r3, [pc, #400]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800774c:	429a      	cmp	r2, r3
 800774e:	d908      	bls.n	8007762 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007750:	4b61      	ldr	r3, [pc, #388]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	495e      	ldr	r1, [pc, #376]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 800775e:	4313      	orrs	r3, r2
 8007760:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b00      	cmp	r3, #0
 800776c:	d010      	beq.n	8007790 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69da      	ldr	r2, [r3, #28]
 8007772:	4b59      	ldr	r3, [pc, #356]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800777a:	429a      	cmp	r2, r3
 800777c:	d908      	bls.n	8007790 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800777e:	4b56      	ldr	r3, [pc, #344]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	4953      	ldr	r1, [pc, #332]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 800778c:	4313      	orrs	r3, r2
 800778e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d010      	beq.n	80077be <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	4b4d      	ldr	r3, [pc, #308]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d908      	bls.n	80077be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077ac:	4b4a      	ldr	r3, [pc, #296]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	f023 020f 	bic.w	r2, r3, #15
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4947      	ldr	r1, [pc, #284]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d055      	beq.n	8007876 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80077ca:	4b43      	ldr	r3, [pc, #268]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	4940      	ldr	r1, [pc, #256]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d107      	bne.n	80077f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077e4:	4b3c      	ldr	r3, [pc, #240]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d121      	bne.n	8007834 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e0f6      	b.n	80079e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d107      	bne.n	800780c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80077fc:	4b36      	ldr	r3, [pc, #216]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d115      	bne.n	8007834 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e0ea      	b.n	80079e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d107      	bne.n	8007824 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007814:	4b30      	ldr	r3, [pc, #192]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800781c:	2b00      	cmp	r3, #0
 800781e:	d109      	bne.n	8007834 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e0de      	b.n	80079e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007824:	4b2c      	ldr	r3, [pc, #176]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e0d6      	b.n	80079e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007834:	4b28      	ldr	r3, [pc, #160]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	f023 0207 	bic.w	r2, r3, #7
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	4925      	ldr	r1, [pc, #148]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007842:	4313      	orrs	r3, r2
 8007844:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007846:	f7fa fa1f 	bl	8001c88 <HAL_GetTick>
 800784a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800784c:	e00a      	b.n	8007864 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800784e:	f7fa fa1b 	bl	8001c88 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800785c:	4293      	cmp	r3, r2
 800785e:	d901      	bls.n	8007864 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e0be      	b.n	80079e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007864:	4b1c      	ldr	r3, [pc, #112]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	429a      	cmp	r2, r3
 8007874:	d1eb      	bne.n	800784e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d010      	beq.n	80078a4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	4b14      	ldr	r3, [pc, #80]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	429a      	cmp	r2, r3
 8007890:	d208      	bcs.n	80078a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007892:	4b11      	ldr	r3, [pc, #68]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	f023 020f 	bic.w	r2, r3, #15
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	490e      	ldr	r1, [pc, #56]	@ (80078d8 <HAL_RCC_ClockConfig+0x244>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078a4:	4b0b      	ldr	r3, [pc, #44]	@ (80078d4 <HAL_RCC_ClockConfig+0x240>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d214      	bcs.n	80078dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078b2:	4b08      	ldr	r3, [pc, #32]	@ (80078d4 <HAL_RCC_ClockConfig+0x240>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f023 020f 	bic.w	r2, r3, #15
 80078ba:	4906      	ldr	r1, [pc, #24]	@ (80078d4 <HAL_RCC_ClockConfig+0x240>)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	4313      	orrs	r3, r2
 80078c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078c2:	4b04      	ldr	r3, [pc, #16]	@ (80078d4 <HAL_RCC_ClockConfig+0x240>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d005      	beq.n	80078dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e086      	b.n	80079e2 <HAL_RCC_ClockConfig+0x34e>
 80078d4:	52002000 	.word	0x52002000
 80078d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d010      	beq.n	800790a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	4b3f      	ldr	r3, [pc, #252]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d208      	bcs.n	800790a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078f8:	4b3c      	ldr	r3, [pc, #240]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	4939      	ldr	r1, [pc, #228]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 8007906:	4313      	orrs	r3, r2
 8007908:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d010      	beq.n	8007938 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695a      	ldr	r2, [r3, #20]
 800791a:	4b34      	ldr	r3, [pc, #208]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007922:	429a      	cmp	r2, r3
 8007924:	d208      	bcs.n	8007938 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007926:	4b31      	ldr	r3, [pc, #196]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	492e      	ldr	r1, [pc, #184]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 8007934:	4313      	orrs	r3, r2
 8007936:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	d010      	beq.n	8007966 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	4b28      	ldr	r3, [pc, #160]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007950:	429a      	cmp	r2, r3
 8007952:	d208      	bcs.n	8007966 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007954:	4b25      	ldr	r3, [pc, #148]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	4922      	ldr	r1, [pc, #136]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 8007962:	4313      	orrs	r3, r2
 8007964:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d010      	beq.n	8007994 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69da      	ldr	r2, [r3, #28]
 8007976:	4b1d      	ldr	r3, [pc, #116]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800797e:	429a      	cmp	r2, r3
 8007980:	d208      	bcs.n	8007994 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007982:	4b1a      	ldr	r3, [pc, #104]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	4917      	ldr	r1, [pc, #92]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 8007990:	4313      	orrs	r3, r2
 8007992:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007994:	f000 f834 	bl	8007a00 <HAL_RCC_GetSysClockFreq>
 8007998:	4602      	mov	r2, r0
 800799a:	4b14      	ldr	r3, [pc, #80]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	0a1b      	lsrs	r3, r3, #8
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	4912      	ldr	r1, [pc, #72]	@ (80079f0 <HAL_RCC_ClockConfig+0x35c>)
 80079a6:	5ccb      	ldrb	r3, [r1, r3]
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	fa22 f303 	lsr.w	r3, r2, r3
 80079b0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80079b2:	4b0e      	ldr	r3, [pc, #56]	@ (80079ec <HAL_RCC_ClockConfig+0x358>)
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	4a0d      	ldr	r2, [pc, #52]	@ (80079f0 <HAL_RCC_ClockConfig+0x35c>)
 80079bc:	5cd3      	ldrb	r3, [r2, r3]
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	fa22 f303 	lsr.w	r3, r2, r3
 80079c8:	4a0a      	ldr	r2, [pc, #40]	@ (80079f4 <HAL_RCC_ClockConfig+0x360>)
 80079ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079cc:	4a0a      	ldr	r2, [pc, #40]	@ (80079f8 <HAL_RCC_ClockConfig+0x364>)
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80079d2:	4b0a      	ldr	r3, [pc, #40]	@ (80079fc <HAL_RCC_ClockConfig+0x368>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fa f90c 	bl	8001bf4 <HAL_InitTick>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	58024400 	.word	0x58024400
 80079f0:	0800b050 	.word	0x0800b050
 80079f4:	24000004 	.word	0x24000004
 80079f8:	24000000 	.word	0x24000000
 80079fc:	24000008 	.word	0x24000008

08007a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b089      	sub	sp, #36	@ 0x24
 8007a04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a06:	4bb3      	ldr	r3, [pc, #716]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a0e:	2b18      	cmp	r3, #24
 8007a10:	f200 8155 	bhi.w	8007cbe <HAL_RCC_GetSysClockFreq+0x2be>
 8007a14:	a201      	add	r2, pc, #4	@ (adr r2, 8007a1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1a:	bf00      	nop
 8007a1c:	08007a81 	.word	0x08007a81
 8007a20:	08007cbf 	.word	0x08007cbf
 8007a24:	08007cbf 	.word	0x08007cbf
 8007a28:	08007cbf 	.word	0x08007cbf
 8007a2c:	08007cbf 	.word	0x08007cbf
 8007a30:	08007cbf 	.word	0x08007cbf
 8007a34:	08007cbf 	.word	0x08007cbf
 8007a38:	08007cbf 	.word	0x08007cbf
 8007a3c:	08007aa7 	.word	0x08007aa7
 8007a40:	08007cbf 	.word	0x08007cbf
 8007a44:	08007cbf 	.word	0x08007cbf
 8007a48:	08007cbf 	.word	0x08007cbf
 8007a4c:	08007cbf 	.word	0x08007cbf
 8007a50:	08007cbf 	.word	0x08007cbf
 8007a54:	08007cbf 	.word	0x08007cbf
 8007a58:	08007cbf 	.word	0x08007cbf
 8007a5c:	08007aad 	.word	0x08007aad
 8007a60:	08007cbf 	.word	0x08007cbf
 8007a64:	08007cbf 	.word	0x08007cbf
 8007a68:	08007cbf 	.word	0x08007cbf
 8007a6c:	08007cbf 	.word	0x08007cbf
 8007a70:	08007cbf 	.word	0x08007cbf
 8007a74:	08007cbf 	.word	0x08007cbf
 8007a78:	08007cbf 	.word	0x08007cbf
 8007a7c:	08007ab3 	.word	0x08007ab3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a80:	4b94      	ldr	r3, [pc, #592]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0320 	and.w	r3, r3, #32
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d009      	beq.n	8007aa0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a8c:	4b91      	ldr	r3, [pc, #580]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	08db      	lsrs	r3, r3, #3
 8007a92:	f003 0303 	and.w	r3, r3, #3
 8007a96:	4a90      	ldr	r2, [pc, #576]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a98:	fa22 f303 	lsr.w	r3, r2, r3
 8007a9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007a9e:	e111      	b.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007aa0:	4b8d      	ldr	r3, [pc, #564]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007aa2:	61bb      	str	r3, [r7, #24]
      break;
 8007aa4:	e10e      	b.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007aa6:	4b8d      	ldr	r3, [pc, #564]	@ (8007cdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007aa8:	61bb      	str	r3, [r7, #24]
      break;
 8007aaa:	e10b      	b.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007aac:	4b8c      	ldr	r3, [pc, #560]	@ (8007ce0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007aae:	61bb      	str	r3, [r7, #24]
      break;
 8007ab0:	e108      	b.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ab2:	4b88      	ldr	r3, [pc, #544]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007abc:	4b85      	ldr	r3, [pc, #532]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac0:	091b      	lsrs	r3, r3, #4
 8007ac2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ac6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007ac8:	4b82      	ldr	r3, [pc, #520]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ad2:	4b80      	ldr	r3, [pc, #512]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad6:	08db      	lsrs	r3, r3, #3
 8007ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	fb02 f303 	mul.w	r3, r2, r3
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 80e1 	beq.w	8007cb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	f000 8083 	beq.w	8007c04 <HAL_RCC_GetSysClockFreq+0x204>
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	f200 80a1 	bhi.w	8007c48 <HAL_RCC_GetSysClockFreq+0x248>
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <HAL_RCC_GetSysClockFreq+0x114>
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d056      	beq.n	8007bc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007b12:	e099      	b.n	8007c48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b14:	4b6f      	ldr	r3, [pc, #444]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0320 	and.w	r3, r3, #32
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d02d      	beq.n	8007b7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b20:	4b6c      	ldr	r3, [pc, #432]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	08db      	lsrs	r3, r3, #3
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	4a6b      	ldr	r2, [pc, #428]	@ (8007cd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	ee07 3a90 	vmov	s15, r3
 8007b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4a:	4b62      	ldr	r3, [pc, #392]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007b7a:	e087      	b.n	8007c8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007ce8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8e:	4b51      	ldr	r3, [pc, #324]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ba2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bbe:	e065      	b.n	8007c8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007cec <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd2:	4b40      	ldr	r3, [pc, #256]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007be6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c02:	e043      	b.n	8007c8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007cf0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c16:	4b2f      	ldr	r3, [pc, #188]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c2a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c46:	e021      	b.n	8007c8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c52:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007cec <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c6e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007c8c:	4b11      	ldr	r3, [pc, #68]	@ (8007cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c90:	0a5b      	lsrs	r3, r3, #9
 8007c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c96:	3301      	adds	r3, #1
 8007c98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	ee07 3a90 	vmov	s15, r3
 8007ca0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb0:	ee17 3a90 	vmov	r3, s15
 8007cb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007cb6:	e005      	b.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	61bb      	str	r3, [r7, #24]
      break;
 8007cbc:	e002      	b.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007cbe:	4b07      	ldr	r3, [pc, #28]	@ (8007cdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007cc0:	61bb      	str	r3, [r7, #24]
      break;
 8007cc2:	bf00      	nop
  }

  return sysclockfreq;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3724      	adds	r7, #36	@ 0x24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	58024400 	.word	0x58024400
 8007cd8:	03d09000 	.word	0x03d09000
 8007cdc:	003d0900 	.word	0x003d0900
 8007ce0:	017d7840 	.word	0x017d7840
 8007ce4:	46000000 	.word	0x46000000
 8007ce8:	4c742400 	.word	0x4c742400
 8007cec:	4a742400 	.word	0x4a742400
 8007cf0:	4bbebc20 	.word	0x4bbebc20

08007cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007cfa:	f7ff fe81 	bl	8007a00 <HAL_RCC_GetSysClockFreq>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	4b10      	ldr	r3, [pc, #64]	@ (8007d44 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	0a1b      	lsrs	r3, r3, #8
 8007d06:	f003 030f 	and.w	r3, r3, #15
 8007d0a:	490f      	ldr	r1, [pc, #60]	@ (8007d48 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d0c:	5ccb      	ldrb	r3, [r1, r3]
 8007d0e:	f003 031f 	and.w	r3, r3, #31
 8007d12:	fa22 f303 	lsr.w	r3, r2, r3
 8007d16:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007d18:	4b0a      	ldr	r3, [pc, #40]	@ (8007d44 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	f003 030f 	and.w	r3, r3, #15
 8007d20:	4a09      	ldr	r2, [pc, #36]	@ (8007d48 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d22:	5cd3      	ldrb	r3, [r2, r3]
 8007d24:	f003 031f 	and.w	r3, r3, #31
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d2e:	4a07      	ldr	r2, [pc, #28]	@ (8007d4c <HAL_RCC_GetHCLKFreq+0x58>)
 8007d30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d32:	4a07      	ldr	r2, [pc, #28]	@ (8007d50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007d38:	4b04      	ldr	r3, [pc, #16]	@ (8007d4c <HAL_RCC_GetHCLKFreq+0x58>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	58024400 	.word	0x58024400
 8007d48:	0800b050 	.word	0x0800b050
 8007d4c:	24000004 	.word	0x24000004
 8007d50:	24000000 	.word	0x24000000

08007d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007d58:	f7ff ffcc 	bl	8007cf4 <HAL_RCC_GetHCLKFreq>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	4b06      	ldr	r3, [pc, #24]	@ (8007d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	091b      	lsrs	r3, r3, #4
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	4904      	ldr	r1, [pc, #16]	@ (8007d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d6a:	5ccb      	ldrb	r3, [r1, r3]
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	58024400 	.word	0x58024400
 8007d7c:	0800b050 	.word	0x0800b050

08007d80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d84:	b0c8      	sub	sp, #288	@ 0x120
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d92:	2300      	movs	r3, #0
 8007d94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007da4:	2500      	movs	r5, #0
 8007da6:	ea54 0305 	orrs.w	r3, r4, r5
 8007daa:	d049      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007db2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007db6:	d02f      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007db8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dbc:	d828      	bhi.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007dbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dc2:	d01a      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dc8:	d822      	bhi.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dd2:	d007      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dd4:	e01c      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd6:	4ba7      	ldr	r3, [pc, #668]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	4aa6      	ldr	r2, [pc, #664]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007de2:	e01a      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007de8:	3308      	adds	r3, #8
 8007dea:	2102      	movs	r1, #2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f002 fa6d 	bl	800a2cc <RCCEx_PLL2_Config>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007df8:	e00f      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dfe:	3328      	adds	r3, #40	@ 0x28
 8007e00:	2102      	movs	r1, #2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f002 fb14 	bl	800a430 <RCCEx_PLL3_Config>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e0e:	e004      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e16:	e000      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10a      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e22:	4b94      	ldr	r3, [pc, #592]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e30:	4a90      	ldr	r2, [pc, #576]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e32:	430b      	orrs	r3, r1
 8007e34:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e36:	e003      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007e4c:	f04f 0900 	mov.w	r9, #0
 8007e50:	ea58 0309 	orrs.w	r3, r8, r9
 8007e54:	d047      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d82a      	bhi.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e60:	a201      	add	r2, pc, #4	@ (adr r2, 8007e68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e7d 	.word	0x08007e7d
 8007e6c:	08007e8b 	.word	0x08007e8b
 8007e70:	08007ea1 	.word	0x08007ea1
 8007e74:	08007ebf 	.word	0x08007ebf
 8007e78:	08007ebf 	.word	0x08007ebf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e7c:	4b7d      	ldr	r3, [pc, #500]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e80:	4a7c      	ldr	r2, [pc, #496]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e88:	e01a      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e8e:	3308      	adds	r3, #8
 8007e90:	2100      	movs	r1, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f002 fa1a 	bl	800a2cc <RCCEx_PLL2_Config>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e9e:	e00f      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ea4:	3328      	adds	r3, #40	@ 0x28
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f002 fac1 	bl	800a430 <RCCEx_PLL3_Config>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007eb4:	e004      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ebc:	e000      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ecc:	f023 0107 	bic.w	r1, r3, #7
 8007ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed6:	4a67      	ldr	r2, [pc, #412]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6513      	str	r3, [r2, #80]	@ 0x50
 8007edc:	e003      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ede:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ee2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007ef2:	f04f 0b00 	mov.w	fp, #0
 8007ef6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007efa:	d054      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f02:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007f06:	d036      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007f08:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007f0c:	d82f      	bhi.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f12:	d032      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f18:	d829      	bhi.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f1c:	d02f      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007f1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f20:	d825      	bhi.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f22:	2b80      	cmp	r3, #128	@ 0x80
 8007f24:	d018      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007f26:	2b80      	cmp	r3, #128	@ 0x80
 8007f28:	d821      	bhi.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007f2e:	2b40      	cmp	r3, #64	@ 0x40
 8007f30:	d007      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007f32:	e01c      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f34:	4b4f      	ldr	r3, [pc, #316]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f38:	4a4e      	ldr	r2, [pc, #312]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007f40:	e01e      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f46:	3308      	adds	r3, #8
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f002 f9be 	bl	800a2cc <RCCEx_PLL2_Config>
 8007f50:	4603      	mov	r3, r0
 8007f52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007f56:	e013      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f5c:	3328      	adds	r3, #40	@ 0x28
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f002 fa65 	bl	800a430 <RCCEx_PLL3_Config>
 8007f66:	4603      	mov	r3, r0
 8007f68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007f6c:	e008      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f74:	e004      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007f76:	bf00      	nop
 8007f78:	e002      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007f7a:	bf00      	nop
 8007f7c:	e000      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007f88:	4b3a      	ldr	r3, [pc, #232]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f8c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f96:	4a37      	ldr	r2, [pc, #220]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f9c:	e003      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fa2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007fb2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007fbc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	d05c      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fcc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007fd0:	d03b      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007fd2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007fd6:	d834      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fdc:	d037      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fe2:	d82e      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007fe4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007fe8:	d033      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007fea:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007fee:	d828      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ff4:	d01a      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ffa:	d822      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d003      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008004:	d007      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008006:	e01c      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008008:	4b1a      	ldr	r3, [pc, #104]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800800a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800c:	4a19      	ldr	r2, [pc, #100]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800800e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008014:	e01e      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800801a:	3308      	adds	r3, #8
 800801c:	2100      	movs	r1, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f002 f954 	bl	800a2cc <RCCEx_PLL2_Config>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800802a:	e013      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800802c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008030:	3328      	adds	r3, #40	@ 0x28
 8008032:	2100      	movs	r1, #0
 8008034:	4618      	mov	r0, r3
 8008036:	f002 f9fb 	bl	800a430 <RCCEx_PLL3_Config>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008040:	e008      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008048:	e004      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800804a:	bf00      	nop
 800804c:	e002      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800804e:	bf00      	nop
 8008050:	e000      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008054:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10d      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800805c:	4b05      	ldr	r3, [pc, #20]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800805e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008060:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800806a:	4a02      	ldr	r2, [pc, #8]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800806c:	430b      	orrs	r3, r1
 800806e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008070:	e006      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008072:	bf00      	nop
 8008074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008078:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800807c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800808c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008090:	2300      	movs	r3, #0
 8008092:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008096:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800809a:	460b      	mov	r3, r1
 800809c:	4313      	orrs	r3, r2
 800809e:	d03a      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80080a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080a6:	2b30      	cmp	r3, #48	@ 0x30
 80080a8:	d01f      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80080aa:	2b30      	cmp	r3, #48	@ 0x30
 80080ac:	d819      	bhi.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d00c      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d815      	bhi.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d019      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80080ba:	2b10      	cmp	r3, #16
 80080bc:	d111      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080be:	4bae      	ldr	r3, [pc, #696]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c2:	4aad      	ldr	r2, [pc, #692]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80080ca:	e011      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080d0:	3308      	adds	r3, #8
 80080d2:	2102      	movs	r1, #2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f002 f8f9 	bl	800a2cc <RCCEx_PLL2_Config>
 80080da:	4603      	mov	r3, r0
 80080dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80080e0:	e006      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080e8:	e002      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80080ea:	bf00      	nop
 80080ec:	e000      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80080ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10a      	bne.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80080f8:	4b9f      	ldr	r3, [pc, #636]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008106:	4a9c      	ldr	r2, [pc, #624]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008108:	430b      	orrs	r3, r1
 800810a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800810c:	e003      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800810e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008112:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008122:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008126:	2300      	movs	r3, #0
 8008128:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800812c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008130:	460b      	mov	r3, r1
 8008132:	4313      	orrs	r3, r2
 8008134:	d051      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800813a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800813c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008140:	d035      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008142:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008146:	d82e      	bhi.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008148:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800814c:	d031      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800814e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008152:	d828      	bhi.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008158:	d01a      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800815a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800815e:	d822      	bhi.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008168:	d007      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800816a:	e01c      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800816c:	4b82      	ldr	r3, [pc, #520]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800816e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008170:	4a81      	ldr	r2, [pc, #516]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008178:	e01c      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800817a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800817e:	3308      	adds	r3, #8
 8008180:	2100      	movs	r1, #0
 8008182:	4618      	mov	r0, r3
 8008184:	f002 f8a2 	bl	800a2cc <RCCEx_PLL2_Config>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800818e:	e011      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008194:	3328      	adds	r3, #40	@ 0x28
 8008196:	2100      	movs	r1, #0
 8008198:	4618      	mov	r0, r3
 800819a:	f002 f949 	bl	800a430 <RCCEx_PLL3_Config>
 800819e:	4603      	mov	r3, r0
 80081a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081a4:	e006      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081ac:	e002      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80081ae:	bf00      	nop
 80081b0:	e000      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80081b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80081bc:	4b6e      	ldr	r3, [pc, #440]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80081c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ca:	4a6b      	ldr	r2, [pc, #428]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081cc:	430b      	orrs	r3, r1
 80081ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80081d0:	e003      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80081da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80081e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081ea:	2300      	movs	r3, #0
 80081ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80081f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80081f4:	460b      	mov	r3, r1
 80081f6:	4313      	orrs	r3, r2
 80081f8:	d053      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80081fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008204:	d033      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008206:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800820a:	d82c      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800820c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008210:	d02f      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008212:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008216:	d826      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008218:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800821c:	d02b      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800821e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008222:	d820      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008228:	d012      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800822a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800822e:	d81a      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008230:	2b00      	cmp	r3, #0
 8008232:	d022      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008238:	d115      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800823a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800823e:	3308      	adds	r3, #8
 8008240:	2101      	movs	r1, #1
 8008242:	4618      	mov	r0, r3
 8008244:	f002 f842 	bl	800a2cc <RCCEx_PLL2_Config>
 8008248:	4603      	mov	r3, r0
 800824a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800824e:	e015      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008254:	3328      	adds	r3, #40	@ 0x28
 8008256:	2101      	movs	r1, #1
 8008258:	4618      	mov	r0, r3
 800825a:	f002 f8e9 	bl	800a430 <RCCEx_PLL3_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008264:	e00a      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800826c:	e006      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800826e:	bf00      	nop
 8008270:	e004      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008272:	bf00      	nop
 8008274:	e002      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008276:	bf00      	nop
 8008278:	e000      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800827a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800827c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10a      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008284:	4b3c      	ldr	r3, [pc, #240]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008288:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800828c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008290:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008292:	4a39      	ldr	r2, [pc, #228]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008294:	430b      	orrs	r3, r1
 8008296:	6513      	str	r3, [r2, #80]	@ 0x50
 8008298:	e003      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800829e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80082ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082b2:	2300      	movs	r3, #0
 80082b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082b8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80082bc:	460b      	mov	r3, r1
 80082be:	4313      	orrs	r3, r2
 80082c0:	d060      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80082c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082ca:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80082ce:	d039      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80082d0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80082d4:	d832      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80082d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082da:	d035      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80082dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082e0:	d82c      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80082e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e6:	d031      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80082e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ec:	d826      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80082ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082f2:	d02d      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80082f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082f8:	d820      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80082fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082fe:	d012      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008304:	d81a      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d024      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800830a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800830e:	d115      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008314:	3308      	adds	r3, #8
 8008316:	2101      	movs	r1, #1
 8008318:	4618      	mov	r0, r3
 800831a:	f001 ffd7 	bl	800a2cc <RCCEx_PLL2_Config>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008324:	e017      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800832a:	3328      	adds	r3, #40	@ 0x28
 800832c:	2101      	movs	r1, #1
 800832e:	4618      	mov	r0, r3
 8008330:	f002 f87e 	bl	800a430 <RCCEx_PLL3_Config>
 8008334:	4603      	mov	r3, r0
 8008336:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800833a:	e00c      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008342:	e008      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008344:	bf00      	nop
 8008346:	e006      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008348:	bf00      	nop
 800834a:	e004      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800834c:	bf00      	nop
 800834e:	e002      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008350:	bf00      	nop
 8008352:	e000      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008356:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10e      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800835e:	4b06      	ldr	r3, [pc, #24]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008362:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800836a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800836e:	4a02      	ldr	r2, [pc, #8]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008370:	430b      	orrs	r3, r1
 8008372:	6593      	str	r3, [r2, #88]	@ 0x58
 8008374:	e006      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008376:	bf00      	nop
 8008378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008380:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008390:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008394:	2300      	movs	r3, #0
 8008396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800839a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800839e:	460b      	mov	r3, r1
 80083a0:	4313      	orrs	r3, r2
 80083a2:	d037      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80083a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083ae:	d00e      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80083b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083b4:	d816      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d018      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80083ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083be:	d111      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c0:	4bc4      	ldr	r3, [pc, #784]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c4:	4ac3      	ldr	r2, [pc, #780]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80083cc:	e00f      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083d2:	3308      	adds	r3, #8
 80083d4:	2101      	movs	r1, #1
 80083d6:	4618      	mov	r0, r3
 80083d8:	f001 ff78 	bl	800a2cc <RCCEx_PLL2_Config>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80083e2:	e004      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083ea:	e000      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80083ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10a      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80083f6:	4bb7      	ldr	r3, [pc, #732]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80083fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008404:	4ab3      	ldr	r2, [pc, #716]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008406:	430b      	orrs	r3, r1
 8008408:	6513      	str	r3, [r2, #80]	@ 0x50
 800840a:	e003      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008410:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008424:	2300      	movs	r3, #0
 8008426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800842a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800842e:	460b      	mov	r3, r1
 8008430:	4313      	orrs	r3, r2
 8008432:	d039      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800843a:	2b03      	cmp	r3, #3
 800843c:	d81c      	bhi.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800843e:	a201      	add	r2, pc, #4	@ (adr r2, 8008444 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	08008481 	.word	0x08008481
 8008448:	08008455 	.word	0x08008455
 800844c:	08008463 	.word	0x08008463
 8008450:	08008481 	.word	0x08008481
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008454:	4b9f      	ldr	r3, [pc, #636]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008458:	4a9e      	ldr	r2, [pc, #632]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800845a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800845e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008460:	e00f      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008466:	3308      	adds	r3, #8
 8008468:	2102      	movs	r1, #2
 800846a:	4618      	mov	r0, r3
 800846c:	f001 ff2e 	bl	800a2cc <RCCEx_PLL2_Config>
 8008470:	4603      	mov	r3, r0
 8008472:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008476:	e004      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800847e:	e000      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008482:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800848a:	4b92      	ldr	r3, [pc, #584]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800848c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800848e:	f023 0103 	bic.w	r1, r3, #3
 8008492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008498:	4a8e      	ldr	r2, [pc, #568]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800849a:	430b      	orrs	r3, r1
 800849c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800849e:	e003      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80084b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084b8:	2300      	movs	r3, #0
 80084ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80084c2:	460b      	mov	r3, r1
 80084c4:	4313      	orrs	r3, r2
 80084c6:	f000 8099 	beq.w	80085fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084ca:	4b83      	ldr	r3, [pc, #524]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a82      	ldr	r2, [pc, #520]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084d6:	f7f9 fbd7 	bl	8001c88 <HAL_GetTick>
 80084da:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084de:	e00b      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084e0:	f7f9 fbd2 	bl	8001c88 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	2b64      	cmp	r3, #100	@ 0x64
 80084ee:	d903      	bls.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084f6:	e005      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084f8:	4b77      	ldr	r3, [pc, #476]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0ed      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008504:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008508:	2b00      	cmp	r3, #0
 800850a:	d173      	bne.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800850c:	4b71      	ldr	r3, [pc, #452]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800850e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008514:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008518:	4053      	eors	r3, r2
 800851a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800851e:	2b00      	cmp	r3, #0
 8008520:	d015      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008522:	4b6c      	ldr	r3, [pc, #432]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800852a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800852e:	4b69      	ldr	r3, [pc, #420]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008532:	4a68      	ldr	r2, [pc, #416]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008538:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800853a:	4b66      	ldr	r3, [pc, #408]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800853c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800853e:	4a65      	ldr	r2, [pc, #404]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008544:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008546:	4a63      	ldr	r2, [pc, #396]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800854e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008552:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800855a:	d118      	bne.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855c:	f7f9 fb94 	bl	8001c88 <HAL_GetTick>
 8008560:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008564:	e00d      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008566:	f7f9 fb8f 	bl	8001c88 <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008570:	1ad2      	subs	r2, r2, r3
 8008572:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008576:	429a      	cmp	r2, r3
 8008578:	d903      	bls.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008580:	e005      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008582:	4b54      	ldr	r3, [pc, #336]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0eb      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800858e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008592:	2b00      	cmp	r3, #0
 8008594:	d129      	bne.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008596:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800859a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800859e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085a6:	d10e      	bne.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80085a8:	4b4a      	ldr	r3, [pc, #296]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80085b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085b8:	091a      	lsrs	r2, r3, #4
 80085ba:	4b48      	ldr	r3, [pc, #288]	@ (80086dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80085bc:	4013      	ands	r3, r2
 80085be:	4a45      	ldr	r2, [pc, #276]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085c0:	430b      	orrs	r3, r1
 80085c2:	6113      	str	r3, [r2, #16]
 80085c4:	e005      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80085c6:	4b43      	ldr	r3, [pc, #268]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	4a42      	ldr	r2, [pc, #264]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80085d0:	6113      	str	r3, [r2, #16]
 80085d2:	4b40      	ldr	r3, [pc, #256]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80085d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085e2:	4a3c      	ldr	r2, [pc, #240]	@ (80086d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085e4:	430b      	orrs	r3, r1
 80085e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80085e8:	e008      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80085ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80085f2:	e003      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80085fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f002 0301 	and.w	r3, r2, #1
 8008608:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800860c:	2300      	movs	r3, #0
 800860e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008612:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008616:	460b      	mov	r3, r1
 8008618:	4313      	orrs	r3, r2
 800861a:	f000 8090 	beq.w	800873e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800861e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008626:	2b28      	cmp	r3, #40	@ 0x28
 8008628:	d870      	bhi.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800862a:	a201      	add	r2, pc, #4	@ (adr r2, 8008630 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	08008715 	.word	0x08008715
 8008634:	0800870d 	.word	0x0800870d
 8008638:	0800870d 	.word	0x0800870d
 800863c:	0800870d 	.word	0x0800870d
 8008640:	0800870d 	.word	0x0800870d
 8008644:	0800870d 	.word	0x0800870d
 8008648:	0800870d 	.word	0x0800870d
 800864c:	0800870d 	.word	0x0800870d
 8008650:	080086e1 	.word	0x080086e1
 8008654:	0800870d 	.word	0x0800870d
 8008658:	0800870d 	.word	0x0800870d
 800865c:	0800870d 	.word	0x0800870d
 8008660:	0800870d 	.word	0x0800870d
 8008664:	0800870d 	.word	0x0800870d
 8008668:	0800870d 	.word	0x0800870d
 800866c:	0800870d 	.word	0x0800870d
 8008670:	080086f7 	.word	0x080086f7
 8008674:	0800870d 	.word	0x0800870d
 8008678:	0800870d 	.word	0x0800870d
 800867c:	0800870d 	.word	0x0800870d
 8008680:	0800870d 	.word	0x0800870d
 8008684:	0800870d 	.word	0x0800870d
 8008688:	0800870d 	.word	0x0800870d
 800868c:	0800870d 	.word	0x0800870d
 8008690:	08008715 	.word	0x08008715
 8008694:	0800870d 	.word	0x0800870d
 8008698:	0800870d 	.word	0x0800870d
 800869c:	0800870d 	.word	0x0800870d
 80086a0:	0800870d 	.word	0x0800870d
 80086a4:	0800870d 	.word	0x0800870d
 80086a8:	0800870d 	.word	0x0800870d
 80086ac:	0800870d 	.word	0x0800870d
 80086b0:	08008715 	.word	0x08008715
 80086b4:	0800870d 	.word	0x0800870d
 80086b8:	0800870d 	.word	0x0800870d
 80086bc:	0800870d 	.word	0x0800870d
 80086c0:	0800870d 	.word	0x0800870d
 80086c4:	0800870d 	.word	0x0800870d
 80086c8:	0800870d 	.word	0x0800870d
 80086cc:	0800870d 	.word	0x0800870d
 80086d0:	08008715 	.word	0x08008715
 80086d4:	58024400 	.word	0x58024400
 80086d8:	58024800 	.word	0x58024800
 80086dc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086e4:	3308      	adds	r3, #8
 80086e6:	2101      	movs	r1, #1
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 fdef 	bl	800a2cc <RCCEx_PLL2_Config>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80086f4:	e00f      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086fa:	3328      	adds	r3, #40	@ 0x28
 80086fc:	2101      	movs	r1, #1
 80086fe:	4618      	mov	r0, r3
 8008700:	f001 fe96 	bl	800a430 <RCCEx_PLL3_Config>
 8008704:	4603      	mov	r3, r0
 8008706:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800870a:	e004      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008712:	e000      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008716:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10b      	bne.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800871e:	4bc0      	ldr	r3, [pc, #768]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008722:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800872a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800872e:	4abc      	ldr	r2, [pc, #752]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008730:	430b      	orrs	r3, r1
 8008732:	6553      	str	r3, [r2, #84]	@ 0x54
 8008734:	e003      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008736:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800873a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800873e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	f002 0302 	and.w	r3, r2, #2
 800874a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800874e:	2300      	movs	r3, #0
 8008750:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008754:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008758:	460b      	mov	r3, r1
 800875a:	4313      	orrs	r3, r2
 800875c:	d043      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800875e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008766:	2b05      	cmp	r3, #5
 8008768:	d824      	bhi.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800876a:	a201      	add	r2, pc, #4	@ (adr r2, 8008770 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800876c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008770:	080087bd 	.word	0x080087bd
 8008774:	08008789 	.word	0x08008789
 8008778:	0800879f 	.word	0x0800879f
 800877c:	080087bd 	.word	0x080087bd
 8008780:	080087bd 	.word	0x080087bd
 8008784:	080087bd 	.word	0x080087bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800878c:	3308      	adds	r3, #8
 800878e:	2101      	movs	r1, #1
 8008790:	4618      	mov	r0, r3
 8008792:	f001 fd9b 	bl	800a2cc <RCCEx_PLL2_Config>
 8008796:	4603      	mov	r3, r0
 8008798:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800879c:	e00f      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800879e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087a2:	3328      	adds	r3, #40	@ 0x28
 80087a4:	2101      	movs	r1, #1
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fe42 	bl	800a430 <RCCEx_PLL3_Config>
 80087ac:	4603      	mov	r3, r0
 80087ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80087b2:	e004      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087ba:	e000      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80087bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10b      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80087c6:	4b96      	ldr	r3, [pc, #600]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ca:	f023 0107 	bic.w	r1, r3, #7
 80087ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087d6:	4a92      	ldr	r2, [pc, #584]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087d8:	430b      	orrs	r3, r1
 80087da:	6553      	str	r3, [r2, #84]	@ 0x54
 80087dc:	e003      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f002 0304 	and.w	r3, r2, #4
 80087f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087f6:	2300      	movs	r3, #0
 80087f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087fc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008800:	460b      	mov	r3, r1
 8008802:	4313      	orrs	r3, r2
 8008804:	d043      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800880a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800880e:	2b05      	cmp	r3, #5
 8008810:	d824      	bhi.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008812:	a201      	add	r2, pc, #4	@ (adr r2, 8008818 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008818:	08008865 	.word	0x08008865
 800881c:	08008831 	.word	0x08008831
 8008820:	08008847 	.word	0x08008847
 8008824:	08008865 	.word	0x08008865
 8008828:	08008865 	.word	0x08008865
 800882c:	08008865 	.word	0x08008865
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008834:	3308      	adds	r3, #8
 8008836:	2101      	movs	r1, #1
 8008838:	4618      	mov	r0, r3
 800883a:	f001 fd47 	bl	800a2cc <RCCEx_PLL2_Config>
 800883e:	4603      	mov	r3, r0
 8008840:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008844:	e00f      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800884a:	3328      	adds	r3, #40	@ 0x28
 800884c:	2101      	movs	r1, #1
 800884e:	4618      	mov	r0, r3
 8008850:	f001 fdee 	bl	800a430 <RCCEx_PLL3_Config>
 8008854:	4603      	mov	r3, r0
 8008856:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800885a:	e004      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008862:	e000      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008866:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10b      	bne.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800886e:	4b6c      	ldr	r3, [pc, #432]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008872:	f023 0107 	bic.w	r1, r3, #7
 8008876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800887a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800887e:	4a68      	ldr	r2, [pc, #416]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008880:	430b      	orrs	r3, r1
 8008882:	6593      	str	r3, [r2, #88]	@ 0x58
 8008884:	e003      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008886:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800888a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800888e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	f002 0320 	and.w	r3, r2, #32
 800889a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800889e:	2300      	movs	r3, #0
 80088a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80088a8:	460b      	mov	r3, r1
 80088aa:	4313      	orrs	r3, r2
 80088ac:	d055      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80088ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088ba:	d033      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80088bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088c0:	d82c      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80088c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c6:	d02f      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80088c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088cc:	d826      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80088ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088d2:	d02b      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80088d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088d8:	d820      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80088da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088de:	d012      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80088e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088e4:	d81a      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d022      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80088ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088ee:	d115      	bne.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088f4:	3308      	adds	r3, #8
 80088f6:	2100      	movs	r1, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 fce7 	bl	800a2cc <RCCEx_PLL2_Config>
 80088fe:	4603      	mov	r3, r0
 8008900:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008904:	e015      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800890a:	3328      	adds	r3, #40	@ 0x28
 800890c:	2102      	movs	r1, #2
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fd8e 	bl	800a430 <RCCEx_PLL3_Config>
 8008914:	4603      	mov	r3, r0
 8008916:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800891a:	e00a      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008922:	e006      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008924:	bf00      	nop
 8008926:	e004      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008928:	bf00      	nop
 800892a:	e002      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800892c:	bf00      	nop
 800892e:	e000      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008932:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10b      	bne.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800893a:	4b39      	ldr	r3, [pc, #228]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800893c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800893e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800894a:	4a35      	ldr	r2, [pc, #212]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800894c:	430b      	orrs	r3, r1
 800894e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008950:	e003      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008952:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008956:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800895a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008966:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800896a:	2300      	movs	r3, #0
 800896c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008970:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008974:	460b      	mov	r3, r1
 8008976:	4313      	orrs	r3, r2
 8008978:	d058      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800897a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800897e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008982:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008986:	d033      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008988:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800898c:	d82c      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800898e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008992:	d02f      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008998:	d826      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800899a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800899e:	d02b      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80089a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089a4:	d820      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80089a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089aa:	d012      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80089ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089b0:	d81a      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d022      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80089b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089ba:	d115      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c0:	3308      	adds	r3, #8
 80089c2:	2100      	movs	r1, #0
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 fc81 	bl	800a2cc <RCCEx_PLL2_Config>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80089d0:	e015      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d6:	3328      	adds	r3, #40	@ 0x28
 80089d8:	2102      	movs	r1, #2
 80089da:	4618      	mov	r0, r3
 80089dc:	f001 fd28 	bl	800a430 <RCCEx_PLL3_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80089e6:	e00a      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089ee:	e006      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80089f0:	bf00      	nop
 80089f2:	e004      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80089f4:	bf00      	nop
 80089f6:	e002      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80089f8:	bf00      	nop
 80089fa:	e000      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80089fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10e      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a06:	4b06      	ldr	r3, [pc, #24]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a0a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a16:	4a02      	ldr	r2, [pc, #8]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a1c:	e006      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008a1e:	bf00      	nop
 8008a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008a46:	460b      	mov	r3, r1
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	d055      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a54:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008a58:	d033      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008a5a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008a5e:	d82c      	bhi.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a64:	d02f      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a6a:	d826      	bhi.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008a6c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008a70:	d02b      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008a72:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008a76:	d820      	bhi.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008a78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a7c:	d012      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a82:	d81a      	bhi.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d022      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a8c:	d115      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a92:	3308      	adds	r3, #8
 8008a94:	2100      	movs	r1, #0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 fc18 	bl	800a2cc <RCCEx_PLL2_Config>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008aa2:	e015      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aa8:	3328      	adds	r3, #40	@ 0x28
 8008aaa:	2102      	movs	r1, #2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 fcbf 	bl	800a430 <RCCEx_PLL3_Config>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ab8:	e00a      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ac0:	e006      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008ac2:	bf00      	nop
 8008ac4:	e004      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008ac6:	bf00      	nop
 8008ac8:	e002      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008aca:	bf00      	nop
 8008acc:	e000      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ad0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10b      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008ad8:	4ba1      	ldr	r3, [pc, #644]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008adc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ae4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ae8:	4a9d      	ldr	r2, [pc, #628]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008aea:	430b      	orrs	r3, r1
 8008aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8008aee:	e003      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008af4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f002 0308 	and.w	r3, r2, #8
 8008b04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008b12:	460b      	mov	r3, r1
 8008b14:	4313      	orrs	r3, r2
 8008b16:	d01e      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b24:	d10c      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b2a:	3328      	adds	r3, #40	@ 0x28
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 fc7e 	bl	800a430 <RCCEx_PLL3_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008b40:	4b87      	ldr	r3, [pc, #540]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b44:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b50:	4a83      	ldr	r2, [pc, #524]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b52:	430b      	orrs	r3, r1
 8008b54:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	f002 0310 	and.w	r3, r2, #16
 8008b62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b66:	2300      	movs	r3, #0
 8008b68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008b6c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008b70:	460b      	mov	r3, r1
 8008b72:	4313      	orrs	r3, r2
 8008b74:	d01e      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b82:	d10c      	bne.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b88:	3328      	adds	r3, #40	@ 0x28
 8008b8a:	2102      	movs	r1, #2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 fc4f 	bl	800a430 <RCCEx_PLL3_Config>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b9e:	4b70      	ldr	r3, [pc, #448]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008baa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008bae:	4a6c      	ldr	r2, [pc, #432]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008bc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008bca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	d03e      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008bdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008be0:	d022      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008be6:	d81b      	bhi.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d003      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bf0:	d00b      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008bf2:	e015      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bf8:	3308      	adds	r3, #8
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f001 fb65 	bl	800a2cc <RCCEx_PLL2_Config>
 8008c02:	4603      	mov	r3, r0
 8008c04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c08:	e00f      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c0e:	3328      	adds	r3, #40	@ 0x28
 8008c10:	2102      	movs	r1, #2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f001 fc0c 	bl	800a430 <RCCEx_PLL3_Config>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c1e:	e004      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c26:	e000      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10b      	bne.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c32:	4b4b      	ldr	r3, [pc, #300]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c42:	4a47      	ldr	r2, [pc, #284]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c44:	430b      	orrs	r3, r1
 8008c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c48:	e003      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c60:	2300      	movs	r3, #0
 8008c62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	d03b      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c7a:	d01f      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008c7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c80:	d818      	bhi.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008c82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c86:	d003      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008c88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c8c:	d007      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008c8e:	e011      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c90:	4b33      	ldr	r3, [pc, #204]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c94:	4a32      	ldr	r2, [pc, #200]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c9c:	e00f      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ca2:	3328      	adds	r3, #40	@ 0x28
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 fbc2 	bl	800a430 <RCCEx_PLL3_Config>
 8008cac:	4603      	mov	r3, r0
 8008cae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008cb2:	e004      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008cba:	e000      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10b      	bne.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cc6:	4b26      	ldr	r3, [pc, #152]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cd6:	4a22      	ldr	r2, [pc, #136]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cd8:	430b      	orrs	r3, r1
 8008cda:	6553      	str	r3, [r2, #84]	@ 0x54
 8008cdc:	e003      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ce2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008cf2:	673b      	str	r3, [r7, #112]	@ 0x70
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	677b      	str	r3, [r7, #116]	@ 0x74
 8008cf8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	d034      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d10:	d007      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008d12:	e011      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d14:	4b12      	ldr	r3, [pc, #72]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d18:	4a11      	ldr	r2, [pc, #68]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d20:	e00e      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d26:	3308      	adds	r3, #8
 8008d28:	2102      	movs	r1, #2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f001 face 	bl	800a2cc <RCCEx_PLL2_Config>
 8008d30:	4603      	mov	r3, r0
 8008d32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d36:	e003      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10d      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008d48:	4b05      	ldr	r3, [pc, #20]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d56:	4a02      	ldr	r2, [pc, #8]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d5c:	e006      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008d5e:	bf00      	nop
 8008d60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008d78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d7e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008d82:	460b      	mov	r3, r1
 8008d84:	4313      	orrs	r3, r2
 8008d86:	d00c      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d8c:	3328      	adds	r3, #40	@ 0x28
 8008d8e:	2102      	movs	r1, #2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f001 fb4d 	bl	800a430 <RCCEx_PLL3_Config>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008daa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008dae:	663b      	str	r3, [r7, #96]	@ 0x60
 8008db0:	2300      	movs	r3, #0
 8008db2:	667b      	str	r3, [r7, #100]	@ 0x64
 8008db4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008db8:	460b      	mov	r3, r1
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	d038      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dca:	d018      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008dcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dd0:	d811      	bhi.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dd6:	d014      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ddc:	d80b      	bhi.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d011      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008de6:	d106      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de8:	4bc3      	ldr	r3, [pc, #780]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dec:	4ac2      	ldr	r2, [pc, #776]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008df4:	e008      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dfc:	e004      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008dfe:	bf00      	nop
 8008e00:	e002      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008e02:	bf00      	nop
 8008e04:	e000      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10b      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e10:	4bb9      	ldr	r3, [pc, #740]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e14:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e20:	4ab5      	ldr	r2, [pc, #724]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e22:	430b      	orrs	r3, r1
 8008e24:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e26:	e003      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e38:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e3e:	2300      	movs	r3, #0
 8008e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e42:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008e46:	460b      	mov	r3, r1
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	d009      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008e4c:	4baa      	ldr	r3, [pc, #680]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e5a:	4aa7      	ldr	r2, [pc, #668]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e5c:	430b      	orrs	r3, r1
 8008e5e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008e6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e6e:	2300      	movs	r3, #0
 8008e70:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008e76:	460b      	mov	r3, r1
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	d009      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e7c:	4b9e      	ldr	r3, [pc, #632]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e80:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e8a:	4a9b      	ldr	r2, [pc, #620]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ea2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	d009      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008eac:	4b92      	ldr	r3, [pc, #584]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eba:	4a8f      	ldr	r2, [pc, #572]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ebc:	430b      	orrs	r3, r1
 8008ebe:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008ecc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ece:	2300      	movs	r3, #0
 8008ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ed2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	d00e      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008edc:	4b86      	ldr	r3, [pc, #536]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	4a85      	ldr	r2, [pc, #532]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ee2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ee6:	6113      	str	r3, [r2, #16]
 8008ee8:	4b83      	ldr	r3, [pc, #524]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008eea:	6919      	ldr	r1, [r3, #16]
 8008eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008ef4:	4a80      	ldr	r2, [pc, #512]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ef6:	430b      	orrs	r3, r1
 8008ef8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008f06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f08:	2300      	movs	r3, #0
 8008f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f0c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008f10:	460b      	mov	r3, r1
 8008f12:	4313      	orrs	r3, r2
 8008f14:	d009      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f16:	4b78      	ldr	r3, [pc, #480]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f24:	4a74      	ldr	r2, [pc, #464]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f26:	430b      	orrs	r3, r1
 8008f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f38:	2300      	movs	r3, #0
 8008f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008f40:	460b      	mov	r3, r1
 8008f42:	4313      	orrs	r3, r2
 8008f44:	d00a      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f46:	4b6c      	ldr	r3, [pc, #432]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f4a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f56:	4a68      	ldr	r2, [pc, #416]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	2100      	movs	r1, #0
 8008f66:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f6e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008f72:	460b      	mov	r3, r1
 8008f74:	4313      	orrs	r3, r2
 8008f76:	d011      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 f9a3 	bl	800a2cc <RCCEx_PLL2_Config>
 8008f86:	4603      	mov	r3, r0
 8008f88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	6239      	str	r1, [r7, #32]
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	d011      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f001 f983 	bl	800a2cc <RCCEx_PLL2_Config>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008fcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fd8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	61b9      	str	r1, [r7, #24]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	61fb      	str	r3, [r7, #28]
 8008fee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	d011      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	2102      	movs	r1, #2
 8009000:	4618      	mov	r0, r3
 8009002:	f001 f963 	bl	800a2cc <RCCEx_PLL2_Config>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800900c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009014:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009018:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800901c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	2100      	movs	r1, #0
 8009026:	6139      	str	r1, [r7, #16]
 8009028:	f003 0308 	and.w	r3, r3, #8
 800902c:	617b      	str	r3, [r7, #20]
 800902e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009032:	460b      	mov	r3, r1
 8009034:	4313      	orrs	r3, r2
 8009036:	d011      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800903c:	3328      	adds	r3, #40	@ 0x28
 800903e:	2100      	movs	r1, #0
 8009040:	4618      	mov	r0, r3
 8009042:	f001 f9f5 	bl	800a430 <RCCEx_PLL3_Config>
 8009046:	4603      	mov	r3, r0
 8009048:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800904c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009054:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009058:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800905c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	2100      	movs	r1, #0
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	f003 0310 	and.w	r3, r3, #16
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009072:	460b      	mov	r3, r1
 8009074:	4313      	orrs	r3, r2
 8009076:	d011      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800907c:	3328      	adds	r3, #40	@ 0x28
 800907e:	2101      	movs	r1, #1
 8009080:	4618      	mov	r0, r3
 8009082:	f001 f9d5 	bl	800a430 <RCCEx_PLL3_Config>
 8009086:	4603      	mov	r3, r0
 8009088:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800908c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009094:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009098:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800909c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	2100      	movs	r1, #0
 80090a6:	6039      	str	r1, [r7, #0]
 80090a8:	f003 0320 	and.w	r3, r3, #32
 80090ac:	607b      	str	r3, [r7, #4]
 80090ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80090b2:	460b      	mov	r3, r1
 80090b4:	4313      	orrs	r3, r2
 80090b6:	d011      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090bc:	3328      	adds	r3, #40	@ 0x28
 80090be:	2102      	movs	r1, #2
 80090c0:	4618      	mov	r0, r3
 80090c2:	f001 f9b5 	bl	800a430 <RCCEx_PLL3_Config>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80090cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80090dc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	e000      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80090f0:	46bd      	mov	sp, r7
 80090f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090f6:	bf00      	nop
 80090f8:	58024400 	.word	0x58024400

080090fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b090      	sub	sp, #64	@ 0x40
 8009100:	af00      	add	r7, sp, #0
 8009102:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800910a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800910e:	430b      	orrs	r3, r1
 8009110:	f040 8094 	bne.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009114:	4b97      	ldr	r3, [pc, #604]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	2b04      	cmp	r3, #4
 8009122:	f200 8087 	bhi.w	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009126:	a201      	add	r2, pc, #4	@ (adr r2, 800912c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	08009141 	.word	0x08009141
 8009130:	08009169 	.word	0x08009169
 8009134:	08009191 	.word	0x08009191
 8009138:	0800922d 	.word	0x0800922d
 800913c:	080091b9 	.word	0x080091b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009140:	4b8c      	ldr	r3, [pc, #560]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009148:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800914c:	d108      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800914e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009152:	4618      	mov	r0, r3
 8009154:	f000 ff68 	bl	800a028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800915c:	f000 bc97 	b.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009164:	f000 bc93 	b.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009168:	4b82      	ldr	r3, [pc, #520]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009174:	d108      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009176:	f107 0318 	add.w	r3, r7, #24
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fcac 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009184:	f000 bc83 	b.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918c:	f000 bc7f 	b.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009190:	4b78      	ldr	r3, [pc, #480]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800919c:	d108      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800919e:	f107 030c 	add.w	r3, r7, #12
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fdec 	bl	8009d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ac:	f000 bc6f 	b.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091b4:	f000 bc6b 	b.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091b8:	4b6e      	ldr	r3, [pc, #440]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091c0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091c2:	4b6c      	ldr	r3, [pc, #432]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 0304 	and.w	r3, r3, #4
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	d10c      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80091ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d109      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091d4:	4b67      	ldr	r3, [pc, #412]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	08db      	lsrs	r3, r3, #3
 80091da:	f003 0303 	and.w	r3, r3, #3
 80091de:	4a66      	ldr	r2, [pc, #408]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80091e0:	fa22 f303 	lsr.w	r3, r2, r3
 80091e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091e6:	e01f      	b.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091e8:	4b62      	ldr	r3, [pc, #392]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091f4:	d106      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80091f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091fc:	d102      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091fe:	4b5f      	ldr	r3, [pc, #380]	@ (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009202:	e011      	b.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009204:	4b5b      	ldr	r3, [pc, #364]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800920c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009210:	d106      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009214:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009218:	d102      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800921a:	4b59      	ldr	r3, [pc, #356]	@ (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800921c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800921e:	e003      	b.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009224:	f000 bc33 	b.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009228:	f000 bc31 	b.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800922c:	4b55      	ldr	r3, [pc, #340]	@ (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009230:	f000 bc2d 	b.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009238:	f000 bc29 	b.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800923c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009240:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009244:	430b      	orrs	r3, r1
 8009246:	f040 809f 	bne.w	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800924a:	4b4a      	ldr	r3, [pc, #296]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800924c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800924e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009252:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800925a:	d04d      	beq.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800925c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009262:	f200 8084 	bhi.w	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009268:	2bc0      	cmp	r3, #192	@ 0xc0
 800926a:	d07d      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800926c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009270:	d87d      	bhi.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009274:	2b80      	cmp	r3, #128	@ 0x80
 8009276:	d02d      	beq.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	2b80      	cmp	r3, #128	@ 0x80
 800927c:	d877      	bhi.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800927e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	2b40      	cmp	r3, #64	@ 0x40
 8009288:	d012      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800928a:	e070      	b.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800928c:	4b39      	ldr	r3, [pc, #228]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009294:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009298:	d107      	bne.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800929a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fec2 	bl	800a028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a8:	e3f1      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ae:	e3ee      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092b0:	4b30      	ldr	r3, [pc, #192]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092bc:	d107      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092be:	f107 0318 	add.w	r3, r7, #24
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 fc08 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092cc:	e3df      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d2:	e3dc      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092d4:	4b27      	ldr	r3, [pc, #156]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092e0:	d107      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092e2:	f107 030c 	add.w	r3, r7, #12
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 fd4a 	bl	8009d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f0:	e3cd      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f6:	e3ca      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092f8:	4b1e      	ldr	r3, [pc, #120]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009300:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009302:	4b1c      	ldr	r3, [pc, #112]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 0304 	and.w	r3, r3, #4
 800930a:	2b04      	cmp	r3, #4
 800930c:	d10c      	bne.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800930e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009310:	2b00      	cmp	r3, #0
 8009312:	d109      	bne.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009314:	4b17      	ldr	r3, [pc, #92]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	08db      	lsrs	r3, r3, #3
 800931a:	f003 0303 	and.w	r3, r3, #3
 800931e:	4a16      	ldr	r2, [pc, #88]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009320:	fa22 f303 	lsr.w	r3, r2, r3
 8009324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009326:	e01e      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009328:	4b12      	ldr	r3, [pc, #72]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009334:	d106      	bne.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8009336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800933c:	d102      	bne.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800933e:	4b0f      	ldr	r3, [pc, #60]	@ (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009342:	e010      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009344:	4b0b      	ldr	r3, [pc, #44]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800934c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009350:	d106      	bne.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009358:	d102      	bne.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800935a:	4b09      	ldr	r3, [pc, #36]	@ (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800935e:	e002      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009364:	e393      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009366:	e392      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009368:	4b06      	ldr	r3, [pc, #24]	@ (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800936c:	e38f      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009372:	e38c      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009374:	58024400 	.word	0x58024400
 8009378:	03d09000 	.word	0x03d09000
 800937c:	003d0900 	.word	0x003d0900
 8009380:	017d7840 	.word	0x017d7840
 8009384:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800938c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009390:	430b      	orrs	r3, r1
 8009392:	f040 809c 	bne.w	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8009396:	4b9e      	ldr	r3, [pc, #632]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800939a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800939e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093a6:	d054      	beq.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80093a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093ae:	f200 808b 	bhi.w	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80093b8:	f000 8083 	beq.w	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80093c2:	f200 8081 	bhi.w	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093cc:	d02f      	beq.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80093ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093d4:	d878      	bhi.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80093d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d004      	beq.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80093dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093e2:	d012      	beq.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80093e4:	e070      	b.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093e6:	4b8a      	ldr	r3, [pc, #552]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093f2:	d107      	bne.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 fe15 	bl	800a028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009402:	e344      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009408:	e341      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800940a:	4b81      	ldr	r3, [pc, #516]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009412:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009416:	d107      	bne.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009418:	f107 0318 	add.w	r3, r7, #24
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fb5b 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009426:	e332      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800942c:	e32f      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800942e:	4b78      	ldr	r3, [pc, #480]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800943a:	d107      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800943c:	f107 030c 	add.w	r3, r7, #12
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fc9d 	bl	8009d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800944a:	e320      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009450:	e31d      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009452:	4b6f      	ldr	r3, [pc, #444]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009456:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800945a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800945c:	4b6c      	ldr	r3, [pc, #432]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b04      	cmp	r3, #4
 8009466:	d10c      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946a:	2b00      	cmp	r3, #0
 800946c:	d109      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800946e:	4b68      	ldr	r3, [pc, #416]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	08db      	lsrs	r3, r3, #3
 8009474:	f003 0303 	and.w	r3, r3, #3
 8009478:	4a66      	ldr	r2, [pc, #408]	@ (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800947a:	fa22 f303 	lsr.w	r3, r2, r3
 800947e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009480:	e01e      	b.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009482:	4b63      	ldr	r3, [pc, #396]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800948a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800948e:	d106      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009496:	d102      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009498:	4b5f      	ldr	r3, [pc, #380]	@ (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800949a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800949c:	e010      	b.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800949e:	4b5c      	ldr	r3, [pc, #368]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094aa:	d106      	bne.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80094ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094b2:	d102      	bne.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094b4:	4b59      	ldr	r3, [pc, #356]	@ (800961c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80094b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094b8:	e002      	b.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80094be:	e2e6      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80094c0:	e2e5      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094c2:	4b57      	ldr	r3, [pc, #348]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80094c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c6:	e2e2      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094cc:	e2df      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80094ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80094d6:	430b      	orrs	r3, r1
 80094d8:	f040 80a7 	bne.w	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80094dc:	4b4c      	ldr	r3, [pc, #304]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80094e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80094e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094ec:	d055      	beq.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80094ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094f4:	f200 8096 	bhi.w	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80094f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094fe:	f000 8084 	beq.w	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8009502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009504:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009508:	f200 808c 	bhi.w	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800950c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009512:	d030      	beq.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8009514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800951a:	f200 8083 	bhi.w	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800951e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800952a:	d012      	beq.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800952c:	e07a      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800952e:	4b38      	ldr	r3, [pc, #224]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009536:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800953a:	d107      	bne.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800953c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009540:	4618      	mov	r0, r3
 8009542:	f000 fd71 	bl	800a028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800954a:	e2a0      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009550:	e29d      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009552:	4b2f      	ldr	r3, [pc, #188]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800955a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800955e:	d107      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009560:	f107 0318 	add.w	r3, r7, #24
 8009564:	4618      	mov	r0, r3
 8009566:	f000 fab7 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800956e:	e28e      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009574:	e28b      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009576:	4b26      	ldr	r3, [pc, #152]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800957e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009582:	d107      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009584:	f107 030c 	add.w	r3, r7, #12
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fbf9 	bl	8009d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009592:	e27c      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009598:	e279      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800959a:	4b1d      	ldr	r3, [pc, #116]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800959c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800959e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80095a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b04      	cmp	r3, #4
 80095ae:	d10c      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80095b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d109      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095b6:	4b16      	ldr	r3, [pc, #88]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	08db      	lsrs	r3, r3, #3
 80095bc:	f003 0303 	and.w	r3, r3, #3
 80095c0:	4a14      	ldr	r2, [pc, #80]	@ (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80095c2:	fa22 f303 	lsr.w	r3, r2, r3
 80095c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095c8:	e01e      	b.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095ca:	4b11      	ldr	r3, [pc, #68]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095d6:	d106      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80095d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095de:	d102      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095e4:	e010      	b.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095f2:	d106      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80095f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095fa:	d102      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095fc:	4b07      	ldr	r3, [pc, #28]	@ (800961c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80095fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009600:	e002      	b.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009606:	e242      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009608:	e241      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800960a:	4b05      	ldr	r3, [pc, #20]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800960c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800960e:	e23e      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009610:	58024400 	.word	0x58024400
 8009614:	03d09000 	.word	0x03d09000
 8009618:	003d0900 	.word	0x003d0900
 800961c:	017d7840 	.word	0x017d7840
 8009620:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009628:	e231      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800962a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800962e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009632:	430b      	orrs	r3, r1
 8009634:	f040 8085 	bne.w	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009638:	4b9c      	ldr	r3, [pc, #624]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800963a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800963c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009640:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009648:	d06b      	beq.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800964a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009650:	d874      	bhi.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009654:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009658:	d056      	beq.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800965a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009660:	d86c      	bhi.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009664:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009668:	d03b      	beq.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800966a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009670:	d864      	bhi.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009678:	d021      	beq.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800967a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009680:	d85c      	bhi.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009684:	2b00      	cmp	r3, #0
 8009686:	d004      	beq.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8009688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800968e:	d004      	beq.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8009690:	e054      	b.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009692:	f7fe fb5f 	bl	8007d54 <HAL_RCC_GetPCLK1Freq>
 8009696:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009698:	e1f9      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800969a:	4b84      	ldr	r3, [pc, #528]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096a6:	d107      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096a8:	f107 0318 	add.w	r3, r7, #24
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 fa13 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096b6:	e1ea      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096bc:	e1e7      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096be:	4b7b      	ldr	r3, [pc, #492]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096ca:	d107      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096cc:	f107 030c 	add.w	r3, r7, #12
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fb55 	bl	8009d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096da:	e1d8      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e0:	e1d5      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096e2:	4b72      	ldr	r3, [pc, #456]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0304 	and.w	r3, r3, #4
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	d109      	bne.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096ee:	4b6f      	ldr	r3, [pc, #444]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	08db      	lsrs	r3, r3, #3
 80096f4:	f003 0303 	and.w	r3, r3, #3
 80096f8:	4a6d      	ldr	r2, [pc, #436]	@ (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80096fa:	fa22 f303 	lsr.w	r3, r2, r3
 80096fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009700:	e1c5      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009706:	e1c2      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009708:	4b68      	ldr	r3, [pc, #416]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009714:	d102      	bne.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8009716:	4b67      	ldr	r3, [pc, #412]	@ (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800971a:	e1b8      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009720:	e1b5      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009722:	4b62      	ldr	r3, [pc, #392]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800972a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800972e:	d102      	bne.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8009730:	4b61      	ldr	r3, [pc, #388]	@ (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009734:	e1ab      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009736:	2300      	movs	r3, #0
 8009738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800973a:	e1a8      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009740:	e1a5      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009746:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800974a:	430b      	orrs	r3, r1
 800974c:	d173      	bne.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800974e:	4b57      	ldr	r3, [pc, #348]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009752:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009756:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800975e:	d02f      	beq.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8009760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009766:	d863      	bhi.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976a:	2b00      	cmp	r3, #0
 800976c:	d004      	beq.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800976e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009774:	d012      	beq.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8009776:	e05b      	b.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009778:	4b4c      	ldr	r3, [pc, #304]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009784:	d107      	bne.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009786:	f107 0318 	add.w	r3, r7, #24
 800978a:	4618      	mov	r0, r3
 800978c:	f000 f9a4 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009794:	e17b      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800979a:	e178      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800979c:	4b43      	ldr	r3, [pc, #268]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097a8:	d107      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097aa:	f107 030c 	add.w	r3, r7, #12
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 fae6 	bl	8009d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097b8:	e169      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097be:	e166      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097c0:	4b3a      	ldr	r3, [pc, #232]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097c8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097ca:	4b38      	ldr	r3, [pc, #224]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0304 	and.w	r3, r3, #4
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d10c      	bne.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80097d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d109      	bne.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097dc:	4b33      	ldr	r3, [pc, #204]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	08db      	lsrs	r3, r3, #3
 80097e2:	f003 0303 	and.w	r3, r3, #3
 80097e6:	4a32      	ldr	r2, [pc, #200]	@ (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80097e8:	fa22 f303 	lsr.w	r3, r2, r3
 80097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097ee:	e01e      	b.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097f0:	4b2e      	ldr	r3, [pc, #184]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097fc:	d106      	bne.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80097fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009804:	d102      	bne.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009806:	4b2b      	ldr	r3, [pc, #172]	@ (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800980a:	e010      	b.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800980c:	4b27      	ldr	r3, [pc, #156]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009818:	d106      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800981a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800981c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009820:	d102      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009822:	4b25      	ldr	r3, [pc, #148]	@ (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009826:	e002      	b.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800982c:	e12f      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800982e:	e12e      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009834:	e12b      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800983a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800983e:	430b      	orrs	r3, r1
 8009840:	d13c      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009842:	4b1a      	ldr	r3, [pc, #104]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800984a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800984c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984e:	2b00      	cmp	r3, #0
 8009850:	d004      	beq.n	800985c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8009852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009858:	d012      	beq.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800985a:	e023      	b.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800985c:	4b13      	ldr	r3, [pc, #76]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009868:	d107      	bne.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800986a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fbda 	bl	800a028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009878:	e109      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800987e:	e106      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009880:	4b0a      	ldr	r3, [pc, #40]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009888:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800988c:	d107      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800988e:	f107 0318 	add.w	r3, r7, #24
 8009892:	4618      	mov	r0, r3
 8009894:	f000 f920 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800989c:	e0f7      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a2:	e0f4      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80098a4:	2300      	movs	r3, #0
 80098a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a8:	e0f1      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80098aa:	bf00      	nop
 80098ac:	58024400 	.word	0x58024400
 80098b0:	03d09000 	.word	0x03d09000
 80098b4:	003d0900 	.word	0x003d0900
 80098b8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80098bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098c0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80098c4:	430b      	orrs	r3, r1
 80098c6:	f040 8091 	bne.w	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80098ca:	4b73      	ldr	r3, [pc, #460]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80098d2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80098da:	f000 8081 	beq.w	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80098de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80098e4:	d87f      	bhi.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80098e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098ec:	d06b      	beq.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80098ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098f4:	d877      	bhi.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80098f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098fc:	d056      	beq.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80098fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009904:	d86f      	bhi.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009908:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800990c:	d03b      	beq.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800990e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009910:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009914:	d867      	bhi.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800991c:	d021      	beq.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800991e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009924:	d85f      	bhi.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009928:	2b00      	cmp	r3, #0
 800992a:	d004      	beq.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800992c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009932:	d004      	beq.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009934:	e057      	b.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009936:	f000 f8b9 	bl	8009aac <HAL_RCCEx_GetD3PCLK1Freq>
 800993a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800993c:	e0a7      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800993e:	4b56      	ldr	r3, [pc, #344]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009946:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800994a:	d107      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800994c:	f107 0318 	add.w	r3, r7, #24
 8009950:	4618      	mov	r0, r3
 8009952:	f000 f8c1 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800995a:	e098      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009960:	e095      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009962:	4b4d      	ldr	r3, [pc, #308]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800996a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800996e:	d107      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009970:	f107 030c 	add.w	r3, r7, #12
 8009974:	4618      	mov	r0, r3
 8009976:	f000 fa03 	bl	8009d80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800997e:	e086      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009984:	e083      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009986:	4b44      	ldr	r3, [pc, #272]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b04      	cmp	r3, #4
 8009990:	d109      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009992:	4b41      	ldr	r3, [pc, #260]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	08db      	lsrs	r3, r3, #3
 8009998:	f003 0303 	and.w	r3, r3, #3
 800999c:	4a3f      	ldr	r2, [pc, #252]	@ (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800999e:	fa22 f303 	lsr.w	r3, r2, r3
 80099a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099a4:	e073      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099aa:	e070      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80099ac:	4b3a      	ldr	r3, [pc, #232]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099b8:	d102      	bne.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80099ba:	4b39      	ldr	r3, [pc, #228]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80099bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099be:	e066      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099c0:	2300      	movs	r3, #0
 80099c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099c4:	e063      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80099c6:	4b34      	ldr	r3, [pc, #208]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099d2:	d102      	bne.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80099d4:	4b33      	ldr	r3, [pc, #204]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80099d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099d8:	e059      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099de:	e056      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80099e0:	4b31      	ldr	r3, [pc, #196]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e4:	e053      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ea:	e050      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80099ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099f0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80099f4:	430b      	orrs	r3, r1
 80099f6:	d148      	bne.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80099f8:	4b27      	ldr	r3, [pc, #156]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80099fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a08:	d02a      	beq.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a10:	d838      	bhi.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d004      	beq.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a1e:	d00d      	beq.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009a20:	e030      	b.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a22:	4b1d      	ldr	r3, [pc, #116]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a2e:	d102      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009a30:	4b1c      	ldr	r3, [pc, #112]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a34:	e02b      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a3a:	e028      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a3c:	4b16      	ldr	r3, [pc, #88]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a48:	d107      	bne.n	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 faea 	bl	800a028 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a58:	e019      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a5e:	e016      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a60:	4b0d      	ldr	r3, [pc, #52]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a6c:	d107      	bne.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a6e:	f107 0318 	add.w	r3, r7, #24
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 f830 	bl	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a7c:	e007      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a82:	e004      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a88:	e001      	b.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3740      	adds	r7, #64	@ 0x40
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	58024400 	.word	0x58024400
 8009a9c:	03d09000 	.word	0x03d09000
 8009aa0:	003d0900 	.word	0x003d0900
 8009aa4:	017d7840 	.word	0x017d7840
 8009aa8:	00bb8000 	.word	0x00bb8000

08009aac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009ab0:	f7fe f920 	bl	8007cf4 <HAL_RCC_GetHCLKFreq>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	4b06      	ldr	r3, [pc, #24]	@ (8009ad0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	091b      	lsrs	r3, r3, #4
 8009abc:	f003 0307 	and.w	r3, r3, #7
 8009ac0:	4904      	ldr	r1, [pc, #16]	@ (8009ad4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009ac2:	5ccb      	ldrb	r3, [r1, r3]
 8009ac4:	f003 031f 	and.w	r3, r3, #31
 8009ac8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	58024400 	.word	0x58024400
 8009ad4:	0800b050 	.word	0x0800b050

08009ad8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b089      	sub	sp, #36	@ 0x24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ae0:	4ba1      	ldr	r3, [pc, #644]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae4:	f003 0303 	and.w	r3, r3, #3
 8009ae8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009aea:	4b9f      	ldr	r3, [pc, #636]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aee:	0b1b      	lsrs	r3, r3, #12
 8009af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009af4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009af6:	4b9c      	ldr	r3, [pc, #624]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afa:	091b      	lsrs	r3, r3, #4
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009b02:	4b99      	ldr	r3, [pc, #612]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b06:	08db      	lsrs	r3, r3, #3
 8009b08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	fb02 f303 	mul.w	r3, r2, r3
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 8111 	beq.w	8009d48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	f000 8083 	beq.w	8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	f200 80a1 	bhi.w	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d003      	beq.n	8009b44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d056      	beq.n	8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009b42:	e099      	b.n	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b44:	4b88      	ldr	r3, [pc, #544]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0320 	and.w	r3, r3, #32
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d02d      	beq.n	8009bac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b50:	4b85      	ldr	r3, [pc, #532]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	08db      	lsrs	r3, r3, #3
 8009b56:	f003 0303 	and.w	r3, r3, #3
 8009b5a:	4a84      	ldr	r2, [pc, #528]	@ (8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	ee07 3a90 	vmov	s15, r3
 8009b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b7a:	4b7b      	ldr	r3, [pc, #492]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009baa:	e087      	b.n	8009cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	ee07 3a90 	vmov	s15, r3
 8009bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bee:	e065      	b.n	8009cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	ee07 3a90 	vmov	s15, r3
 8009bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c02:	4b59      	ldr	r3, [pc, #356]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c32:	e043      	b.n	8009cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	ee07 3a90 	vmov	s15, r3
 8009c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c46:	4b48      	ldr	r3, [pc, #288]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c76:	e021      	b.n	8009cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	ee07 3a90 	vmov	s15, r3
 8009c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c8a:	4b37      	ldr	r3, [pc, #220]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc0:	0a5b      	lsrs	r3, r3, #9
 8009cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc6:	ee07 3a90 	vmov	s15, r3
 8009cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ce2:	ee17 2a90 	vmov	r2, s15
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009cea:	4b1f      	ldr	r3, [pc, #124]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cee:	0c1b      	lsrs	r3, r3, #16
 8009cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cf4:	ee07 3a90 	vmov	s15, r3
 8009cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d10:	ee17 2a90 	vmov	r2, s15
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009d18:	4b13      	ldr	r3, [pc, #76]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d1c:	0e1b      	lsrs	r3, r3, #24
 8009d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d3e:	ee17 2a90 	vmov	r2, s15
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d46:	e008      	b.n	8009d5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	609a      	str	r2, [r3, #8]
}
 8009d5a:	bf00      	nop
 8009d5c:	3724      	adds	r7, #36	@ 0x24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	58024400 	.word	0x58024400
 8009d6c:	03d09000 	.word	0x03d09000
 8009d70:	46000000 	.word	0x46000000
 8009d74:	4c742400 	.word	0x4c742400
 8009d78:	4a742400 	.word	0x4a742400
 8009d7c:	4bbebc20 	.word	0x4bbebc20

08009d80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b089      	sub	sp, #36	@ 0x24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d88:	4ba1      	ldr	r3, [pc, #644]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d8c:	f003 0303 	and.w	r3, r3, #3
 8009d90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009d92:	4b9f      	ldr	r3, [pc, #636]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d96:	0d1b      	lsrs	r3, r3, #20
 8009d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d9e:	4b9c      	ldr	r3, [pc, #624]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da2:	0a1b      	lsrs	r3, r3, #8
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009daa:	4b99      	ldr	r3, [pc, #612]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dae:	08db      	lsrs	r3, r3, #3
 8009db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	fb02 f303 	mul.w	r3, r2, r3
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 8111 	beq.w	8009ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	f000 8083 	beq.w	8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	f200 80a1 	bhi.w	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d003      	beq.n	8009dec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d056      	beq.n	8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009dea:	e099      	b.n	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dec:	4b88      	ldr	r3, [pc, #544]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 0320 	and.w	r3, r3, #32
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d02d      	beq.n	8009e54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009df8:	4b85      	ldr	r3, [pc, #532]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	08db      	lsrs	r3, r3, #3
 8009dfe:	f003 0303 	and.w	r3, r3, #3
 8009e02:	4a84      	ldr	r2, [pc, #528]	@ (800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e04:	fa22 f303 	lsr.w	r3, r2, r3
 8009e08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	ee07 3a90 	vmov	s15, r3
 8009e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e22:	4b7b      	ldr	r3, [pc, #492]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e52:	e087      	b.n	8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a01c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e66:	4b6a      	ldr	r3, [pc, #424]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e96:	e065      	b.n	8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eaa:	4b59      	ldr	r3, [pc, #356]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ebe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eda:	e043      	b.n	8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	ee07 3a90 	vmov	s15, r3
 8009ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eee:	4b48      	ldr	r3, [pc, #288]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f1e:	e021      	b.n	8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f32:	4b37      	ldr	r3, [pc, #220]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009f64:	4b2a      	ldr	r3, [pc, #168]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f68:	0a5b      	lsrs	r3, r3, #9
 8009f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f6e:	ee07 3a90 	vmov	s15, r3
 8009f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f8a:	ee17 2a90 	vmov	r2, s15
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009f92:	4b1f      	ldr	r3, [pc, #124]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f96:	0c1b      	lsrs	r3, r3, #16
 8009f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f9c:	ee07 3a90 	vmov	s15, r3
 8009fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fb8:	ee17 2a90 	vmov	r2, s15
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009fc0:	4b13      	ldr	r3, [pc, #76]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fc4:	0e1b      	lsrs	r3, r3, #24
 8009fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fe6:	ee17 2a90 	vmov	r2, s15
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009fee:	e008      	b.n	800a002 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	609a      	str	r2, [r3, #8]
}
 800a002:	bf00      	nop
 800a004:	3724      	adds	r7, #36	@ 0x24
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	58024400 	.word	0x58024400
 800a014:	03d09000 	.word	0x03d09000
 800a018:	46000000 	.word	0x46000000
 800a01c:	4c742400 	.word	0x4c742400
 800a020:	4a742400 	.word	0x4a742400
 800a024:	4bbebc20 	.word	0x4bbebc20

0800a028 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a028:	b480      	push	{r7}
 800a02a:	b089      	sub	sp, #36	@ 0x24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a030:	4ba0      	ldr	r3, [pc, #640]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a034:	f003 0303 	and.w	r3, r3, #3
 800a038:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a03a:	4b9e      	ldr	r3, [pc, #632]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03e:	091b      	lsrs	r3, r3, #4
 800a040:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a044:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a046:	4b9b      	ldr	r3, [pc, #620]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a04a:	f003 0301 	and.w	r3, r3, #1
 800a04e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a050:	4b98      	ldr	r3, [pc, #608]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a054:	08db      	lsrs	r3, r3, #3
 800a056:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	fb02 f303 	mul.w	r3, r2, r3
 800a060:	ee07 3a90 	vmov	s15, r3
 800a064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a068:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 8111 	beq.w	800a296 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	2b02      	cmp	r3, #2
 800a078:	f000 8083 	beq.w	800a182 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	2b02      	cmp	r3, #2
 800a080:	f200 80a1 	bhi.w	800a1c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d056      	beq.n	800a13e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a090:	e099      	b.n	800a1c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a092:	4b88      	ldr	r3, [pc, #544]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 0320 	and.w	r3, r3, #32
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d02d      	beq.n	800a0fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a09e:	4b85      	ldr	r3, [pc, #532]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	08db      	lsrs	r3, r3, #3
 800a0a4:	f003 0303 	and.w	r3, r3, #3
 800a0a8:	4a83      	ldr	r2, [pc, #524]	@ (800a2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a0aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	ee07 3a90 	vmov	s15, r3
 800a0b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	ee07 3a90 	vmov	s15, r3
 800a0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0c8:	4b7a      	ldr	r3, [pc, #488]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d0:	ee07 3a90 	vmov	s15, r3
 800a0d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0dc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a2bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a0f8:	e087      	b.n	800a20a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	ee07 3a90 	vmov	s15, r3
 800a100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a104:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10c:	4b69      	ldr	r3, [pc, #420]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a10e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a114:	ee07 3a90 	vmov	s15, r3
 800a118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a120:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a2bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a134:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a138:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a13c:	e065      	b.n	800a20a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	ee07 3a90 	vmov	s15, r3
 800a144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a148:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a14c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a150:	4b58      	ldr	r3, [pc, #352]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a158:	ee07 3a90 	vmov	s15, r3
 800a15c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a160:	ed97 6a03 	vldr	s12, [r7, #12]
 800a164:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a2bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a180:	e043      	b.n	800a20a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	ee07 3a90 	vmov	s15, r3
 800a188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a2c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a194:	4b47      	ldr	r3, [pc, #284]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19c:	ee07 3a90 	vmov	s15, r3
 800a1a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1a8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a2bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1c4:	e021      	b.n	800a20a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	ee07 3a90 	vmov	s15, r3
 800a1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a1d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d8:	4b36      	ldr	r3, [pc, #216]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e0:	ee07 3a90 	vmov	s15, r3
 800a1e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a2bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a200:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a204:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a208:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a20a:	4b2a      	ldr	r3, [pc, #168]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a20c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a20e:	0a5b      	lsrs	r3, r3, #9
 800a210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a214:	ee07 3a90 	vmov	s15, r3
 800a218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a220:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a224:	edd7 6a07 	vldr	s13, [r7, #28]
 800a228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a22c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a230:	ee17 2a90 	vmov	r2, s15
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a238:	4b1e      	ldr	r3, [pc, #120]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a23a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a23c:	0c1b      	lsrs	r3, r3, #16
 800a23e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a242:	ee07 3a90 	vmov	s15, r3
 800a246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a24e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a252:	edd7 6a07 	vldr	s13, [r7, #28]
 800a256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a25a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a25e:	ee17 2a90 	vmov	r2, s15
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a266:	4b13      	ldr	r3, [pc, #76]	@ (800a2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a26a:	0e1b      	lsrs	r3, r3, #24
 800a26c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a270:	ee07 3a90 	vmov	s15, r3
 800a274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a278:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a27c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a280:	edd7 6a07 	vldr	s13, [r7, #28]
 800a284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a28c:	ee17 2a90 	vmov	r2, s15
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a294:	e008      	b.n	800a2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	609a      	str	r2, [r3, #8]
}
 800a2a8:	bf00      	nop
 800a2aa:	3724      	adds	r7, #36	@ 0x24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	58024400 	.word	0x58024400
 800a2b8:	03d09000 	.word	0x03d09000
 800a2bc:	46000000 	.word	0x46000000
 800a2c0:	4c742400 	.word	0x4c742400
 800a2c4:	4a742400 	.word	0x4a742400
 800a2c8:	4bbebc20 	.word	0x4bbebc20

0800a2cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2da:	4b53      	ldr	r3, [pc, #332]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2de:	f003 0303 	and.w	r3, r3, #3
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d101      	bne.n	800a2ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e099      	b.n	800a41e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a2ea:	4b4f      	ldr	r3, [pc, #316]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a4e      	ldr	r2, [pc, #312]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a2f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2f6:	f7f7 fcc7 	bl	8001c88 <HAL_GetTick>
 800a2fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2fc:	e008      	b.n	800a310 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2fe:	f7f7 fcc3 	bl	8001c88 <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d901      	bls.n	800a310 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e086      	b.n	800a41e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a310:	4b45      	ldr	r3, [pc, #276]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1f0      	bne.n	800a2fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a31c:	4b42      	ldr	r3, [pc, #264]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a320:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	031b      	lsls	r3, r3, #12
 800a32a:	493f      	ldr	r1, [pc, #252]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	3b01      	subs	r3, #1
 800a336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	3b01      	subs	r3, #1
 800a340:	025b      	lsls	r3, r3, #9
 800a342:	b29b      	uxth	r3, r3
 800a344:	431a      	orrs	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	041b      	lsls	r3, r3, #16
 800a34e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a352:	431a      	orrs	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	3b01      	subs	r3, #1
 800a35a:	061b      	lsls	r3, r3, #24
 800a35c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a360:	4931      	ldr	r1, [pc, #196]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a362:	4313      	orrs	r3, r2
 800a364:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a366:	4b30      	ldr	r3, [pc, #192]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	492d      	ldr	r1, [pc, #180]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a374:	4313      	orrs	r3, r2
 800a376:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a378:	4b2b      	ldr	r3, [pc, #172]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37c:	f023 0220 	bic.w	r2, r3, #32
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	4928      	ldr	r1, [pc, #160]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a386:	4313      	orrs	r3, r2
 800a388:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a38a:	4b27      	ldr	r3, [pc, #156]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38e:	4a26      	ldr	r2, [pc, #152]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a390:	f023 0310 	bic.w	r3, r3, #16
 800a394:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a396:	4b24      	ldr	r3, [pc, #144]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a398:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a39a:	4b24      	ldr	r3, [pc, #144]	@ (800a42c <RCCEx_PLL2_Config+0x160>)
 800a39c:	4013      	ands	r3, r2
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	69d2      	ldr	r2, [r2, #28]
 800a3a2:	00d2      	lsls	r2, r2, #3
 800a3a4:	4920      	ldr	r1, [pc, #128]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a3aa:	4b1f      	ldr	r3, [pc, #124]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ae:	4a1e      	ldr	r2, [pc, #120]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a3b0:	f043 0310 	orr.w	r3, r3, #16
 800a3b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d106      	bne.n	800a3ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a3bc:	4b1a      	ldr	r3, [pc, #104]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c0:	4a19      	ldr	r2, [pc, #100]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a3c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a3c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a3c8:	e00f      	b.n	800a3ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d106      	bne.n	800a3de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a3d0:	4b15      	ldr	r3, [pc, #84]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d4:	4a14      	ldr	r2, [pc, #80]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a3d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a3dc:	e005      	b.n	800a3ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a3de:	4b12      	ldr	r3, [pc, #72]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e2:	4a11      	ldr	r2, [pc, #68]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a3e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a3e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a3ea:	4b0f      	ldr	r3, [pc, #60]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a0e      	ldr	r2, [pc, #56]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a3f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3f6:	f7f7 fc47 	bl	8001c88 <HAL_GetTick>
 800a3fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3fc:	e008      	b.n	800a410 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3fe:	f7f7 fc43 	bl	8001c88 <HAL_GetTick>
 800a402:	4602      	mov	r2, r0
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d901      	bls.n	800a410 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e006      	b.n	800a41e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a410:	4b05      	ldr	r3, [pc, #20]	@ (800a428 <RCCEx_PLL2_Config+0x15c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d0f0      	beq.n	800a3fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	58024400 	.word	0x58024400
 800a42c:	ffff0007 	.word	0xffff0007

0800a430 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a43e:	4b53      	ldr	r3, [pc, #332]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a442:	f003 0303 	and.w	r3, r3, #3
 800a446:	2b03      	cmp	r3, #3
 800a448:	d101      	bne.n	800a44e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e099      	b.n	800a582 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a44e:	4b4f      	ldr	r3, [pc, #316]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a4e      	ldr	r2, [pc, #312]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a45a:	f7f7 fc15 	bl	8001c88 <HAL_GetTick>
 800a45e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a460:	e008      	b.n	800a474 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a462:	f7f7 fc11 	bl	8001c88 <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d901      	bls.n	800a474 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e086      	b.n	800a582 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a474:	4b45      	ldr	r3, [pc, #276]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1f0      	bne.n	800a462 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a480:	4b42      	ldr	r3, [pc, #264]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a484:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	051b      	lsls	r3, r3, #20
 800a48e:	493f      	ldr	r1, [pc, #252]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a490:	4313      	orrs	r3, r2
 800a492:	628b      	str	r3, [r1, #40]	@ 0x28
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	3b01      	subs	r3, #1
 800a49a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	025b      	lsls	r3, r3, #9
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	041b      	lsls	r3, r3, #16
 800a4b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	061b      	lsls	r3, r3, #24
 800a4c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a4c4:	4931      	ldr	r1, [pc, #196]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a4ca:	4b30      	ldr	r3, [pc, #192]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	492d      	ldr	r1, [pc, #180]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a4dc:	4b2b      	ldr	r3, [pc, #172]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	4928      	ldr	r1, [pc, #160]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a4ee:	4b27      	ldr	r3, [pc, #156]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f2:	4a26      	ldr	r2, [pc, #152]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a4f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4fa:	4b24      	ldr	r3, [pc, #144]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a4fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4fe:	4b24      	ldr	r3, [pc, #144]	@ (800a590 <RCCEx_PLL3_Config+0x160>)
 800a500:	4013      	ands	r3, r2
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	69d2      	ldr	r2, [r2, #28]
 800a506:	00d2      	lsls	r2, r2, #3
 800a508:	4920      	ldr	r1, [pc, #128]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a50a:	4313      	orrs	r3, r2
 800a50c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a50e:	4b1f      	ldr	r3, [pc, #124]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a512:	4a1e      	ldr	r2, [pc, #120]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a518:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d106      	bne.n	800a52e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a520:	4b1a      	ldr	r3, [pc, #104]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a524:	4a19      	ldr	r2, [pc, #100]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a526:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a52a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a52c:	e00f      	b.n	800a54e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d106      	bne.n	800a542 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a534:	4b15      	ldr	r3, [pc, #84]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a538:	4a14      	ldr	r2, [pc, #80]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a53a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a53e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a540:	e005      	b.n	800a54e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a542:	4b12      	ldr	r3, [pc, #72]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a546:	4a11      	ldr	r2, [pc, #68]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a548:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a54c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a54e:	4b0f      	ldr	r3, [pc, #60]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a0e      	ldr	r2, [pc, #56]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a55a:	f7f7 fb95 	bl	8001c88 <HAL_GetTick>
 800a55e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a560:	e008      	b.n	800a574 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a562:	f7f7 fb91 	bl	8001c88 <HAL_GetTick>
 800a566:	4602      	mov	r2, r0
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d901      	bls.n	800a574 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a570:	2303      	movs	r3, #3
 800a572:	e006      	b.n	800a582 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a574:	4b05      	ldr	r3, [pc, #20]	@ (800a58c <RCCEx_PLL3_Config+0x15c>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0f0      	beq.n	800a562 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a580:	7bfb      	ldrb	r3, [r7, #15]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	58024400 	.word	0x58024400
 800a590:	ffff0007 	.word	0xffff0007

0800a594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e049      	b.n	800a63a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d106      	bne.n	800a5c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7f7 f834 	bl	8001628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3304      	adds	r3, #4
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	f000 fae0 	bl	800ab98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b01      	cmp	r3, #1
 800a656:	d001      	beq.n	800a65c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e054      	b.n	800a706 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2202      	movs	r2, #2
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68da      	ldr	r2, [r3, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f042 0201 	orr.w	r2, r2, #1
 800a672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a26      	ldr	r2, [pc, #152]	@ (800a714 <HAL_TIM_Base_Start_IT+0xd0>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d022      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a686:	d01d      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a22      	ldr	r2, [pc, #136]	@ (800a718 <HAL_TIM_Base_Start_IT+0xd4>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d018      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a21      	ldr	r2, [pc, #132]	@ (800a71c <HAL_TIM_Base_Start_IT+0xd8>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d013      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a1f      	ldr	r2, [pc, #124]	@ (800a720 <HAL_TIM_Base_Start_IT+0xdc>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00e      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a1e      	ldr	r2, [pc, #120]	@ (800a724 <HAL_TIM_Base_Start_IT+0xe0>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d009      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a1c      	ldr	r2, [pc, #112]	@ (800a728 <HAL_TIM_Base_Start_IT+0xe4>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d004      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a1b      	ldr	r2, [pc, #108]	@ (800a72c <HAL_TIM_Base_Start_IT+0xe8>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d115      	bne.n	800a6f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	4b19      	ldr	r3, [pc, #100]	@ (800a730 <HAL_TIM_Base_Start_IT+0xec>)
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b06      	cmp	r3, #6
 800a6d4:	d015      	beq.n	800a702 <HAL_TIM_Base_Start_IT+0xbe>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6dc:	d011      	beq.n	800a702 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f042 0201 	orr.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ee:	e008      	b.n	800a702 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f042 0201 	orr.w	r2, r2, #1
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	e000      	b.n	800a704 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3714      	adds	r7, #20
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	40010000 	.word	0x40010000
 800a718:	40000400 	.word	0x40000400
 800a71c:	40000800 	.word	0x40000800
 800a720:	40000c00 	.word	0x40000c00
 800a724:	40010400 	.word	0x40010400
 800a728:	40001800 	.word	0x40001800
 800a72c:	40014000 	.word	0x40014000
 800a730:	00010007 	.word	0x00010007

0800a734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f003 0302 	and.w	r3, r3, #2
 800a752:	2b00      	cmp	r3, #0
 800a754:	d020      	beq.n	800a798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f003 0302 	and.w	r3, r3, #2
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d01b      	beq.n	800a798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f06f 0202 	mvn.w	r2, #2
 800a768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	f003 0303 	and.w	r3, r3, #3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f9ec 	bl	800ab5c <HAL_TIM_IC_CaptureCallback>
 800a784:	e005      	b.n	800a792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f9de 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f9ef 	bl	800ab70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	f003 0304 	and.w	r3, r3, #4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d020      	beq.n	800a7e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f003 0304 	and.w	r3, r3, #4
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d01b      	beq.n	800a7e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f06f 0204 	mvn.w	r2, #4
 800a7b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f9c6 	bl	800ab5c <HAL_TIM_IC_CaptureCallback>
 800a7d0:	e005      	b.n	800a7de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f9b8 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f9c9 	bl	800ab70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f003 0308 	and.w	r3, r3, #8
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d020      	beq.n	800a830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d01b      	beq.n	800a830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f06f 0208 	mvn.w	r2, #8
 800a800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2204      	movs	r2, #4
 800a806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	f003 0303 	and.w	r3, r3, #3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f9a0 	bl	800ab5c <HAL_TIM_IC_CaptureCallback>
 800a81c:	e005      	b.n	800a82a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f992 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f9a3 	bl	800ab70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	f003 0310 	and.w	r3, r3, #16
 800a836:	2b00      	cmp	r3, #0
 800a838:	d020      	beq.n	800a87c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f003 0310 	and.w	r3, r3, #16
 800a840:	2b00      	cmp	r3, #0
 800a842:	d01b      	beq.n	800a87c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f06f 0210 	mvn.w	r2, #16
 800a84c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2208      	movs	r2, #8
 800a852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f97a 	bl	800ab5c <HAL_TIM_IC_CaptureCallback>
 800a868:	e005      	b.n	800a876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f96c 	bl	800ab48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f97d 	bl	800ab70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00c      	beq.n	800a8a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f003 0301 	and.w	r3, r3, #1
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d007      	beq.n	800a8a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f06f 0201 	mvn.w	r2, #1
 800a898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f94a 	bl	800ab34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d104      	bne.n	800a8b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00c      	beq.n	800a8ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d007      	beq.n	800a8ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a8c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fb41 	bl	800af50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00c      	beq.n	800a8f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d007      	beq.n	800a8f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a8ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fb39 	bl	800af64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00c      	beq.n	800a916 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a902:	2b00      	cmp	r3, #0
 800a904:	d007      	beq.n	800a916 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a90e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f937 	bl	800ab84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	f003 0320 	and.w	r3, r3, #32
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00c      	beq.n	800a93a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f003 0320 	and.w	r3, r3, #32
 800a926:	2b00      	cmp	r3, #0
 800a928:	d007      	beq.n	800a93a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f06f 0220 	mvn.w	r2, #32
 800a932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fb01 	bl	800af3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a93a:	bf00      	nop
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d101      	bne.n	800a960 <HAL_TIM_ConfigClockSource+0x1c>
 800a95c:	2302      	movs	r3, #2
 800a95e:	e0dc      	b.n	800ab1a <HAL_TIM_ConfigClockSource+0x1d6>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2202      	movs	r2, #2
 800a96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	4b6a      	ldr	r3, [pc, #424]	@ (800ab24 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a97c:	4013      	ands	r3, r2
 800a97e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a64      	ldr	r2, [pc, #400]	@ (800ab28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a996:	4293      	cmp	r3, r2
 800a998:	f000 80a9 	beq.w	800aaee <HAL_TIM_ConfigClockSource+0x1aa>
 800a99c:	4a62      	ldr	r2, [pc, #392]	@ (800ab28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	f200 80ae 	bhi.w	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9a4:	4a61      	ldr	r2, [pc, #388]	@ (800ab2c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	f000 80a1 	beq.w	800aaee <HAL_TIM_ConfigClockSource+0x1aa>
 800a9ac:	4a5f      	ldr	r2, [pc, #380]	@ (800ab2c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	f200 80a6 	bhi.w	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9b4:	4a5e      	ldr	r2, [pc, #376]	@ (800ab30 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	f000 8099 	beq.w	800aaee <HAL_TIM_ConfigClockSource+0x1aa>
 800a9bc:	4a5c      	ldr	r2, [pc, #368]	@ (800ab30 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	f200 809e 	bhi.w	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9c8:	f000 8091 	beq.w	800aaee <HAL_TIM_ConfigClockSource+0x1aa>
 800a9cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9d0:	f200 8096 	bhi.w	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9d8:	f000 8089 	beq.w	800aaee <HAL_TIM_ConfigClockSource+0x1aa>
 800a9dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9e0:	f200 808e 	bhi.w	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9e8:	d03e      	beq.n	800aa68 <HAL_TIM_ConfigClockSource+0x124>
 800a9ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9ee:	f200 8087 	bhi.w	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9f6:	f000 8086 	beq.w	800ab06 <HAL_TIM_ConfigClockSource+0x1c2>
 800a9fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9fe:	d87f      	bhi.n	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa00:	2b70      	cmp	r3, #112	@ 0x70
 800aa02:	d01a      	beq.n	800aa3a <HAL_TIM_ConfigClockSource+0xf6>
 800aa04:	2b70      	cmp	r3, #112	@ 0x70
 800aa06:	d87b      	bhi.n	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa08:	2b60      	cmp	r3, #96	@ 0x60
 800aa0a:	d050      	beq.n	800aaae <HAL_TIM_ConfigClockSource+0x16a>
 800aa0c:	2b60      	cmp	r3, #96	@ 0x60
 800aa0e:	d877      	bhi.n	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa10:	2b50      	cmp	r3, #80	@ 0x50
 800aa12:	d03c      	beq.n	800aa8e <HAL_TIM_ConfigClockSource+0x14a>
 800aa14:	2b50      	cmp	r3, #80	@ 0x50
 800aa16:	d873      	bhi.n	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa18:	2b40      	cmp	r3, #64	@ 0x40
 800aa1a:	d058      	beq.n	800aace <HAL_TIM_ConfigClockSource+0x18a>
 800aa1c:	2b40      	cmp	r3, #64	@ 0x40
 800aa1e:	d86f      	bhi.n	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa20:	2b30      	cmp	r3, #48	@ 0x30
 800aa22:	d064      	beq.n	800aaee <HAL_TIM_ConfigClockSource+0x1aa>
 800aa24:	2b30      	cmp	r3, #48	@ 0x30
 800aa26:	d86b      	bhi.n	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa28:	2b20      	cmp	r3, #32
 800aa2a:	d060      	beq.n	800aaee <HAL_TIM_ConfigClockSource+0x1aa>
 800aa2c:	2b20      	cmp	r3, #32
 800aa2e:	d867      	bhi.n	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d05c      	beq.n	800aaee <HAL_TIM_ConfigClockSource+0x1aa>
 800aa34:	2b10      	cmp	r3, #16
 800aa36:	d05a      	beq.n	800aaee <HAL_TIM_ConfigClockSource+0x1aa>
 800aa38:	e062      	b.n	800ab00 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa4a:	f000 f9c9 	bl	800ade0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	609a      	str	r2, [r3, #8]
      break;
 800aa66:	e04f      	b.n	800ab08 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa78:	f000 f9b2 	bl	800ade0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	689a      	ldr	r2, [r3, #8]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa8a:	609a      	str	r2, [r3, #8]
      break;
 800aa8c:	e03c      	b.n	800ab08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f000 f922 	bl	800ace4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2150      	movs	r1, #80	@ 0x50
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 f97c 	bl	800ada4 <TIM_ITRx_SetConfig>
      break;
 800aaac:	e02c      	b.n	800ab08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaba:	461a      	mov	r2, r3
 800aabc:	f000 f941 	bl	800ad42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2160      	movs	r1, #96	@ 0x60
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 f96c 	bl	800ada4 <TIM_ITRx_SetConfig>
      break;
 800aacc:	e01c      	b.n	800ab08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aada:	461a      	mov	r2, r3
 800aadc:	f000 f902 	bl	800ace4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2140      	movs	r1, #64	@ 0x40
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 f95c 	bl	800ada4 <TIM_ITRx_SetConfig>
      break;
 800aaec:	e00c      	b.n	800ab08 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	4610      	mov	r0, r2
 800aafa:	f000 f953 	bl	800ada4 <TIM_ITRx_SetConfig>
      break;
 800aafe:	e003      	b.n	800ab08 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	73fb      	strb	r3, [r7, #15]
      break;
 800ab04:	e000      	b.n	800ab08 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ab06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	ffceff88 	.word	0xffceff88
 800ab28:	00100040 	.word	0x00100040
 800ab2c:	00100030 	.word	0x00100030
 800ab30:	00100020 	.word	0x00100020

0800ab34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a46      	ldr	r2, [pc, #280]	@ (800acc4 <TIM_Base_SetConfig+0x12c>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d013      	beq.n	800abd8 <TIM_Base_SetConfig+0x40>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abb6:	d00f      	beq.n	800abd8 <TIM_Base_SetConfig+0x40>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a43      	ldr	r2, [pc, #268]	@ (800acc8 <TIM_Base_SetConfig+0x130>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d00b      	beq.n	800abd8 <TIM_Base_SetConfig+0x40>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a42      	ldr	r2, [pc, #264]	@ (800accc <TIM_Base_SetConfig+0x134>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d007      	beq.n	800abd8 <TIM_Base_SetConfig+0x40>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a41      	ldr	r2, [pc, #260]	@ (800acd0 <TIM_Base_SetConfig+0x138>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d003      	beq.n	800abd8 <TIM_Base_SetConfig+0x40>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a40      	ldr	r2, [pc, #256]	@ (800acd4 <TIM_Base_SetConfig+0x13c>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d108      	bne.n	800abea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a35      	ldr	r2, [pc, #212]	@ (800acc4 <TIM_Base_SetConfig+0x12c>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d01f      	beq.n	800ac32 <TIM_Base_SetConfig+0x9a>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abf8:	d01b      	beq.n	800ac32 <TIM_Base_SetConfig+0x9a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a32      	ldr	r2, [pc, #200]	@ (800acc8 <TIM_Base_SetConfig+0x130>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d017      	beq.n	800ac32 <TIM_Base_SetConfig+0x9a>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a31      	ldr	r2, [pc, #196]	@ (800accc <TIM_Base_SetConfig+0x134>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d013      	beq.n	800ac32 <TIM_Base_SetConfig+0x9a>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a30      	ldr	r2, [pc, #192]	@ (800acd0 <TIM_Base_SetConfig+0x138>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00f      	beq.n	800ac32 <TIM_Base_SetConfig+0x9a>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a2f      	ldr	r2, [pc, #188]	@ (800acd4 <TIM_Base_SetConfig+0x13c>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00b      	beq.n	800ac32 <TIM_Base_SetConfig+0x9a>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a2e      	ldr	r2, [pc, #184]	@ (800acd8 <TIM_Base_SetConfig+0x140>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d007      	beq.n	800ac32 <TIM_Base_SetConfig+0x9a>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a2d      	ldr	r2, [pc, #180]	@ (800acdc <TIM_Base_SetConfig+0x144>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d003      	beq.n	800ac32 <TIM_Base_SetConfig+0x9a>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a2c      	ldr	r2, [pc, #176]	@ (800ace0 <TIM_Base_SetConfig+0x148>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d108      	bne.n	800ac44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a16      	ldr	r2, [pc, #88]	@ (800acc4 <TIM_Base_SetConfig+0x12c>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d00f      	beq.n	800ac90 <TIM_Base_SetConfig+0xf8>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a18      	ldr	r2, [pc, #96]	@ (800acd4 <TIM_Base_SetConfig+0x13c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d00b      	beq.n	800ac90 <TIM_Base_SetConfig+0xf8>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a17      	ldr	r2, [pc, #92]	@ (800acd8 <TIM_Base_SetConfig+0x140>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d007      	beq.n	800ac90 <TIM_Base_SetConfig+0xf8>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a16      	ldr	r2, [pc, #88]	@ (800acdc <TIM_Base_SetConfig+0x144>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d003      	beq.n	800ac90 <TIM_Base_SetConfig+0xf8>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a15      	ldr	r2, [pc, #84]	@ (800ace0 <TIM_Base_SetConfig+0x148>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d103      	bne.n	800ac98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	691a      	ldr	r2, [r3, #16]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	f003 0301 	and.w	r3, r3, #1
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d105      	bne.n	800acb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	f023 0201 	bic.w	r2, r3, #1
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	611a      	str	r2, [r3, #16]
  }
}
 800acb6:	bf00      	nop
 800acb8:	3714      	adds	r7, #20
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	40010000 	.word	0x40010000
 800acc8:	40000400 	.word	0x40000400
 800accc:	40000800 	.word	0x40000800
 800acd0:	40000c00 	.word	0x40000c00
 800acd4:	40010400 	.word	0x40010400
 800acd8:	40014000 	.word	0x40014000
 800acdc:	40014400 	.word	0x40014400
 800ace0:	40014800 	.word	0x40014800

0800ace4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6a1b      	ldr	r3, [r3, #32]
 800acf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	f023 0201 	bic.w	r2, r3, #1
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	699b      	ldr	r3, [r3, #24]
 800ad06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f023 030a 	bic.w	r3, r3, #10
 800ad20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	621a      	str	r2, [r3, #32]
}
 800ad36:	bf00      	nop
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b087      	sub	sp, #28
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	60f8      	str	r0, [r7, #12]
 800ad4a:	60b9      	str	r1, [r7, #8]
 800ad4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	f023 0210 	bic.w	r2, r3, #16
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	031b      	lsls	r3, r3, #12
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	011b      	lsls	r3, r3, #4
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	621a      	str	r2, [r3, #32]
}
 800ad96:	bf00      	nop
 800ad98:	371c      	adds	r7, #28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
	...

0800ada4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	4b09      	ldr	r3, [pc, #36]	@ (800addc <TIM_ITRx_SetConfig+0x38>)
 800adb8:	4013      	ands	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4313      	orrs	r3, r2
 800adc2:	f043 0307 	orr.w	r3, r3, #7
 800adc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	609a      	str	r2, [r3, #8]
}
 800adce:	bf00      	nop
 800add0:	3714      	adds	r7, #20
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	ffcfff8f 	.word	0xffcfff8f

0800ade0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b087      	sub	sp, #28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	021a      	lsls	r2, r3, #8
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	431a      	orrs	r2, r3
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	609a      	str	r2, [r3, #8]
}
 800ae14:	bf00      	nop
 800ae16:	371c      	adds	r7, #28
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d101      	bne.n	800ae38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae34:	2302      	movs	r3, #2
 800ae36:	e06d      	b.n	800af14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a30      	ldr	r2, [pc, #192]	@ (800af20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d004      	beq.n	800ae6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a2f      	ldr	r2, [pc, #188]	@ (800af24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d108      	bne.n	800ae7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ae72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a20      	ldr	r2, [pc, #128]	@ (800af20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d022      	beq.n	800aee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeaa:	d01d      	beq.n	800aee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a1d      	ldr	r2, [pc, #116]	@ (800af28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d018      	beq.n	800aee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a1c      	ldr	r2, [pc, #112]	@ (800af2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d013      	beq.n	800aee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a1a      	ldr	r2, [pc, #104]	@ (800af30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d00e      	beq.n	800aee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a15      	ldr	r2, [pc, #84]	@ (800af24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d009      	beq.n	800aee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a16      	ldr	r2, [pc, #88]	@ (800af34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d004      	beq.n	800aee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a15      	ldr	r2, [pc, #84]	@ (800af38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d10c      	bne.n	800af02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aeee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr
 800af20:	40010000 	.word	0x40010000
 800af24:	40010400 	.word	0x40010400
 800af28:	40000400 	.word	0x40000400
 800af2c:	40000800 	.word	0x40000800
 800af30:	40000c00 	.word	0x40000c00
 800af34:	40001800 	.word	0x40001800
 800af38:	40014000 	.word	0x40014000

0800af3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <memset>:
 800af78:	4402      	add	r2, r0
 800af7a:	4603      	mov	r3, r0
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d100      	bne.n	800af82 <memset+0xa>
 800af80:	4770      	bx	lr
 800af82:	f803 1b01 	strb.w	r1, [r3], #1
 800af86:	e7f9      	b.n	800af7c <memset+0x4>

0800af88 <__libc_init_array>:
 800af88:	b570      	push	{r4, r5, r6, lr}
 800af8a:	4d0d      	ldr	r5, [pc, #52]	@ (800afc0 <__libc_init_array+0x38>)
 800af8c:	4c0d      	ldr	r4, [pc, #52]	@ (800afc4 <__libc_init_array+0x3c>)
 800af8e:	1b64      	subs	r4, r4, r5
 800af90:	10a4      	asrs	r4, r4, #2
 800af92:	2600      	movs	r6, #0
 800af94:	42a6      	cmp	r6, r4
 800af96:	d109      	bne.n	800afac <__libc_init_array+0x24>
 800af98:	4d0b      	ldr	r5, [pc, #44]	@ (800afc8 <__libc_init_array+0x40>)
 800af9a:	4c0c      	ldr	r4, [pc, #48]	@ (800afcc <__libc_init_array+0x44>)
 800af9c:	f000 f826 	bl	800afec <_init>
 800afa0:	1b64      	subs	r4, r4, r5
 800afa2:	10a4      	asrs	r4, r4, #2
 800afa4:	2600      	movs	r6, #0
 800afa6:	42a6      	cmp	r6, r4
 800afa8:	d105      	bne.n	800afb6 <__libc_init_array+0x2e>
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb0:	4798      	blx	r3
 800afb2:	3601      	adds	r6, #1
 800afb4:	e7ee      	b.n	800af94 <__libc_init_array+0xc>
 800afb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800afba:	4798      	blx	r3
 800afbc:	3601      	adds	r6, #1
 800afbe:	e7f2      	b.n	800afa6 <__libc_init_array+0x1e>
 800afc0:	0800b078 	.word	0x0800b078
 800afc4:	0800b078 	.word	0x0800b078
 800afc8:	0800b078 	.word	0x0800b078
 800afcc:	0800b07c 	.word	0x0800b07c

0800afd0 <memcpy>:
 800afd0:	440a      	add	r2, r1
 800afd2:	4291      	cmp	r1, r2
 800afd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800afd8:	d100      	bne.n	800afdc <memcpy+0xc>
 800afda:	4770      	bx	lr
 800afdc:	b510      	push	{r4, lr}
 800afde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afe6:	4291      	cmp	r1, r2
 800afe8:	d1f9      	bne.n	800afde <memcpy+0xe>
 800afea:	bd10      	pop	{r4, pc}

0800afec <_init>:
 800afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afee:	bf00      	nop
 800aff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff2:	bc08      	pop	{r3}
 800aff4:	469e      	mov	lr, r3
 800aff6:	4770      	bx	lr

0800aff8 <_fini>:
 800aff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affa:	bf00      	nop
 800affc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affe:	bc08      	pop	{r3}
 800b000:	469e      	mov	lr, r3
 800b002:	4770      	bx	lr

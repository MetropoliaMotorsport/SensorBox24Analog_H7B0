
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006578  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08006824  08006824  00016824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006880  08006880  00016880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006884  08006884  00016884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08006888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000032c  24000010  08006898  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400033c  08006898  0002033c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014f08  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002272  00000000  00000000  00034f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011b0  00000000  00000000  000371b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000010b8  00000000  00000000  00038368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031b24  00000000  00000000  00039420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013cb7  00000000  00000000  0006af44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014c8e3  00000000  00000000  0007ebfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001cb4de  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004cf4  00000000  00000000  001cb530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800680c 	.word	0x0800680c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800680c 	.word	0x0800680c

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f0:	f000 ff58 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f4:	f000 f814 	bl	8000320 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002f8:	f000 f88e 	bl	8000418 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 fb22 	bl	8000944 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000300:	f000 f8ba 	bl	8000478 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000304:	f000 f930 	bl	8000568 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000308:	f000 f994 	bl	8000634 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800030c:	f000 f9f6 	bl	80006fc <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000310:	f000 fa58 	bl	80007c4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000314:	f000 fa96 	bl	8000844 <MX_I2C3_Init>
  MX_I2C4_Init();
 8000318:	f000 fad4 	bl	80008c4 <MX_I2C4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800031c:	e7fe      	b.n	800031c <main+0x30>
	...

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b09c      	sub	sp, #112	; 0x70
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800032a:	224c      	movs	r2, #76	; 0x4c
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f006 fa64 	bl	80067fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2220      	movs	r2, #32
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f006 fa5e 	bl	80067fc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000340:	4b33      	ldr	r3, [pc, #204]	; (8000410 <SystemClock_Config+0xf0>)
 8000342:	f04f 32ff 	mov.w	r2, #4294967295
 8000346:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800034a:	2002      	movs	r0, #2
 800034c:	f002 fe38 	bl	8002fc0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000350:	2300      	movs	r3, #0
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <SystemClock_Config+0xf4>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <SystemClock_Config+0xf4>)
 800035a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <SystemClock_Config+0xf4>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000368:	603b      	str	r3, [r7, #0]
 800036a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800036c:	bf00      	nop
 800036e:	4b29      	ldr	r3, [pc, #164]	; (8000414 <SystemClock_Config+0xf4>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800037a:	d1f8      	bne.n	800036e <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800037c:	4b24      	ldr	r3, [pc, #144]	; (8000410 <SystemClock_Config+0xf0>)
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	4a23      	ldr	r2, [pc, #140]	; (8000410 <SystemClock_Config+0xf0>)
 8000382:	f023 0303 	bic.w	r3, r3, #3
 8000386:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000388:	2302      	movs	r3, #2
 800038a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800038c:	2301      	movs	r3, #1
 800038e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000390:	2340      	movs	r3, #64	; 0x40
 8000392:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000394:	2302      	movs	r3, #2
 8000396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000398:	2300      	movs	r3, #0
 800039a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800039c:	2304      	movs	r3, #4
 800039e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003a0:	2308      	movs	r3, #8
 80003a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003a4:	2302      	movs	r3, #2
 80003a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80003a8:	2303      	movs	r3, #3
 80003aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003ac:	2302      	movs	r3, #2
 80003ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003b0:	230c      	movs	r3, #12
 80003b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c0:	4618      	mov	r0, r3
 80003c2:	f002 fe37 	bl	8003034 <HAL_RCC_OscConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003cc:	f000 fb02 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	233f      	movs	r3, #63	; 0x3f
 80003d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003e0:	2340      	movs	r3, #64	; 0x40
 80003e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003e4:	2340      	movs	r3, #64	; 0x40
 80003e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003ee:	2340      	movs	r3, #64	; 0x40
 80003f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2102      	movs	r1, #2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f003 fa4e 	bl	8003898 <HAL_RCC_ClockConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000402:	f000 fae7 	bl	80009d4 <Error_Handler>
  }
}
 8000406:	bf00      	nop
 8000408:	3770      	adds	r7, #112	; 0x70
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	58024400 	.word	0x58024400
 8000414:	58024800 	.word	0x58024800

08000418 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b0b0      	sub	sp, #192	; 0xc0
 800041c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800041e:	463b      	mov	r3, r7
 8000420:	22c0      	movs	r2, #192	; 0xc0
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f006 f9e9 	bl	80067fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800042a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800042e:	f04f 0300 	mov.w	r3, #0
 8000432:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000436:	2304      	movs	r3, #4
 8000438:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 800043a:	2308      	movs	r3, #8
 800043c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800043e:	2303      	movs	r3, #3
 8000440:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000442:	2302      	movs	r3, #2
 8000444:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000446:	2302      	movs	r3, #2
 8000448:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800044a:	23c0      	movs	r3, #192	; 0xc0
 800044c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800044e:	2300      	movs	r3, #0
 8000450:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000456:	2300      	movs	r3, #0
 8000458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800045c:	463b      	mov	r3, r7
 800045e:	4618      	mov	r0, r3
 8000460:	f003 fd90 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800046a:	f000 fab3 	bl	80009d4 <Error_Handler>
  }
}
 800046e:	bf00      	nop
 8000470:	37c0      	adds	r7, #192	; 0xc0
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800048a:	463b      	mov	r3, r7
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
 8000498:	615a      	str	r2, [r3, #20]
 800049a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800049c:	4b2f      	ldr	r3, [pc, #188]	; (800055c <MX_ADC1_Init+0xe4>)
 800049e:	4a30      	ldr	r2, [pc, #192]	; (8000560 <MX_ADC1_Init+0xe8>)
 80004a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004a2:	4b2e      	ldr	r3, [pc, #184]	; (800055c <MX_ADC1_Init+0xe4>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80004a8:	4b2c      	ldr	r3, [pc, #176]	; (800055c <MX_ADC1_Init+0xe4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ae:	4b2b      	ldr	r3, [pc, #172]	; (800055c <MX_ADC1_Init+0xe4>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b4:	4b29      	ldr	r3, [pc, #164]	; (800055c <MX_ADC1_Init+0xe4>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004ba:	4b28      	ldr	r3, [pc, #160]	; (800055c <MX_ADC1_Init+0xe4>)
 80004bc:	2200      	movs	r2, #0
 80004be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004c0:	4b26      	ldr	r3, [pc, #152]	; (800055c <MX_ADC1_Init+0xe4>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80004c6:	4b25      	ldr	r3, [pc, #148]	; (800055c <MX_ADC1_Init+0xe4>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004cc:	4b23      	ldr	r3, [pc, #140]	; (800055c <MX_ADC1_Init+0xe4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004d2:	4b22      	ldr	r3, [pc, #136]	; (800055c <MX_ADC1_Init+0xe4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004d8:	4b20      	ldr	r3, [pc, #128]	; (800055c <MX_ADC1_Init+0xe4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80004de:	4b1f      	ldr	r3, [pc, #124]	; (800055c <MX_ADC1_Init+0xe4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004e4:	4b1d      	ldr	r3, [pc, #116]	; (800055c <MX_ADC1_Init+0xe4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <MX_ADC1_Init+0xe4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_ADC1_Init+0xe4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004f8:	4818      	ldr	r0, [pc, #96]	; (800055c <MX_ADC1_Init+0xe4>)
 80004fa:	f001 f871 	bl	80015e0 <HAL_ADC_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000504:	f000 fa66 	bl	80009d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800050c:	f107 031c 	add.w	r3, r7, #28
 8000510:	4619      	mov	r1, r3
 8000512:	4812      	ldr	r0, [pc, #72]	; (800055c <MX_ADC1_Init+0xe4>)
 8000514:	f001 fd98 	bl	8002048 <HAL_ADCEx_MultiModeConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800051e:	f000 fa59 	bl	80009d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_ADC1_Init+0xec>)
 8000524:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000526:	2306      	movs	r3, #6
 8000528:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800052e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000532:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000534:	2304      	movs	r3, #4
 8000536:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000540:	463b      	mov	r3, r7
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_ADC1_Init+0xe4>)
 8000546:	f001 f9a5 	bl	8001894 <HAL_ADC_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000550:	f000 fa40 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	3728      	adds	r7, #40	; 0x28
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2400002c 	.word	0x2400002c
 8000560:	40022000 	.word	0x40022000
 8000564:	47520000 	.word	0x47520000

08000568 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
 800057e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <MX_ADC2_Init+0xc0>)
 8000582:	4a2a      	ldr	r2, [pc, #168]	; (800062c <MX_ADC2_Init+0xc4>)
 8000584:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000586:	4b28      	ldr	r3, [pc, #160]	; (8000628 <MX_ADC2_Init+0xc0>)
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <MX_ADC2_Init+0xc0>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000592:	4b25      	ldr	r3, [pc, #148]	; (8000628 <MX_ADC2_Init+0xc0>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <MX_ADC2_Init+0xc0>)
 800059a:	2204      	movs	r2, #4
 800059c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <MX_ADC2_Init+0xc0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <MX_ADC2_Init+0xc0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <MX_ADC2_Init+0xc0>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <MX_ADC2_Init+0xc0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b6:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <MX_ADC2_Init+0xc0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_ADC2_Init+0xc0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <MX_ADC2_Init+0xc0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_ADC2_Init+0xc0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_ADC2_Init+0xc0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_ADC2_Init+0xc0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005dc:	4812      	ldr	r0, [pc, #72]	; (8000628 <MX_ADC2_Init+0xc0>)
 80005de:	f000 ffff 	bl	80015e0 <HAL_ADC_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80005e8:	f000 f9f4 	bl	80009d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MX_ADC2_Init+0xc8>)
 80005ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f0:	2306      	movs	r3, #6
 80005f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80005fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005fe:	2304      	movs	r3, #4
 8000600:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000606:	2300      	movs	r3, #0
 8000608:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <MX_ADC2_Init+0xc0>)
 8000610:	f001 f940 	bl	8001894 <HAL_ADC_ConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800061a:	f000 f9db 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	24000090 	.word	0x24000090
 800062c:	40022100 	.word	0x40022100
 8000630:	36902000 	.word	0x36902000

08000634 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000638:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 800063a:	4a2f      	ldr	r2, [pc, #188]	; (80006f8 <MX_FDCAN1_Init+0xc4>)
 800063c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800063e:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000644:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800064a:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 800064c:	2200      	movs	r2, #0
 800064e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 8000652:	2200      	movs	r2, #0
 8000654:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 800065e:	2210      	movs	r2, #16
 8000660:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000662:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 8000664:	2201      	movs	r2, #1
 8000666:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 800066a:	2202      	movs	r2, #2
 800066c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 8000670:	2202      	movs	r2, #2
 8000672:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 8000676:	2201      	movs	r2, #1
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 800067c:	2201      	movs	r2, #1
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 8000682:	2201      	movs	r2, #1
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 8000688:	2201      	movs	r2, #1
 800068a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 800068e:	2200      	movs	r2, #0
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 8000694:	2200      	movs	r2, #0
 8000696:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 800069a:	2200      	movs	r2, #0
 800069c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006a6:	2204      	movs	r2, #4
 80006a8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006b2:	2204      	movs	r2, #4
 80006b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006be:	2204      	movs	r2, #4
 80006c0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006dc:	2204      	movs	r2, #4
 80006de:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_FDCAN1_Init+0xc0>)
 80006e2:	f001 fe31 	bl	8002348 <HAL_FDCAN_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80006ec:	f000 f972 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	240000f4 	.word	0x240000f4
 80006f8:	4000a000 	.word	0x4000a000

080006fc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000700:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000702:	4a2f      	ldr	r2, [pc, #188]	; (80007c0 <MX_FDCAN2_Init+0xc4>)
 8000704:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000726:	2210      	movs	r2, #16
 8000728:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800072a:	4b24      	ldr	r3, [pc, #144]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 800072c:	2201      	movs	r2, #1
 800072e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000732:	2202      	movs	r2, #2
 8000734:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000738:	2202      	movs	r2, #2
 800073a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 800073e:	2201      	movs	r2, #1
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000744:	2201      	movs	r2, #1
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 800074a:	2201      	movs	r2, #1
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000750:	2201      	movs	r2, #1
 8000752:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000768:	2200      	movs	r2, #0
 800076a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 800076e:	2204      	movs	r2, #4
 8000770:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 800077a:	2204      	movs	r2, #4
 800077c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000780:	2200      	movs	r2, #0
 8000782:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000786:	2204      	movs	r2, #4
 8000788:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 800078c:	2200      	movs	r2, #0
 800078e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000792:	2200      	movs	r2, #0
 8000794:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 8000798:	2200      	movs	r2, #0
 800079a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_FDCAN2_Init+0xc0>)
 80007aa:	f001 fdcd 	bl	8002348 <HAL_FDCAN_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80007b4:	f000 f90e 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	24000194 	.word	0x24000194
 80007c0:	4000a400 	.word	0x4000a400

080007c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_I2C1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_I2C1_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C1_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <MX_I2C1_Init+0x74>)
 8000800:	f002 fab6 	bl	8002d70 <HAL_I2C_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 f8e3 	bl	80009d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_I2C1_Init+0x74>)
 8000812:	f002 fb3d 	bl	8002e90 <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 f8da 	bl	80009d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_I2C1_Init+0x74>)
 8000824:	f002 fb7f 	bl	8002f26 <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 f8d1 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	24000234 	.word	0x24000234
 800083c:	40005400 	.word	0x40005400
 8000840:	00707cbb 	.word	0x00707cbb

08000844 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_I2C3_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <MX_I2C3_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MX_I2C3_Init+0x7c>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_I2C3_Init+0x74>)
 800085c:	2201      	movs	r2, #1
 800085e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2C3_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_I2C3_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000880:	f002 fa76 	bl	8002d70 <HAL_I2C_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800088a:	f000 f8a3 	bl	80009d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000892:	f002 fafd 	bl	8002e90 <HAL_I2CEx_ConfigAnalogFilter>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800089c:	f000 f89a 	bl	80009d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_I2C3_Init+0x74>)
 80008a4:	f002 fb3f 	bl	8002f26 <HAL_I2CEx_ConfigDigitalFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008ae:	f000 f891 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	24000288 	.word	0x24000288
 80008bc:	40005c00 	.word	0x40005c00
 80008c0:	00707cbb 	.word	0x00707cbb

080008c4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_I2C4_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <MX_I2C4_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_I2C4_Init+0x74>)
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <MX_I2C4_Init+0x7c>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_I2C4_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_I2C4_Init+0x74>)
 80008dc:	2201      	movs	r2, #1
 80008de:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_I2C4_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_I2C4_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C4_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_I2C4_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_I2C4_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80008fe:	480e      	ldr	r0, [pc, #56]	; (8000938 <MX_I2C4_Init+0x74>)
 8000900:	f002 fa36 	bl	8002d70 <HAL_I2C_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800090a:	f000 f863 	bl	80009d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <MX_I2C4_Init+0x74>)
 8000912:	f002 fabd 	bl	8002e90 <HAL_I2CEx_ConfigAnalogFilter>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800091c:	f000 f85a 	bl	80009d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_I2C4_Init+0x74>)
 8000924:	f002 faff 	bl	8002f26 <HAL_I2CEx_ConfigDigitalFilter>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 f851 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240002dc 	.word	0x240002dc
 800093c:	58001c00 	.word	0x58001c00
 8000940:	00707cbb 	.word	0x00707cbb

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x8c>)
 800094c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000950:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <MX_GPIO_Init+0x8c>)
 8000952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000956:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_GPIO_Init+0x8c>)
 800095c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_GPIO_Init+0x8c>)
 800096a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800096e:	4a18      	ldr	r2, [pc, #96]	; (80009d0 <MX_GPIO_Init+0x8c>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_GPIO_Init+0x8c>)
 800097a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_GPIO_Init+0x8c>)
 8000988:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800098c:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <MX_GPIO_Init+0x8c>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_GPIO_Init+0x8c>)
 8000998:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_GPIO_Init+0x8c>)
 80009a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009aa:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <MX_GPIO_Init+0x8c>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_GPIO_Init+0x8c>)
 80009b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	58024400 	.word	0x58024400

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_MspInit+0x30>)
 80009e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009ec:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x30>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x30>)
 80009f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	58024400 	.word	0x58024400

08000a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b090      	sub	sp, #64	; 0x40
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a6f      	ldr	r2, [pc, #444]	; (8000bf0 <HAL_ADC_MspInit+0x1dc>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d169      	bne.n	8000b0a <HAL_ADC_MspInit+0xf6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a36:	4b6f      	ldr	r3, [pc, #444]	; (8000bf4 <HAL_ADC_MspInit+0x1e0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a6d      	ldr	r2, [pc, #436]	; (8000bf4 <HAL_ADC_MspInit+0x1e0>)
 8000a3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a40:	4b6c      	ldr	r3, [pc, #432]	; (8000bf4 <HAL_ADC_MspInit+0x1e0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d10e      	bne.n	8000a66 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a48:	4b6b      	ldr	r3, [pc, #428]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000a4a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a4e:	4a6a      	ldr	r2, [pc, #424]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a58:	4b67      	ldr	r3, [pc, #412]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000a5a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a5e:	f003 0320 	and.w	r3, r3, #32
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b64      	ldr	r3, [pc, #400]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000a68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a6c:	4a62      	ldr	r2, [pc, #392]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a76:	4b60      	ldr	r3, [pc, #384]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000a78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b5c      	ldr	r3, [pc, #368]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000a86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a8a:	4a5b      	ldr	r2, [pc, #364]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a94:	4b58      	ldr	r3, [pc, #352]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000a96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b55      	ldr	r3, [pc, #340]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000aa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa8:	4a53      	ldr	r2, [pc, #332]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ab2:	4b51      	ldr	r3, [pc, #324]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000ab4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
 8000abe:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> ADC1_INP18
    PA5     ------> ADC1_INP19
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000ac0:	2317      	movs	r3, #23
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	484a      	ldr	r0, [pc, #296]	; (8000bfc <HAL_ADC_MspInit+0x1e8>)
 8000ad4:	f001 ff9c 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ad8:	233f      	movs	r3, #63	; 0x3f
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000adc:	2303      	movs	r3, #3
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4845      	ldr	r0, [pc, #276]	; (8000c00 <HAL_ADC_MspInit+0x1ec>)
 8000aec:	f001 ff90 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000af0:	2302      	movs	r3, #2
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af4:	2303      	movs	r3, #3
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b00:	4619      	mov	r1, r3
 8000b02:	4840      	ldr	r0, [pc, #256]	; (8000c04 <HAL_ADC_MspInit+0x1f0>)
 8000b04:	f001 ff84 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b08:	e06d      	b.n	8000be6 <HAL_ADC_MspInit+0x1d2>
  else if(hadc->Instance==ADC2)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a3e      	ldr	r2, [pc, #248]	; (8000c08 <HAL_ADC_MspInit+0x1f4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d168      	bne.n	8000be6 <HAL_ADC_MspInit+0x1d2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b14:	4b37      	ldr	r3, [pc, #220]	; (8000bf4 <HAL_ADC_MspInit+0x1e0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4a36      	ldr	r2, [pc, #216]	; (8000bf4 <HAL_ADC_MspInit+0x1e0>)
 8000b1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b1e:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <HAL_ADC_MspInit+0x1e0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d10e      	bne.n	8000b44 <HAL_ADC_MspInit+0x130>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b26:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b28:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b2c:	4a32      	ldr	r2, [pc, #200]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b2e:	f043 0320 	orr.w	r3, r3, #32
 8000b32:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b36:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b38:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b3c:	f003 0320 	and.w	r3, r3, #32
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4a:	4a2b      	ldr	r2, [pc, #172]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b68:	4a23      	ldr	r2, [pc, #140]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_ADC_MspInit+0x1e4>)
 8000b92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 8000b9e:	2329      	movs	r3, #41	; 0x29
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4812      	ldr	r0, [pc, #72]	; (8000bfc <HAL_ADC_MspInit+0x1e8>)
 8000bb2:	f001 ff2d 	bl	8002a10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb6:	23c0      	movs	r3, #192	; 0xc0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <HAL_ADC_MspInit+0x1ec>)
 8000bca:	f001 ff21 	bl	8002a10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bde:	4619      	mov	r1, r3
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <HAL_ADC_MspInit+0x1f0>)
 8000be2:	f001 ff15 	bl	8002a10 <HAL_GPIO_Init>
}
 8000be6:	bf00      	nop
 8000be8:	3740      	adds	r7, #64	; 0x40
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40022000 	.word	0x40022000
 8000bf4:	24000330 	.word	0x24000330
 8000bf8:	58024400 	.word	0x58024400
 8000bfc:	58020800 	.word	0x58020800
 8000c00:	58020000 	.word	0x58020000
 8000c04:	58020400 	.word	0x58020400
 8000c08:	40022100 	.word	0x40022100

08000c0c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0bc      	sub	sp, #240	; 0xf0
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	22c0      	movs	r2, #192	; 0xc0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fde5 	bl	80067fc <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a57      	ldr	r2, [pc, #348]	; (8000d94 <HAL_FDCAN_MspInit+0x188>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d151      	bne.n	8000ce0 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000c48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 f995 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000c60:	f7ff feb8 	bl	80009d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000c64:	4b4c      	ldr	r3, [pc, #304]	; (8000d98 <HAL_FDCAN_MspInit+0x18c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a4b      	ldr	r2, [pc, #300]	; (8000d98 <HAL_FDCAN_MspInit+0x18c>)
 8000c6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <HAL_FDCAN_MspInit+0x18c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d10e      	bne.n	8000c94 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c76:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000c78:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000c7c:	4a47      	ldr	r2, [pc, #284]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000c86:	4b45      	ldr	r3, [pc, #276]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000c88:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000c96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c9a:	4a40      	ldr	r2, [pc, #256]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000ca6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ccc:	2309      	movs	r3, #9
 8000cce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4831      	ldr	r0, [pc, #196]	; (8000da0 <HAL_FDCAN_MspInit+0x194>)
 8000cda:	f001 fe99 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000cde:	e055      	b.n	8000d8c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a2f      	ldr	r2, [pc, #188]	; (8000da4 <HAL_FDCAN_MspInit+0x198>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d150      	bne.n	8000d8c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cee:	f04f 0300 	mov.w	r3, #0
 8000cf2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000cf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfe:	f107 0318 	add.w	r3, r7, #24
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 f93e 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8000d0e:	f7ff fe61 	bl	80009d4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <HAL_FDCAN_MspInit+0x18c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <HAL_FDCAN_MspInit+0x18c>)
 8000d1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <HAL_FDCAN_MspInit+0x18c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10e      	bne.n	8000d42 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000d26:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d30:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000d36:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000d44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_FDCAN_MspInit+0x190>)
 8000d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d60:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000d7a:	2309      	movs	r3, #9
 8000d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d84:	4619      	mov	r1, r3
 8000d86:	4808      	ldr	r0, [pc, #32]	; (8000da8 <HAL_FDCAN_MspInit+0x19c>)
 8000d88:	f001 fe42 	bl	8002a10 <HAL_GPIO_Init>
}
 8000d8c:	bf00      	nop
 8000d8e:	37f0      	adds	r7, #240	; 0xf0
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	4000a000 	.word	0x4000a000
 8000d98:	24000334 	.word	0x24000334
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	58020000 	.word	0x58020000
 8000da4:	4000a400 	.word	0x4000a400
 8000da8:	58020400 	.word	0x58020400

08000dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0c0      	sub	sp, #256	; 0x100
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc8:	22c0      	movs	r2, #192	; 0xc0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f005 fd15 	bl	80067fc <memset>
  if(hi2c->Instance==I2C1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a86      	ldr	r2, [pc, #536]	; (8000ff0 <HAL_I2C_MspInit+0x244>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d146      	bne.n	8000e6a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ddc:	f04f 0208 	mov.w	r2, #8
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 f8c6 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000dfe:	f7ff fde9 	bl	80009d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b7c      	ldr	r3, [pc, #496]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e08:	4a7a      	ldr	r2, [pc, #488]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e12:	4b78      	ldr	r3, [pc, #480]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e20:	23c0      	movs	r3, #192	; 0xc0
 8000e22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e26:	2312      	movs	r3, #18
 8000e28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e42:	4619      	mov	r1, r3
 8000e44:	486c      	ldr	r0, [pc, #432]	; (8000ff8 <HAL_I2C_MspInit+0x24c>)
 8000e46:	f001 fde3 	bl	8002a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4a:	4b6a      	ldr	r3, [pc, #424]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e50:	4a68      	ldr	r2, [pc, #416]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e56:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e5a:	4b66      	ldr	r3, [pc, #408]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e64:	623b      	str	r3, [r7, #32]
 8000e66:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000e68:	e0bd      	b.n	8000fe6 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a63      	ldr	r2, [pc, #396]	; (8000ffc <HAL_I2C_MspInit+0x250>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d16c      	bne.n	8000f4e <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000e74:	f04f 0208 	mov.w	r2, #8
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 f87a 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000e96:	f7ff fd9d 	bl	80009d4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea0:	4a54      	ldr	r2, [pc, #336]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eaa:	4b52      	ldr	r3, [pc, #328]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000eac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000eba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ebe:	4a4d      	ldr	r2, [pc, #308]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ec8:	4b4a      	ldr	r3, [pc, #296]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000eca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ede:	2312      	movs	r3, #18
 8000ee0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000efa:	4619      	mov	r1, r3
 8000efc:	4840      	ldr	r0, [pc, #256]	; (8001000 <HAL_I2C_MspInit+0x254>)
 8000efe:	f001 fd87 	bl	8002a10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0a:	2312      	movs	r3, #18
 8000f0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f26:	4619      	mov	r1, r3
 8000f28:	4836      	ldr	r0, [pc, #216]	; (8001004 <HAL_I2C_MspInit+0x258>)
 8000f2a:	f001 fd71 	bl	8002a10 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f2e:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f30:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f34:	4a2f      	ldr	r2, [pc, #188]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f3a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f40:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	697b      	ldr	r3, [r7, #20]
}
 8000f4c:	e04b      	b.n	8000fe6 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a2d      	ldr	r2, [pc, #180]	; (8001008 <HAL_I2C_MspInit+0x25c>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d146      	bne.n	8000fe6 <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000f58:	f04f 0210 	mov.w	r2, #16
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 f808 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8000f7a:	f7ff fd2b 	bl	80009d4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa4:	2312      	movs	r3, #18
 8000fa6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <HAL_I2C_MspInit+0x24c>)
 8000fc4:	f001 fd24 	bl	8002a10 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000fca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000fda:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
}
 8000fe6:	bf00      	nop
 8000fe8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	58020400 	.word	0x58020400
 8000ffc:	40005c00 	.word	0x40005c00
 8001000:	58020800 	.word	0x58020800
 8001004:	58020000 	.word	0x58020000
 8001008:	58001c00 	.word	0x58001c00

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f916 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001064:	4b32      	ldr	r3, [pc, #200]	; (8001130 <SystemInit+0xd0>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a31      	ldr	r2, [pc, #196]	; (8001130 <SystemInit+0xd0>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001074:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <SystemInit+0xd4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 030f 	and.w	r3, r3, #15
 800107c:	2b02      	cmp	r3, #2
 800107e:	d807      	bhi.n	8001090 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001080:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <SystemInit+0xd4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 030f 	bic.w	r3, r3, #15
 8001088:	4a2a      	ldr	r2, [pc, #168]	; (8001134 <SystemInit+0xd4>)
 800108a:	f043 0303 	orr.w	r3, r3, #3
 800108e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <SystemInit+0xd8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <SystemInit+0xd8>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <SystemInit+0xd8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <SystemInit+0xd8>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4924      	ldr	r1, [pc, #144]	; (8001138 <SystemInit+0xd8>)
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <SystemInit+0xdc>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <SystemInit+0xd4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <SystemInit+0xd4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 030f 	bic.w	r3, r3, #15
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <SystemInit+0xd4>)
 80010c4:	f043 0303 	orr.w	r3, r3, #3
 80010c8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <SystemInit+0xd8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <SystemInit+0xd8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <SystemInit+0xd8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <SystemInit+0xd8>)
 80010de:	4a18      	ldr	r2, [pc, #96]	; (8001140 <SystemInit+0xe0>)
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <SystemInit+0xd8>)
 80010e4:	4a17      	ldr	r2, [pc, #92]	; (8001144 <SystemInit+0xe4>)
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <SystemInit+0xd8>)
 80010ea:	4a17      	ldr	r2, [pc, #92]	; (8001148 <SystemInit+0xe8>)
 80010ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <SystemInit+0xd8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <SystemInit+0xd8>)
 80010f6:	4a14      	ldr	r2, [pc, #80]	; (8001148 <SystemInit+0xe8>)
 80010f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <SystemInit+0xd8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <SystemInit+0xd8>)
 8001102:	4a11      	ldr	r2, [pc, #68]	; (8001148 <SystemInit+0xe8>)
 8001104:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <SystemInit+0xd8>)
 8001108:	2200      	movs	r2, #0
 800110a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <SystemInit+0xd8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a09      	ldr	r2, [pc, #36]	; (8001138 <SystemInit+0xd8>)
 8001112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001116:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <SystemInit+0xd8>)
 800111a:	2200      	movs	r2, #0
 800111c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <SystemInit+0xec>)
 8001120:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001124:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00
 8001134:	52002000 	.word	0x52002000
 8001138:	58024400 	.word	0x58024400
 800113c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001140:	02020200 	.word	0x02020200
 8001144:	01ff0000 	.word	0x01ff0000
 8001148:	01010280 	.word	0x01010280
 800114c:	52004000 	.word	0x52004000

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001188 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001154:	f7ff ff84 	bl	8001060 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800117e:	f005 fb0b 	bl	8006798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff f8b3 	bl	80002ec <main>
  bx  lr
 8001186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800118c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001190:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001194:	08006888 	.word	0x08006888
  ldr r2, =_sbss
 8001198:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800119c:	2400033c 	.word	0x2400033c

080011a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011aa:	2003      	movs	r0, #3
 80011ac:	f001 f89a 	bl	80022e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80011b0:	f002 fd28 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 80011b4:	4602      	mov	r2, r0
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_Init+0x68>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	4913      	ldr	r1, [pc, #76]	; (8001210 <HAL_Init+0x6c>)
 80011c2:	5ccb      	ldrb	r3, [r1, r3]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
 80011cc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_Init+0x68>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_Init+0x6c>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_Init+0x70>)
 80011e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011e8:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HAL_Init+0x74>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ee:	200f      	movs	r0, #15
 80011f0:	f000 f814 	bl	800121c <HAL_InitTick>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e002      	b.n	8001204 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011fe:	f7ff fbef 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58024400 	.word	0x58024400
 8001210:	08006870 	.word	0x08006870
 8001214:	24000004 	.word	0x24000004
 8001218:	24000000 	.word	0x24000000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_InitTick+0x60>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e021      	b.n	8001274 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_InitTick+0x64>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_InitTick+0x60>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f001 f871 	bl	800232e <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f001 f849 	bl	80022fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x68>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2400000c 	.word	0x2400000c
 8001280:	24000000 	.word	0x24000000
 8001284:	24000008 	.word	0x24000008

08001288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x20>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x24>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_IncTick+0x24>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	2400000c 	.word	0x2400000c
 80012ac:	24000338 	.word	0x24000338

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_GetTick+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	24000338 	.word	0x24000338

080012c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	609a      	str	r2, [r3, #8]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	609a      	str	r2, [r3, #8]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3360      	adds	r3, #96	; 0x60
 8001342:	461a      	mov	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	430b      	orrs	r3, r1
 800135e:	431a      	orrs	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001364:	bf00      	nop
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	431a      	orrs	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	611a      	str	r2, [r3, #16]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b087      	sub	sp, #28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3360      	adds	r3, #96	; 0x60
 80013b2:	461a      	mov	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	601a      	str	r2, [r3, #0]
  }
}
 80013cc:	bf00      	nop
 80013ce:	371c      	adds	r7, #28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3330      	adds	r3, #48	; 0x30
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	4413      	add	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	211f      	movs	r1, #31
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	401a      	ands	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	0e9b      	lsrs	r3, r3, #26
 8001410:	f003 011f 	and.w	r1, r3, #31
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	431a      	orrs	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001424:	bf00      	nop
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3314      	adds	r3, #20
 8001440:	461a      	mov	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	0e5b      	lsrs	r3, r3, #25
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	4413      	add	r3, r2
 800144e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	0d1b      	lsrs	r3, r3, #20
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	2107      	movs	r1, #7
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	401a      	ands	r2, r3
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	0d1b      	lsrs	r3, r3, #20
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	431a      	orrs	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0318 	and.w	r3, r3, #24
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80014ac:	40d9      	lsrs	r1, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	400b      	ands	r3, r1
 80014b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014b6:	431a      	orrs	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	000fffff 	.word	0x000fffff

080014d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80014de:	4013      	ands	r3, r2
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6093      	str	r3, [r2, #8]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	5fffffc0 	.word	0x5fffffc0

080014f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001508:	d101      	bne.n	800150e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <LL_ADC_EnableInternalRegulator+0x24>)
 800152a:	4013      	ands	r3, r2
 800152c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	6fffffc0 	.word	0x6fffffc0

08001544 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001558:	d101      	bne.n	800155e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <LL_ADC_IsEnabled+0x18>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <LL_ADC_IsEnabled+0x1a>
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d101      	bne.n	80015aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d101      	bne.n	80015d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e138      	b.n	800186c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001604:	2b00      	cmp	r3, #0
 8001606:	d109      	bne.n	800161c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fa03 	bl	8000a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff67 	bl	80014f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff4d 	bl	80014d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff82 	bl	8001544 <LL_ADC_IsInternalRegulatorEnabled>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d114      	bne.n	8001670 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff66 	bl	800151c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001650:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_ADC_Init+0x294>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	099b      	lsrs	r3, r3, #6
 8001656:	4a88      	ldr	r2, [pc, #544]	; (8001878 <HAL_ADC_Init+0x298>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	3301      	adds	r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001662:	e002      	b.n	800166a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	3b01      	subs	r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f9      	bne.n	8001664 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff65 	bl	8001544 <LL_ADC_IsInternalRegulatorEnabled>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10d      	bne.n	800169c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	f043 0210 	orr.w	r2, r3, #16
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f043 0201 	orr.w	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff76 	bl	8001592 <LL_ADC_REG_IsConversionOngoing>
 80016a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f040 80d2 	bne.w	800185a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f040 80ce 	bne.w	800185a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016c6:	f043 0202 	orr.w	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff4a 	bl	800156c <LL_ADC_IsEnabled>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d110      	bne.n	8001700 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016de:	4867      	ldr	r0, [pc, #412]	; (800187c <HAL_ADC_Init+0x29c>)
 80016e0:	f7ff ff44 	bl	800156c <LL_ADC_IsEnabled>
 80016e4:	4604      	mov	r4, r0
 80016e6:	4866      	ldr	r0, [pc, #408]	; (8001880 <HAL_ADC_Init+0x2a0>)
 80016e8:	f7ff ff40 	bl	800156c <LL_ADC_IsEnabled>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4323      	orrs	r3, r4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4862      	ldr	r0, [pc, #392]	; (8001884 <HAL_ADC_Init+0x2a4>)
 80016fc:	f7ff fde4 	bl	80012c8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7d5b      	ldrb	r3, [r3, #21]
 8001704:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800170a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001710:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7f1b      	ldrb	r3, [r3, #28]
 8001716:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7f1b      	ldrb	r3, [r3, #28]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d106      	bne.n	8001732 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	3b01      	subs	r3, #1
 800172a:	045b      	lsls	r3, r3, #17
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	2b00      	cmp	r3, #0
 8001738:	d009      	beq.n	800174e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	4b4c      	ldr	r3, [pc, #304]	; (8001888 <HAL_ADC_Init+0x2a8>)
 8001756:	4013      	ands	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	69b9      	ldr	r1, [r7, #24]
 800175e:	430b      	orrs	r3, r1
 8001760:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff13 	bl	8001592 <LL_ADC_REG_IsConversionOngoing>
 800176c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff20 	bl	80015b8 <LL_ADC_INJ_IsConversionOngoing>
 8001778:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d14a      	bne.n	8001816 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d147      	bne.n	8001816 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7d1b      	ldrb	r3, [r3, #20]
 800178a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	4b3c      	ldr	r3, [pc, #240]	; (800188c <HAL_ADC_Init+0x2ac>)
 800179c:	4013      	ands	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	69b9      	ldr	r1, [r7, #24]
 80017a4:	430b      	orrs	r3, r1
 80017a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d11b      	bne.n	80017ea <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_ADC_Init+0x2b0>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017c6:	3a01      	subs	r2, #1
 80017c8:	0411      	lsls	r1, r2, #16
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017ce:	4311      	orrs	r1, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017d4:	4311      	orrs	r1, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017da:	430a      	orrs	r2, r1
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	e007      	b.n	80017fa <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fb25 	bl	8001e60 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d10c      	bne.n	8001838 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f023 010f 	bic.w	r1, r3, #15
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	1e5a      	subs	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
 8001836:	e007      	b.n	8001848 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 020f 	bic.w	r2, r2, #15
 8001846:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184c:	f023 0303 	bic.w	r3, r3, #3
 8001850:	f043 0201 	orr.w	r2, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	655a      	str	r2, [r3, #84]	; 0x54
 8001858:	e007      	b.n	800186a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	f043 0210 	orr.w	r2, r3, #16
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800186a:	7ffb      	ldrb	r3, [r7, #31]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3724      	adds	r7, #36	; 0x24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd90      	pop	{r4, r7, pc}
 8001874:	24000000 	.word	0x24000000
 8001878:	053e2d63 	.word	0x053e2d63
 800187c:	40022000 	.word	0x40022000
 8001880:	40022100 	.word	0x40022100
 8001884:	40022300 	.word	0x40022300
 8001888:	fff0c003 	.word	0xfff0c003
 800188c:	ffffbffc 	.word	0xffffbffc
 8001890:	fc00f81e 	.word	0xfc00f81e

08001894 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b0a1      	sub	sp, #132	; 0x84
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4a9a      	ldr	r2, [pc, #616]	; (8001b18 <HAL_ADC_ConfigChannel+0x284>)
 80018ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_ADC_ConfigChannel+0x2a>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e2bc      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x5a4>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fe61 	bl	8001592 <LL_ADC_REG_IsConversionOngoing>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 82a1 	bne.w	8001e1a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d108      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x62>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	0e9b      	lsrs	r3, r3, #26
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	2201      	movs	r2, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	e016      	b.n	8001924 <HAL_ADC_ConfigChannel+0x90>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001906:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800190e:	2320      	movs	r3, #32
 8001910:	e003      	b.n	800191a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	2201      	movs	r2, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	69d1      	ldr	r1, [r2, #28]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	430b      	orrs	r3, r1
 8001930:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	f7ff fd4a 	bl	80013d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fe22 	bl	8001592 <LL_ADC_REG_IsConversionOngoing>
 800194e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fe2f 	bl	80015b8 <LL_ADC_INJ_IsConversionOngoing>
 800195a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800195c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800195e:	2b00      	cmp	r3, #0
 8001960:	f040 80a0 	bne.w	8001aa4 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 809c 	bne.w	8001aa4 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	6819      	ldr	r1, [r3, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	461a      	mov	r2, r3
 800197a:	f7ff fd59 	bl	8001430 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10b      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x110>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	e00a      	b.n	80019ba <HAL_ADC_ConfigChannel+0x126>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d027      	beq.n	8001a14 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	6919      	ldr	r1, [r3, #16]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019d2:	f7ff fcad 	bl	8001330 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6919      	ldr	r1, [r3, #16]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	7e5b      	ldrb	r3, [r3, #25]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d102      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x158>
 80019e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019ea:	e000      	b.n	80019ee <HAL_ADC_ConfigChannel+0x15a>
 80019ec:	2300      	movs	r3, #0
 80019ee:	461a      	mov	r2, r3
 80019f0:	f7ff fcd7 	bl	80013a2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6919      	ldr	r1, [r3, #16]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	7e1b      	ldrb	r3, [r3, #24]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d102      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x176>
 8001a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a08:	e000      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x178>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f7ff fcaf 	bl	8001370 <LL_ADC_SetDataRightShift>
 8001a12:	e047      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	069b      	lsls	r3, r3, #26
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d107      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a36:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	069b      	lsls	r3, r3, #26
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d107      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a5a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	069b      	lsls	r3, r3, #26
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d107      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a7e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	069b      	lsls	r3, r3, #26
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d107      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aa2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fd5f 	bl	800156c <LL_ADC_IsEnabled>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f040 81bb 	bne.w	8001e2c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	6819      	ldr	r1, [r3, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f7ff fce0 	bl	8001488 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_ADC_ConfigChannel+0x284>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	f040 8130 	bne.w	8001d34 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10b      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x268>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0e9b      	lsrs	r3, r3, #26
 8001aea:	3301      	adds	r3, #1
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	bf94      	ite	ls
 8001af4:	2301      	movls	r3, #1
 8001af6:	2300      	movhi	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	e01b      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x2a0>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d103      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001b14:	2320      	movs	r3, #32
 8001b16:	e005      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x290>
 8001b18:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3301      	adds	r3, #1
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	2b09      	cmp	r3, #9
 8001b2c:	bf94      	ite	ls
 8001b2e:	2301      	movls	r3, #1
 8001b30:	2300      	movhi	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d079      	beq.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d107      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x2c0>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	0e9b      	lsrs	r3, r3, #26
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	069b      	lsls	r3, r3, #26
 8001b4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b52:	e015      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x2ec>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b64:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	e003      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	069b      	lsls	r3, r3, #26
 8001b7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x30c>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0e9b      	lsrs	r3, r3, #26
 8001b92:	3301      	adds	r3, #1
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	e017      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x33c>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001bb8:	2320      	movs	r3, #32
 8001bba:	e003      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	ea42 0103 	orr.w	r1, r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10a      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x362>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0e9b      	lsrs	r3, r3, #26
 8001be6:	3301      	adds	r3, #1
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	051b      	lsls	r3, r3, #20
 8001bf4:	e018      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x394>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e003      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	e07e      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d107      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x3b4>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0e9b      	lsrs	r3, r3, #26
 8001c3e:	3301      	adds	r3, #1
 8001c40:	069b      	lsls	r3, r3, #26
 8001c42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c46:	e015      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x3e0>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c60:	2320      	movs	r3, #32
 8001c62:	e003      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	069b      	lsls	r3, r3, #26
 8001c70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x400>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0e9b      	lsrs	r3, r3, #26
 8001c86:	3301      	adds	r3, #1
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	e017      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x430>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	61bb      	str	r3, [r7, #24]
  return result;
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001cac:	2320      	movs	r3, #32
 8001cae:	e003      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	ea42 0103 	orr.w	r1, r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10d      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x45c>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3b1e      	subs	r3, #30
 8001ce8:	051b      	lsls	r3, r3, #20
 8001cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cee:	e01b      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x494>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	60fb      	str	r3, [r7, #12]
  return result;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001d08:	2320      	movs	r3, #32
 8001d0a:	e003      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	3301      	adds	r3, #1
 8001d16:	f003 021f 	and.w	r2, r3, #31
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b1e      	subs	r3, #30
 8001d22:	051b      	lsls	r3, r3, #20
 8001d24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	6892      	ldr	r2, [r2, #8]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7ff fb7e 	bl	8001430 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	da77      	bge.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d3c:	4840      	ldr	r0, [pc, #256]	; (8001e40 <HAL_ADC_ConfigChannel+0x5ac>)
 8001d3e:	f7ff fae9 	bl	8001314 <LL_ADC_GetCommonPathInternalCh>
 8001d42:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d44:	483f      	ldr	r0, [pc, #252]	; (8001e44 <HAL_ADC_ConfigChannel+0x5b0>)
 8001d46:	f7ff fc11 	bl	800156c <LL_ADC_IsEnabled>
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	483e      	ldr	r0, [pc, #248]	; (8001e48 <HAL_ADC_ConfigChannel+0x5b4>)
 8001d4e:	f7ff fc0d 	bl	800156c <LL_ADC_IsEnabled>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4323      	orrs	r3, r4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d155      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a3b      	ldr	r2, [pc, #236]	; (8001e4c <HAL_ADC_ConfigChannel+0x5b8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d122      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x516>
 8001d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d11d      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a35      	ldr	r2, [pc, #212]	; (8001e48 <HAL_ADC_ConfigChannel+0x5b4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d159      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d7e:	4619      	mov	r1, r3
 8001d80:	482f      	ldr	r0, [pc, #188]	; (8001e40 <HAL_ADC_ConfigChannel+0x5ac>)
 8001d82:	f7ff fab4 	bl	80012ee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_ADC_ConfigChannel+0x5bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	4a31      	ldr	r2, [pc, #196]	; (8001e54 <HAL_ADC_ConfigChannel+0x5c0>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	099b      	lsrs	r3, r3, #6
 8001d94:	3301      	adds	r3, #1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001d9a:	e002      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f9      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001da8:	e040      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2a      	ldr	r2, [pc, #168]	; (8001e58 <HAL_ADC_ConfigChannel+0x5c4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d111      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x544>
 8001db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <HAL_ADC_ConfigChannel+0x5b4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d131      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dce:	4619      	mov	r1, r3
 8001dd0:	481b      	ldr	r0, [pc, #108]	; (8001e40 <HAL_ADC_ConfigChannel+0x5ac>)
 8001dd2:	f7ff fa8c 	bl	80012ee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dd6:	e029      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <HAL_ADC_ConfigChannel+0x5c8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d124      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
 8001de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d11f      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <HAL_ADC_ConfigChannel+0x5b4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d11a      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001df8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4810      	ldr	r0, [pc, #64]	; (8001e40 <HAL_ADC_ConfigChannel+0x5ac>)
 8001e00:	f7ff fa75 	bl	80012ee <LL_ADC_SetCommonPathInternalCh>
 8001e04:	e012      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f043 0220 	orr.w	r2, r3, #32
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e18:	e008      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	f043 0220 	orr.w	r2, r3, #32
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3784      	adds	r7, #132	; 0x84
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	40022300 	.word	0x40022300
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40022100 	.word	0x40022100
 8001e4c:	cb840000 	.word	0xcb840000
 8001e50:	24000000 	.word	0x24000000
 8001e54:	053e2d63 	.word	0x053e2d63
 8001e58:	bac04000 	.word	0xbac04000
 8001e5c:	cfb80000 	.word	0xcfb80000

08001e60 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001e68:	4b60      	ldr	r3, [pc, #384]	; (8001fec <ADC_ConfigureBoostMode+0x18c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01c      	beq.n	8001eae <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001e74:	f002 f840 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8001e78:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e82:	d010      	beq.n	8001ea6 <ADC_ConfigureBoostMode+0x46>
 8001e84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e88:	d873      	bhi.n	8001f72 <ADC_ConfigureBoostMode+0x112>
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d002      	beq.n	8001e96 <ADC_ConfigureBoostMode+0x36>
 8001e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e94:	d16d      	bne.n	8001f72 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	0c1b      	lsrs	r3, r3, #16
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	60fb      	str	r3, [r7, #12]
        break;
 8001ea4:	e068      	b.n	8001f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	60fb      	str	r3, [r7, #12]
        break;
 8001eac:	e064      	b.n	8001f78 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001eae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001eb2:	f04f 0100 	mov.w	r1, #0
 8001eb6:	f003 fa23 	bl	8005300 <HAL_RCCEx_GetPeriphCLKFreq>
 8001eba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001ec4:	d051      	beq.n	8001f6a <ADC_ConfigureBoostMode+0x10a>
 8001ec6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001eca:	d854      	bhi.n	8001f76 <ADC_ConfigureBoostMode+0x116>
 8001ecc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001ed0:	d047      	beq.n	8001f62 <ADC_ConfigureBoostMode+0x102>
 8001ed2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001ed6:	d84e      	bhi.n	8001f76 <ADC_ConfigureBoostMode+0x116>
 8001ed8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001edc:	d03d      	beq.n	8001f5a <ADC_ConfigureBoostMode+0xfa>
 8001ede:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001ee2:	d848      	bhi.n	8001f76 <ADC_ConfigureBoostMode+0x116>
 8001ee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ee8:	d033      	beq.n	8001f52 <ADC_ConfigureBoostMode+0xf2>
 8001eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eee:	d842      	bhi.n	8001f76 <ADC_ConfigureBoostMode+0x116>
 8001ef0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001ef4:	d029      	beq.n	8001f4a <ADC_ConfigureBoostMode+0xea>
 8001ef6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001efa:	d83c      	bhi.n	8001f76 <ADC_ConfigureBoostMode+0x116>
 8001efc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001f00:	d01a      	beq.n	8001f38 <ADC_ConfigureBoostMode+0xd8>
 8001f02:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001f06:	d836      	bhi.n	8001f76 <ADC_ConfigureBoostMode+0x116>
 8001f08:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001f0c:	d014      	beq.n	8001f38 <ADC_ConfigureBoostMode+0xd8>
 8001f0e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001f12:	d830      	bhi.n	8001f76 <ADC_ConfigureBoostMode+0x116>
 8001f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f18:	d00e      	beq.n	8001f38 <ADC_ConfigureBoostMode+0xd8>
 8001f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f1e:	d82a      	bhi.n	8001f76 <ADC_ConfigureBoostMode+0x116>
 8001f20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f24:	d008      	beq.n	8001f38 <ADC_ConfigureBoostMode+0xd8>
 8001f26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f2a:	d824      	bhi.n	8001f76 <ADC_ConfigureBoostMode+0x116>
 8001f2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f30:	d002      	beq.n	8001f38 <ADC_ConfigureBoostMode+0xd8>
 8001f32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f36:	d11e      	bne.n	8001f76 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	0c9b      	lsrs	r3, r3, #18
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	60fb      	str	r3, [r7, #12]
        break;
 8001f48:	e016      	b.n	8001f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
        break;
 8001f50:	e012      	b.n	8001f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	60fb      	str	r3, [r7, #12]
        break;
 8001f58:	e00e      	b.n	8001f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	60fb      	str	r3, [r7, #12]
        break;
 8001f60:	e00a      	b.n	8001f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	09db      	lsrs	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]
        break;
 8001f68:	e006      	b.n	8001f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	60fb      	str	r3, [r7, #12]
        break;
 8001f70:	e002      	b.n	8001f78 <ADC_ConfigureBoostMode+0x118>
        break;
 8001f72:	bf00      	nop
 8001f74:	e000      	b.n	8001f78 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8001f76:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <ADC_ConfigureBoostMode+0x190>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d808      	bhi.n	8001f98 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f94:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001f96:	e025      	b.n	8001fe4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <ADC_ConfigureBoostMode+0x194>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d80a      	bhi.n	8001fb6 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb2:	609a      	str	r2, [r3, #8]
}
 8001fb4:	e016      	b.n	8001fe4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <ADC_ConfigureBoostMode+0x198>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d80a      	bhi.n	8001fd4 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd0:	609a      	str	r2, [r3, #8]
}
 8001fd2:	e007      	b.n	8001fe4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001fe2:	609a      	str	r2, [r3, #8]
}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40022300 	.word	0x40022300
 8001ff0:	005f5e10 	.word	0x005f5e10
 8001ff4:	00bebc20 	.word	0x00bebc20
 8001ff8:	017d7840 	.word	0x017d7840

08001ffc <LL_ADC_IsEnabled>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <LL_ADC_IsEnabled+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_ADC_IsEnabled+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_ADC_REG_IsConversionOngoing>:
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b04      	cmp	r3, #4
 8002034:	d101      	bne.n	800203a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b09f      	sub	sp, #124	; 0x7c
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002062:	2302      	movs	r3, #2
 8002064:	e080      	b.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002072:	2300      	movs	r3, #0
 8002074:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a3d      	ldr	r2, [pc, #244]	; (8002170 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d102      	bne.n	8002086 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002080:	4b3c      	ldr	r3, [pc, #240]	; (8002174 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	e001      	b.n	800208a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	f043 0220 	orr.w	r2, r3, #32
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e05f      	b.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ffb9 	bl	8002022 <LL_ADC_REG_IsConversionOngoing>
 80020b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ffb3 	bl	8002022 <LL_ADC_REG_IsConversionOngoing>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d141      	bne.n	8002146 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80020c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d13e      	bne.n	8002146 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80020ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80020d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020e6:	4822      	ldr	r0, [pc, #136]	; (8002170 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80020e8:	f7ff ff88 	bl	8001ffc <LL_ADC_IsEnabled>
 80020ec:	4604      	mov	r4, r0
 80020ee:	4821      	ldr	r0, [pc, #132]	; (8002174 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80020f0:	f7ff ff84 	bl	8001ffc <LL_ADC_IsEnabled>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4323      	orrs	r3, r4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d12e      	bne.n	800215a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002102:	4013      	ands	r3, r2
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	6811      	ldr	r1, [r2, #0]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	6892      	ldr	r2, [r2, #8]
 800210c:	430a      	orrs	r2, r1
 800210e:	431a      	orrs	r2, r3
 8002110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002112:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002114:	e021      	b.n	800215a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800211e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002120:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002122:	4813      	ldr	r0, [pc, #76]	; (8002170 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002124:	f7ff ff6a 	bl	8001ffc <LL_ADC_IsEnabled>
 8002128:	4604      	mov	r4, r0
 800212a:	4812      	ldr	r0, [pc, #72]	; (8002174 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800212c:	f7ff ff66 	bl	8001ffc <LL_ADC_IsEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	4323      	orrs	r3, r4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d110      	bne.n	800215a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800213e:	4013      	ands	r3, r2
 8002140:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002142:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002144:	e009      	b.n	800215a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	f043 0220 	orr.w	r2, r3, #32
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002158:	e000      	b.n	800215c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800215a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002164:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002168:	4618      	mov	r0, r3
 800216a:	377c      	adds	r7, #124	; 0x7c
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}
 8002170:	40022000 	.word	0x40022000
 8002174:	40022100 	.word	0x40022100
 8002178:	40022300 	.word	0x40022300
 800217c:	fffff0e0 	.word	0xfffff0e0

08002180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <__NVIC_SetPriorityGrouping+0x40>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00
 80021c4:	05fa0000 	.word	0x05fa0000

080021c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b0:	d301      	bcc.n	80022b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <SysTick_Config+0x40>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022be:	210f      	movs	r1, #15
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f7ff ff8e 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <SysTick_Config+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <SysTick_Config+0x40>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000e010 	.word	0xe000e010

080022e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff47 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff5e 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff90 	bl	8002238 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5f 	bl	80021e4 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffb2 	bl	80022a0 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b098      	sub	sp, #96	; 0x60
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002350:	4a84      	ldr	r2, [pc, #528]	; (8002564 <HAL_FDCAN_Init+0x21c>)
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	4611      	mov	r1, r2
 8002358:	224c      	movs	r2, #76	; 0x4c
 800235a:	4618      	mov	r0, r3
 800235c:	f004 fa40 	bl	80067e0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e1c6      	b.n	80026f8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7e      	ldr	r2, [pc, #504]	; (8002568 <HAL_FDCAN_Init+0x220>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d106      	bne.n	8002382 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fc38 	bl	8000c0c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0210 	bic.w	r2, r2, #16
 80023aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ac:	f7fe ff80 	bl	80012b0 <HAL_GetTick>
 80023b0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80023b2:	e014      	b.n	80023de <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80023b4:	f7fe ff7c 	bl	80012b0 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b0a      	cmp	r3, #10
 80023c0:	d90d      	bls.n	80023de <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2203      	movs	r2, #3
 80023d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e18c      	b.n	80026f8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d0e3      	beq.n	80023b4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023fc:	f7fe ff58 	bl	80012b0 <HAL_GetTick>
 8002400:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002402:	e014      	b.n	800242e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002404:	f7fe ff54 	bl	80012b0 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b0a      	cmp	r3, #10
 8002410:	d90d      	bls.n	800242e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2203      	movs	r2, #3
 8002426:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e164      	b.n	80026f8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0e3      	beq.n	8002404 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0202 	orr.w	r2, r2, #2
 800244a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7c1b      	ldrb	r3, [r3, #16]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d108      	bne.n	8002466 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002462:	619a      	str	r2, [r3, #24]
 8002464:	e007      	b.n	8002476 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002474:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7c5b      	ldrb	r3, [r3, #17]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699a      	ldr	r2, [r3, #24]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800248c:	619a      	str	r2, [r3, #24]
 800248e:	e007      	b.n	80024a0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800249e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7c9b      	ldrb	r3, [r3, #18]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d108      	bne.n	80024ba <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024b6:	619a      	str	r2, [r3, #24]
 80024b8:	e007      	b.n	80024ca <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699a      	ldr	r2, [r3, #24]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024c8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80024ee:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0210 	bic.w	r2, r2, #16
 80024fe:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d108      	bne.n	800251a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0204 	orr.w	r2, r2, #4
 8002516:	619a      	str	r2, [r3, #24]
 8002518:	e030      	b.n	800257c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d02c      	beq.n	800257c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d020      	beq.n	800256c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002538:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0210 	orr.w	r2, r2, #16
 8002548:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b03      	cmp	r3, #3
 8002550:	d114      	bne.n	800257c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0220 	orr.w	r2, r2, #32
 8002560:	619a      	str	r2, [r3, #24]
 8002562:	e00b      	b.n	800257c <HAL_FDCAN_Init+0x234>
 8002564:	08006824 	.word	0x08006824
 8002568:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0220 	orr.w	r2, r2, #32
 800257a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	3b01      	subs	r3, #1
 8002582:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	3b01      	subs	r3, #1
 800258a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800258c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002594:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	3b01      	subs	r3, #1
 800259e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80025a4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80025a6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025b0:	d115      	bne.n	80025de <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	3b01      	subs	r3, #1
 80025be:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80025c0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	3b01      	subs	r3, #1
 80025c8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80025ca:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	3b01      	subs	r3, #1
 80025d4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80025da:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80025dc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002604:	4413      	add	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d011      	beq.n	800262e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002612:	f023 0107 	bic.w	r1, r3, #7
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	3360      	adds	r3, #96	; 0x60
 800261e:	443b      	add	r3, r7
 8002620:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d011      	beq.n	800265a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800263e:	f023 0107 	bic.w	r1, r3, #7
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	3360      	adds	r3, #96	; 0x60
 800264a:	443b      	add	r3, r7
 800264c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265e:	2b00      	cmp	r3, #0
 8002660:	d012      	beq.n	8002688 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800266a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3360      	adds	r3, #96	; 0x60
 8002676:	443b      	add	r3, r7
 8002678:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800267c:	011a      	lsls	r2, r3, #4
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268c:	2b00      	cmp	r3, #0
 800268e:	d012      	beq.n	80026b6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002698:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	3360      	adds	r3, #96	; 0x60
 80026a4:	443b      	add	r3, r7
 80026a6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80026aa:	021a      	lsls	r2, r3, #8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_FDCAN_Init+0x3b8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d107      	bne.n	80026d0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f022 0203 	bic.w	r2, r2, #3
 80026ce:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f80b 	bl	8002704 <FDCAN_CalcultateRamBlockAddresses>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80026f4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3760      	adds	r7, #96	; 0x60
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	4000a000 	.word	0x4000a000

08002704 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800271a:	4ba7      	ldr	r3, [pc, #668]	; (80029b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800271c:	4013      	ands	r3, r2
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	0091      	lsls	r1, r2, #2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	430b      	orrs	r3, r1
 8002728:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002734:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	4413      	add	r3, r2
 8002750:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800275a:	4b97      	ldr	r3, [pc, #604]	; (80029b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800275c:	4013      	ands	r3, r2
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	0091      	lsls	r1, r2, #2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	430b      	orrs	r3, r1
 8002768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002774:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	041a      	lsls	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	4413      	add	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800279c:	4b86      	ldr	r3, [pc, #536]	; (80029b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800279e:	4013      	ands	r3, r2
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	0091      	lsls	r1, r2, #2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80027b6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	041a      	lsls	r2, r3, #16
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	4413      	add	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027e4:	4b74      	ldr	r3, [pc, #464]	; (80029b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	0091      	lsls	r1, r2, #2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027fe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002806:	041a      	lsls	r2, r3, #16
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	4413      	add	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800282c:	4b62      	ldr	r3, [pc, #392]	; (80029b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800282e:	4013      	ands	r3, r2
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	0091      	lsls	r1, r2, #2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	430b      	orrs	r3, r1
 800283a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	4413      	add	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002858:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800285a:	4013      	ands	r3, r2
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	0091      	lsls	r1, r2, #2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	430b      	orrs	r3, r1
 8002866:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002872:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	041a      	lsls	r2, r3, #16
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	4413      	add	r3, r2
 8002890:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800289c:	4013      	ands	r3, r2
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	0091      	lsls	r1, r2, #2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	430b      	orrs	r3, r1
 80028a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028b4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	041a      	lsls	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028d0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d8:	061a      	lsls	r2, r3, #24
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e8:	4b34      	ldr	r3, [pc, #208]	; (80029bc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80028ea:	4413      	add	r3, r2
 80028ec:	009a      	lsls	r2, r3, #2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	441a      	add	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	441a      	add	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	441a      	add	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	441a      	add	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	441a      	add	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	441a      	add	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d915      	bls.n	80029e0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80029b4:	e006      	b.n	80029c4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80029b6:	bf00      	nop
 80029b8:	ffff0003 	.word	0xffff0003
 80029bc:	10002b00 	.word	0x10002b00
 80029c0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ca:	f043 0220 	orr.w	r2, r3, #32
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2203      	movs	r2, #3
 80029d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e010      	b.n	8002a02 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e005      	b.n	80029f4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3304      	adds	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d3f3      	bcc.n	80029e8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a1e:	4b89      	ldr	r3, [pc, #548]	; (8002c44 <HAL_GPIO_Init+0x234>)
 8002a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a22:	e194      	b.n	8002d4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8186 	beq.w	8002d48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d005      	beq.n	8002a54 <HAL_GPIO_Init+0x44>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d130      	bne.n	8002ab6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	f003 0201 	and.w	r2, r3, #1
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d017      	beq.n	8002af2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d123      	bne.n	8002b46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	08da      	lsrs	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3208      	adds	r2, #8
 8002b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	69b9      	ldr	r1, [r7, #24]
 8002b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0203 	and.w	r2, r3, #3
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80e0 	beq.w	8002d48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b88:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <HAL_GPIO_Init+0x238>)
 8002b8a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b8e:	4a2e      	ldr	r2, [pc, #184]	; (8002c48 <HAL_GPIO_Init+0x238>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_GPIO_Init+0x238>)
 8002b9a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba6:	4a29      	ldr	r2, [pc, #164]	; (8002c4c <HAL_GPIO_Init+0x23c>)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	3302      	adds	r3, #2
 8002bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a20      	ldr	r2, [pc, #128]	; (8002c50 <HAL_GPIO_Init+0x240>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d052      	beq.n	8002c78 <HAL_GPIO_Init+0x268>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <HAL_GPIO_Init+0x244>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d031      	beq.n	8002c3e <HAL_GPIO_Init+0x22e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <HAL_GPIO_Init+0x248>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d02b      	beq.n	8002c3a <HAL_GPIO_Init+0x22a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <HAL_GPIO_Init+0x24c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d025      	beq.n	8002c36 <HAL_GPIO_Init+0x226>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <HAL_GPIO_Init+0x250>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01f      	beq.n	8002c32 <HAL_GPIO_Init+0x222>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <HAL_GPIO_Init+0x254>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d019      	beq.n	8002c2e <HAL_GPIO_Init+0x21e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1a      	ldr	r2, [pc, #104]	; (8002c68 <HAL_GPIO_Init+0x258>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <HAL_GPIO_Init+0x21a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <HAL_GPIO_Init+0x25c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00d      	beq.n	8002c26 <HAL_GPIO_Init+0x216>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <HAL_GPIO_Init+0x260>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d007      	beq.n	8002c22 <HAL_GPIO_Init+0x212>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_GPIO_Init+0x264>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d101      	bne.n	8002c1e <HAL_GPIO_Init+0x20e>
 8002c1a:	2309      	movs	r3, #9
 8002c1c:	e02d      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c1e:	230a      	movs	r3, #10
 8002c20:	e02b      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c22:	2308      	movs	r3, #8
 8002c24:	e029      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c26:	2307      	movs	r3, #7
 8002c28:	e027      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c2a:	2306      	movs	r3, #6
 8002c2c:	e025      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c2e:	2305      	movs	r3, #5
 8002c30:	e023      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c32:	2304      	movs	r3, #4
 8002c34:	e021      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c36:	2303      	movs	r3, #3
 8002c38:	e01f      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e01d      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e01b      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c42:	bf00      	nop
 8002c44:	58000080 	.word	0x58000080
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	58000400 	.word	0x58000400
 8002c50:	58020000 	.word	0x58020000
 8002c54:	58020400 	.word	0x58020400
 8002c58:	58020800 	.word	0x58020800
 8002c5c:	58020c00 	.word	0x58020c00
 8002c60:	58021000 	.word	0x58021000
 8002c64:	58021400 	.word	0x58021400
 8002c68:	58021800 	.word	0x58021800
 8002c6c:	58021c00 	.word	0x58021c00
 8002c70:	58022000 	.word	0x58022000
 8002c74:	58022400 	.word	0x58022400
 8002c78:	2300      	movs	r3, #0
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	f002 0203 	and.w	r2, r2, #3
 8002c80:	0092      	lsls	r2, r2, #2
 8002c82:	4093      	lsls	r3, r2
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c8a:	4938      	ldr	r1, [pc, #224]	; (8002d6c <HAL_GPIO_Init+0x35c>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f47f ae63 	bne.w	8002a24 <HAL_GPIO_Init+0x14>
  }
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	3724      	adds	r7, #36	; 0x24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	58000400 	.word	0x58000400

08002d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07f      	b.n	8002e82 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fe f808 	bl	8000dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2224      	movs	r2, #36	; 0x24
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	e006      	b.n	8002df8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002df6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d104      	bne.n	8002e0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_I2C_Init+0x11c>)
 8002e16:	430b      	orrs	r3, r1
 8002e18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69d9      	ldr	r1, [r3, #28]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	02008000 	.word	0x02008000

08002e90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d138      	bne.n	8002f18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e032      	b.n	8002f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ee2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6819      	ldr	r1, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e000      	b.n	8002f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f18:	2302      	movs	r3, #2
  }
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d139      	bne.n	8002fb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e033      	b.n	8002fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2224      	movs	r2, #36	; 0x24
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_PWREx_ConfigSupply+0x70>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d00a      	beq.n	8002fea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002fd4:	4b16      	ldr	r3, [pc, #88]	; (8003030 <HAL_PWREx_ConfigSupply+0x70>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d001      	beq.n	8002fe6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e01f      	b.n	8003026 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e01d      	b.n	8003026 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_PWREx_ConfigSupply+0x70>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f023 0207 	bic.w	r2, r3, #7
 8002ff2:	490f      	ldr	r1, [pc, #60]	; (8003030 <HAL_PWREx_ConfigSupply+0x70>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ffa:	f7fe f959 	bl	80012b0 <HAL_GetTick>
 8002ffe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003000:	e009      	b.n	8003016 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003002:	f7fe f955 	bl	80012b0 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003010:	d901      	bls.n	8003016 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e007      	b.n	8003026 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_PWREx_ConfigSupply+0x70>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003022:	d1ee      	bne.n	8003002 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	58024800 	.word	0x58024800

08003034 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08c      	sub	sp, #48	; 0x30
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f000 bc1f 	b.w	8003886 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80b3 	beq.w	80031bc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003056:	4b95      	ldr	r3, [pc, #596]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003060:	4b92      	ldr	r3, [pc, #584]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	2b10      	cmp	r3, #16
 800306a:	d007      	beq.n	800307c <HAL_RCC_OscConfig+0x48>
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	2b18      	cmp	r3, #24
 8003070:	d112      	bne.n	8003098 <HAL_RCC_OscConfig+0x64>
 8003072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d10d      	bne.n	8003098 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	4b8b      	ldr	r3, [pc, #556]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8098 	beq.w	80031ba <HAL_RCC_OscConfig+0x186>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 8093 	bne.w	80031ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e3f6      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a0:	d106      	bne.n	80030b0 <HAL_RCC_OscConfig+0x7c>
 80030a2:	4b82      	ldr	r3, [pc, #520]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a81      	ldr	r2, [pc, #516]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e058      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d112      	bne.n	80030de <HAL_RCC_OscConfig+0xaa>
 80030b8:	4b7c      	ldr	r3, [pc, #496]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a7b      	ldr	r2, [pc, #492]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b79      	ldr	r3, [pc, #484]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a78      	ldr	r2, [pc, #480]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	4b76      	ldr	r3, [pc, #472]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a75      	ldr	r2, [pc, #468]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	e041      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e6:	d112      	bne.n	800310e <HAL_RCC_OscConfig+0xda>
 80030e8:	4b70      	ldr	r3, [pc, #448]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6f      	ldr	r2, [pc, #444]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b6d      	ldr	r3, [pc, #436]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a6c      	ldr	r2, [pc, #432]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80030fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a69      	ldr	r2, [pc, #420]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	e029      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003116:	d112      	bne.n	800313e <HAL_RCC_OscConfig+0x10a>
 8003118:	4b64      	ldr	r3, [pc, #400]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a63      	ldr	r2, [pc, #396]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 800311e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b61      	ldr	r3, [pc, #388]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a60      	ldr	r2, [pc, #384]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 800312a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b5e      	ldr	r3, [pc, #376]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a5d      	ldr	r2, [pc, #372]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e011      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
 800313e:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5a      	ldr	r2, [pc, #360]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b58      	ldr	r3, [pc, #352]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a57      	ldr	r2, [pc, #348]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b55      	ldr	r3, [pc, #340]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a54      	ldr	r2, [pc, #336]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 800315c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003160:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d013      	beq.n	8003192 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe f8a1 	bl	80012b0 <HAL_GetTick>
 800316e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003172:	f7fe f89d 	bl	80012b0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b64      	cmp	r3, #100	; 0x64
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e380      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003184:	4b49      	ldr	r3, [pc, #292]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x13e>
 8003190:	e014      	b.n	80031bc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fe f88d 	bl	80012b0 <HAL_GetTick>
 8003196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800319a:	f7fe f889 	bl	80012b0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b64      	cmp	r3, #100	; 0x64
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e36c      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031ac:	4b3f      	ldr	r3, [pc, #252]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f0      	bne.n	800319a <HAL_RCC_OscConfig+0x166>
 80031b8:	e000      	b.n	80031bc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 808c 	beq.w	80032e2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031d4:	4b35      	ldr	r3, [pc, #212]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <HAL_RCC_OscConfig+0x1bc>
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	2b18      	cmp	r3, #24
 80031e4:	d137      	bne.n	8003256 <HAL_RCC_OscConfig+0x222>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d132      	bne.n	8003256 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f0:	4b2e      	ldr	r3, [pc, #184]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_OscConfig+0x1d4>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e33e      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f023 0219 	bic.w	r2, r3, #25
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4925      	ldr	r1, [pc, #148]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fe f849 	bl	80012b0 <HAL_GetTick>
 800321e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003222:	f7fe f845 	bl	80012b0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e328      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003234:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	4917      	ldr	r1, [pc, #92]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003254:	e045      	b.n	80032e2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d028      	beq.n	80032b0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 0219 	bic.w	r2, r3, #25
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	4910      	ldr	r1, [pc, #64]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe f81e 	bl	80012b0 <HAL_GetTick>
 8003274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003278:	f7fe f81a 	bl	80012b0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e2fd      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	4901      	ldr	r1, [pc, #4]	; (80032ac <HAL_RCC_OscConfig+0x278>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
 80032aa:	e01a      	b.n	80032e2 <HAL_RCC_OscConfig+0x2ae>
 80032ac:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b0:	4b97      	ldr	r3, [pc, #604]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a96      	ldr	r2, [pc, #600]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fd fff8 	bl	80012b0 <HAL_GetTick>
 80032c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fd fff4 	bl	80012b0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e2d7      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032d6:	4b8e      	ldr	r3, [pc, #568]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d06a      	beq.n	80033c4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ee:	4b88      	ldr	r3, [pc, #544]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032f8:	4b85      	ldr	r3, [pc, #532]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d007      	beq.n	8003314 <HAL_RCC_OscConfig+0x2e0>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b18      	cmp	r3, #24
 8003308:	d11b      	bne.n	8003342 <HAL_RCC_OscConfig+0x30e>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d116      	bne.n	8003342 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003314:	4b7e      	ldr	r3, [pc, #504]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_OscConfig+0x2f8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	2b80      	cmp	r3, #128	; 0x80
 8003326:	d001      	beq.n	800332c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e2ac      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800332c:	4b78      	ldr	r3, [pc, #480]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	4975      	ldr	r1, [pc, #468]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003340:	e040      	b.n	80033c4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d023      	beq.n	8003392 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800334a:	4b71      	ldr	r3, [pc, #452]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a70      	ldr	r2, [pc, #448]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fd ffab 	bl	80012b0 <HAL_GetTick>
 800335a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800335e:	f7fd ffa7 	bl	80012b0 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e28a      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003370:	4b67      	ldr	r3, [pc, #412]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800337c:	4b64      	ldr	r3, [pc, #400]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	4961      	ldr	r1, [pc, #388]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	60cb      	str	r3, [r1, #12]
 8003390:	e018      	b.n	80033c4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003392:	4b5f      	ldr	r3, [pc, #380]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5e      	ldr	r2, [pc, #376]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800339c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339e:	f7fd ff87 	bl	80012b0 <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033a6:	f7fd ff83 	bl	80012b0 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e266      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033b8:	4b55      	ldr	r3, [pc, #340]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d036      	beq.n	800343e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d019      	beq.n	800340c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d8:	4b4d      	ldr	r3, [pc, #308]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	4a4c      	ldr	r2, [pc, #304]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7fd ff64 	bl	80012b0 <HAL_GetTick>
 80033e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ec:	f7fd ff60 	bl	80012b0 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e243      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033fe:	4b44      	ldr	r3, [pc, #272]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x3b8>
 800340a:	e018      	b.n	800343e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340c:	4b40      	ldr	r3, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 800340e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003410:	4a3f      	ldr	r2, [pc, #252]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fd ff4a 	bl	80012b0 <HAL_GetTick>
 800341c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003420:	f7fd ff46 	bl	80012b0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e229      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003432:	4b37      	ldr	r3, [pc, #220]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d036      	beq.n	80034b8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d019      	beq.n	8003486 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003452:	4b2f      	ldr	r3, [pc, #188]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2e      	ldr	r2, [pc, #184]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800345c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800345e:	f7fd ff27 	bl	80012b0 <HAL_GetTick>
 8003462:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003466:	f7fd ff23 	bl	80012b0 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e206      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x432>
 8003484:	e018      	b.n	80034b8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003486:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 800348c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003490:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003492:	f7fd ff0d 	bl	80012b0 <HAL_GetTick>
 8003496:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800349a:	f7fd ff09 	bl	80012b0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e1ec      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034ac:	4b18      	ldr	r3, [pc, #96]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80af 	beq.w	8003624 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_RCC_OscConfig+0x4e0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a12      	ldr	r2, [pc, #72]	; (8003514 <HAL_RCC_OscConfig+0x4e0>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034d2:	f7fd feed 	bl	80012b0 <HAL_GetTick>
 80034d6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fd fee9 	bl	80012b0 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b64      	cmp	r3, #100	; 0x64
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e1cc      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCC_OscConfig+0x4e0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10b      	bne.n	8003518 <HAL_RCC_OscConfig+0x4e4>
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	4a02      	ldr	r2, [pc, #8]	; (8003510 <HAL_RCC_OscConfig+0x4dc>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6713      	str	r3, [r2, #112]	; 0x70
 800350c:	e05b      	b.n	80035c6 <HAL_RCC_OscConfig+0x592>
 800350e:	bf00      	nop
 8003510:	58024400 	.word	0x58024400
 8003514:	58024800 	.word	0x58024800
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d112      	bne.n	8003546 <HAL_RCC_OscConfig+0x512>
 8003520:	4b9d      	ldr	r3, [pc, #628]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a9c      	ldr	r2, [pc, #624]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
 800352c:	4b9a      	ldr	r3, [pc, #616]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a99      	ldr	r2, [pc, #612]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
 8003538:	4b97      	ldr	r3, [pc, #604]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a96      	ldr	r2, [pc, #600]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800353e:	f023 0304 	bic.w	r3, r3, #4
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
 8003544:	e03f      	b.n	80035c6 <HAL_RCC_OscConfig+0x592>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d112      	bne.n	8003574 <HAL_RCC_OscConfig+0x540>
 800354e:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a91      	ldr	r2, [pc, #580]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
 800355a:	4b8f      	ldr	r3, [pc, #572]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a8e      	ldr	r2, [pc, #568]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
 8003566:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	4a8b      	ldr	r2, [pc, #556]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6713      	str	r3, [r2, #112]	; 0x70
 8003572:	e028      	b.n	80035c6 <HAL_RCC_OscConfig+0x592>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b85      	cmp	r3, #133	; 0x85
 800357a:	d112      	bne.n	80035a2 <HAL_RCC_OscConfig+0x56e>
 800357c:	4b86      	ldr	r3, [pc, #536]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a85      	ldr	r2, [pc, #532]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003582:	f043 0304 	orr.w	r3, r3, #4
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	4b83      	ldr	r3, [pc, #524]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a82      	ldr	r2, [pc, #520]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800358e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
 8003594:	4b80      	ldr	r3, [pc, #512]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	4a7f      	ldr	r2, [pc, #508]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	6713      	str	r3, [r2, #112]	; 0x70
 80035a0:	e011      	b.n	80035c6 <HAL_RCC_OscConfig+0x592>
 80035a2:	4b7d      	ldr	r3, [pc, #500]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	4a7c      	ldr	r2, [pc, #496]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	6713      	str	r3, [r2, #112]	; 0x70
 80035ae:	4b7a      	ldr	r3, [pc, #488]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	4a79      	ldr	r2, [pc, #484]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80035b4:	f023 0304 	bic.w	r3, r3, #4
 80035b8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ba:	4b77      	ldr	r3, [pc, #476]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a76      	ldr	r2, [pc, #472]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80035c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d015      	beq.n	80035fa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fd fe6f 	bl	80012b0 <HAL_GetTick>
 80035d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d6:	f7fd fe6b 	bl	80012b0 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e14c      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ee      	beq.n	80035d6 <HAL_RCC_OscConfig+0x5a2>
 80035f8:	e014      	b.n	8003624 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fd fe59 	bl	80012b0 <HAL_GetTick>
 80035fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fd fe55 	bl	80012b0 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e136      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003618:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ee      	bne.n	8003602 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 812b 	beq.w	8003884 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800362e:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003636:	2b18      	cmp	r3, #24
 8003638:	f000 80bb 	beq.w	80037b2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	2b02      	cmp	r3, #2
 8003642:	f040 8095 	bne.w	8003770 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003646:	4b54      	ldr	r3, [pc, #336]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a53      	ldr	r2, [pc, #332]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800364c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7fd fe2d 	bl	80012b0 <HAL_GetTick>
 8003656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365a:	f7fd fe29 	bl	80012b0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e10c      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800366c:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003678:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800367a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800367c:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCC_OscConfig+0x768>)
 800367e:	4013      	ands	r3, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003688:	0112      	lsls	r2, r2, #4
 800368a:	430a      	orrs	r2, r1
 800368c:	4942      	ldr	r1, [pc, #264]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800368e:	4313      	orrs	r3, r2
 8003690:	628b      	str	r3, [r1, #40]	; 0x28
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	3b01      	subs	r3, #1
 8003698:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a0:	3b01      	subs	r3, #1
 80036a2:	025b      	lsls	r3, r3, #9
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	3b01      	subs	r3, #1
 80036ae:	041b      	lsls	r3, r3, #16
 80036b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	3b01      	subs	r3, #1
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036c2:	4935      	ldr	r1, [pc, #212]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80036c8:	4b33      	ldr	r3, [pc, #204]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	4a32      	ldr	r2, [pc, #200]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036d4:	4b30      	ldr	r3, [pc, #192]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d8:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_RCC_OscConfig+0x76c>)
 80036da:	4013      	ands	r3, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036e0:	00d2      	lsls	r2, r2, #3
 80036e2:	492d      	ldr	r1, [pc, #180]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036e8:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	f023 020c 	bic.w	r2, r3, #12
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	4928      	ldr	r1, [pc, #160]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036fa:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	f023 0202 	bic.w	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	4924      	ldr	r1, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003708:	4313      	orrs	r3, r2
 800370a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800370c:	4b22      	ldr	r3, [pc, #136]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	4a21      	ldr	r2, [pc, #132]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800371e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003724:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800372a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800373c:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a15      	ldr	r2, [pc, #84]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fd fdb2 	bl	80012b0 <HAL_GetTick>
 800374c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003750:	f7fd fdae 	bl	80012b0 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e091      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x71c>
 800376e:	e089      	b.n	8003884 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a08      	ldr	r2, [pc, #32]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fd fd98 	bl	80012b0 <HAL_GetTick>
 8003780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003782:	e00f      	b.n	80037a4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fd fd94 	bl	80012b0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d908      	bls.n	80037a4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e077      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
 8003796:	bf00      	nop
 8003798:	58024400 	.word	0x58024400
 800379c:	fffffc0c 	.word	0xfffffc0c
 80037a0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037a4:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCC_OscConfig+0x85c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e9      	bne.n	8003784 <HAL_RCC_OscConfig+0x750>
 80037b0:	e068      	b.n	8003884 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037b2:	4b37      	ldr	r3, [pc, #220]	; (8003890 <HAL_RCC_OscConfig+0x85c>)
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037b8:	4b35      	ldr	r3, [pc, #212]	; (8003890 <HAL_RCC_OscConfig+0x85c>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d031      	beq.n	800382a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0203 	and.w	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d12a      	bne.n	800382a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d122      	bne.n	800382a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d11a      	bne.n	800382a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	0a5b      	lsrs	r3, r3, #9
 80037f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d111      	bne.n	800382a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d108      	bne.n	800382a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	0e1b      	lsrs	r3, r3, #24
 800381c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e02b      	b.n	8003886 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800382e:	4b18      	ldr	r3, [pc, #96]	; (8003890 <HAL_RCC_OscConfig+0x85c>)
 8003830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003832:	08db      	lsrs	r3, r3, #3
 8003834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003838:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	429a      	cmp	r2, r3
 8003842:	d01f      	beq.n	8003884 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003844:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_RCC_OscConfig+0x85c>)
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	4a11      	ldr	r2, [pc, #68]	; (8003890 <HAL_RCC_OscConfig+0x85c>)
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003850:	f7fd fd2e 	bl	80012b0 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003856:	bf00      	nop
 8003858:	f7fd fd2a 	bl	80012b0 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	4293      	cmp	r3, r2
 8003862:	d0f9      	beq.n	8003858 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003864:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_RCC_OscConfig+0x85c>)
 8003866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <HAL_RCC_OscConfig+0x860>)
 800386a:	4013      	ands	r3, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003870:	00d2      	lsls	r2, r2, #3
 8003872:	4907      	ldr	r1, [pc, #28]	; (8003890 <HAL_RCC_OscConfig+0x85c>)
 8003874:	4313      	orrs	r3, r2
 8003876:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_OscConfig+0x85c>)
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	4a04      	ldr	r2, [pc, #16]	; (8003890 <HAL_RCC_OscConfig+0x85c>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3730      	adds	r7, #48	; 0x30
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	58024400 	.word	0x58024400
 8003894:	ffff0007 	.word	0xffff0007

08003898 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e19c      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038ac:	4b8a      	ldr	r3, [pc, #552]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d910      	bls.n	80038dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b87      	ldr	r3, [pc, #540]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 020f 	bic.w	r2, r3, #15
 80038c2:	4985      	ldr	r1, [pc, #532]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b83      	ldr	r3, [pc, #524]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e184      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d010      	beq.n	800390a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	4b7b      	ldr	r3, [pc, #492]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d908      	bls.n	800390a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038f8:	4b78      	ldr	r3, [pc, #480]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	4975      	ldr	r1, [pc, #468]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003906:	4313      	orrs	r3, r2
 8003908:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d010      	beq.n	8003938 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	4b70      	ldr	r3, [pc, #448]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003922:	429a      	cmp	r2, r3
 8003924:	d908      	bls.n	8003938 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003926:	4b6d      	ldr	r3, [pc, #436]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	496a      	ldr	r1, [pc, #424]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003934:	4313      	orrs	r3, r2
 8003936:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d010      	beq.n	8003966 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	4b64      	ldr	r3, [pc, #400]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003950:	429a      	cmp	r2, r3
 8003952:	d908      	bls.n	8003966 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003954:	4b61      	ldr	r3, [pc, #388]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	495e      	ldr	r1, [pc, #376]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003962:	4313      	orrs	r3, r2
 8003964:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d010      	beq.n	8003994 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800397e:	429a      	cmp	r2, r3
 8003980:	d908      	bls.n	8003994 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003982:	4b56      	ldr	r3, [pc, #344]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4953      	ldr	r1, [pc, #332]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003990:	4313      	orrs	r3, r2
 8003992:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d010      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	4b4d      	ldr	r3, [pc, #308]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d908      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b4a      	ldr	r3, [pc, #296]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f023 020f 	bic.w	r2, r3, #15
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4947      	ldr	r1, [pc, #284]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d055      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80039ce:	4b43      	ldr	r3, [pc, #268]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4940      	ldr	r1, [pc, #256]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039e8:	4b3c      	ldr	r3, [pc, #240]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d121      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0f6      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a00:	4b36      	ldr	r3, [pc, #216]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d115      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0ea      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a18:	4b30      	ldr	r3, [pc, #192]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0de      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a28:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0d6      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a38:	4b28      	ldr	r3, [pc, #160]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f023 0207 	bic.w	r2, r3, #7
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4925      	ldr	r1, [pc, #148]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4a:	f7fd fc31 	bl	80012b0 <HAL_GetTick>
 8003a4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a52:	f7fd fc2d 	bl	80012b0 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0be      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a68:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d1eb      	bne.n	8003a52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d010      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d208      	bcs.n	8003aa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f023 020f 	bic.w	r2, r3, #15
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	490e      	ldr	r1, [pc, #56]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d214      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 020f 	bic.w	r2, r3, #15
 8003abe:	4906      	ldr	r1, [pc, #24]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e086      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
 8003ad8:	52002000 	.word	0x52002000
 8003adc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d208      	bcs.n	8003b0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003afc:	4b3c      	ldr	r3, [pc, #240]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	4939      	ldr	r1, [pc, #228]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d010      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	4b34      	ldr	r3, [pc, #208]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d208      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b2a:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	492e      	ldr	r1, [pc, #184]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d208      	bcs.n	8003b6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	4922      	ldr	r1, [pc, #136]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d010      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69da      	ldr	r2, [r3, #28]
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d208      	bcs.n	8003b98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b86:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	4917      	ldr	r1, [pc, #92]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003b98:	f000 f834 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	4912      	ldr	r1, [pc, #72]	; (8003bf4 <HAL_RCC_ClockConfig+0x35c>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <HAL_RCC_ClockConfig+0x35c>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bcc:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <HAL_RCC_ClockConfig+0x360>)
 8003bce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bd0:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <HAL_RCC_ClockConfig+0x364>)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x368>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd fb1e 	bl	800121c <HAL_InitTick>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	08006870 	.word	0x08006870
 8003bf8:	24000004 	.word	0x24000004
 8003bfc:	24000000 	.word	0x24000000
 8003c00:	24000008 	.word	0x24000008

08003c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c0a:	4bb3      	ldr	r3, [pc, #716]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c12:	2b18      	cmp	r3, #24
 8003c14:	f200 8155 	bhi.w	8003ec2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c85 	.word	0x08003c85
 8003c24:	08003ec3 	.word	0x08003ec3
 8003c28:	08003ec3 	.word	0x08003ec3
 8003c2c:	08003ec3 	.word	0x08003ec3
 8003c30:	08003ec3 	.word	0x08003ec3
 8003c34:	08003ec3 	.word	0x08003ec3
 8003c38:	08003ec3 	.word	0x08003ec3
 8003c3c:	08003ec3 	.word	0x08003ec3
 8003c40:	08003cab 	.word	0x08003cab
 8003c44:	08003ec3 	.word	0x08003ec3
 8003c48:	08003ec3 	.word	0x08003ec3
 8003c4c:	08003ec3 	.word	0x08003ec3
 8003c50:	08003ec3 	.word	0x08003ec3
 8003c54:	08003ec3 	.word	0x08003ec3
 8003c58:	08003ec3 	.word	0x08003ec3
 8003c5c:	08003ec3 	.word	0x08003ec3
 8003c60:	08003cb1 	.word	0x08003cb1
 8003c64:	08003ec3 	.word	0x08003ec3
 8003c68:	08003ec3 	.word	0x08003ec3
 8003c6c:	08003ec3 	.word	0x08003ec3
 8003c70:	08003ec3 	.word	0x08003ec3
 8003c74:	08003ec3 	.word	0x08003ec3
 8003c78:	08003ec3 	.word	0x08003ec3
 8003c7c:	08003ec3 	.word	0x08003ec3
 8003c80:	08003cb7 	.word	0x08003cb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c84:	4b94      	ldr	r3, [pc, #592]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c90:	4b91      	ldr	r3, [pc, #580]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	4a90      	ldr	r2, [pc, #576]	; (8003edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003ca2:	e111      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ca4:	4b8d      	ldr	r3, [pc, #564]	; (8003edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ca6:	61bb      	str	r3, [r7, #24]
      break;
 8003ca8:	e10e      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003caa:	4b8d      	ldr	r3, [pc, #564]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cac:	61bb      	str	r3, [r7, #24]
      break;
 8003cae:	e10b      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003cb0:	4b8c      	ldr	r3, [pc, #560]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003cb2:	61bb      	str	r3, [r7, #24]
      break;
 8003cb4:	e108      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cb6:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003cc0:	4b85      	ldr	r3, [pc, #532]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ccc:	4b82      	ldr	r3, [pc, #520]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003cd6:	4b80      	ldr	r3, [pc, #512]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	08db      	lsrs	r3, r3, #3
 8003cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80e1 	beq.w	8003ebc <HAL_RCC_GetSysClockFreq+0x2b8>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	f000 8083 	beq.w	8003e08 <HAL_RCC_GetSysClockFreq+0x204>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	f200 80a1 	bhi.w	8003e4c <HAL_RCC_GetSysClockFreq+0x248>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x114>
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d056      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d16:	e099      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d18:	4b6f      	ldr	r3, [pc, #444]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d02d      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d24:	4b6c      	ldr	r3, [pc, #432]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	4a6b      	ldr	r2, [pc, #428]	; (8003edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
 8003d34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	ee07 3a90 	vmov	s15, r3
 8003d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4e:	4b62      	ldr	r3, [pc, #392]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003d7e:	e087      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003eec <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d92:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003da6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dc2:	e065      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dce:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ef0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dd6:	4b40      	ldr	r3, [pc, #256]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e06:	e043      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ef4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e1a:	4b2f      	ldr	r3, [pc, #188]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e4a:	e021      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ef0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	0a5b      	lsrs	r3, r3, #9
 8003e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	ee07 3a90 	vmov	s15, r3
 8003ea4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eb4:	ee17 3a90 	vmov	r3, s15
 8003eb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003eba:	e005      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
      break;
 8003ec0:	e002      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ec2:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ec4:	61bb      	str	r3, [r7, #24]
      break;
 8003ec6:	bf00      	nop
  }

  return sysclockfreq;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	; 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	58024400 	.word	0x58024400
 8003edc:	03d09000 	.word	0x03d09000
 8003ee0:	003d0900 	.word	0x003d0900
 8003ee4:	016e3600 	.word	0x016e3600
 8003ee8:	46000000 	.word	0x46000000
 8003eec:	4c742400 	.word	0x4c742400
 8003ef0:	4a742400 	.word	0x4a742400
 8003ef4:	4bb71b00 	.word	0x4bb71b00

08003ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003efe:	f7ff fe81 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003f02:	4602      	mov	r2, r0
 8003f04:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	0a1b      	lsrs	r3, r3, #8
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	490f      	ldr	r1, [pc, #60]	; (8003f4c <HAL_RCC_GetHCLKFreq+0x54>)
 8003f10:	5ccb      	ldrb	r3, [r1, r3]
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <HAL_RCC_GetHCLKFreq+0x54>)
 8003f26:	5cd3      	ldrb	r3, [r2, r3]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f36:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	08006870 	.word	0x08006870
 8003f50:	24000004 	.word	0x24000004
 8003f54:	24000000 	.word	0x24000000

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003f5c:	f7ff ffcc 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4904      	ldr	r1, [pc, #16]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	08006870 	.word	0x08006870

08003f84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b0c8      	sub	sp, #288	; 0x120
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f96:	2300      	movs	r3, #0
 8003f98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003fa8:	2500      	movs	r5, #0
 8003faa:	ea54 0305 	orrs.w	r3, r4, r5
 8003fae:	d049      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fba:	d02f      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003fbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fc0:	d828      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fc6:	d01a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fcc:	d822      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd6:	d007      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fd8:	e01c      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fda:	4ba7      	ldr	r3, [pc, #668]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	4aa6      	ldr	r2, [pc, #664]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fe6:	e01a      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fec:	3308      	adds	r3, #8
 8003fee:	2102      	movs	r1, #2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f002 fa6d 	bl	80064d0 <RCCEx_PLL2_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ffc:	e00f      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004002:	3328      	adds	r3, #40	; 0x28
 8004004:	2102      	movs	r1, #2
 8004006:	4618      	mov	r0, r3
 8004008:	f002 fb14 	bl	8006634 <RCCEx_PLL3_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004012:	e004      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800401c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004026:	4b94      	ldr	r3, [pc, #592]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800402e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004034:	4a90      	ldr	r2, [pc, #576]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004036:	430b      	orrs	r3, r1
 8004038:	6513      	str	r3, [r2, #80]	; 0x50
 800403a:	e003      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004040:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004050:	f04f 0900 	mov.w	r9, #0
 8004054:	ea58 0309 	orrs.w	r3, r8, r9
 8004058:	d047      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800405a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	2b04      	cmp	r3, #4
 8004062:	d82a      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004064:	a201      	add	r2, pc, #4	; (adr r2, 800406c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004081 	.word	0x08004081
 8004070:	0800408f 	.word	0x0800408f
 8004074:	080040a5 	.word	0x080040a5
 8004078:	080040c3 	.word	0x080040c3
 800407c:	080040c3 	.word	0x080040c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004080:	4b7d      	ldr	r3, [pc, #500]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	4a7c      	ldr	r2, [pc, #496]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800408c:	e01a      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800408e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004092:	3308      	adds	r3, #8
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f002 fa1a 	bl	80064d0 <RCCEx_PLL2_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040a2:	e00f      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a8:	3328      	adds	r3, #40	; 0x28
 80040aa:	2100      	movs	r1, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f002 fac1 	bl	8006634 <RCCEx_PLL3_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040b8:	e004      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80040c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040cc:	4b6a      	ldr	r3, [pc, #424]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d0:	f023 0107 	bic.w	r1, r3, #7
 80040d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	4a67      	ldr	r2, [pc, #412]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	6513      	str	r3, [r2, #80]	; 0x50
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80040ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80040f6:	f04f 0b00 	mov.w	fp, #0
 80040fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80040fe:	d054      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800410a:	d036      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800410c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004110:	d82f      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004116:	d032      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411c:	d829      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800411e:	2bc0      	cmp	r3, #192	; 0xc0
 8004120:	d02f      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004122:	2bc0      	cmp	r3, #192	; 0xc0
 8004124:	d825      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004126:	2b80      	cmp	r3, #128	; 0x80
 8004128:	d018      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800412a:	2b80      	cmp	r3, #128	; 0x80
 800412c:	d821      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004132:	2b40      	cmp	r3, #64	; 0x40
 8004134:	d007      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004136:	e01c      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004138:	4b4f      	ldr	r3, [pc, #316]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	4a4e      	ldr	r2, [pc, #312]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800413e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004144:	e01e      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800414a:	3308      	adds	r3, #8
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f002 f9be 	bl	80064d0 <RCCEx_PLL2_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800415a:	e013      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800415c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004160:	3328      	adds	r3, #40	; 0x28
 8004162:	2100      	movs	r1, #0
 8004164:	4618      	mov	r0, r3
 8004166:	f002 fa65 	bl	8006634 <RCCEx_PLL3_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004170:	e008      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004178:	e004      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004184:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10a      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800418c:	4b3a      	ldr	r3, [pc, #232]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800418e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004190:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	4a37      	ldr	r2, [pc, #220]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800419c:	430b      	orrs	r3, r1
 800419e:	6513      	str	r3, [r2, #80]	; 0x50
 80041a0:	e003      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80041aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80041b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80041ba:	2300      	movs	r3, #0
 80041bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80041c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80041c4:	460b      	mov	r3, r1
 80041c6:	4313      	orrs	r3, r2
 80041c8:	d05c      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80041ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80041d4:	d03b      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80041d6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80041da:	d834      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80041dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e0:	d037      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80041e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e6:	d82e      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80041e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80041ec:	d033      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80041ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80041f2:	d828      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f8:	d01a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80041fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fe:	d822      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004208:	d007      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800420a:	e01c      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004216:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004218:	e01e      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800421a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421e:	3308      	adds	r3, #8
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f002 f954 	bl	80064d0 <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800422e:	e013      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004234:	3328      	adds	r3, #40	; 0x28
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f002 f9fb 	bl	8006634 <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004244:	e008      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800424c:	e004      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004258:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10d      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004264:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800426c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426e:	4a02      	ldr	r2, [pc, #8]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004270:	430b      	orrs	r3, r1
 8004272:	6513      	str	r3, [r2, #80]	; 0x50
 8004274:	e006      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004280:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004290:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004294:	2300      	movs	r3, #0
 8004296:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800429a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800429e:	460b      	mov	r3, r1
 80042a0:	4313      	orrs	r3, r2
 80042a2:	d03a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80042a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042aa:	2b30      	cmp	r3, #48	; 0x30
 80042ac:	d01f      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80042ae:	2b30      	cmp	r3, #48	; 0x30
 80042b0:	d819      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d00c      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d815      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d019      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d111      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c2:	4bae      	ldr	r3, [pc, #696]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	4aad      	ldr	r2, [pc, #692]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80042ce:	e011      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d4:	3308      	adds	r3, #8
 80042d6:	2102      	movs	r1, #2
 80042d8:	4618      	mov	r0, r3
 80042da:	f002 f8f9 	bl	80064d0 <RCCEx_PLL2_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80042e4:	e006      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042ec:	e002      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80042f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80042fc:	4b9f      	ldr	r3, [pc, #636]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004300:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	4a9c      	ldr	r2, [pc, #624]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800430c:	430b      	orrs	r3, r1
 800430e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004310:	e003      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004312:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004316:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800431a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004322:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004326:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800432a:	2300      	movs	r3, #0
 800432c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004330:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004334:	460b      	mov	r3, r1
 8004336:	4313      	orrs	r3, r2
 8004338:	d051      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800433a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800433e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004344:	d035      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800434a:	d82e      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800434c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004350:	d031      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004352:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004356:	d828      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435c:	d01a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800435e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004362:	d822      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436c:	d007      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800436e:	e01c      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004370:	4b82      	ldr	r3, [pc, #520]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	4a81      	ldr	r2, [pc, #516]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800437c:	e01c      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800437e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004382:	3308      	adds	r3, #8
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f002 f8a2 	bl	80064d0 <RCCEx_PLL2_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004392:	e011      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004398:	3328      	adds	r3, #40	; 0x28
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f002 f949 	bl	8006634 <RCCEx_PLL3_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80043a8:	e006      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043b0:	e002      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80043b2:	bf00      	nop
 80043b4:	e000      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80043b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043c0:	4b6e      	ldr	r3, [pc, #440]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80043c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ce:	4a6b      	ldr	r2, [pc, #428]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6513      	str	r3, [r2, #80]	; 0x50
 80043d4:	e003      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80043ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043ee:	2300      	movs	r3, #0
 80043f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80043f8:	460b      	mov	r3, r1
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d053      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80043fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004408:	d033      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800440a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800440e:	d82c      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004410:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004414:	d02f      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004416:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800441a:	d826      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800441c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004420:	d02b      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004422:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004426:	d820      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800442c:	d012      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800442e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004432:	d81a      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d022      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443c:	d115      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800443e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004442:	3308      	adds	r3, #8
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f002 f842 	bl	80064d0 <RCCEx_PLL2_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004452:	e015      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004458:	3328      	adds	r3, #40	; 0x28
 800445a:	2101      	movs	r1, #1
 800445c:	4618      	mov	r0, r3
 800445e:	f002 f8e9 	bl	8006634 <RCCEx_PLL3_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004468:	e00a      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004472:	bf00      	nop
 8004474:	e004      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004476:	bf00      	nop
 8004478:	e002      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800447a:	bf00      	nop
 800447c:	e000      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800447e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004480:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004488:	4b3c      	ldr	r3, [pc, #240]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800448a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004496:	4a39      	ldr	r2, [pc, #228]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004498:	430b      	orrs	r3, r1
 800449a:	6513      	str	r3, [r2, #80]	; 0x50
 800449c:	e003      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80044b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044b6:	2300      	movs	r3, #0
 80044b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4313      	orrs	r3, r2
 80044c4:	d060      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80044c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044ce:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80044d2:	d039      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80044d4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80044d8:	d832      	bhi.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80044da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044de:	d035      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80044e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e4:	d82c      	bhi.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d031      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f0:	d826      	bhi.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80044f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044f6:	d02d      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80044f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044fc:	d820      	bhi.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80044fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004502:	d012      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004508:	d81a      	bhi.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d024      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800450e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004512:	d115      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004518:	3308      	adds	r3, #8
 800451a:	2101      	movs	r1, #1
 800451c:	4618      	mov	r0, r3
 800451e:	f001 ffd7 	bl	80064d0 <RCCEx_PLL2_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004528:	e017      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800452a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800452e:	3328      	adds	r3, #40	; 0x28
 8004530:	2101      	movs	r1, #1
 8004532:	4618      	mov	r0, r3
 8004534:	f002 f87e 	bl	8006634 <RCCEx_PLL3_Config>
 8004538:	4603      	mov	r3, r0
 800453a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800453e:	e00c      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004546:	e008      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004548:	bf00      	nop
 800454a:	e006      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800454c:	bf00      	nop
 800454e:	e004      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004550:	bf00      	nop
 8004552:	e002      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004554:	bf00      	nop
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10e      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800456a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800456e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004572:	4a02      	ldr	r2, [pc, #8]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004574:	430b      	orrs	r3, r1
 8004576:	6593      	str	r3, [r2, #88]	; 0x58
 8004578:	e006      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800457a:	bf00      	nop
 800457c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004584:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800459e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045a2:	460b      	mov	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	d037      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80045a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b2:	d00e      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80045b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b8:	d816      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d018      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80045be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c2:	d111      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c4:	4bc4      	ldr	r3, [pc, #784]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	4ac3      	ldr	r2, [pc, #780]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045d0:	e00f      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d6:	3308      	adds	r3, #8
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 ff78 	bl	80064d0 <RCCEx_PLL2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045e6:	e004      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045ee:	e000      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80045f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045fa:	4bb7      	ldr	r3, [pc, #732]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004608:	4ab3      	ldr	r2, [pc, #716]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800460a:	430b      	orrs	r3, r1
 800460c:	6513      	str	r3, [r2, #80]	; 0x50
 800460e:	e003      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004614:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004628:	2300      	movs	r3, #0
 800462a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800462e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004632:	460b      	mov	r3, r1
 8004634:	4313      	orrs	r3, r2
 8004636:	d039      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463e:	2b03      	cmp	r3, #3
 8004640:	d81c      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	08004685 	.word	0x08004685
 800464c:	08004659 	.word	0x08004659
 8004650:	08004667 	.word	0x08004667
 8004654:	08004685 	.word	0x08004685
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004658:	4b9f      	ldr	r3, [pc, #636]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4a9e      	ldr	r2, [pc, #632]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800465e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004664:	e00f      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466a:	3308      	adds	r3, #8
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f001 ff2e 	bl	80064d0 <RCCEx_PLL2_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800467a:	e004      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004686:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800468e:	4b92      	ldr	r3, [pc, #584]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004692:	f023 0103 	bic.w	r1, r3, #3
 8004696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800469a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469c:	4a8e      	ldr	r2, [pc, #568]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800469e:	430b      	orrs	r3, r1
 80046a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046a2:	e003      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80046b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046bc:	2300      	movs	r3, #0
 80046be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80046c6:	460b      	mov	r3, r1
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f000 8099 	beq.w	8004800 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ce:	4b83      	ldr	r3, [pc, #524]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a82      	ldr	r2, [pc, #520]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046da:	f7fc fde9 	bl	80012b0 <HAL_GetTick>
 80046de:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046e2:	e00b      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e4:	f7fc fde4 	bl	80012b0 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b64      	cmp	r3, #100	; 0x64
 80046f2:	d903      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046fa:	e005      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046fc:	4b77      	ldr	r3, [pc, #476]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0ed      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004708:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800470c:	2b00      	cmp	r3, #0
 800470e:	d173      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004710:	4b71      	ldr	r3, [pc, #452]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004712:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800471c:	4053      	eors	r3, r2
 800471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004722:	2b00      	cmp	r3, #0
 8004724:	d015      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004726:	4b6c      	ldr	r3, [pc, #432]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004732:	4b69      	ldr	r3, [pc, #420]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4a68      	ldr	r2, [pc, #416]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800473e:	4b66      	ldr	r3, [pc, #408]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	4a65      	ldr	r2, [pc, #404]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004748:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800474a:	4a63      	ldr	r2, [pc, #396]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004750:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004756:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800475a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475e:	d118      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fc fda6 	bl	80012b0 <HAL_GetTick>
 8004764:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004768:	e00d      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fc fda1 	bl	80012b0 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004774:	1ad2      	subs	r2, r2, r3
 8004776:	f241 3388 	movw	r3, #5000	; 0x1388
 800477a:	429a      	cmp	r2, r3
 800477c:	d903      	bls.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8004784:	e005      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004786:	4b54      	ldr	r3, [pc, #336]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0eb      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004792:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004796:	2b00      	cmp	r3, #0
 8004798:	d129      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800479a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800479e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047aa:	d10e      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x846>
 80047ac:	4b4a      	ldr	r3, [pc, #296]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80047b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047bc:	091a      	lsrs	r2, r3, #4
 80047be:	4b48      	ldr	r3, [pc, #288]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	4a45      	ldr	r2, [pc, #276]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047c4:	430b      	orrs	r3, r1
 80047c6:	6113      	str	r3, [r2, #16]
 80047c8:	e005      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80047ca:	4b43      	ldr	r3, [pc, #268]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	4a42      	ldr	r2, [pc, #264]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047d4:	6113      	str	r3, [r2, #16]
 80047d6:	4b40      	ldr	r3, [pc, #256]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80047da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e6:	4a3c      	ldr	r2, [pc, #240]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047e8:	430b      	orrs	r3, r1
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	e008      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80047f6:	e003      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f002 0301 	and.w	r3, r2, #1
 800480c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004810:	2300      	movs	r3, #0
 8004812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004816:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800481a:	460b      	mov	r3, r1
 800481c:	4313      	orrs	r3, r2
 800481e:	f000 8090 	beq.w	8004942 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482a:	2b28      	cmp	r3, #40	; 0x28
 800482c:	d870      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800482e:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004919 	.word	0x08004919
 8004838:	08004911 	.word	0x08004911
 800483c:	08004911 	.word	0x08004911
 8004840:	08004911 	.word	0x08004911
 8004844:	08004911 	.word	0x08004911
 8004848:	08004911 	.word	0x08004911
 800484c:	08004911 	.word	0x08004911
 8004850:	08004911 	.word	0x08004911
 8004854:	080048e5 	.word	0x080048e5
 8004858:	08004911 	.word	0x08004911
 800485c:	08004911 	.word	0x08004911
 8004860:	08004911 	.word	0x08004911
 8004864:	08004911 	.word	0x08004911
 8004868:	08004911 	.word	0x08004911
 800486c:	08004911 	.word	0x08004911
 8004870:	08004911 	.word	0x08004911
 8004874:	080048fb 	.word	0x080048fb
 8004878:	08004911 	.word	0x08004911
 800487c:	08004911 	.word	0x08004911
 8004880:	08004911 	.word	0x08004911
 8004884:	08004911 	.word	0x08004911
 8004888:	08004911 	.word	0x08004911
 800488c:	08004911 	.word	0x08004911
 8004890:	08004911 	.word	0x08004911
 8004894:	08004919 	.word	0x08004919
 8004898:	08004911 	.word	0x08004911
 800489c:	08004911 	.word	0x08004911
 80048a0:	08004911 	.word	0x08004911
 80048a4:	08004911 	.word	0x08004911
 80048a8:	08004911 	.word	0x08004911
 80048ac:	08004911 	.word	0x08004911
 80048b0:	08004911 	.word	0x08004911
 80048b4:	08004919 	.word	0x08004919
 80048b8:	08004911 	.word	0x08004911
 80048bc:	08004911 	.word	0x08004911
 80048c0:	08004911 	.word	0x08004911
 80048c4:	08004911 	.word	0x08004911
 80048c8:	08004911 	.word	0x08004911
 80048cc:	08004911 	.word	0x08004911
 80048d0:	08004911 	.word	0x08004911
 80048d4:	08004919 	.word	0x08004919
 80048d8:	58024400 	.word	0x58024400
 80048dc:	58024800 	.word	0x58024800
 80048e0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e8:	3308      	adds	r3, #8
 80048ea:	2101      	movs	r1, #1
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 fdef 	bl	80064d0 <RCCEx_PLL2_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048f8:	e00f      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048fe:	3328      	adds	r3, #40	; 0x28
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f001 fe96 	bl	8006634 <RCCEx_PLL3_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800490e:	e004      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004916:	e000      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10b      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004922:	4bc0      	ldr	r3, [pc, #768]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800492a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004932:	4abc      	ldr	r2, [pc, #752]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004934:	430b      	orrs	r3, r1
 8004936:	6553      	str	r3, [r2, #84]	; 0x54
 8004938:	e003      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800493e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f002 0302 	and.w	r3, r2, #2
 800494e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004952:	2300      	movs	r3, #0
 8004954:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004958:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800495c:	460b      	mov	r3, r1
 800495e:	4313      	orrs	r3, r2
 8004960:	d043      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800496a:	2b05      	cmp	r3, #5
 800496c:	d824      	bhi.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800496e:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	080049c1 	.word	0x080049c1
 8004978:	0800498d 	.word	0x0800498d
 800497c:	080049a3 	.word	0x080049a3
 8004980:	080049c1 	.word	0x080049c1
 8004984:	080049c1 	.word	0x080049c1
 8004988:	080049c1 	.word	0x080049c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800498c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004990:	3308      	adds	r3, #8
 8004992:	2101      	movs	r1, #1
 8004994:	4618      	mov	r0, r3
 8004996:	f001 fd9b 	bl	80064d0 <RCCEx_PLL2_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80049a0:	e00f      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a6:	3328      	adds	r3, #40	; 0x28
 80049a8:	2101      	movs	r1, #1
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 fe42 	bl	8006634 <RCCEx_PLL3_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80049b6:	e004      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049be:	e000      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80049c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80049ca:	4b96      	ldr	r3, [pc, #600]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	f023 0107 	bic.w	r1, r3, #7
 80049d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049da:	4a92      	ldr	r2, [pc, #584]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049dc:	430b      	orrs	r3, r1
 80049de:	6553      	str	r3, [r2, #84]	; 0x54
 80049e0:	e003      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f002 0304 	and.w	r3, r2, #4
 80049f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049fa:	2300      	movs	r3, #0
 80049fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a00:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4313      	orrs	r3, r2
 8004a08:	d043      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a12:	2b05      	cmp	r3, #5
 8004a14:	d824      	bhi.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a69 	.word	0x08004a69
 8004a20:	08004a35 	.word	0x08004a35
 8004a24:	08004a4b 	.word	0x08004a4b
 8004a28:	08004a69 	.word	0x08004a69
 8004a2c:	08004a69 	.word	0x08004a69
 8004a30:	08004a69 	.word	0x08004a69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a38:	3308      	adds	r3, #8
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 fd47 	bl	80064d0 <RCCEx_PLL2_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a48:	e00f      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a4e:	3328      	adds	r3, #40	; 0x28
 8004a50:	2101      	movs	r1, #1
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 fdee 	bl	8006634 <RCCEx_PLL3_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a5e:	e004      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a66:	e000      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a72:	4b6c      	ldr	r3, [pc, #432]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a76:	f023 0107 	bic.w	r1, r3, #7
 8004a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a82:	4a68      	ldr	r2, [pc, #416]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6593      	str	r3, [r2, #88]	; 0x58
 8004a88:	e003      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f002 0320 	and.w	r3, r2, #32
 8004a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004aac:	460b      	mov	r3, r1
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	d055      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004abe:	d033      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac4:	d82c      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aca:	d02f      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad0:	d826      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004ad2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ad6:	d02b      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004ad8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004adc:	d820      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae2:	d012      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae8:	d81a      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d022      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004af2:	d115      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af8:	3308      	adds	r3, #8
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 fce7 	bl	80064d0 <RCCEx_PLL2_Config>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b08:	e015      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0e:	3328      	adds	r3, #40	; 0x28
 8004b10:	2102      	movs	r1, #2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f001 fd8e 	bl	8006634 <RCCEx_PLL3_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b26:	e006      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004b28:	bf00      	nop
 8004b2a:	e004      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004b2c:	bf00      	nop
 8004b2e:	e002      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004b30:	bf00      	nop
 8004b32:	e000      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b3e:	4b39      	ldr	r3, [pc, #228]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b42:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b4e:	4a35      	ldr	r2, [pc, #212]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6553      	str	r3, [r2, #84]	; 0x54
 8004b54:	e003      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004b74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d058      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b8a:	d033      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004b8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b90:	d82c      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d02f      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	d826      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ba2:	d02b      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ba8:	d820      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bae:	d012      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb4:	d81a      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d022      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbe:	d115      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fc81 	bl	80064d0 <RCCEx_PLL2_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004bd4:	e015      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bda:	3328      	adds	r3, #40	; 0x28
 8004bdc:	2102      	movs	r1, #2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 fd28 	bl	8006634 <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004bea:	e00a      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004bf2:	e006      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004bf4:	bf00      	nop
 8004bf6:	e004      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004bf8:	bf00      	nop
 8004bfa:	e002      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004bfc:	bf00      	nop
 8004bfe:	e000      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10e      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c1a:	4a02      	ldr	r2, [pc, #8]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c20:	e006      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004c22:	bf00      	nop
 8004c24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c40:	2300      	movs	r3, #0
 8004c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	d055      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c5c:	d033      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004c5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c62:	d82c      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c68:	d02f      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c6e:	d826      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004c70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c74:	d02b      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004c76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c7a:	d820      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c80:	d012      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c86:	d81a      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d022      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c90:	d115      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c96:	3308      	adds	r3, #8
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 fc18 	bl	80064d0 <RCCEx_PLL2_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ca6:	e015      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cac:	3328      	adds	r3, #40	; 0x28
 8004cae:	2102      	movs	r1, #2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 fcbf 	bl	8006634 <RCCEx_PLL3_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004cc4:	e006      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004cc6:	bf00      	nop
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004cca:	bf00      	nop
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004cdc:	4ba1      	ldr	r3, [pc, #644]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cec:	4a9d      	ldr	r2, [pc, #628]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cf2:	e003      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f002 0308 	and.w	r3, r2, #8
 8004d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004d16:	460b      	mov	r3, r1
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	d01e      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d2e:	3328      	adds	r3, #40	; 0x28
 8004d30:	2102      	movs	r1, #2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 fc7e 	bl	8006634 <RCCEx_PLL3_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d44:	4b87      	ldr	r3, [pc, #540]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d54:	4a83      	ldr	r2, [pc, #524]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d56:	430b      	orrs	r3, r1
 8004d58:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f002 0310 	and.w	r3, r2, #16
 8004d66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d01e      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d86:	d10c      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d8c:	3328      	adds	r3, #40	; 0x28
 8004d8e:	2102      	movs	r1, #2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 fc4f 	bl	8006634 <RCCEx_PLL3_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004da2:	4b70      	ldr	r3, [pc, #448]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004db2:	4a6c      	ldr	r2, [pc, #432]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	d03e      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ddc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004de4:	d022      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dea:	d81b      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df4:	d00b      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004df6:	e015      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 fb65 	bl	80064d0 <RCCEx_PLL2_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e0c:	e00f      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e12:	3328      	adds	r3, #40	; 0x28
 8004e14:	2102      	movs	r1, #2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 fc0c 	bl	8006634 <RCCEx_PLL3_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e22:	e004      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e2a:	e000      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e36:	4b4b      	ldr	r3, [pc, #300]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e46:	4a47      	ldr	r2, [pc, #284]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e4c:	e003      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004e62:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e64:	2300      	movs	r3, #0
 8004e66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	d03b      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e7e:	d01f      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e84:	d818      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8a:	d003      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e90:	d007      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004e92:	e011      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e94:	4b33      	ldr	r3, [pc, #204]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	4a32      	ldr	r2, [pc, #200]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ea0:	e00f      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea6:	3328      	adds	r3, #40	; 0x28
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 fbc2 	bl	8006634 <RCCEx_PLL3_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eca:	4b26      	ldr	r3, [pc, #152]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6553      	str	r3, [r2, #84]	; 0x54
 8004ee0:	e003      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ee6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ef8:	2300      	movs	r3, #0
 8004efa:	677b      	str	r3, [r7, #116]	; 0x74
 8004efc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004f00:	460b      	mov	r3, r1
 8004f02:	4313      	orrs	r3, r2
 8004f04:	d034      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f14:	d007      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004f16:	e011      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f18:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f24:	e00e      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f001 face 	bl	80064d0 <RCCEx_PLL2_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f3a:	e003      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10d      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5a:	4a02      	ldr	r2, [pc, #8]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f60:	e006      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004f7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f7e:	2300      	movs	r3, #0
 8004f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004f86:	460b      	mov	r3, r1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	d00c      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f90:	3328      	adds	r3, #40	; 0x28
 8004f92:	2102      	movs	r1, #2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f001 fb4d 	bl	8006634 <RCCEx_PLL3_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004fb2:	663b      	str	r3, [r7, #96]	; 0x60
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	667b      	str	r3, [r7, #100]	; 0x64
 8004fb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	d038      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fce:	d018      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd4:	d811      	bhi.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fda:	d014      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe0:	d80b      	bhi.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d011      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	d106      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fec:	4bc3      	ldr	r3, [pc, #780]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	4ac2      	ldr	r2, [pc, #776]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004ff8:	e008      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005000:	e004      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005002:	bf00      	nop
 8005004:	e002      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800500a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005014:	4bb9      	ldr	r3, [pc, #740]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005018:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800501c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	4ab5      	ldr	r2, [pc, #724]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005026:	430b      	orrs	r3, r1
 8005028:	6553      	str	r3, [r2, #84]	; 0x54
 800502a:	e003      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005030:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005040:	65bb      	str	r3, [r7, #88]	; 0x58
 8005042:	2300      	movs	r3, #0
 8005044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005046:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005050:	4baa      	ldr	r3, [pc, #680]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005054:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800505e:	4aa7      	ldr	r2, [pc, #668]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005060:	430b      	orrs	r3, r1
 8005062:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005070:	653b      	str	r3, [r7, #80]	; 0x50
 8005072:	2300      	movs	r3, #0
 8005074:	657b      	str	r3, [r7, #84]	; 0x54
 8005076:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800507a:	460b      	mov	r3, r1
 800507c:	4313      	orrs	r3, r2
 800507e:	d009      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005080:	4b9e      	ldr	r3, [pc, #632]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005084:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	4a9b      	ldr	r2, [pc, #620]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005090:	430b      	orrs	r3, r1
 8005092:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80050a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a2:	2300      	movs	r3, #0
 80050a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80050aa:	460b      	mov	r3, r1
 80050ac:	4313      	orrs	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80050b0:	4b92      	ldr	r3, [pc, #584]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80050b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	4a8f      	ldr	r2, [pc, #572]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80050c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80050d0:	643b      	str	r3, [r7, #64]	; 0x40
 80050d2:	2300      	movs	r3, #0
 80050d4:	647b      	str	r3, [r7, #68]	; 0x44
 80050d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80050da:	460b      	mov	r3, r1
 80050dc:	4313      	orrs	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050e0:	4b86      	ldr	r3, [pc, #536]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	4a85      	ldr	r2, [pc, #532]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050ea:	6113      	str	r3, [r2, #16]
 80050ec:	4b83      	ldr	r3, [pc, #524]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050ee:	6919      	ldr	r1, [r3, #16]
 80050f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050f8:	4a80      	ldr	r2, [pc, #512]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050fa:	430b      	orrs	r3, r1
 80050fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800510a:	63bb      	str	r3, [r7, #56]	; 0x38
 800510c:	2300      	movs	r3, #0
 800510e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005110:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005114:	460b      	mov	r3, r1
 8005116:	4313      	orrs	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800511a:	4b78      	ldr	r3, [pc, #480]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800511c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	4a74      	ldr	r2, [pc, #464]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800512a:	430b      	orrs	r3, r1
 800512c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800512e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800513a:	633b      	str	r3, [r7, #48]	; 0x30
 800513c:	2300      	movs	r3, #0
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
 8005140:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005144:	460b      	mov	r3, r1
 8005146:	4313      	orrs	r3, r2
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800514a:	4b6c      	ldr	r3, [pc, #432]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800514c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800515a:	4a68      	ldr	r2, [pc, #416]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800515c:	430b      	orrs	r3, r1
 800515e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	2100      	movs	r1, #0
 800516a:	62b9      	str	r1, [r7, #40]	; 0x28
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005172:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005176:	460b      	mov	r3, r1
 8005178:	4313      	orrs	r3, r2
 800517a:	d011      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800517c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005180:	3308      	adds	r3, #8
 8005182:	2100      	movs	r1, #0
 8005184:	4618      	mov	r0, r3
 8005186:	f001 f9a3 	bl	80064d0 <RCCEx_PLL2_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005190:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800519c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80051a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	2100      	movs	r1, #0
 80051aa:	6239      	str	r1, [r7, #32]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
 80051b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051b6:	460b      	mov	r3, r1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	d011      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c0:	3308      	adds	r3, #8
 80051c2:	2101      	movs	r1, #1
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 f983 	bl	80064d0 <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80051d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80051e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	2100      	movs	r1, #0
 80051ea:	61b9      	str	r1, [r7, #24]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80051f6:	460b      	mov	r3, r1
 80051f8:	4313      	orrs	r3, r2
 80051fa:	d011      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005200:	3308      	adds	r3, #8
 8005202:	2102      	movs	r1, #2
 8005204:	4618      	mov	r0, r3
 8005206:	f001 f963 	bl	80064d0 <RCCEx_PLL2_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005210:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800521c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	2100      	movs	r1, #0
 800522a:	6139      	str	r1, [r7, #16]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	d011      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800523c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005240:	3328      	adds	r3, #40	; 0x28
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f001 f9f5 	bl	8006634 <RCCEx_PLL3_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005250:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005258:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800525c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	2100      	movs	r1, #0
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005276:	460b      	mov	r3, r1
 8005278:	4313      	orrs	r3, r2
 800527a:	d011      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800527c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005280:	3328      	adds	r3, #40	; 0x28
 8005282:	2101      	movs	r1, #1
 8005284:	4618      	mov	r0, r3
 8005286:	f001 f9d5 	bl	8006634 <RCCEx_PLL3_Config>
 800528a:	4603      	mov	r3, r0
 800528c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005290:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005298:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800529c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80052a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	2100      	movs	r1, #0
 80052aa:	6039      	str	r1, [r7, #0]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	607b      	str	r3, [r7, #4]
 80052b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80052b6:	460b      	mov	r3, r1
 80052b8:	4313      	orrs	r3, r2
 80052ba:	d011      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052c0:	3328      	adds	r3, #40	; 0x28
 80052c2:	2102      	movs	r1, #2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f001 f9b5 	bl	8006634 <RCCEx_PLL3_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80052d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80052e0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e000      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80052f4:	46bd      	mov	sp, r7
 80052f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400

08005300 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b090      	sub	sp, #64	; 0x40
 8005304:	af00      	add	r7, sp, #0
 8005306:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800530a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800530e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005312:	430b      	orrs	r3, r1
 8005314:	f040 8094 	bne.w	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005318:	4b97      	ldr	r3, [pc, #604]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800531a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	2b04      	cmp	r3, #4
 8005326:	f200 8087 	bhi.w	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005345 	.word	0x08005345
 8005334:	0800536d 	.word	0x0800536d
 8005338:	08005395 	.word	0x08005395
 800533c:	08005431 	.word	0x08005431
 8005340:	080053bd 	.word	0x080053bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005344:	4b8c      	ldr	r3, [pc, #560]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005350:	d108      	bne.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005356:	4618      	mov	r0, r3
 8005358:	f000 ff68 	bl	800622c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005360:	f000 bc97 	b.w	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005368:	f000 bc93 	b.w	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800536c:	4b82      	ldr	r3, [pc, #520]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005378:	d108      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800537a:	f107 0318 	add.w	r3, r7, #24
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fcac 	bl	8005cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005388:	f000 bc83 	b.w	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005390:	f000 bc7f 	b.w	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005394:	4b78      	ldr	r3, [pc, #480]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800539c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a0:	d108      	bne.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053a2:	f107 030c 	add.w	r3, r7, #12
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fdec 	bl	8005f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053b0:	f000 bc6f 	b.w	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053b8:	f000 bc6b 	b.w	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80053bc:	4b6e      	ldr	r3, [pc, #440]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053c6:	4b6c      	ldr	r3, [pc, #432]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d10c      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053d8:	4b67      	ldr	r3, [pc, #412]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	08db      	lsrs	r3, r3, #3
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	4a66      	ldr	r2, [pc, #408]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ea:	e01f      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053ec:	4b62      	ldr	r3, [pc, #392]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f8:	d106      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005400:	d102      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005402:	4b5f      	ldr	r3, [pc, #380]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005406:	e011      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005408:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005414:	d106      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800541c:	d102      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800541e:	4b59      	ldr	r3, [pc, #356]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005422:	e003      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005428:	f000 bc33 	b.w	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800542c:	f000 bc31 	b.w	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005430:	4b55      	ldr	r3, [pc, #340]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005434:	f000 bc2d 	b.w	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800543c:	f000 bc29 	b.w	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005444:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005448:	430b      	orrs	r3, r1
 800544a:	f040 809f 	bne.w	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800544e:	4b4a      	ldr	r3, [pc, #296]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005452:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005456:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545e:	d04d      	beq.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005466:	f200 8084 	bhi.w	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	2bc0      	cmp	r3, #192	; 0xc0
 800546e:	d07d      	beq.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	2bc0      	cmp	r3, #192	; 0xc0
 8005474:	d87d      	bhi.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	2b80      	cmp	r3, #128	; 0x80
 800547a:	d02d      	beq.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	2b80      	cmp	r3, #128	; 0x80
 8005480:	d877      	bhi.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d012      	beq.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800548e:	e070      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005490:	4b39      	ldr	r3, [pc, #228]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800549c:	d107      	bne.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800549e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fec2 	bl	800622c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054ac:	e3f1      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054b2:	e3ee      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054b4:	4b30      	ldr	r3, [pc, #192]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054c0:	d107      	bne.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054c2:	f107 0318 	add.w	r3, r7, #24
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fc08 	bl	8005cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054d0:	e3df      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054d6:	e3dc      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054d8:	4b27      	ldr	r3, [pc, #156]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054e4:	d107      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054e6:	f107 030c 	add.w	r3, r7, #12
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fd4a 	bl	8005f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054f4:	e3cd      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054fa:	e3ca      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054fc:	4b1e      	ldr	r3, [pc, #120]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005504:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005506:	4b1c      	ldr	r3, [pc, #112]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b04      	cmp	r3, #4
 8005510:	d10c      	bne.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005514:	2b00      	cmp	r3, #0
 8005516:	d109      	bne.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005518:	4b17      	ldr	r3, [pc, #92]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	08db      	lsrs	r3, r3, #3
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	4a16      	ldr	r2, [pc, #88]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
 8005528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800552a:	e01e      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800552c:	4b12      	ldr	r3, [pc, #72]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005538:	d106      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005540:	d102      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005542:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005546:	e010      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005548:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005554:	d106      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800555c:	d102      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005562:	e002      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005568:	e393      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800556a:	e392      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005570:	e38f      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005576:	e38c      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005578:	58024400 	.word	0x58024400
 800557c:	03d09000 	.word	0x03d09000
 8005580:	003d0900 	.word	0x003d0900
 8005584:	016e3600 	.word	0x016e3600
 8005588:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800558c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005590:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005594:	430b      	orrs	r3, r1
 8005596:	f040 809c 	bne.w	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800559a:	4b9e      	ldr	r3, [pc, #632]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800559c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80055a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055aa:	d054      	beq.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b2:	f200 808b 	bhi.w	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055bc:	f000 8083 	beq.w	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055c6:	f200 8081 	bhi.w	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d0:	d02f      	beq.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d8:	d878      	bhi.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e6:	d012      	beq.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80055e8:	e070      	b.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055ea:	4b8a      	ldr	r3, [pc, #552]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055f6:	d107      	bne.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fe15 	bl	800622c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005606:	e344      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800560c:	e341      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800560e:	4b81      	ldr	r3, [pc, #516]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800561a:	d107      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800561c:	f107 0318 	add.w	r3, r7, #24
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fb5b 	bl	8005cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800562a:	e332      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005630:	e32f      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005632:	4b78      	ldr	r3, [pc, #480]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800563a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800563e:	d107      	bne.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005640:	f107 030c 	add.w	r3, r7, #12
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fc9d 	bl	8005f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800564e:	e320      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005654:	e31d      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005656:	4b6f      	ldr	r3, [pc, #444]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800565e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005660:	4b6c      	ldr	r3, [pc, #432]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b04      	cmp	r3, #4
 800566a:	d10c      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005672:	4b68      	ldr	r3, [pc, #416]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	08db      	lsrs	r3, r3, #3
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	4a66      	ldr	r2, [pc, #408]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800567e:	fa22 f303 	lsr.w	r3, r2, r3
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005684:	e01e      	b.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005686:	4b63      	ldr	r3, [pc, #396]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005692:	d106      	bne.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800569a:	d102      	bne.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800569c:	4b5f      	ldr	r3, [pc, #380]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a0:	e010      	b.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056a2:	4b5c      	ldr	r3, [pc, #368]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ae:	d106      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80056b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b6:	d102      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056b8:	4b59      	ldr	r3, [pc, #356]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056bc:	e002      	b.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 80056c2:	e2e6      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80056c4:	e2e5      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80056c6:	4b57      	ldr	r3, [pc, #348]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ca:	e2e2      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d0:	e2df      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80056d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056d6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80056da:	430b      	orrs	r3, r1
 80056dc:	f040 80a7 	bne.w	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80056e0:	4b4c      	ldr	r3, [pc, #304]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80056e8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f0:	d055      	beq.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f8:	f200 8096 	bhi.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005702:	f000 8084 	beq.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800570c:	f200 808c 	bhi.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005716:	d030      	beq.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571e:	f200 8083 	bhi.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572e:	d012      	beq.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005730:	e07a      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005732:	4b38      	ldr	r3, [pc, #224]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800573e:	d107      	bne.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fd71 	bl	800622c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800574e:	e2a0      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005754:	e29d      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005756:	4b2f      	ldr	r3, [pc, #188]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800575e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005762:	d107      	bne.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005764:	f107 0318 	add.w	r3, r7, #24
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fab7 	bl	8005cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005772:	e28e      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005778:	e28b      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800577a:	4b26      	ldr	r3, [pc, #152]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005786:	d107      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005788:	f107 030c 	add.w	r3, r7, #12
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fbf9 	bl	8005f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005796:	e27c      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800579c:	e279      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800579e:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057a8:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d10c      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80057b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057ba:	4b16      	ldr	r3, [pc, #88]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	08db      	lsrs	r3, r3, #3
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	4a14      	ldr	r2, [pc, #80]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80057c6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057cc:	e01e      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057ce:	4b11      	ldr	r3, [pc, #68]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057da:	d106      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80057dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057e2:	d102      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e8:	e010      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057f6:	d106      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057fe:	d102      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005804:	e002      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800580a:	e242      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800580c:	e241      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800580e:	4b05      	ldr	r3, [pc, #20]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005812:	e23e      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005814:	58024400 	.word	0x58024400
 8005818:	03d09000 	.word	0x03d09000
 800581c:	003d0900 	.word	0x003d0900
 8005820:	016e3600 	.word	0x016e3600
 8005824:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800582c:	e231      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800582e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005832:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005836:	430b      	orrs	r3, r1
 8005838:	f040 8085 	bne.w	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800583c:	4b9c      	ldr	r3, [pc, #624]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800583e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005840:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005844:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800584c:	d06b      	beq.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005854:	d874      	bhi.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800585c:	d056      	beq.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005864:	d86c      	bhi.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800586c:	d03b      	beq.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005870:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005874:	d864      	bhi.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800587c:	d021      	beq.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005884:	d85c      	bhi.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005892:	d004      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005894:	e054      	b.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005896:	f7fe fb5f 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 800589a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800589c:	e1f9      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800589e:	4b84      	ldr	r3, [pc, #528]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058aa:	d107      	bne.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ac:	f107 0318 	add.w	r3, r7, #24
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fa13 	bl	8005cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058ba:	e1ea      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058c0:	e1e7      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058c2:	4b7b      	ldr	r3, [pc, #492]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ce:	d107      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058d0:	f107 030c 	add.w	r3, r7, #12
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fb55 	bl	8005f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058de:	e1d8      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e4:	e1d5      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058e6:	4b72      	ldr	r3, [pc, #456]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d109      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058f2:	4b6f      	ldr	r3, [pc, #444]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	08db      	lsrs	r3, r3, #3
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	4a6d      	ldr	r2, [pc, #436]	; (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80058fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005904:	e1c5      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800590a:	e1c2      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800590c:	4b68      	ldr	r3, [pc, #416]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005918:	d102      	bne.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800591a:	4b67      	ldr	r3, [pc, #412]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800591c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800591e:	e1b8      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005924:	e1b5      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005926:	4b62      	ldr	r3, [pc, #392]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005932:	d102      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8005934:	4b61      	ldr	r3, [pc, #388]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005938:	e1ab      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800593e:	e1a8      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005944:	e1a5      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800594a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800594e:	430b      	orrs	r3, r1
 8005950:	d173      	bne.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005952:	4b57      	ldr	r3, [pc, #348]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005956:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800595a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005962:	d02f      	beq.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800596a:	d863      	bhi.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800596c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005978:	d012      	beq.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800597a:	e05b      	b.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800597c:	4b4c      	ldr	r3, [pc, #304]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005988:	d107      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800598a:	f107 0318 	add.w	r3, r7, #24
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f9a4 	bl	8005cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005998:	e17b      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800599e:	e178      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059a0:	4b43      	ldr	r3, [pc, #268]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ac:	d107      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ae:	f107 030c 	add.w	r3, r7, #12
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fae6 	bl	8005f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059bc:	e169      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059c2:	e166      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059c4:	4b3a      	ldr	r3, [pc, #232]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059ce:	4b38      	ldr	r3, [pc, #224]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d10c      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80059da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059e0:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	08db      	lsrs	r3, r3, #3
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	4a32      	ldr	r2, [pc, #200]	; (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f2:	e01e      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059f4:	4b2e      	ldr	r3, [pc, #184]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a00:	d106      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8005a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a08:	d102      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a0a:	4b2b      	ldr	r3, [pc, #172]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0e:	e010      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a10:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a1c:	d106      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a24:	d102      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a26:	4b25      	ldr	r3, [pc, #148]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a2a:	e002      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005a30:	e12f      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005a32:	e12e      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a38:	e12b      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a3e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005a42:	430b      	orrs	r3, r1
 8005a44:	d13c      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005a46:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a4e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d004      	beq.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5c:	d012      	beq.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005a5e:	e023      	b.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a60:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a6c:	d107      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fbda 	bl	800622c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a7c:	e109      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a82:	e106      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a92:	f107 0318 	add.w	r3, r7, #24
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f920 	bl	8005cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aa0:	e0f7      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aa6:	e0f4      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aac:	e0f1      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005aae:	bf00      	nop
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	03d09000 	.word	0x03d09000
 8005ab8:	003d0900 	.word	0x003d0900
 8005abc:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	f040 8091 	bne.w	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005ace:	4b73      	ldr	r3, [pc, #460]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005ad6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ada:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005ade:	f000 8081 	beq.w	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005ae8:	d87f      	bhi.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af0:	d06b      	beq.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af8:	d877      	bhi.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b00:	d056      	beq.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b08:	d86f      	bhi.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b10:	d03b      	beq.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b18:	d867      	bhi.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b20:	d021      	beq.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b28:	d85f      	bhi.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d004      	beq.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b36:	d004      	beq.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005b38:	e057      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005b3a:	f000 f8b9 	bl	8005cb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b40:	e0a7      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b42:	4b56      	ldr	r3, [pc, #344]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b4e:	d107      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b50:	f107 0318 	add.w	r3, r7, #24
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f8c1 	bl	8005cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b5e:	e098      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b64:	e095      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b66:	4b4d      	ldr	r3, [pc, #308]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b72:	d107      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b74:	f107 030c 	add.w	r3, r7, #12
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fa03 	bl	8005f84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b82:	e086      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005b84:	2300      	movs	r3, #0
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b88:	e083      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b8a:	4b44      	ldr	r3, [pc, #272]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d109      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b96:	4b41      	ldr	r3, [pc, #260]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	08db      	lsrs	r3, r3, #3
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	4a3f      	ldr	r2, [pc, #252]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ba8:	e073      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bae:	e070      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005bb0:	4b3a      	ldr	r3, [pc, #232]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbc:	d102      	bne.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8005bbe:	4b39      	ldr	r3, [pc, #228]	; (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bc2:	e066      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bc8:	e063      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bca:	4b34      	ldr	r3, [pc, #208]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd6:	d102      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005bd8:	4b33      	ldr	r3, [pc, #204]	; (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bdc:	e059      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be2:	e056      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005be4:	4b31      	ldr	r3, [pc, #196]	; (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be8:	e053      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bee:	e050      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bf4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	d148      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005bfc:	4b27      	ldr	r3, [pc, #156]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c04:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c0c:	d02a      	beq.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c14:	d838      	bhi.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c22:	d00d      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005c24:	e030      	b.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c26:	4b1d      	ldr	r3, [pc, #116]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c32:	d102      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005c34:	4b1c      	ldr	r3, [pc, #112]	; (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c38:	e02b      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c3e:	e028      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c40:	4b16      	ldr	r3, [pc, #88]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c4c:	d107      	bne.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 faea 	bl	800622c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c5c:	e019      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c62:	e016      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c64:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c70:	d107      	bne.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c72:	f107 0318 	add.w	r3, r7, #24
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 f830 	bl	8005cdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c80:	e007      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c86:	e004      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c8c:	e001      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3740      	adds	r7, #64	; 0x40
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	58024400 	.word	0x58024400
 8005ca0:	03d09000 	.word	0x03d09000
 8005ca4:	003d0900 	.word	0x003d0900
 8005ca8:	016e3600 	.word	0x016e3600
 8005cac:	00bb8000 	.word	0x00bb8000

08005cb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005cb4:	f7fe f920 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	091b      	lsrs	r3, r3, #4
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	4904      	ldr	r1, [pc, #16]	; (8005cd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005cc6:	5ccb      	ldrb	r3, [r1, r3]
 8005cc8:	f003 031f 	and.w	r3, r3, #31
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	58024400 	.word	0x58024400
 8005cd8:	08006870 	.word	0x08006870

08005cdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ce4:	4ba1      	ldr	r3, [pc, #644]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005cee:	4b9f      	ldr	r3, [pc, #636]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	0b1b      	lsrs	r3, r3, #12
 8005cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cfa:	4b9c      	ldr	r3, [pc, #624]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	091b      	lsrs	r3, r3, #4
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d06:	4b99      	ldr	r3, [pc, #612]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	08db      	lsrs	r3, r3, #3
 8005d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8111 	beq.w	8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	f000 8083 	beq.w	8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	f200 80a1 	bhi.w	8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d056      	beq.n	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d46:	e099      	b.n	8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d48:	4b88      	ldr	r3, [pc, #544]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d02d      	beq.n	8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d54:	4b85      	ldr	r3, [pc, #532]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	08db      	lsrs	r3, r3, #3
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	4a84      	ldr	r2, [pc, #528]	; (8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
 8005d64:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7e:	4b7b      	ldr	r3, [pc, #492]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005daa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005dae:	e087      	b.n	8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc2:	4b6a      	ldr	r3, [pc, #424]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005df2:	e065      	b.n	8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e06:	4b59      	ldr	r3, [pc, #356]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e36:	e043      	b.n	8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4a:	4b48      	ldr	r3, [pc, #288]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e7a:	e021      	b.n	8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8e:	4b37      	ldr	r3, [pc, #220]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ea2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ebe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005ec0:	4b2a      	ldr	r3, [pc, #168]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	0a5b      	lsrs	r3, r3, #9
 8005ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee6:	ee17 2a90 	vmov	r2, s15
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005eee:	4b1f      	ldr	r3, [pc, #124]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	0c1b      	lsrs	r3, r3, #16
 8005ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef8:	ee07 3a90 	vmov	s15, r3
 8005efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f14:	ee17 2a90 	vmov	r2, s15
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005f1c:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	0e1b      	lsrs	r3, r3, #24
 8005f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f42:	ee17 2a90 	vmov	r2, s15
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f4a:	e008      	b.n	8005f5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	609a      	str	r2, [r3, #8]
}
 8005f5e:	bf00      	nop
 8005f60:	3724      	adds	r7, #36	; 0x24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	58024400 	.word	0x58024400
 8005f70:	03d09000 	.word	0x03d09000
 8005f74:	46000000 	.word	0x46000000
 8005f78:	4c742400 	.word	0x4c742400
 8005f7c:	4a742400 	.word	0x4a742400
 8005f80:	4bb71b00 	.word	0x4bb71b00

08005f84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b089      	sub	sp, #36	; 0x24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f8c:	4ba1      	ldr	r3, [pc, #644]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f96:	4b9f      	ldr	r3, [pc, #636]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	0d1b      	lsrs	r3, r3, #20
 8005f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005fa2:	4b9c      	ldr	r3, [pc, #624]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005fae:	4b99      	ldr	r3, [pc, #612]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	08db      	lsrs	r3, r3, #3
 8005fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8111 	beq.w	80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	f000 8083 	beq.w	80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	f200 80a1 	bhi.w	8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d056      	beq.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fee:	e099      	b.n	8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ff0:	4b88      	ldr	r3, [pc, #544]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d02d      	beq.n	8006058 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ffc:	4b85      	ldr	r3, [pc, #532]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	08db      	lsrs	r3, r3, #3
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	4a84      	ldr	r2, [pc, #528]	; (8006218 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
 800600c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	4b7b      	ldr	r3, [pc, #492]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a03 	vldr	s12, [r7, #12]
 800603a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800621c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006056:	e087      	b.n	8006168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b6a      	ldr	r3, [pc, #424]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a03 	vldr	s12, [r7, #12]
 800607e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800621c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609a:	e065      	b.n	8006168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ae:	4b59      	ldr	r3, [pc, #356]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800621c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060de:	e043      	b.n	8006168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f2:	4b48      	ldr	r3, [pc, #288]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006102:	ed97 6a03 	vldr	s12, [r7, #12]
 8006106:	eddf 5a45 	vldr	s11, [pc, #276]	; 800621c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800610a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006122:	e021      	b.n	8006168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006136:	4b37      	ldr	r3, [pc, #220]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006146:	ed97 6a03 	vldr	s12, [r7, #12]
 800614a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800621c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800614e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800615a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006166:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006168:	4b2a      	ldr	r3, [pc, #168]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	0a5b      	lsrs	r3, r3, #9
 800616e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800617e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006182:	edd7 6a07 	vldr	s13, [r7, #28]
 8006186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800618a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800618e:	ee17 2a90 	vmov	r2, s15
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006196:	4b1f      	ldr	r3, [pc, #124]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061bc:	ee17 2a90 	vmov	r2, s15
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80061c4:	4b13      	ldr	r3, [pc, #76]	; (8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c8:	0e1b      	lsrs	r3, r3, #24
 80061ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061de:	edd7 6a07 	vldr	s13, [r7, #28]
 80061e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ea:	ee17 2a90 	vmov	r2, s15
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061f2:	e008      	b.n	8006206 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	609a      	str	r2, [r3, #8]
}
 8006206:	bf00      	nop
 8006208:	3724      	adds	r7, #36	; 0x24
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	58024400 	.word	0x58024400
 8006218:	03d09000 	.word	0x03d09000
 800621c:	46000000 	.word	0x46000000
 8006220:	4c742400 	.word	0x4c742400
 8006224:	4a742400 	.word	0x4a742400
 8006228:	4bb71b00 	.word	0x4bb71b00

0800622c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800622c:	b480      	push	{r7}
 800622e:	b089      	sub	sp, #36	; 0x24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006234:	4ba0      	ldr	r3, [pc, #640]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800623e:	4b9e      	ldr	r3, [pc, #632]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006248:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800624a:	4b9b      	ldr	r3, [pc, #620]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006254:	4b98      	ldr	r3, [pc, #608]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006258:	08db      	lsrs	r3, r3, #3
 800625a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	fb02 f303 	mul.w	r3, r2, r3
 8006264:	ee07 3a90 	vmov	s15, r3
 8006268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 8111 	beq.w	800649a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b02      	cmp	r3, #2
 800627c:	f000 8083 	beq.w	8006386 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b02      	cmp	r3, #2
 8006284:	f200 80a1 	bhi.w	80063ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d056      	beq.n	8006342 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006294:	e099      	b.n	80063ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006296:	4b88      	ldr	r3, [pc, #544]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d02d      	beq.n	80062fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062a2:	4b85      	ldr	r3, [pc, #532]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	08db      	lsrs	r3, r3, #3
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	4a83      	ldr	r2, [pc, #524]	; (80064bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80062ae:	fa22 f303 	lsr.w	r3, r2, r3
 80062b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062cc:	4b7a      	ldr	r3, [pc, #488]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80062e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80064c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80062fc:	e087      	b.n	800640e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006308:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80064c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800630c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006310:	4b69      	ldr	r3, [pc, #420]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006320:	ed97 6a03 	vldr	s12, [r7, #12]
 8006324:	eddf 5a66 	vldr	s11, [pc, #408]	; 80064c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006340:	e065      	b.n	800640e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	ee07 3a90 	vmov	s15, r3
 8006348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006354:	4b58      	ldr	r3, [pc, #352]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635c:	ee07 3a90 	vmov	s15, r3
 8006360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006364:	ed97 6a03 	vldr	s12, [r7, #12]
 8006368:	eddf 5a55 	vldr	s11, [pc, #340]	; 80064c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800636c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006380:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006384:	e043      	b.n	800640e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	ee07 3a90 	vmov	s15, r3
 800638c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006390:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80064cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006398:	4b47      	ldr	r3, [pc, #284]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a0:	ee07 3a90 	vmov	s15, r3
 80063a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80064c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063c8:	e021      	b.n	800640e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	ee07 3a90 	vmov	s15, r3
 80063d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80064c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80063d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063dc:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e4:	ee07 3a90 	vmov	s15, r3
 80063e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80063f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80064c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800640c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800640e:	4b2a      	ldr	r3, [pc, #168]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	0a5b      	lsrs	r3, r3, #9
 8006414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006418:	ee07 3a90 	vmov	s15, r3
 800641c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006424:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006428:	edd7 6a07 	vldr	s13, [r7, #28]
 800642c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006434:	ee17 2a90 	vmov	r2, s15
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	0c1b      	lsrs	r3, r3, #16
 8006442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006456:	edd7 6a07 	vldr	s13, [r7, #28]
 800645a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800645e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006462:	ee17 2a90 	vmov	r2, s15
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800646a:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646e:	0e1b      	lsrs	r3, r3, #24
 8006470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006480:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006484:	edd7 6a07 	vldr	s13, [r7, #28]
 8006488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800648c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006490:	ee17 2a90 	vmov	r2, s15
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006498:	e008      	b.n	80064ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	609a      	str	r2, [r3, #8]
}
 80064ac:	bf00      	nop
 80064ae:	3724      	adds	r7, #36	; 0x24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	58024400 	.word	0x58024400
 80064bc:	03d09000 	.word	0x03d09000
 80064c0:	46000000 	.word	0x46000000
 80064c4:	4c742400 	.word	0x4c742400
 80064c8:	4a742400 	.word	0x4a742400
 80064cc:	4bb71b00 	.word	0x4bb71b00

080064d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064de:	4b53      	ldr	r3, [pc, #332]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d101      	bne.n	80064ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e099      	b.n	8006622 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064ee:	4b4f      	ldr	r3, [pc, #316]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a4e      	ldr	r2, [pc, #312]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80064f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064fa:	f7fa fed9 	bl	80012b0 <HAL_GetTick>
 80064fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006500:	e008      	b.n	8006514 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006502:	f7fa fed5 	bl	80012b0 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e086      	b.n	8006622 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006514:	4b45      	ldr	r3, [pc, #276]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f0      	bne.n	8006502 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006520:	4b42      	ldr	r3, [pc, #264]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	031b      	lsls	r3, r3, #12
 800652e:	493f      	ldr	r1, [pc, #252]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006530:	4313      	orrs	r3, r2
 8006532:	628b      	str	r3, [r1, #40]	; 0x28
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	3b01      	subs	r3, #1
 800653a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	3b01      	subs	r3, #1
 8006544:	025b      	lsls	r3, r3, #9
 8006546:	b29b      	uxth	r3, r3
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	3b01      	subs	r3, #1
 8006550:	041b      	lsls	r3, r3, #16
 8006552:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	3b01      	subs	r3, #1
 800655e:	061b      	lsls	r3, r3, #24
 8006560:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006564:	4931      	ldr	r1, [pc, #196]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006566:	4313      	orrs	r3, r2
 8006568:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800656a:	4b30      	ldr	r3, [pc, #192]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	492d      	ldr	r1, [pc, #180]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006578:	4313      	orrs	r3, r2
 800657a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800657c:	4b2b      	ldr	r3, [pc, #172]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	f023 0220 	bic.w	r2, r3, #32
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	4928      	ldr	r1, [pc, #160]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 800658a:	4313      	orrs	r3, r2
 800658c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800658e:	4b27      	ldr	r3, [pc, #156]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	4a26      	ldr	r2, [pc, #152]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006594:	f023 0310 	bic.w	r3, r3, #16
 8006598:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800659a:	4b24      	ldr	r3, [pc, #144]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 800659c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <RCCEx_PLL2_Config+0x160>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	69d2      	ldr	r2, [r2, #28]
 80065a6:	00d2      	lsls	r2, r2, #3
 80065a8:	4920      	ldr	r1, [pc, #128]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80065ae:	4b1f      	ldr	r3, [pc, #124]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	4a1e      	ldr	r2, [pc, #120]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065b4:	f043 0310 	orr.w	r3, r3, #16
 80065b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d106      	bne.n	80065ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065c0:	4b1a      	ldr	r3, [pc, #104]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	4a19      	ldr	r2, [pc, #100]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065cc:	e00f      	b.n	80065ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d106      	bne.n	80065e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065d4:	4b15      	ldr	r3, [pc, #84]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	4a14      	ldr	r2, [pc, #80]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065e0:	e005      	b.n	80065ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	4a11      	ldr	r2, [pc, #68]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a0e      	ldr	r2, [pc, #56]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065fa:	f7fa fe59 	bl	80012b0 <HAL_GetTick>
 80065fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006600:	e008      	b.n	8006614 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006602:	f7fa fe55 	bl	80012b0 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e006      	b.n	8006622 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0f0      	beq.n	8006602 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	58024400 	.word	0x58024400
 8006630:	ffff0007 	.word	0xffff0007

08006634 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006642:	4b53      	ldr	r3, [pc, #332]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	2b03      	cmp	r3, #3
 800664c:	d101      	bne.n	8006652 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e099      	b.n	8006786 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006652:	4b4f      	ldr	r3, [pc, #316]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a4e      	ldr	r2, [pc, #312]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800665c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800665e:	f7fa fe27 	bl	80012b0 <HAL_GetTick>
 8006662:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006664:	e008      	b.n	8006678 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006666:	f7fa fe23 	bl	80012b0 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d901      	bls.n	8006678 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e086      	b.n	8006786 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006678:	4b45      	ldr	r3, [pc, #276]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f0      	bne.n	8006666 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006684:	4b42      	ldr	r3, [pc, #264]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	051b      	lsls	r3, r3, #20
 8006692:	493f      	ldr	r1, [pc, #252]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006694:	4313      	orrs	r3, r2
 8006696:	628b      	str	r3, [r1, #40]	; 0x28
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	3b01      	subs	r3, #1
 800669e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	025b      	lsls	r3, r3, #9
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	041b      	lsls	r3, r3, #16
 80066b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	061b      	lsls	r3, r3, #24
 80066c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066c8:	4931      	ldr	r1, [pc, #196]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066ce:	4b30      	ldr	r3, [pc, #192]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	492d      	ldr	r1, [pc, #180]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066e0:	4b2b      	ldr	r3, [pc, #172]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	4928      	ldr	r1, [pc, #160]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066f2:	4b27      	ldr	r3, [pc, #156]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	4a26      	ldr	r2, [pc, #152]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066fe:	4b24      	ldr	r3, [pc, #144]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006702:	4b24      	ldr	r3, [pc, #144]	; (8006794 <RCCEx_PLL3_Config+0x160>)
 8006704:	4013      	ands	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	69d2      	ldr	r2, [r2, #28]
 800670a:	00d2      	lsls	r2, r2, #3
 800670c:	4920      	ldr	r1, [pc, #128]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800670e:	4313      	orrs	r3, r2
 8006710:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006712:	4b1f      	ldr	r3, [pc, #124]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006716:	4a1e      	ldr	r2, [pc, #120]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d106      	bne.n	8006732 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006724:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	4a19      	ldr	r2, [pc, #100]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800672a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800672e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006730:	e00f      	b.n	8006752 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d106      	bne.n	8006746 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006738:	4b15      	ldr	r3, [pc, #84]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	4a14      	ldr	r2, [pc, #80]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800673e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006744:	e005      	b.n	8006752 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006746:	4b12      	ldr	r3, [pc, #72]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674a:	4a11      	ldr	r2, [pc, #68]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800674c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006750:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006752:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a0e      	ldr	r2, [pc, #56]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800675e:	f7fa fda7 	bl	80012b0 <HAL_GetTick>
 8006762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006764:	e008      	b.n	8006778 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006766:	f7fa fda3 	bl	80012b0 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e006      	b.n	8006786 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006778:	4b05      	ldr	r3, [pc, #20]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0f0      	beq.n	8006766 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	58024400 	.word	0x58024400
 8006794:	ffff0007 	.word	0xffff0007

08006798 <__libc_init_array>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	4d0d      	ldr	r5, [pc, #52]	; (80067d0 <__libc_init_array+0x38>)
 800679c:	4c0d      	ldr	r4, [pc, #52]	; (80067d4 <__libc_init_array+0x3c>)
 800679e:	1b64      	subs	r4, r4, r5
 80067a0:	10a4      	asrs	r4, r4, #2
 80067a2:	2600      	movs	r6, #0
 80067a4:	42a6      	cmp	r6, r4
 80067a6:	d109      	bne.n	80067bc <__libc_init_array+0x24>
 80067a8:	4d0b      	ldr	r5, [pc, #44]	; (80067d8 <__libc_init_array+0x40>)
 80067aa:	4c0c      	ldr	r4, [pc, #48]	; (80067dc <__libc_init_array+0x44>)
 80067ac:	f000 f82e 	bl	800680c <_init>
 80067b0:	1b64      	subs	r4, r4, r5
 80067b2:	10a4      	asrs	r4, r4, #2
 80067b4:	2600      	movs	r6, #0
 80067b6:	42a6      	cmp	r6, r4
 80067b8:	d105      	bne.n	80067c6 <__libc_init_array+0x2e>
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
 80067bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c0:	4798      	blx	r3
 80067c2:	3601      	adds	r6, #1
 80067c4:	e7ee      	b.n	80067a4 <__libc_init_array+0xc>
 80067c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ca:	4798      	blx	r3
 80067cc:	3601      	adds	r6, #1
 80067ce:	e7f2      	b.n	80067b6 <__libc_init_array+0x1e>
 80067d0:	08006880 	.word	0x08006880
 80067d4:	08006880 	.word	0x08006880
 80067d8:	08006880 	.word	0x08006880
 80067dc:	08006884 	.word	0x08006884

080067e0 <memcpy>:
 80067e0:	440a      	add	r2, r1
 80067e2:	4291      	cmp	r1, r2
 80067e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80067e8:	d100      	bne.n	80067ec <memcpy+0xc>
 80067ea:	4770      	bx	lr
 80067ec:	b510      	push	{r4, lr}
 80067ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067f6:	4291      	cmp	r1, r2
 80067f8:	d1f9      	bne.n	80067ee <memcpy+0xe>
 80067fa:	bd10      	pop	{r4, pc}

080067fc <memset>:
 80067fc:	4402      	add	r2, r0
 80067fe:	4603      	mov	r3, r0
 8006800:	4293      	cmp	r3, r2
 8006802:	d100      	bne.n	8006806 <memset+0xa>
 8006804:	4770      	bx	lr
 8006806:	f803 1b01 	strb.w	r1, [r3], #1
 800680a:	e7f9      	b.n	8006800 <memset+0x4>

0800680c <_init>:
 800680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680e:	bf00      	nop
 8006810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006812:	bc08      	pop	{r3}
 8006814:	469e      	mov	lr, r3
 8006816:	4770      	bx	lr

08006818 <_fini>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	bf00      	nop
 800681c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681e:	bc08      	pop	{r3}
 8006820:	469e      	mov	lr, r3
 8006822:	4770      	bx	lr

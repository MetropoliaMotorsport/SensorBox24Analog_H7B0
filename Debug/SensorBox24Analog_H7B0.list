
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad08  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800afb4  0800afb4  0000bfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b028  0800b028  0000c028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b02c  0800b02c  0000c02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800b030  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000092c  24000010  0800b040  0000d010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400093c  0800b040  0000d93c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c946  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000309a  00000000  00000000  00029984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018e0  00000000  00000000  0002ca1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001369  00000000  00000000  0002e2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003408e  00000000  00000000  0002f667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f76d  00000000  00000000  000636f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a851  00000000  00000000  00082e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001dd6b3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006da8  00000000  00000000  001dd6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800af9c 	.word	0x0800af9c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800af9c 	.word	0x0800af9c

080002ec <Config_Setup>:
#include "config.h"

#define ID 1


void Config_Setup(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
#if ID == 1
    Config_1();
 80002f0:	f000 f802 	bl	80002f8 <Config_1>
#elif ID == 2
    Config_2();
#elif ID == 3
    Config_3();
#endif
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Config_1>:

void Config_1(void) {
 80002f8:	b490      	push	{r4, r7}
 80002fa:	b09a      	sub	sp, #104	@ 0x68
 80002fc:	af00      	add	r7, sp, #0

	//initialize the sensors
	for (int i = 0; i < 16; i++) {
 80002fe:	2300      	movs	r3, #0
 8000300:	667b      	str	r3, [r7, #100]	@ 0x64
 8000302:	e026      	b.n	8000352 <Config_1+0x5a>
		sensors[i].transfer_function = TF_3V3;
 8000304:	4a68      	ldr	r2, [pc, #416]	@ (80004a8 <Config_1+0x1b0>)
 8000306:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000308:	011b      	lsls	r3, r3, #4
 800030a:	4413      	add	r3, r2
 800030c:	4a67      	ldr	r2, [pc, #412]	@ (80004ac <Config_1+0x1b4>)
 800030e:	601a      	str	r2, [r3, #0]
		sensors[i].CAN_ID = 0;
 8000310:	4a65      	ldr	r2, [pc, #404]	@ (80004a8 <Config_1+0x1b0>)
 8000312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000314:	011b      	lsls	r3, r3, #4
 8000316:	4413      	add	r3, r2
 8000318:	3304      	adds	r3, #4
 800031a:	2200      	movs	r2, #0
 800031c:	801a      	strh	r2, [r3, #0]
		sensors[i].CAN_interval = 100;
 800031e:	4a62      	ldr	r2, [pc, #392]	@ (80004a8 <Config_1+0x1b0>)
 8000320:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000322:	011b      	lsls	r3, r3, #4
 8000324:	4413      	add	r3, r2
 8000326:	3306      	adds	r3, #6
 8000328:	2264      	movs	r2, #100	@ 0x64
 800032a:	801a      	strh	r2, [r3, #0]
		sensors[i].averages = 0;
 800032c:	4a5e      	ldr	r2, [pc, #376]	@ (80004a8 <Config_1+0x1b0>)
 800032e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	4413      	add	r3, r2
 8000334:	3308      	adds	r3, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
		sensors[i].pin = i;
 800033a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800033c:	b2d9      	uxtb	r1, r3
 800033e:	4a5a      	ldr	r2, [pc, #360]	@ (80004a8 <Config_1+0x1b0>)
 8000340:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000342:	011b      	lsls	r3, r3, #4
 8000344:	4413      	add	r3, r2
 8000346:	330c      	adds	r3, #12
 8000348:	460a      	mov	r2, r1
 800034a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 800034c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800034e:	3301      	adds	r3, #1
 8000350:	667b      	str	r3, [r7, #100]	@ 0x64
 8000352:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000354:	2b0f      	cmp	r3, #15
 8000356:	ddd5      	ble.n	8000304 <Config_1+0xc>
	}

	// Sensor definitions
	Sensor APPS1 = {TF_APPS1, 1, 100, 0, V24_in1};
 8000358:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
 8000366:	4b52      	ldr	r3, [pc, #328]	@ (80004b0 <Config_1+0x1b8>)
 8000368:	657b      	str	r3, [r7, #84]	@ 0x54
 800036a:	2301      	movs	r3, #1
 800036c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8000370:	2364      	movs	r3, #100	@ 0x64
 8000372:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	Sensor APPS2 = {TF_APPS2, 2, 100, 0, V5_in1};
 8000376:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	4b4b      	ldr	r3, [pc, #300]	@ (80004b4 <Config_1+0x1bc>)
 8000386:	647b      	str	r3, [r7, #68]	@ 0x44
 8000388:	2302      	movs	r3, #2
 800038a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800038e:	2364      	movs	r3, #100	@ 0x64
 8000390:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8000394:	230a      	movs	r3, #10
 8000396:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	Sensor BPPS = {TF_BPPS, 3, 100, 0, V5_in2};
 800039a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	4b43      	ldr	r3, [pc, #268]	@ (80004b8 <Config_1+0x1c0>)
 80003aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80003ac:	2303      	movs	r3, #3
 80003ae:	873b      	strh	r3, [r7, #56]	@ 0x38
 80003b0:	2364      	movs	r3, #100	@ 0x64
 80003b2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80003b4:	230d      	movs	r3, #13
 80003b6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	Sensor BTN1 = {TF_BTN, 12, 100, 0, V5_in3};
 80003ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	4b3c      	ldr	r3, [pc, #240]	@ (80004bc <Config_1+0x1c4>)
 80003ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80003cc:	230c      	movs	r3, #12
 80003ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80003d0:	2364      	movs	r3, #100	@ 0x64
 80003d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80003d4:	230c      	movs	r3, #12
 80003d6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	Sensor BTN2 = {TF_BTN, 13, 100, 0, V5_in4};
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <Config_1+0x1c4>)
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	230d      	movs	r3, #13
 80003ee:	833b      	strh	r3, [r7, #24]
 80003f0:	2364      	movs	r3, #100	@ 0x64
 80003f2:	837b      	strh	r3, [r7, #26]
 80003f4:	2309      	movs	r3, #9
 80003f6:	f887 3020 	strb.w	r3, [r7, #32]
	Sensor BTN3 = {TF_BTN, 14, 100, 0, V5_in5};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	4b2d      	ldr	r3, [pc, #180]	@ (80004bc <Config_1+0x1c4>)
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	230e      	movs	r3, #14
 800040c:	813b      	strh	r3, [r7, #8]
 800040e:	2364      	movs	r3, #100	@ 0x64
 8000410:	817b      	strh	r3, [r7, #10]
 8000412:	2308      	movs	r3, #8
 8000414:	743b      	strb	r3, [r7, #16]

    sensors[APPS1.pin] = APPS1;
 8000416:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800041a:	4a23      	ldr	r2, [pc, #140]	@ (80004a8 <Config_1+0x1b0>)
 800041c:	011b      	lsls	r3, r3, #4
 800041e:	4413      	add	r3, r2
 8000420:	461c      	mov	r4, r3
 8000422:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000426:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[APPS2.pin] = APPS2;
 800042c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000430:	4a1d      	ldr	r2, [pc, #116]	@ (80004a8 <Config_1+0x1b0>)
 8000432:	011b      	lsls	r3, r3, #4
 8000434:	4413      	add	r3, r2
 8000436:	461c      	mov	r4, r3
 8000438:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800043c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800043e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[BPPS.pin] = BPPS;
 8000442:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000446:	4a18      	ldr	r2, [pc, #96]	@ (80004a8 <Config_1+0x1b0>)
 8000448:	011b      	lsls	r3, r3, #4
 800044a:	4413      	add	r3, r2
 800044c:	461c      	mov	r4, r3
 800044e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN1.pin] = BTN1;
 8000458:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800045c:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <Config_1+0x1b0>)
 800045e:	011b      	lsls	r3, r3, #4
 8000460:	4413      	add	r3, r2
 8000462:	461c      	mov	r4, r3
 8000464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800046a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN2.pin] = BTN2;
 800046e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000472:	4a0d      	ldr	r2, [pc, #52]	@ (80004a8 <Config_1+0x1b0>)
 8000474:	011b      	lsls	r3, r3, #4
 8000476:	4413      	add	r3, r2
 8000478:	461c      	mov	r4, r3
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN3.pin] = BTN3;
 8000484:	7c3b      	ldrb	r3, [r7, #16]
 8000486:	4a08      	ldr	r2, [pc, #32]	@ (80004a8 <Config_1+0x1b0>)
 8000488:	011b      	lsls	r3, r3, #4
 800048a:	4413      	add	r3, r2
 800048c:	461c      	mov	r4, r3
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000492:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	

    CAN_interval = 100;
 8000496:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <Config_1+0x1c8>)
 8000498:	2264      	movs	r2, #100	@ 0x64
 800049a:	801a      	strh	r2, [r3, #0]
}
 800049c:	bf00      	nop
 800049e:	3768      	adds	r7, #104	@ 0x68
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc90      	pop	{r4, r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	240003a0 	.word	0x240003a0
 80004ac:	08001965 	.word	0x08001965
 80004b0:	080019ef 	.word	0x080019ef
 80004b4:	08001a3d 	.word	0x08001a3d
 80004b8:	080019a1 	.word	0x080019a1
 80004bc:	08001a8d 	.word	0x08001a8d
 80004c0:	240008c2 	.word	0x240008c2

080004c4 <CanSend>:

uint8_t TxData[8];
uint8_t RxData[8];


void CanSend(uint8_t *TxData){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80004cc:	e001      	b.n	80004d2 <CanSend+0xe>
		Error_Handler();
 80004ce:	f000 fe2b 	bl	8001128 <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80004d2:	4809      	ldr	r0, [pc, #36]	@ (80004f8 <CanSend+0x34>)
 80004d4:	f005 fbaa 	bl	8005c2c <HAL_FDCAN_GetTxFifoFreeLevel>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d007      	beq.n	80004ee <CanSend+0x2a>
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	4906      	ldr	r1, [pc, #24]	@ (80004fc <CanSend+0x38>)
 80004e2:	4805      	ldr	r0, [pc, #20]	@ (80004f8 <CanSend+0x34>)
 80004e4:	f005 f9db 	bl	800589e <HAL_FDCAN_AddMessageToTxFifoQ>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d1ef      	bne.n	80004ce <CanSend+0xa>
	}
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	24000118 	.word	0x24000118
 80004fc:	240008e8 	.word	0x240008e8

08000500 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	2b00      	cmp	r3, #0
 8000512:	d017      	beq.n	8000544 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000514:	4b0d      	ldr	r3, [pc, #52]	@ (800054c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000516:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000518:	2140      	movs	r1, #64	@ 0x40
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f005 fa1a 	bl	8005954 <HAL_FDCAN_GetRxMessage>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 8000526:	f000 fdff 	bl	8001128 <Error_Handler>
 800052a:	e001      	b.n	8000530 <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 800052c:	f000 f860 	bl	80005f0 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000530:	2200      	movs	r2, #0
 8000532:	2101      	movs	r1, #1
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f005 fb8b 	bl	8005c50 <HAL_FDCAN_ActivateNotification>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 8000540:	f000 fdf2 	bl	8001128 <Error_Handler>
		}
	}
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	24000034 	.word	0x24000034
 8000550:	2400090c 	.word	0x2400090c

08000554 <print>:



void print(uint16_t select){
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
		//uint16_t Data = TF_Select(1,averages[select],transfer_functions[select]);
		sensors[select].data = sensors[select].transfer_function(1,sensors[select].averages);
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	4a20      	ldr	r2, [pc, #128]	@ (80005e4 <print+0x90>)
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	4413      	add	r3, r2
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	88fa      	ldrh	r2, [r7, #6]
 800056a:	491e      	ldr	r1, [pc, #120]	@ (80005e4 <print+0x90>)
 800056c:	0112      	lsls	r2, r2, #4
 800056e:	440a      	add	r2, r1
 8000570:	3208      	adds	r2, #8
 8000572:	6812      	ldr	r2, [r2, #0]
 8000574:	88fc      	ldrh	r4, [r7, #6]
 8000576:	4611      	mov	r1, r2
 8000578:	2001      	movs	r0, #1
 800057a:	4798      	blx	r3
 800057c:	4603      	mov	r3, r0
 800057e:	4619      	mov	r1, r3
 8000580:	4a18      	ldr	r2, [pc, #96]	@ (80005e4 <print+0x90>)
 8000582:	0123      	lsls	r3, r4, #4
 8000584:	4413      	add	r3, r2
 8000586:	330e      	adds	r3, #14
 8000588:	460a      	mov	r2, r1
 800058a:	801a      	strh	r2, [r3, #0]
		TxData[0] = sensors[select].data;
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	4a15      	ldr	r2, [pc, #84]	@ (80005e4 <print+0x90>)
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	4413      	add	r3, r2
 8000594:	330e      	adds	r3, #14
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <print+0x94>)
 800059c:	701a      	strb	r2, [r3, #0]
		TxData[1] = sensors[select].data >> 8;
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	4a10      	ldr	r2, [pc, #64]	@ (80005e4 <print+0x90>)
 80005a2:	011b      	lsls	r3, r3, #4
 80005a4:	4413      	add	r3, r2
 80005a6:	330e      	adds	r3, #14
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	0a1b      	lsrs	r3, r3, #8
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <print+0x94>)
 80005b2:	705a      	strb	r2, [r3, #1]
		TxHeader.Identifier = sensors[select].CAN_ID;
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	4a0b      	ldr	r2, [pc, #44]	@ (80005e4 <print+0x90>)
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	4413      	add	r3, r2
 80005bc:	3304      	adds	r3, #4
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <print+0x98>)
 80005c4:	601a      	str	r2, [r3, #0]

		if(sensors[select].CAN_ID)
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	4a06      	ldr	r2, [pc, #24]	@ (80005e4 <print+0x90>)
 80005ca:	011b      	lsls	r3, r3, #4
 80005cc:	4413      	add	r3, r2
 80005ce:	3304      	adds	r3, #4
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <print+0x88>
			CanSend(TxData);
 80005d6:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <print+0x94>)
 80005d8:	f7ff ff74 	bl	80004c4 <CanSend>
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	240003a0 	.word	0x240003a0
 80005e8:	2400002c 	.word	0x2400002c
 80005ec:	240008e8 	.word	0x240008e8

080005f0 <decode>:

void decode(){
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	switch(TxData[0]){
	
	}
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000606:	f001 fa91 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f87b 	bl	8000704 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Config_Setup();
 800060e:	f7ff fe6d 	bl	80002ec <Config_Setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 fc95 	bl	8000f40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000616:	f000 fc73 	bl	8000f00 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800061a:	f000 fa57 	bl	8000acc <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800061e:	f000 fadb 	bl	8000bd8 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000622:	f000 fb5f 	bl	8000ce4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000626:	f000 fb9d 	bl	8000d64 <MX_I2C3_Init>
  MX_ADC1_Init();
 800062a:	f000 f8d9 	bl	80007e0 <MX_ADC1_Init>
  MX_I2C4_Init();
 800062e:	f000 fbd9 	bl	8000de4 <MX_I2C4_Init>
  MX_TIM3_Init();
 8000632:	f000 fc17 	bl	8000e64 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 8000636:	482a      	ldr	r0, [pc, #168]	@ (80006e0 <main+0xe0>)
 8000638:	f009 ffdc 	bl	800a5f4 <HAL_TIM_Base_Start_IT>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <main+0x46>
 8000642:	f000 fd71 	bl	8001128 <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <main+0xe4>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	461a      	mov	r2, r3
 800064c:	4926      	ldr	r1, [pc, #152]	@ (80006e8 <main+0xe8>)
 800064e:	4825      	ldr	r0, [pc, #148]	@ (80006e4 <main+0xe4>)
 8000650:	f001 fe40 	bl	80022d4 <HAL_ADC_Start_DMA>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <main+0x5e>
 800065a:	f000 fd65 	bl	8001128 <Error_Handler>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 800065e:	4823      	ldr	r0, [pc, #140]	@ (80006ec <main+0xec>)
 8000660:	f005 f8f2 	bl	8005848 <HAL_FDCAN_Start>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <main+0x70>
 800066a:	f000 fd5d 	bl	8001128 <Error_Handler>
 800066e:	e008      	b.n	8000682 <main+0x82>
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000676:	481e      	ldr	r0, [pc, #120]	@ (80006f0 <main+0xf0>)
 8000678:	f006 fa10 	bl	8006a9c <HAL_GPIO_WritePin>
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <main+0xf4>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000682:	2200      	movs	r2, #0
 8000684:	2101      	movs	r1, #1
 8000686:	4819      	ldr	r0, [pc, #100]	@ (80006ec <main+0xec>)
 8000688:	f005 fae2 	bl	8005c50 <HAL_FDCAN_ActivateNotification>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <main+0x96>
 8000692:	f000 fd49 	bl	8001128 <Error_Handler>


  uint8_t counter = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <main+0xf4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d1fb      	bne.n	800069a <main+0x9a>
		  if(millis % CAN_interval == 0){
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <main+0xf8>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	4a15      	ldr	r2, [pc, #84]	@ (80006fc <main+0xfc>)
 80006a8:	8812      	ldrh	r2, [r2, #0]
 80006aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80006ae:	fb01 f202 	mul.w	r2, r1, r2
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1ef      	bne.n	800069a <main+0x9a>
			  print(counter);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff48 	bl	8000554 <print>
			  counter++;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	3301      	adds	r3, #1
 80006c8:	71fb      	strb	r3, [r7, #7]
			  if(counter == 16){
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b10      	cmp	r3, #16
 80006ce:	d1e4      	bne.n	800069a <main+0x9a>
				  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 80006d0:	2140      	movs	r1, #64	@ 0x40
 80006d2:	480b      	ldr	r0, [pc, #44]	@ (8000700 <main+0x100>)
 80006d4:	f006 f9fb 	bl	8006ace <HAL_GPIO_TogglePin>
				  counter = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 80006dc:	e7dd      	b.n	800069a <main+0x9a>
 80006de:	bf00      	nop
 80006e0:	24000354 	.word	0x24000354
 80006e4:	2400003c 	.word	0x2400003c
 80006e8:	240004a0 	.word	0x240004a0
 80006ec:	24000118 	.word	0x24000118
 80006f0:	58020400 	.word	0x58020400
 80006f4:	240008e6 	.word	0x240008e6
 80006f8:	240008e4 	.word	0x240008e4
 80006fc:	240008c2 	.word	0x240008c2
 8000700:	58020800 	.word	0x58020800

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09c      	sub	sp, #112	@ 0x70
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070e:	224c      	movs	r2, #76	@ 0x4c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f00a fc08 	bl	800af28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00a fc02 	bl	800af28 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000724:	4b2c      	ldr	r3, [pc, #176]	@ (80007d8 <SystemClock_Config+0xd4>)
 8000726:	f04f 32ff 	mov.w	r2, #4294967295
 800072a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800072e:	2002      	movs	r0, #2
 8000730:	f006 fb1c 	bl	8006d6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <SystemClock_Config+0xd8>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a27      	ldr	r2, [pc, #156]	@ (80007dc <SystemClock_Config+0xd8>)
 800073e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <SystemClock_Config+0xd8>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000750:	bf00      	nop
 8000752:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <SystemClock_Config+0xd8>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800075a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800075e:	d1f8      	bne.n	8000752 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <SystemClock_Config+0xd4>)
 8000762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000764:	f023 0303 	bic.w	r3, r3, #3
 8000768:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <SystemClock_Config+0xd4>)
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000770:	2303      	movs	r3, #3
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800077a:	2301      	movs	r3, #1
 800077c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800077e:	2340      	movs	r3, #64	@ 0x40
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000782:	2300      	movs	r3, #0
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078a:	4618      	mov	r0, r3
 800078c:	f006 fb28 	bl	8006de0 <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000796:	f000 fcc7 	bl	8001128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	233f      	movs	r3, #63	@ 0x3f
 800079c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007aa:	2340      	movs	r3, #64	@ 0x40
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ae:	2340      	movs	r3, #64	@ 0x40
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007b8:	2340      	movs	r3, #64	@ 0x40
 80007ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2102      	movs	r1, #2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f006 ff3f 	bl	8007644 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007cc:	f000 fcac 	bl	8001128 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3770      	adds	r7, #112	@ 0x70
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	58024400 	.word	0x58024400
 80007dc:	58024800 	.word	0x58024800

080007e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
 8000800:	615a      	str	r2, [r3, #20]
 8000802:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000804:	4b9f      	ldr	r3, [pc, #636]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000806:	4aa0      	ldr	r2, [pc, #640]	@ (8000a88 <MX_ADC1_Init+0x2a8>)
 8000808:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800080a:	4b9e      	ldr	r3, [pc, #632]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 800080c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000810:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000812:	4b9c      	ldr	r3, [pc, #624]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000814:	2208      	movs	r2, #8
 8000816:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000818:	4b9a      	ldr	r3, [pc, #616]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 800081a:	2201      	movs	r2, #1
 800081c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081e:	4b99      	ldr	r3, [pc, #612]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000820:	2204      	movs	r2, #4
 8000822:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000824:	4b97      	ldr	r3, [pc, #604]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000826:	2200      	movs	r2, #0
 8000828:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800082a:	4b96      	ldr	r3, [pc, #600]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 800082c:	2201      	movs	r2, #1
 800082e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 8000830:	4b94      	ldr	r3, [pc, #592]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000832:	2210      	movs	r2, #16
 8000834:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000836:	4b93      	ldr	r3, [pc, #588]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000838:	2200      	movs	r2, #0
 800083a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083c:	4b91      	ldr	r3, [pc, #580]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000842:	4b90      	ldr	r3, [pc, #576]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000848:	4b8e      	ldr	r3, [pc, #568]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 800084a:	2203      	movs	r2, #3
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800084e:	4b8d      	ldr	r3, [pc, #564]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000850:	2200      	movs	r2, #0
 8000852:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000854:	4b8b      	ldr	r3, [pc, #556]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800085a:	4b8a      	ldr	r3, [pc, #552]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000862:	4888      	ldr	r0, [pc, #544]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000864:	f001 fbdc 	bl	8002020 <HAL_ADC_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800086e:	f000 fc5b 	bl	8001128 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4881      	ldr	r0, [pc, #516]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 800087e:	f002 fadf 	bl	8002e40 <HAL_ADCEx_MultiModeConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000888:	f000 fc4e 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800088c:	4b7f      	ldr	r3, [pc, #508]	@ (8000a8c <MX_ADC1_Init+0x2ac>)
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000890:	2306      	movs	r3, #6
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000894:	2307      	movs	r3, #7
 8000896:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000898:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800089c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800089e:	2304      	movs	r3, #4
 80008a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	4619      	mov	r1, r3
 80008ae:	4875      	ldr	r0, [pc, #468]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 80008b0:	f001 fdd8 	bl	8002464 <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008ba:	f000 fc35 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008be:	4b74      	ldr	r3, [pc, #464]	@ (8000a90 <MX_ADC1_Init+0x2b0>)
 80008c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008c2:	230c      	movs	r3, #12
 80008c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	486e      	ldr	r0, [pc, #440]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 80008cc:	f001 fdca 	bl	8002464 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80008d6:	f000 fc27 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008da:	4b6e      	ldr	r3, [pc, #440]	@ (8000a94 <MX_ADC1_Init+0x2b4>)
 80008dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008de:	2312      	movs	r3, #18
 80008e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e2:	463b      	mov	r3, r7
 80008e4:	4619      	mov	r1, r3
 80008e6:	4867      	ldr	r0, [pc, #412]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 80008e8:	f001 fdbc 	bl	8002464 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80008f2:	f000 fc19 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008f6:	4b68      	ldr	r3, [pc, #416]	@ (8000a98 <MX_ADC1_Init+0x2b8>)
 80008f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008fa:	2318      	movs	r3, #24
 80008fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	4619      	mov	r1, r3
 8000902:	4860      	ldr	r0, [pc, #384]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000904:	f001 fdae 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800090e:	f000 fc0b 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000912:	4b62      	ldr	r3, [pc, #392]	@ (8000a9c <MX_ADC1_Init+0x2bc>)
 8000914:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000916:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800091a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4858      	ldr	r0, [pc, #352]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000922:	f001 fd9f 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 800092c:	f000 fbfc 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000930:	4b5b      	ldr	r3, [pc, #364]	@ (8000aa0 <MX_ADC1_Init+0x2c0>)
 8000932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000934:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000938:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	4851      	ldr	r0, [pc, #324]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000940:	f001 fd90 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800094a:	f000 fbed 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800094e:	4b55      	ldr	r3, [pc, #340]	@ (8000aa4 <MX_ADC1_Init+0x2c4>)
 8000950:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000952:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	4619      	mov	r1, r3
 800095c:	4849      	ldr	r0, [pc, #292]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 800095e:	f001 fd81 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000968:	f000 fbde 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800096c:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa8 <MX_ADC1_Init+0x2c8>)
 800096e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000970:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000974:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000976:	463b      	mov	r3, r7
 8000978:	4619      	mov	r1, r3
 800097a:	4842      	ldr	r0, [pc, #264]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 800097c:	f001 fd72 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8000986:	f000 fbcf 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800098a:	4b48      	ldr	r3, [pc, #288]	@ (8000aac <MX_ADC1_Init+0x2cc>)
 800098c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800098e:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	483a      	ldr	r0, [pc, #232]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 800099a:	f001 fd63 	bl	8002464 <HAL_ADC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 80009a4:	f000 fbc0 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009a8:	4b41      	ldr	r3, [pc, #260]	@ (8000ab0 <MX_ADC1_Init+0x2d0>)
 80009aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80009ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	4619      	mov	r1, r3
 80009b6:	4833      	ldr	r0, [pc, #204]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 80009b8:	f001 fd54 	bl	8002464 <HAL_ADC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 80009c2:	f000 fbb1 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009c6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab4 <MX_ADC1_Init+0x2d4>)
 80009c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80009ca:	f240 2306 	movw	r3, #518	@ 0x206
 80009ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	482b      	ldr	r0, [pc, #172]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 80009d6:	f001 fd45 	bl	8002464 <HAL_ADC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 80009e0:	f000 fba2 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009e4:	4b34      	ldr	r3, [pc, #208]	@ (8000ab8 <MX_ADC1_Init+0x2d8>)
 80009e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80009e8:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80009ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	4824      	ldr	r0, [pc, #144]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 80009f4:	f001 fd36 	bl	8002464 <HAL_ADC_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 80009fe:	f000 fb93 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000a02:	4b2e      	ldr	r3, [pc, #184]	@ (8000abc <MX_ADC1_Init+0x2dc>)
 8000a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000a06:	f240 2312 	movw	r3, #530	@ 0x212
 8000a0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481c      	ldr	r0, [pc, #112]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000a12:	f001 fd27 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 8000a1c:	f000 fb84 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000a20:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <MX_ADC1_Init+0x2e0>)
 8000a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000a24:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8000a28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4815      	ldr	r0, [pc, #84]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000a30:	f001 fd18 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 8000a3a:	f000 fb75 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <MX_ADC1_Init+0x2e4>)
 8000a40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000a42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000a4e:	f001 fd09 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 8000a58:	f000 fb66 	bl	8001128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <MX_ADC1_Init+0x2e8>)
 8000a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000a60:	f240 3306 	movw	r3, #774	@ 0x306
 8000a64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	@ (8000a84 <MX_ADC1_Init+0x2a4>)
 8000a6c:	f001 fcfa 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 8000a76:	f000 fb57 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	@ 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2400003c 	.word	0x2400003c
 8000a88:	40022000 	.word	0x40022000
 8000a8c:	0c900008 	.word	0x0c900008
 8000a90:	10c00010 	.word	0x10c00010
 8000a94:	14f00020 	.word	0x14f00020
 8000a98:	1d500080 	.word	0x1d500080
 8000a9c:	21800100 	.word	0x21800100
 8000aa0:	25b00200 	.word	0x25b00200
 8000aa4:	2a000400 	.word	0x2a000400
 8000aa8:	2e300800 	.word	0x2e300800
 8000aac:	32601000 	.word	0x32601000
 8000ab0:	36902000 	.word	0x36902000
 8000ab4:	3ac04000 	.word	0x3ac04000
 8000ab8:	3ef08000 	.word	0x3ef08000
 8000abc:	43210000 	.word	0x43210000
 8000ac0:	47520000 	.word	0x47520000
 8000ac4:	4b840000 	.word	0x4b840000
 8000ac8:	4fb80000 	.word	0x4fb80000

08000acc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bcc <MX_FDCAN1_Init+0x100>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000adc:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000ae2:	4b39      	ldr	r3, [pc, #228]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ae8:	4b37      	ldr	r3, [pc, #220]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000aee:	4b36      	ldr	r3, [pc, #216]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000af4:	4b34      	ldr	r3, [pc, #208]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000afa:	4b33      	ldr	r3, [pc, #204]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 22;
 8000b00:	4b31      	ldr	r3, [pc, #196]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b02:	2216      	movs	r2, #22
 8000b04:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b06:	4b30      	ldr	r3, [pc, #192]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b12:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b18:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b24:	4b28      	ldr	r3, [pc, #160]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 28;
 8000b2a:	4b27      	ldr	r3, [pc, #156]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b2c:	221c      	movs	r2, #28
 8000b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b30:	4b25      	ldr	r3, [pc, #148]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b36:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b3c:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b3e:	2204      	movs	r2, #4
 8000b40:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b42:	4b21      	ldr	r3, [pc, #132]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b54:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b56:	2204      	movs	r2, #4
 8000b58:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b60:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8000b66:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b68:	2202      	movs	r2, #2
 8000b6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b74:	2204      	movs	r2, #4
 8000b76:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b78:	4813      	ldr	r0, [pc, #76]	@ (8000bc8 <MX_FDCAN1_Init+0xfc>)
 8000b7a:	f004 fc87 	bl	800548c <HAL_FDCAN_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b84:	f000 fad0 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_FDCAN1_Init+0x104>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_FDCAN1_Init+0x108>)
 8000b90:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <MX_FDCAN1_Init+0x108>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <MX_FDCAN1_Init+0x108>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <MX_FDCAN1_Init+0x108>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <MX_FDCAN1_Init+0x108>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <MX_FDCAN1_Init+0x108>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <MX_FDCAN1_Init+0x108>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <MX_FDCAN1_Init+0x108>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <MX_FDCAN1_Init+0x108>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	24000118 	.word	0x24000118
 8000bcc:	4000a000 	.word	0x4000a000
 8000bd0:	240008c4 	.word	0x240008c4
 8000bd4:	240008e8 	.word	0x240008e8

08000bd8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000bde:	4a3e      	ldr	r2, [pc, #248]	@ (8000cd8 <MX_FDCAN2_Init+0x100>)
 8000be0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000be2:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000be8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bee:	4b39      	ldr	r3, [pc, #228]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bf4:	4b37      	ldr	r3, [pc, #220]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bfa:	4b36      	ldr	r3, [pc, #216]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000c00:	4b34      	ldr	r3, [pc, #208]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c06:	4b33      	ldr	r3, [pc, #204]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 22;
 8000c0c:	4b31      	ldr	r3, [pc, #196]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c0e:	2216      	movs	r2, #22
 8000c10:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c12:	4b30      	ldr	r3, [pc, #192]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c14:	2202      	movs	r2, #2
 8000c16:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c18:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c24:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c30:	4b28      	ldr	r3, [pc, #160]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c36:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c3c:	4b25      	ldr	r3, [pc, #148]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c42:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c48:	4b22      	ldr	r3, [pc, #136]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c56:	2204      	movs	r2, #4
 8000c58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c62:	2204      	movs	r2, #4
 8000c64:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c78:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c80:	2204      	movs	r2, #4
 8000c82:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c84:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <MX_FDCAN2_Init+0xfc>)
 8000c86:	f004 fc01 	bl	800548c <HAL_FDCAN_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c90:	f000 fa4a 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_FDCAN2_Init+0x104>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_FDCAN2_Init+0x108>)
 8000c9c:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <MX_FDCAN2_Init+0x108>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_FDCAN2_Init+0x108>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <MX_FDCAN2_Init+0x108>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_FDCAN2_Init+0x108>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <MX_FDCAN2_Init+0x108>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <MX_FDCAN2_Init+0x108>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <MX_FDCAN2_Init+0x108>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <MX_FDCAN2_Init+0x108>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	240001b8 	.word	0x240001b8
 8000cd8:	4000a400 	.word	0x4000a400
 8000cdc:	240008c4 	.word	0x240008c4
 8000ce0:	240008e8 	.word	0x240008e8

08000ce4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000cea:	4a1c      	ldr	r2, [pc, #112]	@ (8000d5c <MX_I2C1_Init+0x78>)
 8000cec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d60 <MX_I2C1_Init+0x7c>)
 8000cf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1e:	480e      	ldr	r0, [pc, #56]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000d20:	f005 fef0 	bl	8006b04 <HAL_I2C_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d2a:	f000 f9fd 	bl	8001128 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4809      	ldr	r0, [pc, #36]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000d32:	f005 ff83 	bl	8006c3c <HAL_I2CEx_ConfigAnalogFilter>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d3c:	f000 f9f4 	bl	8001128 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d40:	2100      	movs	r1, #0
 8000d42:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <MX_I2C1_Init+0x74>)
 8000d44:	f005 ffc5 	bl	8006cd2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d4e:	f000 f9eb 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	24000258 	.word	0x24000258
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	00707cbb 	.word	0x00707cbb

08000d64 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ddc <MX_I2C3_Init+0x78>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000d70:	4a1b      	ldr	r2, [pc, #108]	@ (8000de0 <MX_I2C3_Init+0x7c>)
 8000d72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d80:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d86:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d9e:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000da0:	f005 feb0 	bl	8006b04 <HAL_I2C_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000daa:	f000 f9bd 	bl	8001128 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4809      	ldr	r0, [pc, #36]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000db2:	f005 ff43 	bl	8006c3c <HAL_I2CEx_ConfigAnalogFilter>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000dbc:	f000 f9b4 	bl	8001128 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <MX_I2C3_Init+0x74>)
 8000dc4:	f005 ff85 	bl	8006cd2 <HAL_I2CEx_ConfigDigitalFilter>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000dce:	f000 f9ab 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	240002ac 	.word	0x240002ac
 8000ddc:	40005c00 	.word	0x40005c00
 8000de0:	00707cbb 	.word	0x00707cbb

08000de4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <MX_I2C4_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000df0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e60 <MX_I2C4_Init+0x7c>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000df4:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000e20:	f005 fe70 	bl	8006b04 <HAL_I2C_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e2a:	f000 f97d 	bl	8001128 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000e32:	f005 ff03 	bl	8006c3c <HAL_I2CEx_ConfigAnalogFilter>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e3c:	f000 f974 	bl	8001128 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_I2C4_Init+0x74>)
 8000e44:	f005 ff45 	bl	8006cd2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f96b 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	24000300 	.word	0x24000300
 8000e5c:	58001c00 	.word	0x58001c00
 8000e60:	00707cbb 	.word	0x00707cbb

08000e64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <MX_TIM3_Init+0x94>)
 8000e84:	4a1d      	ldr	r2, [pc, #116]	@ (8000efc <MX_TIM3_Init+0x98>)
 8000e86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_TIM3_Init+0x94>)
 8000e8a:	223f      	movs	r2, #63	@ 0x3f
 8000e8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <MX_TIM3_Init+0x94>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_TIM3_Init+0x94>)
 8000e96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_TIM3_Init+0x94>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <MX_TIM3_Init+0x94>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea8:	4813      	ldr	r0, [pc, #76]	@ (8000ef8 <MX_TIM3_Init+0x94>)
 8000eaa:	f009 fb4b 	bl	800a544 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000eb4:	f000 f938 	bl	8001128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <MX_TIM3_Init+0x94>)
 8000ec6:	f009 fd15 	bl	800a8f4 <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f000 f92a 	bl	8001128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_TIM3_Init+0x94>)
 8000ee2:	f009 ff75 	bl	800add0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000eec:	f000 f91c 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	24000354 	.word	0x24000354
 8000efc:	40000400 	.word	0x40000400

08000f00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f06:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <MX_DMA_Init+0x3c>)
 8000f08:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f3c <MX_DMA_Init+0x3c>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_DMA_Init+0x3c>)
 8000f18:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	200b      	movs	r0, #11
 8000f2a:	f002 f900 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f2e:	200b      	movs	r0, #11
 8000f30:	f002 f917 	bl	8003162 <HAL_NVIC_EnableIRQ>

}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58024400 	.word	0x58024400

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f56:	4b34      	ldr	r3, [pc, #208]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000f58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f5c:	4a32      	ldr	r2, [pc, #200]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f66:	4b30      	ldr	r3, [pc, #192]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b2c      	ldr	r3, [pc, #176]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000f76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000f94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f98:	4a23      	ldr	r2, [pc, #140]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fa2:	4b21      	ldr	r3, [pc, #132]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000fa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000fb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fc0:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <MX_GPIO_Init+0xe8>)
 8000fc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd4:	4815      	ldr	r0, [pc, #84]	@ (800102c <MX_GPIO_Init+0xec>)
 8000fd6:	f005 fd61 	bl	8006a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2140      	movs	r1, #64	@ 0x40
 8000fde:	4814      	ldr	r0, [pc, #80]	@ (8001030 <MX_GPIO_Init+0xf0>)
 8000fe0:	f005 fd5c 	bl	8006a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000fe4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480b      	ldr	r0, [pc, #44]	@ (800102c <MX_GPIO_Init+0xec>)
 8000ffe:	f005 fb9d 	bl	800673c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001002:	2340      	movs	r3, #64	@ 0x40
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_GPIO_Init+0xf0>)
 800101a:	f005 fb8f 	bl	800673c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	@ 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	58024400 	.word	0x58024400
 800102c:	58020400 	.word	0x58020400
 8001030:	58020800 	.word	0x58020800

08001034 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a34      	ldr	r2, [pc, #208]	@ (8001114 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d15f      	bne.n	8001106 <HAL_ADC_ConvCpltCallback+0xd2>
		if(AVE_POS < ROLLING_AVE){
 8001046:	4b34      	ldr	r3, [pc, #208]	@ (8001118 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b1f      	cmp	r3, #31
 800104c:	d806      	bhi.n	800105c <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 800104e:	4b32      	ldr	r3, [pc, #200]	@ (8001118 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b30      	ldr	r3, [pc, #192]	@ (8001118 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	e03b      	b.n	80010d4 <HAL_ADC_ConvCpltCallback+0xa0>
		}
		else{
			AVE_POS = 0;
 800105c:	4b2e      	ldr	r3, [pc, #184]	@ (8001118 <HAL_ADC_ConvCpltCallback+0xe4>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e030      	b.n	80010ca <HAL_ADC_ConvCpltCallback+0x96>
				for(int z = 0; z < ROLLING_AVE;z++){
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	e027      	b.n	80010be <HAL_ADC_ConvCpltCallback+0x8a>
					if(z == 0){
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10c      	bne.n	800108e <HAL_ADC_ConvCpltCallback+0x5a>
						//averages[i] = all_raw_data[i][0];
            sensors[i].averages = all_raw_data[i][0];
 8001074:	4a29      	ldr	r2, [pc, #164]	@ (800111c <HAL_ADC_ConvCpltCallback+0xe8>)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	4413      	add	r3, r2
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	4a27      	ldr	r2, [pc, #156]	@ (8001120 <HAL_ADC_ConvCpltCallback+0xec>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	4413      	add	r3, r2
 8001088:	3308      	adds	r3, #8
 800108a:	6019      	str	r1, [r3, #0]
 800108c:	e014      	b.n	80010b8 <HAL_ADC_ConvCpltCallback+0x84>
					}else{
						//averages[i]=(averages[i] + all_raw_data[i][z])/2;
            sensors[i].averages = (sensors[i].averages + all_raw_data[i][z])/2;
 800108e:	4a24      	ldr	r2, [pc, #144]	@ (8001120 <HAL_ADC_ConvCpltCallback+0xec>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	4413      	add	r3, r2
 8001096:	3308      	adds	r3, #8
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4820      	ldr	r0, [pc, #128]	@ (800111c <HAL_ADC_ConvCpltCallback+0xe8>)
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	0151      	lsls	r1, r2, #5
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	440a      	add	r2, r1
 80010a4:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80010a8:	4413      	add	r3, r2
 80010aa:	085a      	lsrs	r2, r3, #1
 80010ac:	491c      	ldr	r1, [pc, #112]	@ (8001120 <HAL_ADC_ConvCpltCallback+0xec>)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	440b      	add	r3, r1
 80010b4:	3308      	adds	r3, #8
 80010b6:	601a      	str	r2, [r3, #0]
				for(int z = 0; z < ROLLING_AVE;z++){
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	3301      	adds	r3, #1
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	2b1f      	cmp	r3, #31
 80010c2:	ddd4      	ble.n	800106e <HAL_ADC_ConvCpltCallback+0x3a>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	699a      	ldr	r2, [r3, #24]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8c9      	bhi.n	8001068 <HAL_ADC_ConvCpltCallback+0x34>
					}
				}
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e010      	b.n	80010fc <HAL_ADC_ConvCpltCallback+0xc8>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <HAL_ADC_ConvCpltCallback+0xe4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3b01      	subs	r3, #1
 80010e0:	4910      	ldr	r1, [pc, #64]	@ (8001124 <HAL_ADC_ConvCpltCallback+0xf0>)
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 80010e8:	490c      	ldr	r1, [pc, #48]	@ (800111c <HAL_ADC_ConvCpltCallback+0xe8>)
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	0152      	lsls	r2, r2, #5
 80010ee:	4413      	add	r3, r2
 80010f0:	4602      	mov	r2, r0
 80010f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	699a      	ldr	r2, [r3, #24]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	429a      	cmp	r2, r3
 8001104:	d8e9      	bhi.n	80010da <HAL_ADC_ConvCpltCallback+0xa6>
		}
	}
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40022000 	.word	0x40022000
 8001118:	240008c0 	.word	0x240008c0
 800111c:	240004c0 	.word	0x240004c0
 8001120:	240003a0 	.word	0x240003a0
 8001124:	240004a0 	.word	0x240004a0

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
}
 800112e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <Error_Handler+0x8>

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <HAL_MspInit+0x3c>)
 800113c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001140:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <HAL_MspInit+0x3c>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <HAL_MspInit+0x3c>)
 800114c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	2005      	movs	r0, #5
 800115e:	f001 ffe6 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001162:	2005      	movs	r0, #5
 8001164:	f001 fffd 	bl	8003162 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58024400 	.word	0x58024400

08001174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0bc      	sub	sp, #240	@ 0xf0
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800118c:	f107 0318 	add.w	r3, r7, #24
 8001190:	22c0      	movs	r2, #192	@ 0xc0
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f009 fec7 	bl	800af28 <memset>
  if(hadc->Instance==ADC1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a62      	ldr	r2, [pc, #392]	@ (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	f040 80bc 	bne.w	800131e <HAL_ADC_MspInit+0x1aa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 80011b6:	2320      	movs	r3, #32
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80011ba:	2308      	movs	r3, #8
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 25;
 80011be:	2319      	movs	r3, #25
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011c6:	23c0      	movs	r3, #192	@ 0xc0
 80011c8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f107 0318 	add.w	r3, r7, #24
 80011dc:	4618      	mov	r0, r3
 80011de:	f006 fda7 	bl	8007d30 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80011e8:	f7ff ff9e 	bl	8001128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011ec:	4b4f      	ldr	r3, [pc, #316]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 80011ee:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80011f2:	4a4e      	ldr	r2, [pc, #312]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 80011f4:	f043 0320 	orr.w	r3, r3, #32
 80011f8:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80011fc:	4b4b      	ldr	r3, [pc, #300]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 80011fe:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b48      	ldr	r3, [pc, #288]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 800120c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001210:	4a46      	ldr	r2, [pc, #280]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800121a:	4b44      	ldr	r3, [pc, #272]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 800121c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	4b40      	ldr	r3, [pc, #256]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 800122a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800122e:	4a3f      	ldr	r2, [pc, #252]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001238:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 800123a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b39      	ldr	r3, [pc, #228]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 8001248:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800124c:	4a37      	ldr	r2, [pc, #220]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001256:	4b35      	ldr	r3, [pc, #212]	@ (800132c <HAL_ADC_MspInit+0x1b8>)
 8001258:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001264:	233f      	movs	r3, #63	@ 0x3f
 8001266:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126a:	2303      	movs	r3, #3
 800126c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800127a:	4619      	mov	r1, r3
 800127c:	482c      	ldr	r0, [pc, #176]	@ (8001330 <HAL_ADC_MspInit+0x1bc>)
 800127e:	f005 fa5d 	bl	800673c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001282:	23ff      	movs	r3, #255	@ 0xff
 8001284:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001288:	2303      	movs	r3, #3
 800128a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001298:	4619      	mov	r1, r3
 800129a:	4826      	ldr	r0, [pc, #152]	@ (8001334 <HAL_ADC_MspInit+0x1c0>)
 800129c:	f005 fa4e 	bl	800673c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012a0:	2303      	movs	r3, #3
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a6:	2303      	movs	r3, #3
 80012a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012b6:	4619      	mov	r1, r3
 80012b8:	481f      	ldr	r0, [pc, #124]	@ (8001338 <HAL_ADC_MspInit+0x1c4>)
 80012ba:	f005 fa3f 	bl	800673c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80012be:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 80012c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001340 <HAL_ADC_MspInit+0x1cc>)
 80012c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 80012c6:	2209      	movs	r2, #9
 80012c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 80012d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012de:	4b17      	ldr	r3, [pc, #92]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 80012e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 80012e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012ee:	4b13      	ldr	r3, [pc, #76]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 80012f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001302:	480e      	ldr	r0, [pc, #56]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 8001304:	f001 ff48 	bl	8003198 <HAL_DMA_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 800130e:	f7ff ff0b 	bl	8001128 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a09      	ldr	r2, [pc, #36]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 8001316:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001318:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_ADC_MspInit+0x1c8>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	37f0      	adds	r7, #240	@ 0xf0
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40022000 	.word	0x40022000
 800132c:	58024400 	.word	0x58024400
 8001330:	58020800 	.word	0x58020800
 8001334:	58020000 	.word	0x58020000
 8001338:	58020400 	.word	0x58020400
 800133c:	240000a0 	.word	0x240000a0
 8001340:	40020010 	.word	0x40020010

08001344 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0bc      	sub	sp, #240	@ 0xf0
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	22c0      	movs	r2, #192	@ 0xc0
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f009 fddf 	bl	800af28 <memset>
  if(hfdcan->Instance==FDCAN1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a5a      	ldr	r2, [pc, #360]	@ (80014d8 <HAL_FDCAN_MspInit+0x194>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d158      	bne.n	8001426 <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001374:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001386:	f107 0318 	add.w	r3, r7, #24
 800138a:	4618      	mov	r0, r3
 800138c:	f006 fcd0 	bl	8007d30 <HAL_RCCEx_PeriphCLKConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001396:	f7ff fec7 	bl	8001128 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800139a:	4b50      	ldr	r3, [pc, #320]	@ (80014dc <HAL_FDCAN_MspInit+0x198>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a4e      	ldr	r2, [pc, #312]	@ (80014dc <HAL_FDCAN_MspInit+0x198>)
 80013a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80013a4:	4b4d      	ldr	r3, [pc, #308]	@ (80014dc <HAL_FDCAN_MspInit+0x198>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d10e      	bne.n	80013ca <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80013ac:	4b4c      	ldr	r3, [pc, #304]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 80013ae:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013b2:	4a4b      	ldr	r2, [pc, #300]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b8:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80013bc:	4b48      	ldr	r3, [pc, #288]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 80013be:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b45      	ldr	r3, [pc, #276]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 80013cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013d0:	4a43      	ldr	r2, [pc, #268]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013da:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 80013dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013e8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001402:	2309      	movs	r3, #9
 8001404:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800140c:	4619      	mov	r1, r3
 800140e:	4835      	ldr	r0, [pc, #212]	@ (80014e4 <HAL_FDCAN_MspInit+0x1a0>)
 8001410:	f005 f994 	bl	800673c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	2013      	movs	r0, #19
 800141a:	f001 fe88 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800141e:	2013      	movs	r0, #19
 8001420:	f001 fe9f 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001424:	e054      	b.n	80014d0 <HAL_FDCAN_MspInit+0x18c>
  else if(hfdcan->Instance==FDCAN2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a2f      	ldr	r2, [pc, #188]	@ (80014e8 <HAL_FDCAN_MspInit+0x1a4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d14f      	bne.n	80014d0 <HAL_FDCAN_MspInit+0x18c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001430:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001442:	f107 0318 	add.w	r3, r7, #24
 8001446:	4618      	mov	r0, r3
 8001448:	f006 fc72 	bl	8007d30 <HAL_RCCEx_PeriphCLKConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_FDCAN_MspInit+0x112>
      Error_Handler();
 8001452:	f7ff fe69 	bl	8001128 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001456:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <HAL_FDCAN_MspInit+0x198>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a1f      	ldr	r2, [pc, #124]	@ (80014dc <HAL_FDCAN_MspInit+0x198>)
 800145e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001460:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <HAL_FDCAN_MspInit+0x198>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d10e      	bne.n	8001486 <HAL_FDCAN_MspInit+0x142>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 800146a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800146e:	4a1c      	ldr	r2, [pc, #112]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001474:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001478:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 800147a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800147e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 8001488:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800148c:	4a14      	ldr	r2, [pc, #80]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <HAL_FDCAN_MspInit+0x19c>)
 8001498:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014a4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80014be:	2309      	movs	r3, #9
 80014c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014c8:	4619      	mov	r1, r3
 80014ca:	4808      	ldr	r0, [pc, #32]	@ (80014ec <HAL_FDCAN_MspInit+0x1a8>)
 80014cc:	f005 f936 	bl	800673c <HAL_GPIO_Init>
}
 80014d0:	bf00      	nop
 80014d2:	37f0      	adds	r7, #240	@ 0xf0
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	4000a000 	.word	0x4000a000
 80014dc:	24000934 	.word	0x24000934
 80014e0:	58024400 	.word	0x58024400
 80014e4:	58020000 	.word	0x58020000
 80014e8:	4000a400 	.word	0x4000a400
 80014ec:	58020400 	.word	0x58020400

080014f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0c0      	sub	sp, #256	@ 0x100
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800150c:	22c0      	movs	r2, #192	@ 0xc0
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f009 fd09 	bl	800af28 <memset>
  if(hi2c->Instance==I2C1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a86      	ldr	r2, [pc, #536]	@ (8001734 <HAL_I2C_MspInit+0x244>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d146      	bne.n	80015ae <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001520:	f04f 0208 	mov.w	r2, #8
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001536:	4618      	mov	r0, r3
 8001538:	f006 fbfa 	bl	8007d30 <HAL_RCCEx_PeriphCLKConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001542:	f7ff fdf1 	bl	8001128 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b7c      	ldr	r3, [pc, #496]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 8001548:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800154c:	4a7a      	ldr	r2, [pc, #488]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001556:	4b78      	ldr	r3, [pc, #480]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 8001558:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001564:	23c0      	movs	r3, #192	@ 0xc0
 8001566:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156a:	2312      	movs	r3, #18
 800156c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800157c:	2304      	movs	r3, #4
 800157e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001586:	4619      	mov	r1, r3
 8001588:	486c      	ldr	r0, [pc, #432]	@ (800173c <HAL_I2C_MspInit+0x24c>)
 800158a:	f005 f8d7 	bl	800673c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158e:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 8001590:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001594:	4a68      	ldr	r2, [pc, #416]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 8001596:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800159a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800159e:	4b66      	ldr	r3, [pc, #408]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 80015a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80015ac:	e0bd      	b.n	800172a <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a63      	ldr	r2, [pc, #396]	@ (8001740 <HAL_I2C_MspInit+0x250>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d16c      	bne.n	8001692 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80015b8:	f04f 0208 	mov.w	r2, #8
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ce:	4618      	mov	r0, r3
 80015d0:	f006 fbae 	bl	8007d30 <HAL_RCCEx_PeriphCLKConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80015da:	f7ff fda5 	bl	8001128 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	4b56      	ldr	r3, [pc, #344]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 80015e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015e4:	4a54      	ldr	r2, [pc, #336]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015ee:	4b52      	ldr	r3, [pc, #328]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 80015f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 80015fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001602:	4a4d      	ldr	r2, [pc, #308]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800160c:	4b4a      	ldr	r3, [pc, #296]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 800160e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800161a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800161e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001622:	2312      	movs	r3, #18
 8001624:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001634:	2304      	movs	r3, #4
 8001636:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800163e:	4619      	mov	r1, r3
 8001640:	4840      	ldr	r0, [pc, #256]	@ (8001744 <HAL_I2C_MspInit+0x254>)
 8001642:	f005 f87b 	bl	800673c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001646:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800164a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164e:	2312      	movs	r3, #18
 8001650:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001660:	2304      	movs	r3, #4
 8001662:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800166a:	4619      	mov	r1, r3
 800166c:	4836      	ldr	r0, [pc, #216]	@ (8001748 <HAL_I2C_MspInit+0x258>)
 800166e:	f005 f865 	bl	800673c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001672:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 8001674:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001678:	4a2f      	ldr	r2, [pc, #188]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 800167a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800167e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001682:	4b2d      	ldr	r3, [pc, #180]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 8001684:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001688:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]
}
 8001690:	e04b      	b.n	800172a <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a2d      	ldr	r2, [pc, #180]	@ (800174c <HAL_I2C_MspInit+0x25c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d146      	bne.n	800172a <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800169c:	f04f 0210 	mov.w	r2, #16
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b2:	4618      	mov	r0, r3
 80016b4:	f006 fb3c 	bl	8007d30 <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 80016be:	f7ff fd33 	bl	8001128 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 80016c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 80016d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e8:	2312      	movs	r3, #18
 80016ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80016fa:	2306      	movs	r3, #6
 80016fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001704:	4619      	mov	r1, r3
 8001706:	480d      	ldr	r0, [pc, #52]	@ (800173c <HAL_I2C_MspInit+0x24c>)
 8001708:	f005 f818 	bl	800673c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 800170e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001718:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_I2C_MspInit+0x248>)
 800171e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
}
 800172a:	bf00      	nop
 800172c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40005400 	.word	0x40005400
 8001738:	58024400 	.word	0x58024400
 800173c:	58020400 	.word	0x58020400
 8001740:	40005c00 	.word	0x40005c00
 8001744:	58020800 	.word	0x58020800
 8001748:	58020000 	.word	0x58020000
 800174c:	58001c00 	.word	0x58001c00

08001750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <HAL_TIM_Base_MspInit+0x48>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d116      	bne.n	8001790 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_TIM_Base_MspInit+0x4c>)
 8001764:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001768:	4a0c      	ldr	r2, [pc, #48]	@ (800179c <HAL_TIM_Base_MspInit+0x4c>)
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_TIM_Base_MspInit+0x4c>)
 8001774:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2100      	movs	r1, #0
 8001784:	201d      	movs	r0, #29
 8001786:	f001 fcd2 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800178a:	201d      	movs	r0, #29
 800178c:	f001 fce9 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40000400 	.word	0x40000400
 800179c:	58024400 	.word	0x58024400

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <NMI_Handler+0x4>

080017a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <MemManage_Handler+0x4>

080017b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f6:	f000 fa0b 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}

080017fe <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <DMA1_Stream0_IRQHandler+0x10>)
 8001812:	f002 fab9 	bl	8003d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	240000a0 	.word	0x240000a0

08001820 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <FDCAN1_IT0_IRQHandler+0x10>)
 8001826:	f004 fa8d 	bl	8005d44 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	24000118 	.word	0x24000118

08001834 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <TIM3_IRQHandler+0x2c>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <TIM3_IRQHandler+0x2c>)
 8001842:	801a      	strh	r2, [r3, #0]
	if(millis == 1000){
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <TIM3_IRQHandler+0x2c>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800184c:	d102      	bne.n	8001854 <TIM3_IRQHandler+0x20>
		CAN_enable = 1;
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <TIM3_IRQHandler+0x30>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001854:	4804      	ldr	r0, [pc, #16]	@ (8001868 <TIM3_IRQHandler+0x34>)
 8001856:	f008 ff45 	bl	800a6e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	240008e4 	.word	0x240008e4
 8001864:	240008e6 	.word	0x240008e6
 8001868:	24000354 	.word	0x24000354

0800186c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001870:	4b34      	ldr	r3, [pc, #208]	@ (8001944 <SystemInit+0xd8>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001876:	4a33      	ldr	r2, [pc, #204]	@ (8001944 <SystemInit+0xd8>)
 8001878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001880:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <SystemInit+0xdc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	2b02      	cmp	r3, #2
 800188a:	d807      	bhi.n	800189c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800188c:	4b2e      	ldr	r3, [pc, #184]	@ (8001948 <SystemInit+0xdc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 030f 	bic.w	r3, r3, #15
 8001894:	4a2c      	ldr	r2, [pc, #176]	@ (8001948 <SystemInit+0xdc>)
 8001896:	f043 0303 	orr.w	r3, r3, #3
 800189a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <SystemInit+0xe0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2a      	ldr	r2, [pc, #168]	@ (800194c <SystemInit+0xe0>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018a8:	4b28      	ldr	r3, [pc, #160]	@ (800194c <SystemInit+0xe0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018ae:	4b27      	ldr	r3, [pc, #156]	@ (800194c <SystemInit+0xe0>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4926      	ldr	r1, [pc, #152]	@ (800194c <SystemInit+0xe0>)
 80018b4:	4b26      	ldr	r3, [pc, #152]	@ (8001950 <SystemInit+0xe4>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ba:	4b23      	ldr	r3, [pc, #140]	@ (8001948 <SystemInit+0xdc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018c6:	4b20      	ldr	r3, [pc, #128]	@ (8001948 <SystemInit+0xdc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 030f 	bic.w	r3, r3, #15
 80018ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001948 <SystemInit+0xdc>)
 80018d0:	f043 0303 	orr.w	r3, r3, #3
 80018d4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80018d6:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <SystemInit+0xe0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <SystemInit+0xe0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <SystemInit+0xe0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <SystemInit+0xe0>)
 80018ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001954 <SystemInit+0xe8>)
 80018ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018ee:	4b17      	ldr	r3, [pc, #92]	@ (800194c <SystemInit+0xe0>)
 80018f0:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <SystemInit+0xec>)
 80018f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018f4:	4b15      	ldr	r3, [pc, #84]	@ (800194c <SystemInit+0xe0>)
 80018f6:	4a19      	ldr	r2, [pc, #100]	@ (800195c <SystemInit+0xf0>)
 80018f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <SystemInit+0xe0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <SystemInit+0xe0>)
 8001902:	4a16      	ldr	r2, [pc, #88]	@ (800195c <SystemInit+0xf0>)
 8001904:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001906:	4b11      	ldr	r3, [pc, #68]	@ (800194c <SystemInit+0xe0>)
 8001908:	2200      	movs	r2, #0
 800190a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <SystemInit+0xe0>)
 800190e:	4a13      	ldr	r2, [pc, #76]	@ (800195c <SystemInit+0xf0>)
 8001910:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <SystemInit+0xe0>)
 8001914:	2200      	movs	r2, #0
 8001916:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <SystemInit+0xe0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0b      	ldr	r2, [pc, #44]	@ (800194c <SystemInit+0xe0>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001922:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001924:	4b09      	ldr	r3, [pc, #36]	@ (800194c <SystemInit+0xe0>)
 8001926:	2200      	movs	r2, #0
 8001928:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <SystemInit+0xf4>)
 800192c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001930:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <SystemInit+0xd8>)
 8001934:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001938:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	52002000 	.word	0x52002000
 800194c:	58024400 	.word	0x58024400
 8001950:	eaf6ed7f 	.word	0xeaf6ed7f
 8001954:	02020200 	.word	0x02020200
 8001958:	01ff0000 	.word	0x01ff0000
 800195c:	01010280 	.word	0x01010280
 8001960:	52004000 	.word	0x52004000

08001964 <TF_3V3>:
#include "transfer_functions.h"
#include "functions.h"
#include "main.h"
#include "config.h"

uint16_t TF_3V3(uint8_t bytes, uint32_t raw){
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 3300;
 8001970:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001974:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	fb03 f202 	mul.w	r2, r3, r2
 800197e:	4b07      	ldr	r3, [pc, #28]	@ (800199c <TF_3V3+0x38>)
 8001980:	fba3 1302 	umull	r1, r3, r3, r2
 8001984:	1ad2      	subs	r2, r2, r3
 8001986:	0852      	lsrs	r2, r2, #1
 8001988:	4413      	add	r3, r2
 800198a:	0adb      	lsrs	r3, r3, #11
 800198c:	81bb      	strh	r3, [r7, #12]
	return voltage;
 800198e:	89bb      	ldrh	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	00100101 	.word	0x00100101

080019a0 <TF_BPPS>:
	uint16_t max_volt = 24000;

	uint16_t voltage = raw*max_volt / 4095;
	return voltage;
}
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw){ //brake pedal position sensor
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 80019ac:	2364      	movs	r3, #100	@ 0x64
 80019ae:	81fb      	strh	r3, [r7, #14]
	uint16_t min_raw = 1538;
 80019b0:	f240 6302 	movw	r3, #1538	@ 0x602
 80019b4:	81bb      	strh	r3, [r7, #12]
	uint16_t max_raw = 3880;
 80019b6:	f640 7328 	movw	r3, #3880	@ 0xf28
 80019ba:	817b      	strh	r3, [r7, #10]

	if(raw > min_raw){
 80019bc:	89bb      	ldrh	r3, [r7, #12]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d90d      	bls.n	80019e0 <TF_BPPS+0x40>
		uint16_t bpps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 80019c4:	89bb      	ldrh	r3, [r7, #12]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	89fa      	ldrh	r2, [r7, #14]
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	8979      	ldrh	r1, [r7, #10]
 80019d2:	89ba      	ldrh	r2, [r7, #12]
 80019d4:	1a8a      	subs	r2, r1, r2
 80019d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80019da:	813b      	strh	r3, [r7, #8]
		return bpps;
 80019dc:	893b      	ldrh	r3, [r7, #8]
 80019de:	e000      	b.n	80019e2 <TF_BPPS+0x42>
	}
	return 0;
 80019e0:	2300      	movs	r3, #0

}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <TF_APPS1>:
uint16_t TF_APPS1(uint8_t bytes, uint32_t raw){
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	6039      	str	r1, [r7, #0]
 80019f8:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 80019fa:	2364      	movs	r3, #100	@ 0x64
 80019fc:	81fb      	strh	r3, [r7, #14]
	uint16_t min_raw = 650;
 80019fe:	f240 238a 	movw	r3, #650	@ 0x28a
 8001a02:	81bb      	strh	r3, [r7, #12]
	uint16_t max_raw = 1990;
 8001a04:	f240 73c6 	movw	r3, #1990	@ 0x7c6
 8001a08:	817b      	strh	r3, [r7, #10]

	if(raw > min_raw){
 8001a0a:	89bb      	ldrh	r3, [r7, #12]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d90d      	bls.n	8001a2e <TF_APPS1+0x40>
		uint16_t apps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 8001a12:	89bb      	ldrh	r3, [r7, #12]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	89fa      	ldrh	r2, [r7, #14]
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	8979      	ldrh	r1, [r7, #10]
 8001a20:	89ba      	ldrh	r2, [r7, #12]
 8001a22:	1a8a      	subs	r2, r1, r2
 8001a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a28:	813b      	strh	r3, [r7, #8]
		return apps;
 8001a2a:	893b      	ldrh	r3, [r7, #8]
 8001a2c:	e000      	b.n	8001a30 <TF_APPS1+0x42>
	}
	return 0;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <TF_APPS2>:

uint16_t TF_APPS2(uint8_t bytes, uint32_t raw){
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 8001a48:	2364      	movs	r3, #100	@ 0x64
 8001a4a:	81fb      	strh	r3, [r7, #14]
	uint16_t min_raw = 690;
 8001a4c:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8001a50:	81bb      	strh	r3, [r7, #12]
	uint16_t max_raw = 2130;
 8001a52:	f640 0352 	movw	r3, #2130	@ 0x852
 8001a56:	817b      	strh	r3, [r7, #10]

	if(raw > min_raw){
 8001a58:	89bb      	ldrh	r3, [r7, #12]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d90d      	bls.n	8001a7c <TF_APPS2+0x40>
		uint16_t apps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 8001a60:	89bb      	ldrh	r3, [r7, #12]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	89fa      	ldrh	r2, [r7, #14]
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	8979      	ldrh	r1, [r7, #10]
 8001a6e:	89ba      	ldrh	r2, [r7, #12]
 8001a70:	1a8a      	subs	r2, r1, r2
 8001a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a76:	813b      	strh	r3, [r7, #8]
		return apps;
 8001a78:	893b      	ldrh	r3, [r7, #8]
 8001a7a:	e000      	b.n	8001a7e <TF_APPS2+0x42>
	}
	return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <TF_BTN>:

uint16_t TF_BTN(uint8_t bytes, uint32_t raw){
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]
		uint16_t max_volt = 5000;
 8001a98:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a9c:	81fb      	strh	r3, [r7, #14]

		uint16_t voltage = raw*max_volt / 4095;
 8001a9e:	89fb      	ldrh	r3, [r7, #14]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	fb03 f202 	mul.w	r2, r3, r2
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <TF_BTN+0x48>)
 8001aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8001aac:	1ad2      	subs	r2, r2, r3
 8001aae:	0852      	lsrs	r2, r2, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	0adb      	lsrs	r3, r3, #11
 8001ab4:	81bb      	strh	r3, [r7, #12]

		if(voltage < 3000)
 8001ab6:	89bb      	ldrh	r3, [r7, #12]
 8001ab8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d801      	bhi.n	8001ac4 <TF_BTN+0x38>
			return 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e000      	b.n	8001ac6 <TF_BTN+0x3a>
		else
			return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	00100101 	.word	0x00100101

08001ad8 <Reset_Handler>:
 8001ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b10 <LoopFillZerobss+0xe>
 8001adc:	f7ff fec6 	bl	800186c <SystemInit>
 8001ae0:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <LoopFillZerobss+0x12>)
 8001ae2:	490d      	ldr	r1, [pc, #52]	@ (8001b18 <LoopFillZerobss+0x16>)
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <LoopFillZerobss+0x1a>)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:
 8001aea:	58d4      	ldr	r4, [r2, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:
 8001af0:	18c4      	adds	r4, r0, r3
 8001af2:	428c      	cmp	r4, r1
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
 8001af6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <LoopFillZerobss+0x1e>)
 8001af8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b24 <LoopFillZerobss+0x22>)
 8001afa:	2300      	movs	r3, #0
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:
 8001b02:	42a2      	cmp	r2, r4
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>
 8001b06:	f009 fa17 	bl	800af38 <__libc_init_array>
 8001b0a:	f7fe fd79 	bl	8000600 <main>
 8001b0e:	4770      	bx	lr
 8001b10:	24100000 	.word	0x24100000
 8001b14:	24000000 	.word	0x24000000
 8001b18:	24000010 	.word	0x24000010
 8001b1c:	0800b030 	.word	0x0800b030
 8001b20:	24000010 	.word	0x24000010
 8001b24:	2400093c 	.word	0x2400093c

08001b28 <ADC_IRQHandler>:
 8001b28:	e7fe      	b.n	8001b28 <ADC_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b32:	2003      	movs	r0, #3
 8001b34:	f001 faf0 	bl	8003118 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b38:	f005 ff3a 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <HAL_Init+0x68>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	4913      	ldr	r1, [pc, #76]	@ (8001b98 <HAL_Init+0x6c>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
 8001b54:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b56:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <HAL_Init+0x68>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b98 <HAL_Init+0x6c>)
 8001b60:	5cd3      	ldrb	r3, [r2, r3]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b9c <HAL_Init+0x70>)
 8001b6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b70:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba0 <HAL_Init+0x74>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b76:	200f      	movs	r0, #15
 8001b78:	f000 f814 	bl	8001ba4 <HAL_InitTick>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e002      	b.n	8001b8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b86:	f7ff fad5 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58024400 	.word	0x58024400
 8001b98:	0800b000 	.word	0x0800b000
 8001b9c:	24000004 	.word	0x24000004
 8001ba0:	24000000 	.word	0x24000000

08001ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <HAL_InitTick+0x60>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e021      	b.n	8001bfc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bb8:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <HAL_InitTick+0x64>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <HAL_InitTick+0x60>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 fad5 	bl	800317e <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f001 fa9f 	bl	800312e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <HAL_InitTick+0x68>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2400000c 	.word	0x2400000c
 8001c08:	24000000 	.word	0x24000000
 8001c0c:	24000008 	.word	0x24000008

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2400000c 	.word	0x2400000c
 8001c34:	24000938 	.word	0x24000938

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	24000938 	.word	0x24000938

08001c50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	609a      	str	r2, [r3, #8]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3360      	adds	r3, #96	@ 0x60
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001cec:	bf00      	nop
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b087      	sub	sp, #28
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3360      	adds	r3, #96	@ 0x60
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	601a      	str	r2, [r3, #0]
  }
}
 8001d54:	bf00      	nop
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b087      	sub	sp, #28
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3330      	adds	r3, #48	@ 0x30
 8001d96:	461a      	mov	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	4413      	add	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	211f      	movs	r1, #31
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	401a      	ands	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0e9b      	lsrs	r3, r3, #26
 8001dbe:	f003 011f 	and.w	r1, r3, #31
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dd2:	bf00      	nop
 8001dd4:	371c      	adds	r7, #28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f023 0203 	bic.w	r2, r3, #3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	3314      	adds	r3, #20
 8001e14:	461a      	mov	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	0e5b      	lsrs	r3, r3, #25
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	0d1b      	lsrs	r3, r3, #20
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2107      	movs	r1, #7
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	401a      	ands	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	0d1b      	lsrs	r3, r3, #20
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e4e:	bf00      	nop
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e74:	43db      	mvns	r3, r3
 8001e76:	401a      	ands	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0318 	and.w	r3, r3, #24
 8001e7e:	4908      	ldr	r1, [pc, #32]	@ (8001ea0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e80:	40d9      	lsrs	r1, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	400b      	ands	r3, r1
 8001e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	000fffff 	.word	0x000fffff

08001ea4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6093      	str	r3, [r2, #8]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	5fffffc0 	.word	0x5fffffc0

08001ee4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	6fffffc0 	.word	0x6fffffc0

08001f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <LL_ADC_Enable+0x24>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	7fffffc0 	.word	0x7fffffc0

08001f84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <LL_ADC_IsEnabled+0x18>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <LL_ADC_IsEnabled+0x1a>
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <LL_ADC_REG_StartConversion+0x24>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	7fffffc0 	.word	0x7fffffc0

08001fd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d101      	bne.n	8001fec <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b08      	cmp	r3, #8
 800200c:	d101      	bne.n	8002012 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b089      	sub	sp, #36	@ 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e138      	b.n	80022ac <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff f893 	bl	8001174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff3f 	bl	8001ee4 <LL_ADC_IsDeepPowerDownEnabled>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff25 	bl	8001ec0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff5a 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d114      	bne.n	80020b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff3e 	bl	8001f0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002090:	4b88      	ldr	r3, [pc, #544]	@ (80022b4 <HAL_ADC_Init+0x294>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	4a88      	ldr	r2, [pc, #544]	@ (80022b8 <HAL_ADC_Init+0x298>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	3301      	adds	r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020a2:	e002      	b.n	80020aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f9      	bne.n	80020a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff3d 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10d      	bne.n	80020dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c4:	f043 0210 	orr.w	r2, r3, #16
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff77 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 80020e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 80d2 	bne.w	800229a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 80ce 	bne.w	800229a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002102:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002106:	f043 0202 	orr.w	r2, r3, #2
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff36 	bl	8001f84 <LL_ADC_IsEnabled>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d110      	bne.n	8002140 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800211e:	4867      	ldr	r0, [pc, #412]	@ (80022bc <HAL_ADC_Init+0x29c>)
 8002120:	f7ff ff30 	bl	8001f84 <LL_ADC_IsEnabled>
 8002124:	4604      	mov	r4, r0
 8002126:	4866      	ldr	r0, [pc, #408]	@ (80022c0 <HAL_ADC_Init+0x2a0>)
 8002128:	f7ff ff2c 	bl	8001f84 <LL_ADC_IsEnabled>
 800212c:	4603      	mov	r3, r0
 800212e:	4323      	orrs	r3, r4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4619      	mov	r1, r3
 800213a:	4862      	ldr	r0, [pc, #392]	@ (80022c4 <HAL_ADC_Init+0x2a4>)
 800213c:	f7ff fd88 	bl	8001c50 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7d5b      	ldrb	r3, [r3, #21]
 8002144:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800214a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002150:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7f1b      	ldrb	r3, [r3, #28]
 8002156:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7f1b      	ldrb	r3, [r3, #28]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d106      	bne.n	8002172 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	3b01      	subs	r3, #1
 800216a:	045b      	lsls	r3, r3, #17
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	4b4c      	ldr	r3, [pc, #304]	@ (80022c8 <HAL_ADC_Init+0x2a8>)
 8002196:	4013      	ands	r3, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	69b9      	ldr	r1, [r7, #24]
 800219e:	430b      	orrs	r3, r1
 80021a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff14 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 80021ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff21 	bl	8001ffa <LL_ADC_INJ_IsConversionOngoing>
 80021b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d14a      	bne.n	8002256 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d147      	bne.n	8002256 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7d1b      	ldrb	r3, [r3, #20]
 80021ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	4b3c      	ldr	r3, [pc, #240]	@ (80022cc <HAL_ADC_Init+0x2ac>)
 80021dc:	4013      	ands	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d11b      	bne.n	800222a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <HAL_ADC_Init+0x2b0>)
 8002200:	4013      	ands	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002206:	3a01      	subs	r2, #1
 8002208:	0411      	lsls	r1, r2, #16
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002214:	4311      	orrs	r1, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800221a:	430a      	orrs	r2, r1
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	611a      	str	r2, [r3, #16]
 8002228:	e007      	b.n	800223a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fd01 	bl	8002c58 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d10c      	bne.n	8002278 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	f023 010f 	bic.w	r1, r3, #15
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	1e5a      	subs	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	631a      	str	r2, [r3, #48]	@ 0x30
 8002276:	e007      	b.n	8002288 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 020f 	bic.w	r2, r2, #15
 8002286:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228c:	f023 0303 	bic.w	r3, r3, #3
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	655a      	str	r2, [r3, #84]	@ 0x54
 8002298:	e007      	b.n	80022aa <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229e:	f043 0210 	orr.w	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3724      	adds	r7, #36	@ 0x24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd90      	pop	{r4, r7, pc}
 80022b4:	24000000 	.word	0x24000000
 80022b8:	053e2d63 	.word	0x053e2d63
 80022bc:	40022000 	.word	0x40022000
 80022c0:	40022100 	.word	0x40022100
 80022c4:	40022300 	.word	0x40022300
 80022c8:	fff0c003 	.word	0xfff0c003
 80022cc:	ffffbffc 	.word	0xffffbffc
 80022d0:	fc00f81e 	.word	0xfc00f81e

080022d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022e0:	484f      	ldr	r0, [pc, #316]	@ (8002420 <HAL_ADC_Start_DMA+0x14c>)
 80022e2:	f7ff fddf 	bl	8001ea4 <LL_ADC_GetMultimode>
 80022e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fe71 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 808c 	bne.w	8002412 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_ADC_Start_DMA+0x34>
 8002304:	2302      	movs	r3, #2
 8002306:	e087      	b.n	8002418 <HAL_ADC_Start_DMA+0x144>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b05      	cmp	r3, #5
 800231a:	d002      	beq.n	8002322 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2b09      	cmp	r3, #9
 8002320:	d170      	bne.n	8002404 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fb88 	bl	8002a38 <ADC_Enable>
 8002328:	4603      	mov	r3, r0
 800232a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d163      	bne.n	80023fa <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002336:	4b3b      	ldr	r3, [pc, #236]	@ (8002424 <HAL_ADC_Start_DMA+0x150>)
 8002338:	4013      	ands	r3, r2
 800233a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a38      	ldr	r2, [pc, #224]	@ (8002428 <HAL_ADC_Start_DMA+0x154>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d002      	beq.n	8002352 <HAL_ADC_Start_DMA+0x7e>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	e000      	b.n	8002354 <HAL_ADC_Start_DMA+0x80>
 8002352:	4b36      	ldr	r3, [pc, #216]	@ (800242c <HAL_ADC_Start_DMA+0x158>)
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	4293      	cmp	r3, r2
 800235a:	d002      	beq.n	8002362 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002366:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	f023 0206 	bic.w	r2, r3, #6
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	659a      	str	r2, [r3, #88]	@ 0x58
 8002386:	e002      	b.n	800238e <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002392:	4a27      	ldr	r2, [pc, #156]	@ (8002430 <HAL_ADC_Start_DMA+0x15c>)
 8002394:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239a:	4a26      	ldr	r2, [pc, #152]	@ (8002434 <HAL_ADC_Start_DMA+0x160>)
 800239c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a2:	4a25      	ldr	r2, [pc, #148]	@ (8002438 <HAL_ADC_Start_DMA+0x164>)
 80023a4:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	221c      	movs	r2, #28
 80023ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0210 	orr.w	r2, r2, #16
 80023c4:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ce:	4619      	mov	r1, r3
 80023d0:	4610      	mov	r0, r2
 80023d2:	f7ff fd04 	bl	8001dde <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3340      	adds	r3, #64	@ 0x40
 80023e0:	4619      	mov	r1, r3
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f001 fa65 	bl	80038b4 <HAL_DMA_Start_IT>
 80023ea:	4603      	mov	r3, r0
 80023ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fdda 	bl	8001fac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80023f8:	e00d      	b.n	8002416 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002402:	e008      	b.n	8002416 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002410:	e001      	b.n	8002416 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002412:	2302      	movs	r3, #2
 8002414:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002416:	7dfb      	ldrb	r3, [r7, #23]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40022300 	.word	0x40022300
 8002424:	fffff0fe 	.word	0xfffff0fe
 8002428:	40022100 	.word	0x40022100
 800242c:	40022000 	.word	0x40022000
 8002430:	08002b31 	.word	0x08002b31
 8002434:	08002c09 	.word	0x08002c09
 8002438:	08002c25 	.word	0x08002c25

0800243c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b0a1      	sub	sp, #132	@ 0x84
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a95      	ldr	r2, [pc, #596]	@ (80026d4 <HAL_ADC_ConfigChannel+0x270>)
 800247e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x2a>
 800248a:	2302      	movs	r3, #2
 800248c:	e2c0      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x5ac>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fd9a 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 82a5 	bne.w	80029f2 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db2c      	blt.n	800250a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d108      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x6a>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	2201      	movs	r2, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	e016      	b.n	80024fc <HAL_ADC_ConfigChannel+0x98>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024de:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80024e6:	2320      	movs	r3, #32
 80024e8:	e003      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80024ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2201      	movs	r2, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	69d1      	ldr	r1, [r2, #28]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	430b      	orrs	r3, r1
 8002508:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	f7ff fc35 	bl	8001d86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fd57 	bl	8001fd4 <LL_ADC_REG_IsConversionOngoing>
 8002526:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fd64 	bl	8001ffa <LL_ADC_INJ_IsConversionOngoing>
 8002532:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 80a0 	bne.w	800267c <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800253c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 809c 	bne.w	800267c <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	461a      	mov	r2, r3
 8002552:	f7ff fc57 	bl	8001e04 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10b      	bne.n	800257c <HAL_ADC_ConfigChannel+0x118>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	e00a      	b.n	8002592 <HAL_ADC_ConfigChannel+0x12e>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b04      	cmp	r3, #4
 800259a:	d027      	beq.n	80025ec <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6919      	ldr	r1, [r3, #16]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025aa:	f7ff fb85 	bl	8001cb8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6919      	ldr	r1, [r3, #16]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	7e5b      	ldrb	r3, [r3, #25]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d102      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x160>
 80025be:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80025c2:	e000      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x162>
 80025c4:	2300      	movs	r3, #0
 80025c6:	461a      	mov	r2, r3
 80025c8:	f7ff fbaf 	bl	8001d2a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6919      	ldr	r1, [r3, #16]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	7e1b      	ldrb	r3, [r3, #24]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d102      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x17e>
 80025dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025e0:	e000      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x180>
 80025e2:	2300      	movs	r3, #0
 80025e4:	461a      	mov	r2, r3
 80025e6:	f7ff fb87 	bl	8001cf8 <LL_ADC_SetDataRightShift>
 80025ea:	e047      	b.n	800267c <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	069b      	lsls	r3, r3, #26
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d107      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800260e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002616:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	069b      	lsls	r3, r3, #26
 8002620:	429a      	cmp	r2, r3
 8002622:	d107      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002632:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800263a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	069b      	lsls	r3, r3, #26
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002656:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800265e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	069b      	lsls	r3, r3, #26
 8002668:	429a      	cmp	r2, r3
 800266a:	d107      	bne.n	800267c <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800267a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fc7f 	bl	8001f84 <LL_ADC_IsEnabled>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 81bb 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	461a      	mov	r2, r3
 800269c:	f7ff fbde 	bl	8001e5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a0b      	ldr	r2, [pc, #44]	@ (80026d4 <HAL_ADC_ConfigChannel+0x270>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	f040 8130 	bne.w	800290c <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10d      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x274>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	3301      	adds	r3, #1
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2b09      	cmp	r3, #9
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e01b      	b.n	800270c <HAL_ADC_ConfigChannel+0x2a8>
 80026d4:	47ff0000 	.word	0x47ff0000
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e003      	b.n	80026fc <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 80026f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2b09      	cmp	r3, #9
 8002704:	bf94      	ite	ls
 8002706:	2301      	movls	r3, #1
 8002708:	2300      	movhi	r3, #0
 800270a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800270c:	2b00      	cmp	r3, #0
 800270e:	d079      	beq.n	8002804 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <HAL_ADC_ConfigChannel+0x2c8>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	3301      	adds	r3, #1
 8002724:	069b      	lsls	r3, r3, #26
 8002726:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800272a:	e015      	b.n	8002758 <HAL_ADC_ConfigChannel+0x2f4>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800273a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800273c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800273e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002744:	2320      	movs	r3, #32
 8002746:	e003      	b.n	8002750 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3301      	adds	r3, #1
 8002752:	069b      	lsls	r3, r3, #26
 8002754:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x314>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0e9b      	lsrs	r3, r3, #26
 800276a:	3301      	adds	r3, #1
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	e017      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x344>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002788:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800278a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002790:	2320      	movs	r3, #32
 8002792:	e003      	b.n	800279c <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	ea42 0103 	orr.w	r1, r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x36a>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	3301      	adds	r3, #1
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	051b      	lsls	r3, r3, #20
 80027cc:	e018      	b.n	8002800 <HAL_ADC_ConfigChannel+0x39c>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e003      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80027ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002800:	430b      	orrs	r3, r1
 8002802:	e07e      	b.n	8002902 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x3bc>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	3301      	adds	r3, #1
 8002818:	069b      	lsls	r3, r3, #26
 800281a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800281e:	e015      	b.n	800284c <HAL_ADC_ConfigChannel+0x3e8>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e003      	b.n	8002844 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 800283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	3301      	adds	r3, #1
 8002846:	069b      	lsls	r3, r3, #26
 8002848:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_ADC_ConfigChannel+0x408>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	3301      	adds	r3, #1
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	e017      	b.n	800289c <HAL_ADC_ConfigChannel+0x438>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	61bb      	str	r3, [r7, #24]
  return result;
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e003      	b.n	8002890 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	3301      	adds	r3, #1
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	ea42 0103 	orr.w	r1, r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x464>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	3301      	adds	r3, #1
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	3b1e      	subs	r3, #30
 80028c0:	051b      	lsls	r3, r3, #20
 80028c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028c6:	e01b      	b.n	8002900 <HAL_ADC_ConfigChannel+0x49c>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	60fb      	str	r3, [r7, #12]
  return result;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	e003      	b.n	80028ec <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f003 021f 	and.w	r2, r3, #31
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	3b1e      	subs	r3, #30
 80028fa:	051b      	lsls	r3, r3, #20
 80028fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002900:	430b      	orrs	r3, r1
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	6892      	ldr	r2, [r2, #8]
 8002906:	4619      	mov	r1, r3
 8002908:	f7ff fa7c 	bl	8001e04 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	da77      	bge.n	8002a04 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002914:	4840      	ldr	r0, [pc, #256]	@ (8002a18 <HAL_ADC_ConfigChannel+0x5b4>)
 8002916:	f7ff f9c1 	bl	8001c9c <LL_ADC_GetCommonPathInternalCh>
 800291a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800291c:	483f      	ldr	r0, [pc, #252]	@ (8002a1c <HAL_ADC_ConfigChannel+0x5b8>)
 800291e:	f7ff fb31 	bl	8001f84 <LL_ADC_IsEnabled>
 8002922:	4604      	mov	r4, r0
 8002924:	483e      	ldr	r0, [pc, #248]	@ (8002a20 <HAL_ADC_ConfigChannel+0x5bc>)
 8002926:	f7ff fb2d 	bl	8001f84 <LL_ADC_IsEnabled>
 800292a:	4603      	mov	r3, r0
 800292c:	4323      	orrs	r3, r4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d155      	bne.n	80029de <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3b      	ldr	r2, [pc, #236]	@ (8002a24 <HAL_ADC_ConfigChannel+0x5c0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d122      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x51e>
 800293c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800293e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d11d      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a35      	ldr	r2, [pc, #212]	@ (8002a20 <HAL_ADC_ConfigChannel+0x5bc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d159      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002952:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002956:	4619      	mov	r1, r3
 8002958:	482f      	ldr	r0, [pc, #188]	@ (8002a18 <HAL_ADC_ConfigChannel+0x5b4>)
 800295a:	f7ff f98c 	bl	8001c76 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800295e:	4b32      	ldr	r3, [pc, #200]	@ (8002a28 <HAL_ADC_ConfigChannel+0x5c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	4a31      	ldr	r2, [pc, #196]	@ (8002a2c <HAL_ADC_ConfigChannel+0x5c8>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	3301      	adds	r3, #1
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002972:	e002      	b.n	800297a <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	3b01      	subs	r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f9      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002980:	e040      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a2a      	ldr	r2, [pc, #168]	@ (8002a30 <HAL_ADC_ConfigChannel+0x5cc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d111      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x54c>
 800298c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800298e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a21      	ldr	r2, [pc, #132]	@ (8002a20 <HAL_ADC_ConfigChannel+0x5bc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d131      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80029a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029a6:	4619      	mov	r1, r3
 80029a8:	481b      	ldr	r0, [pc, #108]	@ (8002a18 <HAL_ADC_ConfigChannel+0x5b4>)
 80029aa:	f7ff f964 	bl	8001c76 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029ae:	e029      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a34 <HAL_ADC_ConfigChannel+0x5d0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d124      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x5a0>
 80029ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d11f      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a15      	ldr	r2, [pc, #84]	@ (8002a20 <HAL_ADC_ConfigChannel+0x5bc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d11a      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80029ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029d4:	4619      	mov	r1, r3
 80029d6:	4810      	ldr	r0, [pc, #64]	@ (8002a18 <HAL_ADC_ConfigChannel+0x5b4>)
 80029d8:	f7ff f94d 	bl	8001c76 <LL_ADC_SetCommonPathInternalCh>
 80029dc:	e012      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80029f0:	e008      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3784      	adds	r7, #132	@ 0x84
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd90      	pop	{r4, r7, pc}
 8002a18:	40022300 	.word	0x40022300
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	40022100 	.word	0x40022100
 8002a24:	cb840000 	.word	0xcb840000
 8002a28:	24000000 	.word	0x24000000
 8002a2c:	053e2d63 	.word	0x053e2d63
 8002a30:	bac04000 	.word	0xbac04000
 8002a34:	cfb80000 	.word	0xcfb80000

08002a38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fa9d 	bl	8001f84 <LL_ADC_IsEnabled>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d161      	bne.n	8002b14 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	4b32      	ldr	r3, [pc, #200]	@ (8002b20 <ADC_Enable+0xe8>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00d      	beq.n	8002a7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	f043 0210 	orr.w	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e04d      	b.n	8002b16 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fa6c 	bl	8001f5c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a84:	f7ff f8d8 	bl	8001c38 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a8a:	4826      	ldr	r0, [pc, #152]	@ (8002b24 <ADC_Enable+0xec>)
 8002a8c:	f7ff fa0a 	bl	8001ea4 <LL_ADC_GetMultimode>
 8002a90:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a24      	ldr	r2, [pc, #144]	@ (8002b28 <ADC_Enable+0xf0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d002      	beq.n	8002aa2 <ADC_Enable+0x6a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	e000      	b.n	8002aa4 <ADC_Enable+0x6c>
 8002aa2:	4b22      	ldr	r3, [pc, #136]	@ (8002b2c <ADC_Enable+0xf4>)
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d02c      	beq.n	8002b06 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d130      	bne.n	8002b14 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ab2:	e028      	b.n	8002b06 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fa63 	bl	8001f84 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fa47 	bl	8001f5c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ace:	f7ff f8b3 	bl	8001c38 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d914      	bls.n	8002b06 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d00d      	beq.n	8002b06 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aee:	f043 0210 	orr.w	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e007      	b.n	8002b16 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d1cf      	bne.n	8002ab4 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	8000003f 	.word	0x8000003f
 8002b24:	40022300 	.word	0x40022300
 8002b28:	40022100 	.word	0x40022100
 8002b2c:	40022000 	.word	0x40022000

08002b30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d14b      	bne.n	8002be2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d021      	beq.n	8002ba8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff f8f9 	bl	8001d60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d032      	beq.n	8002bda <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d12b      	bne.n	8002bda <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11f      	bne.n	8002bda <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9e:	f043 0201 	orr.w	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ba6:	e018      	b.n	8002bda <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d111      	bne.n	8002bda <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d105      	bne.n	8002bda <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7fe fa2a 	bl	8001034 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002be0:	e00e      	b.n	8002c00 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f7ff fc2e 	bl	8002450 <HAL_ADC_ErrorCallback>
}
 8002bf4:	e004      	b.n	8002c00 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff fc10 	bl	800243c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c1c:	bf00      	nop
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c42:	f043 0204 	orr.w	r2, r3, #4
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f7ff fc00 	bl	8002450 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c60:	4b60      	ldr	r3, [pc, #384]	@ (8002de4 <ADC_ConfigureBoostMode+0x18c>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01c      	beq.n	8002ca6 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002c6c:	f005 f81a 	bl	8007ca4 <HAL_RCC_GetHCLKFreq>
 8002c70:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c7a:	d010      	beq.n	8002c9e <ADC_ConfigureBoostMode+0x46>
 8002c7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c80:	d873      	bhi.n	8002d6a <ADC_ConfigureBoostMode+0x112>
 8002c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c86:	d002      	beq.n	8002c8e <ADC_ConfigureBoostMode+0x36>
 8002c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c8c:	d16d      	bne.n	8002d6a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	0c1b      	lsrs	r3, r3, #16
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
        break;
 8002c9c:	e068      	b.n	8002d70 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	60fb      	str	r3, [r7, #12]
        break;
 8002ca4:	e064      	b.n	8002d70 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002ca6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	f006 f9fd 	bl	80090ac <HAL_RCCEx_GetPeriphCLKFreq>
 8002cb2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002cbc:	d051      	beq.n	8002d62 <ADC_ConfigureBoostMode+0x10a>
 8002cbe:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002cc2:	d854      	bhi.n	8002d6e <ADC_ConfigureBoostMode+0x116>
 8002cc4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002cc8:	d047      	beq.n	8002d5a <ADC_ConfigureBoostMode+0x102>
 8002cca:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002cce:	d84e      	bhi.n	8002d6e <ADC_ConfigureBoostMode+0x116>
 8002cd0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002cd4:	d03d      	beq.n	8002d52 <ADC_ConfigureBoostMode+0xfa>
 8002cd6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002cda:	d848      	bhi.n	8002d6e <ADC_ConfigureBoostMode+0x116>
 8002cdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ce0:	d033      	beq.n	8002d4a <ADC_ConfigureBoostMode+0xf2>
 8002ce2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ce6:	d842      	bhi.n	8002d6e <ADC_ConfigureBoostMode+0x116>
 8002ce8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002cec:	d029      	beq.n	8002d42 <ADC_ConfigureBoostMode+0xea>
 8002cee:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002cf2:	d83c      	bhi.n	8002d6e <ADC_ConfigureBoostMode+0x116>
 8002cf4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002cf8:	d01a      	beq.n	8002d30 <ADC_ConfigureBoostMode+0xd8>
 8002cfa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002cfe:	d836      	bhi.n	8002d6e <ADC_ConfigureBoostMode+0x116>
 8002d00:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002d04:	d014      	beq.n	8002d30 <ADC_ConfigureBoostMode+0xd8>
 8002d06:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002d0a:	d830      	bhi.n	8002d6e <ADC_ConfigureBoostMode+0x116>
 8002d0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d10:	d00e      	beq.n	8002d30 <ADC_ConfigureBoostMode+0xd8>
 8002d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d16:	d82a      	bhi.n	8002d6e <ADC_ConfigureBoostMode+0x116>
 8002d18:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d1c:	d008      	beq.n	8002d30 <ADC_ConfigureBoostMode+0xd8>
 8002d1e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d22:	d824      	bhi.n	8002d6e <ADC_ConfigureBoostMode+0x116>
 8002d24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d28:	d002      	beq.n	8002d30 <ADC_ConfigureBoostMode+0xd8>
 8002d2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d2e:	d11e      	bne.n	8002d6e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	0c9b      	lsrs	r3, r3, #18
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	60fb      	str	r3, [r7, #12]
        break;
 8002d40:	e016      	b.n	8002d70 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
        break;
 8002d48:	e012      	b.n	8002d70 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	60fb      	str	r3, [r7, #12]
        break;
 8002d50:	e00e      	b.n	8002d70 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	60fb      	str	r3, [r7, #12]
        break;
 8002d58:	e00a      	b.n	8002d70 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	09db      	lsrs	r3, r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]
        break;
 8002d60:	e006      	b.n	8002d70 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	60fb      	str	r3, [r7, #12]
        break;
 8002d68:	e002      	b.n	8002d70 <ADC_ConfigureBoostMode+0x118>
        break;
 8002d6a:	bf00      	nop
 8002d6c:	e000      	b.n	8002d70 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002d6e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a1b      	ldr	r2, [pc, #108]	@ (8002de8 <ADC_ConfigureBoostMode+0x190>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d808      	bhi.n	8002d90 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002d8c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d8e:	e025      	b.n	8002ddc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a16      	ldr	r2, [pc, #88]	@ (8002dec <ADC_ConfigureBoostMode+0x194>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d80a      	bhi.n	8002dae <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	e016      	b.n	8002ddc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4a0f      	ldr	r2, [pc, #60]	@ (8002df0 <ADC_ConfigureBoostMode+0x198>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d80a      	bhi.n	8002dcc <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc8:	609a      	str	r2, [r3, #8]
}
 8002dca:	e007      	b.n	8002ddc <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002dda:	609a      	str	r2, [r3, #8]
}
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40022300 	.word	0x40022300
 8002de8:	005f5e10 	.word	0x005f5e10
 8002dec:	00bebc20 	.word	0x00bebc20
 8002df0:	017d7840 	.word	0x017d7840

08002df4 <LL_ADC_IsEnabled>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <LL_ADC_IsEnabled+0x18>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <LL_ADC_IsEnabled+0x1a>
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_ADC_REG_IsConversionOngoing>:
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d101      	bne.n	8002e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b09f      	sub	sp, #124	@ 0x7c
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e080      	b.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a3d      	ldr	r2, [pc, #244]	@ (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d102      	bne.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e78:	4b3c      	ldr	r3, [pc, #240]	@ (8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	e001      	b.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e05f      	b.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ffb9 	bl	8002e1a <LL_ADC_REG_IsConversionOngoing>
 8002ea8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ffb3 	bl	8002e1a <LL_ADC_REG_IsConversionOngoing>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d141      	bne.n	8002f3e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002eba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d13e      	bne.n	8002f3e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002ec2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002edc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ede:	4822      	ldr	r0, [pc, #136]	@ (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ee0:	f7ff ff88 	bl	8002df4 <LL_ADC_IsEnabled>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	4821      	ldr	r0, [pc, #132]	@ (8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002ee8:	f7ff ff84 	bl	8002df4 <LL_ADC_IsEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4323      	orrs	r3, r4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d12e      	bne.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	6811      	ldr	r1, [r2, #0]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	6892      	ldr	r2, [r2, #8]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	431a      	orrs	r2, r3
 8002f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f0a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f0c:	e021      	b.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f18:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f1a:	4813      	ldr	r0, [pc, #76]	@ (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f1c:	f7ff ff6a 	bl	8002df4 <LL_ADC_IsEnabled>
 8002f20:	4604      	mov	r4, r0
 8002f22:	4812      	ldr	r0, [pc, #72]	@ (8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f24:	f7ff ff66 	bl	8002df4 <LL_ADC_IsEnabled>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4323      	orrs	r3, r4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d110      	bne.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f3a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f3c:	e009      	b.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002f50:	e000      	b.n	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f52:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f5c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	377c      	adds	r7, #124	@ 0x7c
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40022100 	.word	0x40022100
 8002f70:	40022300 	.word	0x40022300
 8002f74:	fffff0e0 	.word	0xfffff0e0

08002f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fa0:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00
 8002fbc:	05fa0000 	.word	0x05fa0000

08002fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc4:	4b04      	ldr	r3, [pc, #16]	@ (8002fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 0307 	and.w	r3, r3, #7
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	db0b      	blt.n	8003006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	4907      	ldr	r1, [pc, #28]	@ (8003014 <__NVIC_EnableIRQ+0x38>)
 8002ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000e100 	.word	0xe000e100

08003018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db0a      	blt.n	8003042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	490c      	ldr	r1, [pc, #48]	@ (8003064 <__NVIC_SetPriority+0x4c>)
 8003032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	440b      	add	r3, r1
 800303c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003040:	e00a      	b.n	8003058 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4908      	ldr	r1, [pc, #32]	@ (8003068 <__NVIC_SetPriority+0x50>)
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	3b04      	subs	r3, #4
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	440b      	add	r3, r1
 8003056:	761a      	strb	r2, [r3, #24]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	@ 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f1c3 0307 	rsb	r3, r3, #7
 8003086:	2b04      	cmp	r3, #4
 8003088:	bf28      	it	cs
 800308a:	2304      	movcs	r3, #4
 800308c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3304      	adds	r3, #4
 8003092:	2b06      	cmp	r3, #6
 8003094:	d902      	bls.n	800309c <NVIC_EncodePriority+0x30>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3b03      	subs	r3, #3
 800309a:	e000      	b.n	800309e <NVIC_EncodePriority+0x32>
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	401a      	ands	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b4:	f04f 31ff 	mov.w	r1, #4294967295
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43d9      	mvns	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	4313      	orrs	r3, r2
         );
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	@ 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030e4:	d301      	bcc.n	80030ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00f      	b.n	800310a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003114 <SysTick_Config+0x40>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f2:	210f      	movs	r1, #15
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	f7ff ff8e 	bl	8003018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <SysTick_Config+0x40>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003102:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <SysTick_Config+0x40>)
 8003104:	2207      	movs	r2, #7
 8003106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	e000e010 	.word	0xe000e010

08003118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ff29 	bl	8002f78 <__NVIC_SetPriorityGrouping>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800313c:	f7ff ff40 	bl	8002fc0 <__NVIC_GetPriorityGrouping>
 8003140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff ff90 	bl	800306c <NVIC_EncodePriority>
 800314c:	4602      	mov	r2, r0
 800314e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff5f 	bl	8003018 <__NVIC_SetPriority>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800316c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff33 	bl	8002fdc <__NVIC_EnableIRQ>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffa4 	bl	80030d4 <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7fe fd4a 	bl	8001c38 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e37d      	b.n	80038ac <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a66      	ldr	r2, [pc, #408]	@ (8003350 <HAL_DMA_Init+0x1b8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d04a      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a65      	ldr	r2, [pc, #404]	@ (8003354 <HAL_DMA_Init+0x1bc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d045      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a63      	ldr	r2, [pc, #396]	@ (8003358 <HAL_DMA_Init+0x1c0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d040      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a62      	ldr	r2, [pc, #392]	@ (800335c <HAL_DMA_Init+0x1c4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d03b      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a60      	ldr	r2, [pc, #384]	@ (8003360 <HAL_DMA_Init+0x1c8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d036      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003364 <HAL_DMA_Init+0x1cc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d031      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003368 <HAL_DMA_Init+0x1d0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d02c      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a5c      	ldr	r2, [pc, #368]	@ (800336c <HAL_DMA_Init+0x1d4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d027      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a5a      	ldr	r2, [pc, #360]	@ (8003370 <HAL_DMA_Init+0x1d8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a59      	ldr	r2, [pc, #356]	@ (8003374 <HAL_DMA_Init+0x1dc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d01d      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a57      	ldr	r2, [pc, #348]	@ (8003378 <HAL_DMA_Init+0x1e0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d018      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a56      	ldr	r2, [pc, #344]	@ (800337c <HAL_DMA_Init+0x1e4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a54      	ldr	r2, [pc, #336]	@ (8003380 <HAL_DMA_Init+0x1e8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a53      	ldr	r2, [pc, #332]	@ (8003384 <HAL_DMA_Init+0x1ec>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a51      	ldr	r2, [pc, #324]	@ (8003388 <HAL_DMA_Init+0x1f0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a50      	ldr	r2, [pc, #320]	@ (800338c <HAL_DMA_Init+0x1f4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d101      	bne.n	8003254 <HAL_DMA_Init+0xbc>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_DMA_Init+0xbe>
 8003254:	2300      	movs	r3, #0
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 813c 	beq.w	80034d4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a37      	ldr	r2, [pc, #220]	@ (8003350 <HAL_DMA_Init+0x1b8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d04a      	beq.n	800330c <HAL_DMA_Init+0x174>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a36      	ldr	r2, [pc, #216]	@ (8003354 <HAL_DMA_Init+0x1bc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d045      	beq.n	800330c <HAL_DMA_Init+0x174>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a34      	ldr	r2, [pc, #208]	@ (8003358 <HAL_DMA_Init+0x1c0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d040      	beq.n	800330c <HAL_DMA_Init+0x174>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a33      	ldr	r2, [pc, #204]	@ (800335c <HAL_DMA_Init+0x1c4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d03b      	beq.n	800330c <HAL_DMA_Init+0x174>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a31      	ldr	r2, [pc, #196]	@ (8003360 <HAL_DMA_Init+0x1c8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d036      	beq.n	800330c <HAL_DMA_Init+0x174>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <HAL_DMA_Init+0x1cc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d031      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003368 <HAL_DMA_Init+0x1d0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02c      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2d      	ldr	r2, [pc, #180]	@ (800336c <HAL_DMA_Init+0x1d4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d027      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003370 <HAL_DMA_Init+0x1d8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d022      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003374 <HAL_DMA_Init+0x1dc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d01d      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a28      	ldr	r2, [pc, #160]	@ (8003378 <HAL_DMA_Init+0x1e0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d018      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a27      	ldr	r2, [pc, #156]	@ (800337c <HAL_DMA_Init+0x1e4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a25      	ldr	r2, [pc, #148]	@ (8003380 <HAL_DMA_Init+0x1e8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00e      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a24      	ldr	r2, [pc, #144]	@ (8003384 <HAL_DMA_Init+0x1ec>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a22      	ldr	r2, [pc, #136]	@ (8003388 <HAL_DMA_Init+0x1f0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_DMA_Init+0x174>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a21      	ldr	r2, [pc, #132]	@ (800338c <HAL_DMA_Init+0x1f4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <HAL_DMA_Init+0x186>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e007      	b.n	800332e <HAL_DMA_Init+0x196>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800332e:	e02f      	b.n	8003390 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003330:	f7fe fc82 	bl	8001c38 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b05      	cmp	r3, #5
 800333c:	d928      	bls.n	8003390 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2203      	movs	r2, #3
 8003348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e2ad      	b.n	80038ac <HAL_DMA_Init+0x714>
 8003350:	40020010 	.word	0x40020010
 8003354:	40020028 	.word	0x40020028
 8003358:	40020040 	.word	0x40020040
 800335c:	40020058 	.word	0x40020058
 8003360:	40020070 	.word	0x40020070
 8003364:	40020088 	.word	0x40020088
 8003368:	400200a0 	.word	0x400200a0
 800336c:	400200b8 	.word	0x400200b8
 8003370:	40020410 	.word	0x40020410
 8003374:	40020428 	.word	0x40020428
 8003378:	40020440 	.word	0x40020440
 800337c:	40020458 	.word	0x40020458
 8003380:	40020470 	.word	0x40020470
 8003384:	40020488 	.word	0x40020488
 8003388:	400204a0 	.word	0x400204a0
 800338c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1c8      	bne.n	8003330 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4b73      	ldr	r3, [pc, #460]	@ (8003578 <HAL_DMA_Init+0x3e0>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d107      	bne.n	80033f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	4313      	orrs	r3, r2
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b28      	cmp	r3, #40	@ 0x28
 80033fa:	d903      	bls.n	8003404 <HAL_DMA_Init+0x26c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b2e      	cmp	r3, #46	@ 0x2e
 8003402:	d91f      	bls.n	8003444 <HAL_DMA_Init+0x2ac>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b3e      	cmp	r3, #62	@ 0x3e
 800340a:	d903      	bls.n	8003414 <HAL_DMA_Init+0x27c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b42      	cmp	r3, #66	@ 0x42
 8003412:	d917      	bls.n	8003444 <HAL_DMA_Init+0x2ac>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b46      	cmp	r3, #70	@ 0x46
 800341a:	d903      	bls.n	8003424 <HAL_DMA_Init+0x28c>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b48      	cmp	r3, #72	@ 0x48
 8003422:	d90f      	bls.n	8003444 <HAL_DMA_Init+0x2ac>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b4e      	cmp	r3, #78	@ 0x4e
 800342a:	d903      	bls.n	8003434 <HAL_DMA_Init+0x29c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b52      	cmp	r3, #82	@ 0x52
 8003432:	d907      	bls.n	8003444 <HAL_DMA_Init+0x2ac>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b73      	cmp	r3, #115	@ 0x73
 800343a:	d905      	bls.n	8003448 <HAL_DMA_Init+0x2b0>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b77      	cmp	r3, #119	@ 0x77
 8003442:	d801      	bhi.n	8003448 <HAL_DMA_Init+0x2b0>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_DMA_Init+0x2b2>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003454:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f023 0307 	bic.w	r3, r3, #7
 800346c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	2b04      	cmp	r3, #4
 800347e:	d117      	bne.n	80034b0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00e      	beq.n	80034b0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f001 fe70 	bl	8005178 <DMA_CheckFifoParam>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2240      	movs	r2, #64	@ 0x40
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e1fd      	b.n	80038ac <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f001 fdab 	bl	8005014 <DMA_CalcBaseAndBitshift>
 80034be:	4603      	mov	r3, r0
 80034c0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	223f      	movs	r2, #63	@ 0x3f
 80034cc:	409a      	lsls	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	e0fd      	b.n	80036d0 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a28      	ldr	r2, [pc, #160]	@ (800357c <HAL_DMA_Init+0x3e4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d04a      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a27      	ldr	r2, [pc, #156]	@ (8003580 <HAL_DMA_Init+0x3e8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d045      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a25      	ldr	r2, [pc, #148]	@ (8003584 <HAL_DMA_Init+0x3ec>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d040      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a24      	ldr	r2, [pc, #144]	@ (8003588 <HAL_DMA_Init+0x3f0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d03b      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a22      	ldr	r2, [pc, #136]	@ (800358c <HAL_DMA_Init+0x3f4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d036      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a21      	ldr	r2, [pc, #132]	@ (8003590 <HAL_DMA_Init+0x3f8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d031      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1f      	ldr	r2, [pc, #124]	@ (8003594 <HAL_DMA_Init+0x3fc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02c      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1e      	ldr	r2, [pc, #120]	@ (8003598 <HAL_DMA_Init+0x400>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d027      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <HAL_DMA_Init+0x404>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <HAL_DMA_Init+0x408>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d01d      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_DMA_Init+0x40c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_DMA_Init+0x410>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a16      	ldr	r2, [pc, #88]	@ (80035ac <HAL_DMA_Init+0x414>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a15      	ldr	r2, [pc, #84]	@ (80035b0 <HAL_DMA_Init+0x418>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a13      	ldr	r2, [pc, #76]	@ (80035b4 <HAL_DMA_Init+0x41c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_DMA_Init+0x3dc>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a12      	ldr	r2, [pc, #72]	@ (80035b8 <HAL_DMA_Init+0x420>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d123      	bne.n	80035bc <HAL_DMA_Init+0x424>
 8003574:	2301      	movs	r3, #1
 8003576:	e022      	b.n	80035be <HAL_DMA_Init+0x426>
 8003578:	fe10803f 	.word	0xfe10803f
 800357c:	48022c08 	.word	0x48022c08
 8003580:	48022c1c 	.word	0x48022c1c
 8003584:	48022c30 	.word	0x48022c30
 8003588:	48022c44 	.word	0x48022c44
 800358c:	48022c58 	.word	0x48022c58
 8003590:	48022c6c 	.word	0x48022c6c
 8003594:	48022c80 	.word	0x48022c80
 8003598:	48022c94 	.word	0x48022c94
 800359c:	58025408 	.word	0x58025408
 80035a0:	5802541c 	.word	0x5802541c
 80035a4:	58025430 	.word	0x58025430
 80035a8:	58025444 	.word	0x58025444
 80035ac:	58025458 	.word	0x58025458
 80035b0:	5802546c 	.word	0x5802546c
 80035b4:	58025480 	.word	0x58025480
 80035b8:	58025494 	.word	0x58025494
 80035bc:	2300      	movs	r3, #0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d07d      	beq.n	80036be <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a7f      	ldr	r2, [pc, #508]	@ (80037c4 <HAL_DMA_Init+0x62c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d021      	beq.n	8003610 <HAL_DMA_Init+0x478>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a7d      	ldr	r2, [pc, #500]	@ (80037c8 <HAL_DMA_Init+0x630>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01c      	beq.n	8003610 <HAL_DMA_Init+0x478>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7c      	ldr	r2, [pc, #496]	@ (80037cc <HAL_DMA_Init+0x634>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d017      	beq.n	8003610 <HAL_DMA_Init+0x478>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a7a      	ldr	r2, [pc, #488]	@ (80037d0 <HAL_DMA_Init+0x638>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d012      	beq.n	8003610 <HAL_DMA_Init+0x478>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a79      	ldr	r2, [pc, #484]	@ (80037d4 <HAL_DMA_Init+0x63c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00d      	beq.n	8003610 <HAL_DMA_Init+0x478>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a77      	ldr	r2, [pc, #476]	@ (80037d8 <HAL_DMA_Init+0x640>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d008      	beq.n	8003610 <HAL_DMA_Init+0x478>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a76      	ldr	r2, [pc, #472]	@ (80037dc <HAL_DMA_Init+0x644>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <HAL_DMA_Init+0x478>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a74      	ldr	r2, [pc, #464]	@ (80037e0 <HAL_DMA_Init+0x648>)
 800360e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4b6e      	ldr	r3, [pc, #440]	@ (80037e4 <HAL_DMA_Init+0x64c>)
 800362c:	4013      	ands	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b40      	cmp	r3, #64	@ 0x40
 8003636:	d008      	beq.n	800364a <HAL_DMA_Init+0x4b2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b80      	cmp	r3, #128	@ 0x80
 800363e:	d102      	bne.n	8003646 <HAL_DMA_Init+0x4ae>
 8003640:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003644:	e002      	b.n	800364c <HAL_DMA_Init+0x4b4>
 8003646:	2300      	movs	r3, #0
 8003648:	e000      	b.n	800364c <HAL_DMA_Init+0x4b4>
 800364a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68d2      	ldr	r2, [r2, #12]
 8003650:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003652:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800365a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003662:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800366a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003672:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800367a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	4b55      	ldr	r3, [pc, #340]	@ (80037e8 <HAL_DMA_Init+0x650>)
 8003692:	4413      	add	r3, r2
 8003694:	4a55      	ldr	r2, [pc, #340]	@ (80037ec <HAL_DMA_Init+0x654>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	009a      	lsls	r2, r3, #2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f001 fcb6 	bl	8005014 <DMA_CalcBaseAndBitshift>
 80036a8:	4603      	mov	r3, r0
 80036aa:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	e008      	b.n	80036d0 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2240      	movs	r2, #64	@ 0x40
 80036c2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2203      	movs	r2, #3
 80036c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0ed      	b.n	80038ac <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a46      	ldr	r2, [pc, #280]	@ (80037f0 <HAL_DMA_Init+0x658>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d072      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a45      	ldr	r2, [pc, #276]	@ (80037f4 <HAL_DMA_Init+0x65c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d06d      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a43      	ldr	r2, [pc, #268]	@ (80037f8 <HAL_DMA_Init+0x660>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d068      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a42      	ldr	r2, [pc, #264]	@ (80037fc <HAL_DMA_Init+0x664>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d063      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a40      	ldr	r2, [pc, #256]	@ (8003800 <HAL_DMA_Init+0x668>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d05e      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a3f      	ldr	r2, [pc, #252]	@ (8003804 <HAL_DMA_Init+0x66c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d059      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3d      	ldr	r2, [pc, #244]	@ (8003808 <HAL_DMA_Init+0x670>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d054      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a3c      	ldr	r2, [pc, #240]	@ (800380c <HAL_DMA_Init+0x674>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d04f      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a3a      	ldr	r2, [pc, #232]	@ (8003810 <HAL_DMA_Init+0x678>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d04a      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a39      	ldr	r2, [pc, #228]	@ (8003814 <HAL_DMA_Init+0x67c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d045      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a37      	ldr	r2, [pc, #220]	@ (8003818 <HAL_DMA_Init+0x680>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d040      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a36      	ldr	r2, [pc, #216]	@ (800381c <HAL_DMA_Init+0x684>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d03b      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a34      	ldr	r2, [pc, #208]	@ (8003820 <HAL_DMA_Init+0x688>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d036      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a33      	ldr	r2, [pc, #204]	@ (8003824 <HAL_DMA_Init+0x68c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d031      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a31      	ldr	r2, [pc, #196]	@ (8003828 <HAL_DMA_Init+0x690>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d02c      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a30      	ldr	r2, [pc, #192]	@ (800382c <HAL_DMA_Init+0x694>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d027      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a13      	ldr	r2, [pc, #76]	@ (80037c4 <HAL_DMA_Init+0x62c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d022      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a12      	ldr	r2, [pc, #72]	@ (80037c8 <HAL_DMA_Init+0x630>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d01d      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a10      	ldr	r2, [pc, #64]	@ (80037cc <HAL_DMA_Init+0x634>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d018      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a0f      	ldr	r2, [pc, #60]	@ (80037d0 <HAL_DMA_Init+0x638>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d013      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0d      	ldr	r2, [pc, #52]	@ (80037d4 <HAL_DMA_Init+0x63c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00e      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a0c      	ldr	r2, [pc, #48]	@ (80037d8 <HAL_DMA_Init+0x640>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d009      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <HAL_DMA_Init+0x644>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d004      	beq.n	80037c0 <HAL_DMA_Init+0x628>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a09      	ldr	r2, [pc, #36]	@ (80037e0 <HAL_DMA_Init+0x648>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d137      	bne.n	8003830 <HAL_DMA_Init+0x698>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e036      	b.n	8003832 <HAL_DMA_Init+0x69a>
 80037c4:	58025408 	.word	0x58025408
 80037c8:	5802541c 	.word	0x5802541c
 80037cc:	58025430 	.word	0x58025430
 80037d0:	58025444 	.word	0x58025444
 80037d4:	58025458 	.word	0x58025458
 80037d8:	5802546c 	.word	0x5802546c
 80037dc:	58025480 	.word	0x58025480
 80037e0:	58025494 	.word	0x58025494
 80037e4:	fffe000f 	.word	0xfffe000f
 80037e8:	a7fdabf8 	.word	0xa7fdabf8
 80037ec:	cccccccd 	.word	0xcccccccd
 80037f0:	40020010 	.word	0x40020010
 80037f4:	40020028 	.word	0x40020028
 80037f8:	40020040 	.word	0x40020040
 80037fc:	40020058 	.word	0x40020058
 8003800:	40020070 	.word	0x40020070
 8003804:	40020088 	.word	0x40020088
 8003808:	400200a0 	.word	0x400200a0
 800380c:	400200b8 	.word	0x400200b8
 8003810:	40020410 	.word	0x40020410
 8003814:	40020428 	.word	0x40020428
 8003818:	40020440 	.word	0x40020440
 800381c:	40020458 	.word	0x40020458
 8003820:	40020470 	.word	0x40020470
 8003824:	40020488 	.word	0x40020488
 8003828:	400204a0 	.word	0x400204a0
 800382c:	400204b8 	.word	0x400204b8
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d032      	beq.n	800389c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f001 fd1a 	bl	8005270 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b80      	cmp	r3, #128	@ 0x80
 8003842:	d102      	bne.n	800384a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800385e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d010      	beq.n	800388a <HAL_DMA_Init+0x6f2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d80c      	bhi.n	800388a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f001 fd97 	bl	80053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	e008      	b.n	800389c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e226      	b.n	8003d1e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_DMA_Start_IT+0x2a>
 80038da:	2302      	movs	r3, #2
 80038dc:	e21f      	b.n	8003d1e <HAL_DMA_Start_IT+0x46a>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	f040 820a 	bne.w	8003d08 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a68      	ldr	r2, [pc, #416]	@ (8003aa8 <HAL_DMA_Start_IT+0x1f4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04a      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a66      	ldr	r2, [pc, #408]	@ (8003aac <HAL_DMA_Start_IT+0x1f8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d045      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a65      	ldr	r2, [pc, #404]	@ (8003ab0 <HAL_DMA_Start_IT+0x1fc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d040      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a63      	ldr	r2, [pc, #396]	@ (8003ab4 <HAL_DMA_Start_IT+0x200>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d03b      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a62      	ldr	r2, [pc, #392]	@ (8003ab8 <HAL_DMA_Start_IT+0x204>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d036      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a60      	ldr	r2, [pc, #384]	@ (8003abc <HAL_DMA_Start_IT+0x208>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d031      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a5f      	ldr	r2, [pc, #380]	@ (8003ac0 <HAL_DMA_Start_IT+0x20c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d02c      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac4 <HAL_DMA_Start_IT+0x210>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a5c      	ldr	r2, [pc, #368]	@ (8003ac8 <HAL_DMA_Start_IT+0x214>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a5a      	ldr	r2, [pc, #360]	@ (8003acc <HAL_DMA_Start_IT+0x218>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01d      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a59      	ldr	r2, [pc, #356]	@ (8003ad0 <HAL_DMA_Start_IT+0x21c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a57      	ldr	r2, [pc, #348]	@ (8003ad4 <HAL_DMA_Start_IT+0x220>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a56      	ldr	r2, [pc, #344]	@ (8003ad8 <HAL_DMA_Start_IT+0x224>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a54      	ldr	r2, [pc, #336]	@ (8003adc <HAL_DMA_Start_IT+0x228>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a53      	ldr	r2, [pc, #332]	@ (8003ae0 <HAL_DMA_Start_IT+0x22c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_Start_IT+0xee>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a51      	ldr	r2, [pc, #324]	@ (8003ae4 <HAL_DMA_Start_IT+0x230>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <HAL_DMA_Start_IT+0x100>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e007      	b.n	80039c4 <HAL_DMA_Start_IT+0x110>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f001 f93e 	bl	8004c4c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a34      	ldr	r2, [pc, #208]	@ (8003aa8 <HAL_DMA_Start_IT+0x1f4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d04a      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a33      	ldr	r2, [pc, #204]	@ (8003aac <HAL_DMA_Start_IT+0x1f8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d045      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a31      	ldr	r2, [pc, #196]	@ (8003ab0 <HAL_DMA_Start_IT+0x1fc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d040      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a30      	ldr	r2, [pc, #192]	@ (8003ab4 <HAL_DMA_Start_IT+0x200>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d03b      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2e      	ldr	r2, [pc, #184]	@ (8003ab8 <HAL_DMA_Start_IT+0x204>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d036      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2d      	ldr	r2, [pc, #180]	@ (8003abc <HAL_DMA_Start_IT+0x208>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d031      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac0 <HAL_DMA_Start_IT+0x20c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02c      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac4 <HAL_DMA_Start_IT+0x210>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d027      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a28      	ldr	r2, [pc, #160]	@ (8003ac8 <HAL_DMA_Start_IT+0x214>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d022      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a27      	ldr	r2, [pc, #156]	@ (8003acc <HAL_DMA_Start_IT+0x218>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d01d      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a25      	ldr	r2, [pc, #148]	@ (8003ad0 <HAL_DMA_Start_IT+0x21c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d018      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a24      	ldr	r2, [pc, #144]	@ (8003ad4 <HAL_DMA_Start_IT+0x220>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a22      	ldr	r2, [pc, #136]	@ (8003ad8 <HAL_DMA_Start_IT+0x224>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a21      	ldr	r2, [pc, #132]	@ (8003adc <HAL_DMA_Start_IT+0x228>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae0 <HAL_DMA_Start_IT+0x22c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_DMA_Start_IT+0x1bc>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae4 <HAL_DMA_Start_IT+0x230>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d101      	bne.n	8003a74 <HAL_DMA_Start_IT+0x1c0>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_DMA_Start_IT+0x1c2>
 8003a74:	2300      	movs	r3, #0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d036      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 021e 	bic.w	r2, r3, #30
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0216 	orr.w	r2, r2, #22
 8003a8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d03e      	beq.n	8003b14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0208 	orr.w	r2, r2, #8
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e035      	b.n	8003b14 <HAL_DMA_Start_IT+0x260>
 8003aa8:	40020010 	.word	0x40020010
 8003aac:	40020028 	.word	0x40020028
 8003ab0:	40020040 	.word	0x40020040
 8003ab4:	40020058 	.word	0x40020058
 8003ab8:	40020070 	.word	0x40020070
 8003abc:	40020088 	.word	0x40020088
 8003ac0:	400200a0 	.word	0x400200a0
 8003ac4:	400200b8 	.word	0x400200b8
 8003ac8:	40020410 	.word	0x40020410
 8003acc:	40020428 	.word	0x40020428
 8003ad0:	40020440 	.word	0x40020440
 8003ad4:	40020458 	.word	0x40020458
 8003ad8:	40020470 	.word	0x40020470
 8003adc:	40020488 	.word	0x40020488
 8003ae0:	400204a0 	.word	0x400204a0
 8003ae4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 020e 	bic.w	r2, r3, #14
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 020a 	orr.w	r2, r2, #10
 8003afa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0204 	orr.w	r2, r2, #4
 8003b12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a83      	ldr	r2, [pc, #524]	@ (8003d28 <HAL_DMA_Start_IT+0x474>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d072      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a82      	ldr	r2, [pc, #520]	@ (8003d2c <HAL_DMA_Start_IT+0x478>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d06d      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a80      	ldr	r2, [pc, #512]	@ (8003d30 <HAL_DMA_Start_IT+0x47c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d068      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7f      	ldr	r2, [pc, #508]	@ (8003d34 <HAL_DMA_Start_IT+0x480>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d063      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a7d      	ldr	r2, [pc, #500]	@ (8003d38 <HAL_DMA_Start_IT+0x484>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d05e      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d3c <HAL_DMA_Start_IT+0x488>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d059      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a7a      	ldr	r2, [pc, #488]	@ (8003d40 <HAL_DMA_Start_IT+0x48c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d054      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a79      	ldr	r2, [pc, #484]	@ (8003d44 <HAL_DMA_Start_IT+0x490>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d04f      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a77      	ldr	r2, [pc, #476]	@ (8003d48 <HAL_DMA_Start_IT+0x494>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d04a      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a76      	ldr	r2, [pc, #472]	@ (8003d4c <HAL_DMA_Start_IT+0x498>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d045      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a74      	ldr	r2, [pc, #464]	@ (8003d50 <HAL_DMA_Start_IT+0x49c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d040      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a73      	ldr	r2, [pc, #460]	@ (8003d54 <HAL_DMA_Start_IT+0x4a0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d03b      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a71      	ldr	r2, [pc, #452]	@ (8003d58 <HAL_DMA_Start_IT+0x4a4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d036      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a70      	ldr	r2, [pc, #448]	@ (8003d5c <HAL_DMA_Start_IT+0x4a8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d031      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a6e      	ldr	r2, [pc, #440]	@ (8003d60 <HAL_DMA_Start_IT+0x4ac>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d02c      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6d      	ldr	r2, [pc, #436]	@ (8003d64 <HAL_DMA_Start_IT+0x4b0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d027      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a6b      	ldr	r2, [pc, #428]	@ (8003d68 <HAL_DMA_Start_IT+0x4b4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d022      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6a      	ldr	r2, [pc, #424]	@ (8003d6c <HAL_DMA_Start_IT+0x4b8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d01d      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a68      	ldr	r2, [pc, #416]	@ (8003d70 <HAL_DMA_Start_IT+0x4bc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d018      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a67      	ldr	r2, [pc, #412]	@ (8003d74 <HAL_DMA_Start_IT+0x4c0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d013      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a65      	ldr	r2, [pc, #404]	@ (8003d78 <HAL_DMA_Start_IT+0x4c4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00e      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a64      	ldr	r2, [pc, #400]	@ (8003d7c <HAL_DMA_Start_IT+0x4c8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d009      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a62      	ldr	r2, [pc, #392]	@ (8003d80 <HAL_DMA_Start_IT+0x4cc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <HAL_DMA_Start_IT+0x350>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a61      	ldr	r2, [pc, #388]	@ (8003d84 <HAL_DMA_Start_IT+0x4d0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_DMA_Start_IT+0x354>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_DMA_Start_IT+0x356>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01a      	beq.n	8003c44 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c2a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c42:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a37      	ldr	r2, [pc, #220]	@ (8003d28 <HAL_DMA_Start_IT+0x474>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d04a      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a36      	ldr	r2, [pc, #216]	@ (8003d2c <HAL_DMA_Start_IT+0x478>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d045      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a34      	ldr	r2, [pc, #208]	@ (8003d30 <HAL_DMA_Start_IT+0x47c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d040      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a33      	ldr	r2, [pc, #204]	@ (8003d34 <HAL_DMA_Start_IT+0x480>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d03b      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a31      	ldr	r2, [pc, #196]	@ (8003d38 <HAL_DMA_Start_IT+0x484>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d036      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a30      	ldr	r2, [pc, #192]	@ (8003d3c <HAL_DMA_Start_IT+0x488>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d031      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2e      	ldr	r2, [pc, #184]	@ (8003d40 <HAL_DMA_Start_IT+0x48c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d02c      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d44 <HAL_DMA_Start_IT+0x490>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d027      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2b      	ldr	r2, [pc, #172]	@ (8003d48 <HAL_DMA_Start_IT+0x494>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d022      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d4c <HAL_DMA_Start_IT+0x498>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d01d      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a28      	ldr	r2, [pc, #160]	@ (8003d50 <HAL_DMA_Start_IT+0x49c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d018      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a27      	ldr	r2, [pc, #156]	@ (8003d54 <HAL_DMA_Start_IT+0x4a0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a25      	ldr	r2, [pc, #148]	@ (8003d58 <HAL_DMA_Start_IT+0x4a4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00e      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a24      	ldr	r2, [pc, #144]	@ (8003d5c <HAL_DMA_Start_IT+0x4a8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a22      	ldr	r2, [pc, #136]	@ (8003d60 <HAL_DMA_Start_IT+0x4ac>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x430>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a21      	ldr	r2, [pc, #132]	@ (8003d64 <HAL_DMA_Start_IT+0x4b0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d108      	bne.n	8003cf6 <HAL_DMA_Start_IT+0x442>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e012      	b.n	8003d1c <HAL_DMA_Start_IT+0x468>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e009      	b.n	8003d1c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40020010 	.word	0x40020010
 8003d2c:	40020028 	.word	0x40020028
 8003d30:	40020040 	.word	0x40020040
 8003d34:	40020058 	.word	0x40020058
 8003d38:	40020070 	.word	0x40020070
 8003d3c:	40020088 	.word	0x40020088
 8003d40:	400200a0 	.word	0x400200a0
 8003d44:	400200b8 	.word	0x400200b8
 8003d48:	40020410 	.word	0x40020410
 8003d4c:	40020428 	.word	0x40020428
 8003d50:	40020440 	.word	0x40020440
 8003d54:	40020458 	.word	0x40020458
 8003d58:	40020470 	.word	0x40020470
 8003d5c:	40020488 	.word	0x40020488
 8003d60:	400204a0 	.word	0x400204a0
 8003d64:	400204b8 	.word	0x400204b8
 8003d68:	58025408 	.word	0x58025408
 8003d6c:	5802541c 	.word	0x5802541c
 8003d70:	58025430 	.word	0x58025430
 8003d74:	58025444 	.word	0x58025444
 8003d78:	58025458 	.word	0x58025458
 8003d7c:	5802546c 	.word	0x5802546c
 8003d80:	58025480 	.word	0x58025480
 8003d84:	58025494 	.word	0x58025494

08003d88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	@ 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d94:	4b67      	ldr	r3, [pc, #412]	@ (8003f34 <HAL_DMA_IRQHandler+0x1ac>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a67      	ldr	r2, [pc, #412]	@ (8003f38 <HAL_DMA_IRQHandler+0x1b0>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	0a9b      	lsrs	r3, r3, #10
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a5f      	ldr	r2, [pc, #380]	@ (8003f3c <HAL_DMA_IRQHandler+0x1b4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d04a      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8003f40 <HAL_DMA_IRQHandler+0x1b8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d045      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8003f44 <HAL_DMA_IRQHandler+0x1bc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d040      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a5a      	ldr	r2, [pc, #360]	@ (8003f48 <HAL_DMA_IRQHandler+0x1c0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d03b      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a59      	ldr	r2, [pc, #356]	@ (8003f4c <HAL_DMA_IRQHandler+0x1c4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d036      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a57      	ldr	r2, [pc, #348]	@ (8003f50 <HAL_DMA_IRQHandler+0x1c8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d031      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a56      	ldr	r2, [pc, #344]	@ (8003f54 <HAL_DMA_IRQHandler+0x1cc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d02c      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a54      	ldr	r2, [pc, #336]	@ (8003f58 <HAL_DMA_IRQHandler+0x1d0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d027      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a53      	ldr	r2, [pc, #332]	@ (8003f5c <HAL_DMA_IRQHandler+0x1d4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d022      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a51      	ldr	r2, [pc, #324]	@ (8003f60 <HAL_DMA_IRQHandler+0x1d8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01d      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a50      	ldr	r2, [pc, #320]	@ (8003f64 <HAL_DMA_IRQHandler+0x1dc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d018      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a4e      	ldr	r2, [pc, #312]	@ (8003f68 <HAL_DMA_IRQHandler+0x1e0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a4d      	ldr	r2, [pc, #308]	@ (8003f6c <HAL_DMA_IRQHandler+0x1e4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00e      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a4b      	ldr	r2, [pc, #300]	@ (8003f70 <HAL_DMA_IRQHandler+0x1e8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8003f74 <HAL_DMA_IRQHandler+0x1ec>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xd2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a48      	ldr	r2, [pc, #288]	@ (8003f78 <HAL_DMA_IRQHandler+0x1f0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d101      	bne.n	8003e5e <HAL_DMA_IRQHandler+0xd6>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <HAL_DMA_IRQHandler+0xd8>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 842b 	beq.w	80046bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	2208      	movs	r2, #8
 8003e70:	409a      	lsls	r2, r3
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80a2 	beq.w	8003fc0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2e      	ldr	r2, [pc, #184]	@ (8003f3c <HAL_DMA_IRQHandler+0x1b4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d04a      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f40 <HAL_DMA_IRQHandler+0x1b8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d045      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a2b      	ldr	r2, [pc, #172]	@ (8003f44 <HAL_DMA_IRQHandler+0x1bc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d040      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f48 <HAL_DMA_IRQHandler+0x1c0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d03b      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a28      	ldr	r2, [pc, #160]	@ (8003f4c <HAL_DMA_IRQHandler+0x1c4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d036      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a27      	ldr	r2, [pc, #156]	@ (8003f50 <HAL_DMA_IRQHandler+0x1c8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d031      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a25      	ldr	r2, [pc, #148]	@ (8003f54 <HAL_DMA_IRQHandler+0x1cc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d02c      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a24      	ldr	r2, [pc, #144]	@ (8003f58 <HAL_DMA_IRQHandler+0x1d0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d027      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a22      	ldr	r2, [pc, #136]	@ (8003f5c <HAL_DMA_IRQHandler+0x1d4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a21      	ldr	r2, [pc, #132]	@ (8003f60 <HAL_DMA_IRQHandler+0x1d8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d01d      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f64 <HAL_DMA_IRQHandler+0x1dc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1e      	ldr	r2, [pc, #120]	@ (8003f68 <HAL_DMA_IRQHandler+0x1e0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f6c <HAL_DMA_IRQHandler+0x1e4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1b      	ldr	r2, [pc, #108]	@ (8003f70 <HAL_DMA_IRQHandler+0x1e8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a19      	ldr	r2, [pc, #100]	@ (8003f74 <HAL_DMA_IRQHandler+0x1ec>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x194>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a18      	ldr	r2, [pc, #96]	@ (8003f78 <HAL_DMA_IRQHandler+0x1f0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d12f      	bne.n	8003f7c <HAL_DMA_IRQHandler+0x1f4>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bf14      	ite	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	2300      	moveq	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	e02e      	b.n	8003f90 <HAL_DMA_IRQHandler+0x208>
 8003f32:	bf00      	nop
 8003f34:	24000000 	.word	0x24000000
 8003f38:	1b4e81b5 	.word	0x1b4e81b5
 8003f3c:	40020010 	.word	0x40020010
 8003f40:	40020028 	.word	0x40020028
 8003f44:	40020040 	.word	0x40020040
 8003f48:	40020058 	.word	0x40020058
 8003f4c:	40020070 	.word	0x40020070
 8003f50:	40020088 	.word	0x40020088
 8003f54:	400200a0 	.word	0x400200a0
 8003f58:	400200b8 	.word	0x400200b8
 8003f5c:	40020410 	.word	0x40020410
 8003f60:	40020428 	.word	0x40020428
 8003f64:	40020440 	.word	0x40020440
 8003f68:	40020458 	.word	0x40020458
 8003f6c:	40020470 	.word	0x40020470
 8003f70:	40020488 	.word	0x40020488
 8003f74:	400204a0 	.word	0x400204a0
 8003f78:	400204b8 	.word	0x400204b8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf14      	ite	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	2300      	moveq	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d015      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0204 	bic.w	r2, r2, #4
 8003fa2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	2208      	movs	r2, #8
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb8:	f043 0201 	orr.w	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	fa22 f303 	lsr.w	r3, r2, r3
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d06e      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a69      	ldr	r2, [pc, #420]	@ (8004180 <HAL_DMA_IRQHandler+0x3f8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d04a      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a67      	ldr	r2, [pc, #412]	@ (8004184 <HAL_DMA_IRQHandler+0x3fc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d045      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a66      	ldr	r2, [pc, #408]	@ (8004188 <HAL_DMA_IRQHandler+0x400>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d040      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a64      	ldr	r2, [pc, #400]	@ (800418c <HAL_DMA_IRQHandler+0x404>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d03b      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a63      	ldr	r2, [pc, #396]	@ (8004190 <HAL_DMA_IRQHandler+0x408>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d036      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a61      	ldr	r2, [pc, #388]	@ (8004194 <HAL_DMA_IRQHandler+0x40c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d031      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a60      	ldr	r2, [pc, #384]	@ (8004198 <HAL_DMA_IRQHandler+0x410>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d02c      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5e      	ldr	r2, [pc, #376]	@ (800419c <HAL_DMA_IRQHandler+0x414>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d027      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a5d      	ldr	r2, [pc, #372]	@ (80041a0 <HAL_DMA_IRQHandler+0x418>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d022      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a5b      	ldr	r2, [pc, #364]	@ (80041a4 <HAL_DMA_IRQHandler+0x41c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01d      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a5a      	ldr	r2, [pc, #360]	@ (80041a8 <HAL_DMA_IRQHandler+0x420>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d018      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a58      	ldr	r2, [pc, #352]	@ (80041ac <HAL_DMA_IRQHandler+0x424>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a57      	ldr	r2, [pc, #348]	@ (80041b0 <HAL_DMA_IRQHandler+0x428>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00e      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a55      	ldr	r2, [pc, #340]	@ (80041b4 <HAL_DMA_IRQHandler+0x42c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d009      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a54      	ldr	r2, [pc, #336]	@ (80041b8 <HAL_DMA_IRQHandler+0x430>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_DMA_IRQHandler+0x2ee>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a52      	ldr	r2, [pc, #328]	@ (80041bc <HAL_DMA_IRQHandler+0x434>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10a      	bne.n	800408c <HAL_DMA_IRQHandler+0x304>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e003      	b.n	8004094 <HAL_DMA_IRQHandler+0x30c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	2201      	movs	r2, #1
 80040a2:	409a      	lsls	r2, r3
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ac:	f043 0202 	orr.w	r2, r3, #2
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	2204      	movs	r2, #4
 80040be:	409a      	lsls	r2, r3
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 808f 	beq.w	80041e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004180 <HAL_DMA_IRQHandler+0x3f8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d04a      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004184 <HAL_DMA_IRQHandler+0x3fc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d045      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a29      	ldr	r2, [pc, #164]	@ (8004188 <HAL_DMA_IRQHandler+0x400>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d040      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a27      	ldr	r2, [pc, #156]	@ (800418c <HAL_DMA_IRQHandler+0x404>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d03b      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a26      	ldr	r2, [pc, #152]	@ (8004190 <HAL_DMA_IRQHandler+0x408>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d036      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a24      	ldr	r2, [pc, #144]	@ (8004194 <HAL_DMA_IRQHandler+0x40c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d031      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a23      	ldr	r2, [pc, #140]	@ (8004198 <HAL_DMA_IRQHandler+0x410>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d02c      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a21      	ldr	r2, [pc, #132]	@ (800419c <HAL_DMA_IRQHandler+0x414>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d027      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a20      	ldr	r2, [pc, #128]	@ (80041a0 <HAL_DMA_IRQHandler+0x418>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1e      	ldr	r2, [pc, #120]	@ (80041a4 <HAL_DMA_IRQHandler+0x41c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01d      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1d      	ldr	r2, [pc, #116]	@ (80041a8 <HAL_DMA_IRQHandler+0x420>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ac <HAL_DMA_IRQHandler+0x424>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1a      	ldr	r2, [pc, #104]	@ (80041b0 <HAL_DMA_IRQHandler+0x428>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a18      	ldr	r2, [pc, #96]	@ (80041b4 <HAL_DMA_IRQHandler+0x42c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a17      	ldr	r2, [pc, #92]	@ (80041b8 <HAL_DMA_IRQHandler+0x430>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_DMA_IRQHandler+0x3e2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <HAL_DMA_IRQHandler+0x434>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d12a      	bne.n	80041c0 <HAL_DMA_IRQHandler+0x438>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf14      	ite	ne
 8004178:	2301      	movne	r3, #1
 800417a:	2300      	moveq	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	e023      	b.n	80041c8 <HAL_DMA_IRQHandler+0x440>
 8004180:	40020010 	.word	0x40020010
 8004184:	40020028 	.word	0x40020028
 8004188:	40020040 	.word	0x40020040
 800418c:	40020058 	.word	0x40020058
 8004190:	40020070 	.word	0x40020070
 8004194:	40020088 	.word	0x40020088
 8004198:	400200a0 	.word	0x400200a0
 800419c:	400200b8 	.word	0x400200b8
 80041a0:	40020410 	.word	0x40020410
 80041a4:	40020428 	.word	0x40020428
 80041a8:	40020440 	.word	0x40020440
 80041ac:	40020458 	.word	0x40020458
 80041b0:	40020470 	.word	0x40020470
 80041b4:	40020488 	.word	0x40020488
 80041b8:	400204a0 	.word	0x400204a0
 80041bc:	400204b8 	.word	0x400204b8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2300      	movs	r3, #0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00d      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	2204      	movs	r2, #4
 80041d6:	409a      	lsls	r2, r3
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e0:	f043 0204 	orr.w	r2, r3, #4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2210      	movs	r2, #16
 80041f2:	409a      	lsls	r2, r3
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80a6 	beq.w	800434a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a85      	ldr	r2, [pc, #532]	@ (8004418 <HAL_DMA_IRQHandler+0x690>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04a      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a83      	ldr	r2, [pc, #524]	@ (800441c <HAL_DMA_IRQHandler+0x694>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d045      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a82      	ldr	r2, [pc, #520]	@ (8004420 <HAL_DMA_IRQHandler+0x698>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d040      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a80      	ldr	r2, [pc, #512]	@ (8004424 <HAL_DMA_IRQHandler+0x69c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d03b      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a7f      	ldr	r2, [pc, #508]	@ (8004428 <HAL_DMA_IRQHandler+0x6a0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d036      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a7d      	ldr	r2, [pc, #500]	@ (800442c <HAL_DMA_IRQHandler+0x6a4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a7c      	ldr	r2, [pc, #496]	@ (8004430 <HAL_DMA_IRQHandler+0x6a8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a7a      	ldr	r2, [pc, #488]	@ (8004434 <HAL_DMA_IRQHandler+0x6ac>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d027      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a79      	ldr	r2, [pc, #484]	@ (8004438 <HAL_DMA_IRQHandler+0x6b0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d022      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a77      	ldr	r2, [pc, #476]	@ (800443c <HAL_DMA_IRQHandler+0x6b4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01d      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a76      	ldr	r2, [pc, #472]	@ (8004440 <HAL_DMA_IRQHandler+0x6b8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d018      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a74      	ldr	r2, [pc, #464]	@ (8004444 <HAL_DMA_IRQHandler+0x6bc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a73      	ldr	r2, [pc, #460]	@ (8004448 <HAL_DMA_IRQHandler+0x6c0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00e      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a71      	ldr	r2, [pc, #452]	@ (800444c <HAL_DMA_IRQHandler+0x6c4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a70      	ldr	r2, [pc, #448]	@ (8004450 <HAL_DMA_IRQHandler+0x6c8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_DMA_IRQHandler+0x516>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a6e      	ldr	r2, [pc, #440]	@ (8004454 <HAL_DMA_IRQHandler+0x6cc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d10a      	bne.n	80042b4 <HAL_DMA_IRQHandler+0x52c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e009      	b.n	80042c8 <HAL_DMA_IRQHandler+0x540>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bf14      	ite	ne
 80042c2:	2301      	movne	r3, #1
 80042c4:	2300      	moveq	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d03e      	beq.n	800434a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2210      	movs	r2, #16
 80042d6:	409a      	lsls	r2, r3
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d018      	beq.n	800431c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d108      	bne.n	800430a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d024      	beq.n	800434a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	4798      	blx	r3
 8004308:	e01f      	b.n	800434a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01b      	beq.n	800434a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
 800431a:	e016      	b.n	800434a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d107      	bne.n	800433a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0208 	bic.w	r2, r2, #8
 8004338:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2220      	movs	r2, #32
 8004354:	409a      	lsls	r2, r3
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8110 	beq.w	8004580 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2c      	ldr	r2, [pc, #176]	@ (8004418 <HAL_DMA_IRQHandler+0x690>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d04a      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2b      	ldr	r2, [pc, #172]	@ (800441c <HAL_DMA_IRQHandler+0x694>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d045      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a29      	ldr	r2, [pc, #164]	@ (8004420 <HAL_DMA_IRQHandler+0x698>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d040      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a28      	ldr	r2, [pc, #160]	@ (8004424 <HAL_DMA_IRQHandler+0x69c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d03b      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a26      	ldr	r2, [pc, #152]	@ (8004428 <HAL_DMA_IRQHandler+0x6a0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d036      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a25      	ldr	r2, [pc, #148]	@ (800442c <HAL_DMA_IRQHandler+0x6a4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d031      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a23      	ldr	r2, [pc, #140]	@ (8004430 <HAL_DMA_IRQHandler+0x6a8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d02c      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a22      	ldr	r2, [pc, #136]	@ (8004434 <HAL_DMA_IRQHandler+0x6ac>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d027      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a20      	ldr	r2, [pc, #128]	@ (8004438 <HAL_DMA_IRQHandler+0x6b0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d022      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1f      	ldr	r2, [pc, #124]	@ (800443c <HAL_DMA_IRQHandler+0x6b4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d01d      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004440 <HAL_DMA_IRQHandler+0x6b8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d018      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004444 <HAL_DMA_IRQHandler+0x6bc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d013      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004448 <HAL_DMA_IRQHandler+0x6c0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a19      	ldr	r2, [pc, #100]	@ (800444c <HAL_DMA_IRQHandler+0x6c4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a17      	ldr	r2, [pc, #92]	@ (8004450 <HAL_DMA_IRQHandler+0x6c8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_DMA_IRQHandler+0x678>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a16      	ldr	r2, [pc, #88]	@ (8004454 <HAL_DMA_IRQHandler+0x6cc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d12b      	bne.n	8004458 <HAL_DMA_IRQHandler+0x6d0>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	bf14      	ite	ne
 800440e:	2301      	movne	r3, #1
 8004410:	2300      	moveq	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e02a      	b.n	800446c <HAL_DMA_IRQHandler+0x6e4>
 8004416:	bf00      	nop
 8004418:	40020010 	.word	0x40020010
 800441c:	40020028 	.word	0x40020028
 8004420:	40020040 	.word	0x40020040
 8004424:	40020058 	.word	0x40020058
 8004428:	40020070 	.word	0x40020070
 800442c:	40020088 	.word	0x40020088
 8004430:	400200a0 	.word	0x400200a0
 8004434:	400200b8 	.word	0x400200b8
 8004438:	40020410 	.word	0x40020410
 800443c:	40020428 	.word	0x40020428
 8004440:	40020440 	.word	0x40020440
 8004444:	40020458 	.word	0x40020458
 8004448:	40020470 	.word	0x40020470
 800444c:	40020488 	.word	0x40020488
 8004450:	400204a0 	.word	0x400204a0
 8004454:	400204b8 	.word	0x400204b8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf14      	ite	ne
 8004466:	2301      	movne	r3, #1
 8004468:	2300      	moveq	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8087 	beq.w	8004580 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	2220      	movs	r2, #32
 800447c:	409a      	lsls	r2, r3
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b04      	cmp	r3, #4
 800448c:	d139      	bne.n	8004502 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0216 	bic.w	r2, r2, #22
 800449c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d103      	bne.n	80044be <HAL_DMA_IRQHandler+0x736>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0208 	bic.w	r2, r2, #8
 80044cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	223f      	movs	r2, #63	@ 0x3f
 80044d8:	409a      	lsls	r2, r3
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8382 	beq.w	8004bfc <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4798      	blx	r3
          }
          return;
 8004500:	e37c      	b.n	8004bfc <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d018      	beq.n	8004542 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004522:	2b00      	cmp	r3, #0
 8004524:	d02c      	beq.n	8004580 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	4798      	blx	r3
 800452e:	e027      	b.n	8004580 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d023      	beq.n	8004580 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
 8004540:	e01e      	b.n	8004580 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10f      	bne.n	8004570 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0210 	bic.w	r2, r2, #16
 800455e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 833e 	beq.w	8004c06 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8088 	beq.w	80046a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2204      	movs	r2, #4
 800459c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a89      	ldr	r2, [pc, #548]	@ (80047cc <HAL_DMA_IRQHandler+0xa44>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d04a      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a88      	ldr	r2, [pc, #544]	@ (80047d0 <HAL_DMA_IRQHandler+0xa48>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d045      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a86      	ldr	r2, [pc, #536]	@ (80047d4 <HAL_DMA_IRQHandler+0xa4c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d040      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a85      	ldr	r2, [pc, #532]	@ (80047d8 <HAL_DMA_IRQHandler+0xa50>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d03b      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a83      	ldr	r2, [pc, #524]	@ (80047dc <HAL_DMA_IRQHandler+0xa54>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d036      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a82      	ldr	r2, [pc, #520]	@ (80047e0 <HAL_DMA_IRQHandler+0xa58>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d031      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a80      	ldr	r2, [pc, #512]	@ (80047e4 <HAL_DMA_IRQHandler+0xa5c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d02c      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7f      	ldr	r2, [pc, #508]	@ (80047e8 <HAL_DMA_IRQHandler+0xa60>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d027      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a7d      	ldr	r2, [pc, #500]	@ (80047ec <HAL_DMA_IRQHandler+0xa64>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d022      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a7c      	ldr	r2, [pc, #496]	@ (80047f0 <HAL_DMA_IRQHandler+0xa68>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d01d      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a7a      	ldr	r2, [pc, #488]	@ (80047f4 <HAL_DMA_IRQHandler+0xa6c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a79      	ldr	r2, [pc, #484]	@ (80047f8 <HAL_DMA_IRQHandler+0xa70>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a77      	ldr	r2, [pc, #476]	@ (80047fc <HAL_DMA_IRQHandler+0xa74>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a76      	ldr	r2, [pc, #472]	@ (8004800 <HAL_DMA_IRQHandler+0xa78>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a74      	ldr	r2, [pc, #464]	@ (8004804 <HAL_DMA_IRQHandler+0xa7c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_DMA_IRQHandler+0x8b8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a73      	ldr	r2, [pc, #460]	@ (8004808 <HAL_DMA_IRQHandler+0xa80>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d108      	bne.n	8004652 <HAL_DMA_IRQHandler+0x8ca>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0201 	bic.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	e007      	b.n	8004662 <HAL_DMA_IRQHandler+0x8da>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3301      	adds	r3, #1
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466a:	429a      	cmp	r2, r3
 800466c:	d307      	bcc.n	800467e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f2      	bne.n	8004662 <HAL_DMA_IRQHandler+0x8da>
 800467c:	e000      	b.n	8004680 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800467e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2203      	movs	r2, #3
 8004692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004696:	e003      	b.n	80046a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 82aa 	beq.w	8004c06 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
 80046ba:	e2a4      	b.n	8004c06 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a52      	ldr	r2, [pc, #328]	@ (800480c <HAL_DMA_IRQHandler+0xa84>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d04a      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a51      	ldr	r2, [pc, #324]	@ (8004810 <HAL_DMA_IRQHandler+0xa88>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d045      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004814 <HAL_DMA_IRQHandler+0xa8c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d040      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a4e      	ldr	r2, [pc, #312]	@ (8004818 <HAL_DMA_IRQHandler+0xa90>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d03b      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a4c      	ldr	r2, [pc, #304]	@ (800481c <HAL_DMA_IRQHandler+0xa94>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d036      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a4b      	ldr	r2, [pc, #300]	@ (8004820 <HAL_DMA_IRQHandler+0xa98>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d031      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a49      	ldr	r2, [pc, #292]	@ (8004824 <HAL_DMA_IRQHandler+0xa9c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02c      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a48      	ldr	r2, [pc, #288]	@ (8004828 <HAL_DMA_IRQHandler+0xaa0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d027      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a46      	ldr	r2, [pc, #280]	@ (800482c <HAL_DMA_IRQHandler+0xaa4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d022      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a45      	ldr	r2, [pc, #276]	@ (8004830 <HAL_DMA_IRQHandler+0xaa8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d01d      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a43      	ldr	r2, [pc, #268]	@ (8004834 <HAL_DMA_IRQHandler+0xaac>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a42      	ldr	r2, [pc, #264]	@ (8004838 <HAL_DMA_IRQHandler+0xab0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a40      	ldr	r2, [pc, #256]	@ (800483c <HAL_DMA_IRQHandler+0xab4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a3f      	ldr	r2, [pc, #252]	@ (8004840 <HAL_DMA_IRQHandler+0xab8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a3d      	ldr	r2, [pc, #244]	@ (8004844 <HAL_DMA_IRQHandler+0xabc>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_DMA_IRQHandler+0x9d4>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a3c      	ldr	r2, [pc, #240]	@ (8004848 <HAL_DMA_IRQHandler+0xac0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <HAL_DMA_IRQHandler+0x9d8>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <HAL_DMA_IRQHandler+0x9da>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 824f 	beq.w	8004c06 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	2204      	movs	r2, #4
 800477a:	409a      	lsls	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80dd 	beq.w	8004940 <HAL_DMA_IRQHandler+0xbb8>
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80d7 	beq.w	8004940 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	2204      	movs	r2, #4
 800479c:	409a      	lsls	r2, r3
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d059      	beq.n	8004860 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d14a      	bne.n	800484c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8220 	beq.w	8004c00 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c8:	e21a      	b.n	8004c00 <HAL_DMA_IRQHandler+0xe78>
 80047ca:	bf00      	nop
 80047cc:	40020010 	.word	0x40020010
 80047d0:	40020028 	.word	0x40020028
 80047d4:	40020040 	.word	0x40020040
 80047d8:	40020058 	.word	0x40020058
 80047dc:	40020070 	.word	0x40020070
 80047e0:	40020088 	.word	0x40020088
 80047e4:	400200a0 	.word	0x400200a0
 80047e8:	400200b8 	.word	0x400200b8
 80047ec:	40020410 	.word	0x40020410
 80047f0:	40020428 	.word	0x40020428
 80047f4:	40020440 	.word	0x40020440
 80047f8:	40020458 	.word	0x40020458
 80047fc:	40020470 	.word	0x40020470
 8004800:	40020488 	.word	0x40020488
 8004804:	400204a0 	.word	0x400204a0
 8004808:	400204b8 	.word	0x400204b8
 800480c:	48022c08 	.word	0x48022c08
 8004810:	48022c1c 	.word	0x48022c1c
 8004814:	48022c30 	.word	0x48022c30
 8004818:	48022c44 	.word	0x48022c44
 800481c:	48022c58 	.word	0x48022c58
 8004820:	48022c6c 	.word	0x48022c6c
 8004824:	48022c80 	.word	0x48022c80
 8004828:	48022c94 	.word	0x48022c94
 800482c:	58025408 	.word	0x58025408
 8004830:	5802541c 	.word	0x5802541c
 8004834:	58025430 	.word	0x58025430
 8004838:	58025444 	.word	0x58025444
 800483c:	58025458 	.word	0x58025458
 8004840:	5802546c 	.word	0x5802546c
 8004844:	58025480 	.word	0x58025480
 8004848:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 81d5 	beq.w	8004c00 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800485e:	e1cf      	b.n	8004c00 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d160      	bne.n	800492c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a7f      	ldr	r2, [pc, #508]	@ (8004a6c <HAL_DMA_IRQHandler+0xce4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d04a      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a7d      	ldr	r2, [pc, #500]	@ (8004a70 <HAL_DMA_IRQHandler+0xce8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d045      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a7c      	ldr	r2, [pc, #496]	@ (8004a74 <HAL_DMA_IRQHandler+0xcec>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d040      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a7a      	ldr	r2, [pc, #488]	@ (8004a78 <HAL_DMA_IRQHandler+0xcf0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d03b      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a79      	ldr	r2, [pc, #484]	@ (8004a7c <HAL_DMA_IRQHandler+0xcf4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d036      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a77      	ldr	r2, [pc, #476]	@ (8004a80 <HAL_DMA_IRQHandler+0xcf8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d031      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a76      	ldr	r2, [pc, #472]	@ (8004a84 <HAL_DMA_IRQHandler+0xcfc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d02c      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a74      	ldr	r2, [pc, #464]	@ (8004a88 <HAL_DMA_IRQHandler+0xd00>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d027      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a73      	ldr	r2, [pc, #460]	@ (8004a8c <HAL_DMA_IRQHandler+0xd04>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d022      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a71      	ldr	r2, [pc, #452]	@ (8004a90 <HAL_DMA_IRQHandler+0xd08>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d01d      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a70      	ldr	r2, [pc, #448]	@ (8004a94 <HAL_DMA_IRQHandler+0xd0c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004a98 <HAL_DMA_IRQHandler+0xd10>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d013      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a6d      	ldr	r2, [pc, #436]	@ (8004a9c <HAL_DMA_IRQHandler+0xd14>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a6b      	ldr	r2, [pc, #428]	@ (8004aa0 <HAL_DMA_IRQHandler+0xd18>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a6a      	ldr	r2, [pc, #424]	@ (8004aa4 <HAL_DMA_IRQHandler+0xd1c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_DMA_IRQHandler+0xb82>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a68      	ldr	r2, [pc, #416]	@ (8004aa8 <HAL_DMA_IRQHandler+0xd20>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d108      	bne.n	800491c <HAL_DMA_IRQHandler+0xb94>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0208 	bic.w	r2, r2, #8
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e007      	b.n	800492c <HAL_DMA_IRQHandler+0xba4>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0204 	bic.w	r2, r2, #4
 800492a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8165 	beq.w	8004c00 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800493e:	e15f      	b.n	8004c00 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	2202      	movs	r2, #2
 800494a:	409a      	lsls	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	4013      	ands	r3, r2
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80c5 	beq.w	8004ae0 <HAL_DMA_IRQHandler+0xd58>
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80bf 	beq.w	8004ae0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	2202      	movs	r2, #2
 800496c:	409a      	lsls	r2, r3
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d018      	beq.n	80049ae <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 813a 	beq.w	8004c04 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004998:	e134      	b.n	8004c04 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8130 	beq.w	8004c04 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ac:	e12a      	b.n	8004c04 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f040 8089 	bne.w	8004acc <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2b      	ldr	r2, [pc, #172]	@ (8004a6c <HAL_DMA_IRQHandler+0xce4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d04a      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a29      	ldr	r2, [pc, #164]	@ (8004a70 <HAL_DMA_IRQHandler+0xce8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d045      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a28      	ldr	r2, [pc, #160]	@ (8004a74 <HAL_DMA_IRQHandler+0xcec>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d040      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a26      	ldr	r2, [pc, #152]	@ (8004a78 <HAL_DMA_IRQHandler+0xcf0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d03b      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a25      	ldr	r2, [pc, #148]	@ (8004a7c <HAL_DMA_IRQHandler+0xcf4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d036      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a23      	ldr	r2, [pc, #140]	@ (8004a80 <HAL_DMA_IRQHandler+0xcf8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d031      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a22      	ldr	r2, [pc, #136]	@ (8004a84 <HAL_DMA_IRQHandler+0xcfc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d02c      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a20      	ldr	r2, [pc, #128]	@ (8004a88 <HAL_DMA_IRQHandler+0xd00>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d027      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004a8c <HAL_DMA_IRQHandler+0xd04>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d022      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1d      	ldr	r2, [pc, #116]	@ (8004a90 <HAL_DMA_IRQHandler+0xd08>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01d      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1c      	ldr	r2, [pc, #112]	@ (8004a94 <HAL_DMA_IRQHandler+0xd0c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d018      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8004a98 <HAL_DMA_IRQHandler+0xd10>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a19      	ldr	r2, [pc, #100]	@ (8004a9c <HAL_DMA_IRQHandler+0xd14>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00e      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a17      	ldr	r2, [pc, #92]	@ (8004aa0 <HAL_DMA_IRQHandler+0xd18>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d009      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a16      	ldr	r2, [pc, #88]	@ (8004aa4 <HAL_DMA_IRQHandler+0xd1c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xcd2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a14      	ldr	r2, [pc, #80]	@ (8004aa8 <HAL_DMA_IRQHandler+0xd20>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d128      	bne.n	8004aac <HAL_DMA_IRQHandler+0xd24>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0214 	bic.w	r2, r2, #20
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e027      	b.n	8004abc <HAL_DMA_IRQHandler+0xd34>
 8004a6c:	40020010 	.word	0x40020010
 8004a70:	40020028 	.word	0x40020028
 8004a74:	40020040 	.word	0x40020040
 8004a78:	40020058 	.word	0x40020058
 8004a7c:	40020070 	.word	0x40020070
 8004a80:	40020088 	.word	0x40020088
 8004a84:	400200a0 	.word	0x400200a0
 8004a88:	400200b8 	.word	0x400200b8
 8004a8c:	40020410 	.word	0x40020410
 8004a90:	40020428 	.word	0x40020428
 8004a94:	40020440 	.word	0x40020440
 8004a98:	40020458 	.word	0x40020458
 8004a9c:	40020470 	.word	0x40020470
 8004aa0:	40020488 	.word	0x40020488
 8004aa4:	400204a0 	.word	0x400204a0
 8004aa8:	400204b8 	.word	0x400204b8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 020a 	bic.w	r2, r2, #10
 8004aba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8097 	beq.w	8004c04 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ade:	e091      	b.n	8004c04 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	2208      	movs	r2, #8
 8004aea:	409a      	lsls	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 8088 	beq.w	8004c06 <HAL_DMA_IRQHandler+0xe7e>
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8082 	beq.w	8004c06 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a41      	ldr	r2, [pc, #260]	@ (8004c0c <HAL_DMA_IRQHandler+0xe84>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d04a      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a3f      	ldr	r2, [pc, #252]	@ (8004c10 <HAL_DMA_IRQHandler+0xe88>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d045      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c14 <HAL_DMA_IRQHandler+0xe8c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d040      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a3c      	ldr	r2, [pc, #240]	@ (8004c18 <HAL_DMA_IRQHandler+0xe90>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d03b      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8004c1c <HAL_DMA_IRQHandler+0xe94>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d036      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a39      	ldr	r2, [pc, #228]	@ (8004c20 <HAL_DMA_IRQHandler+0xe98>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d031      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a38      	ldr	r2, [pc, #224]	@ (8004c24 <HAL_DMA_IRQHandler+0xe9c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d02c      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a36      	ldr	r2, [pc, #216]	@ (8004c28 <HAL_DMA_IRQHandler+0xea0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d027      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a35      	ldr	r2, [pc, #212]	@ (8004c2c <HAL_DMA_IRQHandler+0xea4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d022      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a33      	ldr	r2, [pc, #204]	@ (8004c30 <HAL_DMA_IRQHandler+0xea8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01d      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a32      	ldr	r2, [pc, #200]	@ (8004c34 <HAL_DMA_IRQHandler+0xeac>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d018      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a30      	ldr	r2, [pc, #192]	@ (8004c38 <HAL_DMA_IRQHandler+0xeb0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004c3c <HAL_DMA_IRQHandler+0xeb4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a2d      	ldr	r2, [pc, #180]	@ (8004c40 <HAL_DMA_IRQHandler+0xeb8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2c      	ldr	r2, [pc, #176]	@ (8004c44 <HAL_DMA_IRQHandler+0xebc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xe1a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c48 <HAL_DMA_IRQHandler+0xec0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <HAL_DMA_IRQHandler+0xe2c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 021c 	bic.w	r2, r2, #28
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e007      	b.n	8004bc4 <HAL_DMA_IRQHandler+0xe3c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 020e 	bic.w	r2, r2, #14
 8004bc2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	2201      	movs	r2, #1
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	4798      	blx	r3
 8004bfa:	e004      	b.n	8004c06 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004bfc:	bf00      	nop
 8004bfe:	e002      	b.n	8004c06 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c00:	bf00      	nop
 8004c02:	e000      	b.n	8004c06 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c04:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c06:	3728      	adds	r7, #40	@ 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40020010 	.word	0x40020010
 8004c10:	40020028 	.word	0x40020028
 8004c14:	40020040 	.word	0x40020040
 8004c18:	40020058 	.word	0x40020058
 8004c1c:	40020070 	.word	0x40020070
 8004c20:	40020088 	.word	0x40020088
 8004c24:	400200a0 	.word	0x400200a0
 8004c28:	400200b8 	.word	0x400200b8
 8004c2c:	40020410 	.word	0x40020410
 8004c30:	40020428 	.word	0x40020428
 8004c34:	40020440 	.word	0x40020440
 8004c38:	40020458 	.word	0x40020458
 8004c3c:	40020470 	.word	0x40020470
 8004c40:	40020488 	.word	0x40020488
 8004c44:	400204a0 	.word	0x400204a0
 8004c48:	400204b8 	.word	0x400204b8

08004c4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c64:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a7f      	ldr	r2, [pc, #508]	@ (8004e68 <DMA_SetConfig+0x21c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d072      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a7d      	ldr	r2, [pc, #500]	@ (8004e6c <DMA_SetConfig+0x220>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d06d      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e70 <DMA_SetConfig+0x224>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d068      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a7a      	ldr	r2, [pc, #488]	@ (8004e74 <DMA_SetConfig+0x228>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d063      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a79      	ldr	r2, [pc, #484]	@ (8004e78 <DMA_SetConfig+0x22c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d05e      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a77      	ldr	r2, [pc, #476]	@ (8004e7c <DMA_SetConfig+0x230>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d059      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a76      	ldr	r2, [pc, #472]	@ (8004e80 <DMA_SetConfig+0x234>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d054      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a74      	ldr	r2, [pc, #464]	@ (8004e84 <DMA_SetConfig+0x238>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d04f      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a73      	ldr	r2, [pc, #460]	@ (8004e88 <DMA_SetConfig+0x23c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d04a      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a71      	ldr	r2, [pc, #452]	@ (8004e8c <DMA_SetConfig+0x240>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d045      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a70      	ldr	r2, [pc, #448]	@ (8004e90 <DMA_SetConfig+0x244>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d040      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a6e      	ldr	r2, [pc, #440]	@ (8004e94 <DMA_SetConfig+0x248>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d03b      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a6d      	ldr	r2, [pc, #436]	@ (8004e98 <DMA_SetConfig+0x24c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d036      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a6b      	ldr	r2, [pc, #428]	@ (8004e9c <DMA_SetConfig+0x250>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d031      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a6a      	ldr	r2, [pc, #424]	@ (8004ea0 <DMA_SetConfig+0x254>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d02c      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a68      	ldr	r2, [pc, #416]	@ (8004ea4 <DMA_SetConfig+0x258>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d027      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a67      	ldr	r2, [pc, #412]	@ (8004ea8 <DMA_SetConfig+0x25c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d022      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a65      	ldr	r2, [pc, #404]	@ (8004eac <DMA_SetConfig+0x260>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01d      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a64      	ldr	r2, [pc, #400]	@ (8004eb0 <DMA_SetConfig+0x264>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a62      	ldr	r2, [pc, #392]	@ (8004eb4 <DMA_SetConfig+0x268>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a61      	ldr	r2, [pc, #388]	@ (8004eb8 <DMA_SetConfig+0x26c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a5f      	ldr	r2, [pc, #380]	@ (8004ebc <DMA_SetConfig+0x270>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a5e      	ldr	r2, [pc, #376]	@ (8004ec0 <DMA_SetConfig+0x274>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <DMA_SetConfig+0x10a>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a5c      	ldr	r2, [pc, #368]	@ (8004ec4 <DMA_SetConfig+0x278>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d101      	bne.n	8004d5a <DMA_SetConfig+0x10e>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <DMA_SetConfig+0x110>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00d      	beq.n	8004d7c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d68:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d004      	beq.n	8004d7c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d7a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a39      	ldr	r2, [pc, #228]	@ (8004e68 <DMA_SetConfig+0x21c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d04a      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a38      	ldr	r2, [pc, #224]	@ (8004e6c <DMA_SetConfig+0x220>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d045      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a36      	ldr	r2, [pc, #216]	@ (8004e70 <DMA_SetConfig+0x224>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d040      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a35      	ldr	r2, [pc, #212]	@ (8004e74 <DMA_SetConfig+0x228>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d03b      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a33      	ldr	r2, [pc, #204]	@ (8004e78 <DMA_SetConfig+0x22c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d036      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a32      	ldr	r2, [pc, #200]	@ (8004e7c <DMA_SetConfig+0x230>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d031      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a30      	ldr	r2, [pc, #192]	@ (8004e80 <DMA_SetConfig+0x234>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d02c      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8004e84 <DMA_SetConfig+0x238>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d027      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e88 <DMA_SetConfig+0x23c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d022      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a2c      	ldr	r2, [pc, #176]	@ (8004e8c <DMA_SetConfig+0x240>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d01d      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a2a      	ldr	r2, [pc, #168]	@ (8004e90 <DMA_SetConfig+0x244>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d018      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a29      	ldr	r2, [pc, #164]	@ (8004e94 <DMA_SetConfig+0x248>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a27      	ldr	r2, [pc, #156]	@ (8004e98 <DMA_SetConfig+0x24c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00e      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a26      	ldr	r2, [pc, #152]	@ (8004e9c <DMA_SetConfig+0x250>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d009      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a24      	ldr	r2, [pc, #144]	@ (8004ea0 <DMA_SetConfig+0x254>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d004      	beq.n	8004e1c <DMA_SetConfig+0x1d0>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a23      	ldr	r2, [pc, #140]	@ (8004ea4 <DMA_SetConfig+0x258>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d101      	bne.n	8004e20 <DMA_SetConfig+0x1d4>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <DMA_SetConfig+0x1d6>
 8004e20:	2300      	movs	r3, #0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d059      	beq.n	8004eda <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	223f      	movs	r2, #63	@ 0x3f
 8004e30:	409a      	lsls	r2, r3
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e44:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b40      	cmp	r3, #64	@ 0x40
 8004e54:	d138      	bne.n	8004ec8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e66:	e0ae      	b.n	8004fc6 <DMA_SetConfig+0x37a>
 8004e68:	40020010 	.word	0x40020010
 8004e6c:	40020028 	.word	0x40020028
 8004e70:	40020040 	.word	0x40020040
 8004e74:	40020058 	.word	0x40020058
 8004e78:	40020070 	.word	0x40020070
 8004e7c:	40020088 	.word	0x40020088
 8004e80:	400200a0 	.word	0x400200a0
 8004e84:	400200b8 	.word	0x400200b8
 8004e88:	40020410 	.word	0x40020410
 8004e8c:	40020428 	.word	0x40020428
 8004e90:	40020440 	.word	0x40020440
 8004e94:	40020458 	.word	0x40020458
 8004e98:	40020470 	.word	0x40020470
 8004e9c:	40020488 	.word	0x40020488
 8004ea0:	400204a0 	.word	0x400204a0
 8004ea4:	400204b8 	.word	0x400204b8
 8004ea8:	58025408 	.word	0x58025408
 8004eac:	5802541c 	.word	0x5802541c
 8004eb0:	58025430 	.word	0x58025430
 8004eb4:	58025444 	.word	0x58025444
 8004eb8:	58025458 	.word	0x58025458
 8004ebc:	5802546c 	.word	0x5802546c
 8004ec0:	58025480 	.word	0x58025480
 8004ec4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]
}
 8004ed8:	e075      	b.n	8004fc6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a3d      	ldr	r2, [pc, #244]	@ (8004fd4 <DMA_SetConfig+0x388>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d04a      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a3b      	ldr	r2, [pc, #236]	@ (8004fd8 <DMA_SetConfig+0x38c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d045      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a3a      	ldr	r2, [pc, #232]	@ (8004fdc <DMA_SetConfig+0x390>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d040      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a38      	ldr	r2, [pc, #224]	@ (8004fe0 <DMA_SetConfig+0x394>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d03b      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a37      	ldr	r2, [pc, #220]	@ (8004fe4 <DMA_SetConfig+0x398>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d036      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a35      	ldr	r2, [pc, #212]	@ (8004fe8 <DMA_SetConfig+0x39c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d031      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a34      	ldr	r2, [pc, #208]	@ (8004fec <DMA_SetConfig+0x3a0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d02c      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a32      	ldr	r2, [pc, #200]	@ (8004ff0 <DMA_SetConfig+0x3a4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d027      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a31      	ldr	r2, [pc, #196]	@ (8004ff4 <DMA_SetConfig+0x3a8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d022      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2f      	ldr	r2, [pc, #188]	@ (8004ff8 <DMA_SetConfig+0x3ac>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d01d      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a2e      	ldr	r2, [pc, #184]	@ (8004ffc <DMA_SetConfig+0x3b0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d018      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005000 <DMA_SetConfig+0x3b4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a2b      	ldr	r2, [pc, #172]	@ (8005004 <DMA_SetConfig+0x3b8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00e      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a29      	ldr	r2, [pc, #164]	@ (8005008 <DMA_SetConfig+0x3bc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d009      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a28      	ldr	r2, [pc, #160]	@ (800500c <DMA_SetConfig+0x3c0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d004      	beq.n	8004f7a <DMA_SetConfig+0x32e>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a26      	ldr	r2, [pc, #152]	@ (8005010 <DMA_SetConfig+0x3c4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d101      	bne.n	8004f7e <DMA_SetConfig+0x332>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <DMA_SetConfig+0x334>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d020      	beq.n	8004fc6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b40      	cmp	r3, #64	@ 0x40
 8004fa2:	d108      	bne.n	8004fb6 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	60da      	str	r2, [r3, #12]
}
 8004fb4:	e007      	b.n	8004fc6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	60da      	str	r2, [r3, #12]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	48022c08 	.word	0x48022c08
 8004fd8:	48022c1c 	.word	0x48022c1c
 8004fdc:	48022c30 	.word	0x48022c30
 8004fe0:	48022c44 	.word	0x48022c44
 8004fe4:	48022c58 	.word	0x48022c58
 8004fe8:	48022c6c 	.word	0x48022c6c
 8004fec:	48022c80 	.word	0x48022c80
 8004ff0:	48022c94 	.word	0x48022c94
 8004ff4:	58025408 	.word	0x58025408
 8004ff8:	5802541c 	.word	0x5802541c
 8004ffc:	58025430 	.word	0x58025430
 8005000:	58025444 	.word	0x58025444
 8005004:	58025458 	.word	0x58025458
 8005008:	5802546c 	.word	0x5802546c
 800500c:	58025480 	.word	0x58025480
 8005010:	58025494 	.word	0x58025494

08005014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a42      	ldr	r2, [pc, #264]	@ (800512c <DMA_CalcBaseAndBitshift+0x118>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d04a      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a41      	ldr	r2, [pc, #260]	@ (8005130 <DMA_CalcBaseAndBitshift+0x11c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d045      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a3f      	ldr	r2, [pc, #252]	@ (8005134 <DMA_CalcBaseAndBitshift+0x120>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d040      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a3e      	ldr	r2, [pc, #248]	@ (8005138 <DMA_CalcBaseAndBitshift+0x124>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d03b      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a3c      	ldr	r2, [pc, #240]	@ (800513c <DMA_CalcBaseAndBitshift+0x128>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d036      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a3b      	ldr	r2, [pc, #236]	@ (8005140 <DMA_CalcBaseAndBitshift+0x12c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d031      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a39      	ldr	r2, [pc, #228]	@ (8005144 <DMA_CalcBaseAndBitshift+0x130>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d02c      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a38      	ldr	r2, [pc, #224]	@ (8005148 <DMA_CalcBaseAndBitshift+0x134>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d027      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a36      	ldr	r2, [pc, #216]	@ (800514c <DMA_CalcBaseAndBitshift+0x138>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d022      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a35      	ldr	r2, [pc, #212]	@ (8005150 <DMA_CalcBaseAndBitshift+0x13c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d01d      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a33      	ldr	r2, [pc, #204]	@ (8005154 <DMA_CalcBaseAndBitshift+0x140>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d018      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a32      	ldr	r2, [pc, #200]	@ (8005158 <DMA_CalcBaseAndBitshift+0x144>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a30      	ldr	r2, [pc, #192]	@ (800515c <DMA_CalcBaseAndBitshift+0x148>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005160 <DMA_CalcBaseAndBitshift+0x14c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005164 <DMA_CalcBaseAndBitshift+0x150>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xa8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005168 <DMA_CalcBaseAndBitshift+0x154>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d101      	bne.n	80050c0 <DMA_CalcBaseAndBitshift+0xac>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <DMA_CalcBaseAndBitshift+0xae>
 80050c0:	2300      	movs	r3, #0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d024      	beq.n	8005110 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	3b10      	subs	r3, #16
 80050ce:	4a27      	ldr	r2, [pc, #156]	@ (800516c <DMA_CalcBaseAndBitshift+0x158>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	091b      	lsrs	r3, r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	4a24      	ldr	r2, [pc, #144]	@ (8005170 <DMA_CalcBaseAndBitshift+0x15c>)
 80050e0:	5cd3      	ldrb	r3, [r2, r3]
 80050e2:	461a      	mov	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d908      	bls.n	8005100 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005174 <DMA_CalcBaseAndBitshift+0x160>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	1d1a      	adds	r2, r3, #4
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80050fe:	e00d      	b.n	800511c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	4b1b      	ldr	r3, [pc, #108]	@ (8005174 <DMA_CalcBaseAndBitshift+0x160>)
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6593      	str	r3, [r2, #88]	@ 0x58
 800510e:	e005      	b.n	800511c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40020010 	.word	0x40020010
 8005130:	40020028 	.word	0x40020028
 8005134:	40020040 	.word	0x40020040
 8005138:	40020058 	.word	0x40020058
 800513c:	40020070 	.word	0x40020070
 8005140:	40020088 	.word	0x40020088
 8005144:	400200a0 	.word	0x400200a0
 8005148:	400200b8 	.word	0x400200b8
 800514c:	40020410 	.word	0x40020410
 8005150:	40020428 	.word	0x40020428
 8005154:	40020440 	.word	0x40020440
 8005158:	40020458 	.word	0x40020458
 800515c:	40020470 	.word	0x40020470
 8005160:	40020488 	.word	0x40020488
 8005164:	400204a0 	.word	0x400204a0
 8005168:	400204b8 	.word	0x400204b8
 800516c:	aaaaaaab 	.word	0xaaaaaaab
 8005170:	0800b010 	.word	0x0800b010
 8005174:	fffffc00 	.word	0xfffffc00

08005178 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d120      	bne.n	80051ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	2b03      	cmp	r3, #3
 8005192:	d858      	bhi.n	8005246 <DMA_CheckFifoParam+0xce>
 8005194:	a201      	add	r2, pc, #4	@ (adr r2, 800519c <DMA_CheckFifoParam+0x24>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051ad 	.word	0x080051ad
 80051a0:	080051bf 	.word	0x080051bf
 80051a4:	080051ad 	.word	0x080051ad
 80051a8:	08005247 	.word	0x08005247
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d048      	beq.n	800524a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051bc:	e045      	b.n	800524a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051c6:	d142      	bne.n	800524e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051cc:	e03f      	b.n	800524e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051d6:	d123      	bne.n	8005220 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d838      	bhi.n	8005252 <DMA_CheckFifoParam+0xda>
 80051e0:	a201      	add	r2, pc, #4	@ (adr r2, 80051e8 <DMA_CheckFifoParam+0x70>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	080051ff 	.word	0x080051ff
 80051f0:	080051f9 	.word	0x080051f9
 80051f4:	08005211 	.word	0x08005211
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
        break;
 80051fc:	e030      	b.n	8005260 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d025      	beq.n	8005256 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800520e:	e022      	b.n	8005256 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005218:	d11f      	bne.n	800525a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800521e:	e01c      	b.n	800525a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005224:	2b02      	cmp	r3, #2
 8005226:	d902      	bls.n	800522e <DMA_CheckFifoParam+0xb6>
 8005228:	2b03      	cmp	r3, #3
 800522a:	d003      	beq.n	8005234 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800522c:	e018      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
        break;
 8005232:	e015      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00e      	beq.n	800525e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
    break;
 8005244:	e00b      	b.n	800525e <DMA_CheckFifoParam+0xe6>
        break;
 8005246:	bf00      	nop
 8005248:	e00a      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        break;
 800524a:	bf00      	nop
 800524c:	e008      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        break;
 800524e:	bf00      	nop
 8005250:	e006      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        break;
 8005252:	bf00      	nop
 8005254:	e004      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        break;
 8005256:	bf00      	nop
 8005258:	e002      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
        break;
 800525a:	bf00      	nop
 800525c:	e000      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
    break;
 800525e:	bf00      	nop
    }
  }

  return status;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop

08005270 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a38      	ldr	r2, [pc, #224]	@ (8005364 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d022      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a36      	ldr	r2, [pc, #216]	@ (8005368 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01d      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a35      	ldr	r2, [pc, #212]	@ (800536c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a33      	ldr	r2, [pc, #204]	@ (8005370 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a32      	ldr	r2, [pc, #200]	@ (8005374 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a30      	ldr	r2, [pc, #192]	@ (8005378 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a2f      	ldr	r2, [pc, #188]	@ (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005380 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01a      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	3b08      	subs	r3, #8
 80052e0:	4a28      	ldr	r2, [pc, #160]	@ (8005384 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	091b      	lsrs	r3, r3, #4
 80052e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4b26      	ldr	r3, [pc, #152]	@ (8005388 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	461a      	mov	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a24      	ldr	r2, [pc, #144]	@ (800538c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80052fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2201      	movs	r2, #1
 8005306:	409a      	lsls	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800530c:	e024      	b.n	8005358 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	3b10      	subs	r3, #16
 8005316:	4a1e      	ldr	r2, [pc, #120]	@ (8005390 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4a1c      	ldr	r2, [pc, #112]	@ (8005394 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d806      	bhi.n	8005336 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4a1b      	ldr	r2, [pc, #108]	@ (8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d902      	bls.n	8005336 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3308      	adds	r3, #8
 8005334:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4b18      	ldr	r3, [pc, #96]	@ (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	461a      	mov	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a16      	ldr	r2, [pc, #88]	@ (80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005348:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2201      	movs	r2, #1
 8005352:	409a      	lsls	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	58025408 	.word	0x58025408
 8005368:	5802541c 	.word	0x5802541c
 800536c:	58025430 	.word	0x58025430
 8005370:	58025444 	.word	0x58025444
 8005374:	58025458 	.word	0x58025458
 8005378:	5802546c 	.word	0x5802546c
 800537c:	58025480 	.word	0x58025480
 8005380:	58025494 	.word	0x58025494
 8005384:	cccccccd 	.word	0xcccccccd
 8005388:	16009600 	.word	0x16009600
 800538c:	58025880 	.word	0x58025880
 8005390:	aaaaaaab 	.word	0xaaaaaaab
 8005394:	400204b8 	.word	0x400204b8
 8005398:	4002040f 	.word	0x4002040f
 800539c:	10008200 	.word	0x10008200
 80053a0:	40020880 	.word	0x40020880

080053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d04a      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d847      	bhi.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a25      	ldr	r2, [pc, #148]	@ (800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d022      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a24      	ldr	r2, [pc, #144]	@ (8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d01d      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a22      	ldr	r2, [pc, #136]	@ (8005464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d018      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a21      	ldr	r2, [pc, #132]	@ (8005468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1f      	ldr	r2, [pc, #124]	@ (800546c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00e      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d009      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1c      	ldr	r2, [pc, #112]	@ (8005474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d004      	beq.n	8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1b      	ldr	r2, [pc, #108]	@ (8005478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d101      	bne.n	8005414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005414:	2300      	movs	r3, #0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4b17      	ldr	r3, [pc, #92]	@ (800547c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a15      	ldr	r2, [pc, #84]	@ (8005480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800542c:	671a      	str	r2, [r3, #112]	@ 0x70
 800542e:	e009      	b.n	8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4b14      	ldr	r3, [pc, #80]	@ (8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	461a      	mov	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a11      	ldr	r2, [pc, #68]	@ (8005488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005442:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3b01      	subs	r3, #1
 8005448:	2201      	movs	r2, #1
 800544a:	409a      	lsls	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	58025408 	.word	0x58025408
 8005460:	5802541c 	.word	0x5802541c
 8005464:	58025430 	.word	0x58025430
 8005468:	58025444 	.word	0x58025444
 800546c:	58025458 	.word	0x58025458
 8005470:	5802546c 	.word	0x5802546c
 8005474:	58025480 	.word	0x58025480
 8005478:	58025494 	.word	0x58025494
 800547c:	1600963f 	.word	0x1600963f
 8005480:	58025940 	.word	0x58025940
 8005484:	1000823f 	.word	0x1000823f
 8005488:	40020940 	.word	0x40020940

0800548c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b098      	sub	sp, #96	@ 0x60
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005494:	4a84      	ldr	r2, [pc, #528]	@ (80056a8 <HAL_FDCAN_Init+0x21c>)
 8005496:	f107 030c 	add.w	r3, r7, #12
 800549a:	4611      	mov	r1, r2
 800549c:	224c      	movs	r2, #76	@ 0x4c
 800549e:	4618      	mov	r0, r3
 80054a0:	f005 fd6e 	bl	800af80 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e1c6      	b.n	800583c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a7e      	ldr	r2, [pc, #504]	@ (80056ac <HAL_FDCAN_Init+0x220>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d106      	bne.n	80054c6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054c0:	461a      	mov	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fb ff32 	bl	8001344 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0210 	bic.w	r2, r2, #16
 80054ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054f0:	f7fc fba2 	bl	8001c38 <HAL_GetTick>
 80054f4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80054f6:	e014      	b.n	8005522 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80054f8:	f7fc fb9e 	bl	8001c38 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b0a      	cmp	r3, #10
 8005504:	d90d      	bls.n	8005522 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800550c:	f043 0201 	orr.w	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2203      	movs	r2, #3
 800551a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e18c      	b.n	800583c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b08      	cmp	r3, #8
 800552e:	d0e3      	beq.n	80054f8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005540:	f7fc fb7a 	bl	8001c38 <HAL_GetTick>
 8005544:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005546:	e014      	b.n	8005572 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005548:	f7fc fb76 	bl	8001c38 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b0a      	cmp	r3, #10
 8005554:	d90d      	bls.n	8005572 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800555c:	f043 0201 	orr.w	r2, r3, #1
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2203      	movs	r2, #3
 800556a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e164      	b.n	800583c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0e3      	beq.n	8005548 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0202 	orr.w	r2, r2, #2
 800558e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	7c1b      	ldrb	r3, [r3, #16]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d108      	bne.n	80055aa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055a6:	619a      	str	r2, [r3, #24]
 80055a8:	e007      	b.n	80055ba <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	7c5b      	ldrb	r3, [r3, #17]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d108      	bne.n	80055d4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055d0:	619a      	str	r2, [r3, #24]
 80055d2:	e007      	b.n	80055e4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	7c9b      	ldrb	r3, [r3, #18]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d108      	bne.n	80055fe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055fa:	619a      	str	r2, [r3, #24]
 80055fc:	e007      	b.n	800560e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800560c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005632:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0210 	bic.w	r2, r2, #16
 8005642:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d108      	bne.n	800565e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0204 	orr.w	r2, r2, #4
 800565a:	619a      	str	r2, [r3, #24]
 800565c:	e030      	b.n	80056c0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d02c      	beq.n	80056c0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d020      	beq.n	80056b0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800567c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0210 	orr.w	r2, r2, #16
 800568c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	2b03      	cmp	r3, #3
 8005694:	d114      	bne.n	80056c0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0220 	orr.w	r2, r2, #32
 80056a4:	619a      	str	r2, [r3, #24]
 80056a6:	e00b      	b.n	80056c0 <HAL_FDCAN_Init+0x234>
 80056a8:	0800afb4 	.word	0x0800afb4
 80056ac:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0220 	orr.w	r2, r2, #32
 80056be:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056d0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80056d8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80056e8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056ea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056f4:	d115      	bne.n	8005722 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005700:	3b01      	subs	r3, #1
 8005702:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005704:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570a:	3b01      	subs	r3, #1
 800570c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800570e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	3b01      	subs	r3, #1
 8005718:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800571e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005720:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005748:	4413      	add	r3, r2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d011      	beq.n	8005772 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005756:	f023 0107 	bic.w	r1, r3, #7
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	3360      	adds	r3, #96	@ 0x60
 8005762:	443b      	add	r3, r7
 8005764:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d011      	beq.n	800579e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005782:	f023 0107 	bic.w	r1, r3, #7
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	3360      	adds	r3, #96	@ 0x60
 800578e:	443b      	add	r3, r7
 8005790:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d012      	beq.n	80057cc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057ae:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	3360      	adds	r3, #96	@ 0x60
 80057ba:	443b      	add	r3, r7
 80057bc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80057c0:	011a      	lsls	r2, r3, #4
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d012      	beq.n	80057fa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057dc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	3360      	adds	r3, #96	@ 0x60
 80057e8:	443b      	add	r3, r7
 80057ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80057ee:	021a      	lsls	r2, r3, #8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a11      	ldr	r2, [pc, #68]	@ (8005844 <HAL_FDCAN_Init+0x3b8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d107      	bne.n	8005814 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f022 0203 	bic.w	r2, r2, #3
 8005812:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fd81 	bl	8006334 <FDCAN_CalcultateRamBlockAddresses>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005838:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800583c:	4618      	mov	r0, r3
 800583e:	3760      	adds	r7, #96	@ 0x60
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	4000a000 	.word	0x4000a000

08005848 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d111      	bne.n	8005880 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0201 	bic.w	r2, r2, #1
 8005872:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e008      	b.n	8005892 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005886:	f043 0204 	orr.w	r2, r3, #4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d141      	bne.n	800593a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80058be:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058cc:	f043 0220 	orr.w	r2, r3, #32
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e038      	b.n	800594c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80058e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e026      	b.n	800594c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005906:	0c1b      	lsrs	r3, r3, #16
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fe93 	bl	8006640 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2101      	movs	r1, #1
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	fa01 f202 	lsl.w	r2, r1, r2
 8005926:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800592a:	2201      	movs	r2, #1
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	409a      	lsls	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	e008      	b.n	800594c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005940:	f043 0208 	orr.w	r2, r3, #8
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
  }
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005954:	b480      	push	{r7}
 8005956:	b08b      	sub	sp, #44	@ 0x2c
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005962:	2300      	movs	r3, #0
 8005964:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800596c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800596e:	7efb      	ldrb	r3, [r7, #27]
 8005970:	2b02      	cmp	r3, #2
 8005972:	f040 8149 	bne.w	8005c08 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b40      	cmp	r3, #64	@ 0x40
 800597a:	d14c      	bne.n	8005a16 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005984:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005992:	f043 0220 	orr.w	r2, r3, #32
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e13c      	b.n	8005c1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e12a      	b.n	8005c1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059cc:	0e1b      	lsrs	r3, r3, #24
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10a      	bne.n	80059ec <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059de:	0fdb      	lsrs	r3, r3, #31
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80059e8:	2301      	movs	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059f4:	0a1b      	lsrs	r3, r3, #8
 80059f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a08:	69f9      	ldr	r1, [r7, #28]
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a14:	e068      	b.n	8005ae8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b41      	cmp	r3, #65	@ 0x41
 8005a1a:	d14c      	bne.n	8005ab6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a24:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a32:	f043 0220 	orr.w	r2, r3, #32
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0ec      	b.n	8005c1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d109      	bne.n	8005a64 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0da      	b.n	8005c1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a6c:	0e1b      	lsrs	r3, r3, #24
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d10a      	bne.n	8005a8c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a7e:	0fdb      	lsrs	r3, r3, #31
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d101      	bne.n	8005a8c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a94:	0a1b      	lsrs	r3, r3, #8
 8005a96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa8:	69f9      	ldr	r1, [r7, #28]
 8005aaa:	fb01 f303 	mul.w	r3, r1, r3
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab4:	e018      	b.n	8005ae8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d309      	bcc.n	8005ad4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ac6:	f043 0220 	orr.w	r2, r3, #32
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0a2      	b.n	8005c1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	fb01 f303 	mul.w	r3, r1, r3
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d107      	bne.n	8005b0c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	0c9b      	lsrs	r3, r3, #18
 8005b02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e005      	b.n	8005b18 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	3304      	adds	r3, #4
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	0c1b      	lsrs	r3, r3, #16
 8005b46:	f003 020f 	and.w	r2, r3, #15
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	0e1b      	lsrs	r3, r3, #24
 8005b6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	0fda      	lsrs	r2, r3, #31
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	3304      	adds	r3, #4
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	623b      	str	r3, [r7, #32]
 8005b8c:	e00a      	b.n	8005ba4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	441a      	add	r2, r3
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	440b      	add	r3, r1
 8005b9a:	7812      	ldrb	r2, [r2, #0]
 8005b9c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	623b      	str	r3, [r7, #32]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c28 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005baa:	5cd3      	ldrb	r3, [r2, r3]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d3ec      	bcc.n	8005b8e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b40      	cmp	r3, #64	@ 0x40
 8005bb8:	d105      	bne.n	8005bc6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005bc4:	e01e      	b.n	8005c04 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b41      	cmp	r3, #65	@ 0x41
 8005bca:	d105      	bne.n	8005bd8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005bd6:	e015      	b.n	8005c04 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b1f      	cmp	r3, #31
 8005bdc:	d808      	bhi.n	8005bf0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2101      	movs	r1, #1
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005bee:	e009      	b.n	8005c04 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 021f 	and.w	r2, r3, #31
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005c00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e008      	b.n	8005c1a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c0e:	f043 0208 	orr.w	r2, r3, #8
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
  }
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	372c      	adds	r7, #44	@ 0x2c
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	0800b018 	.word	0x0800b018

08005c2c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c40:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005c42:	68fb      	ldr	r3, [r7, #12]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005c62:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d002      	beq.n	8005c70 <HAL_FDCAN_ActivateNotification+0x20>
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d155      	bne.n	8005d1c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d108      	bne.n	8005c90 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c8e:	e014      	b.n	8005cba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d108      	bne.n	8005cb2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0202 	orr.w	r2, r2, #2
 8005cae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005cb0:	e003      	b.n	8005cba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d009      	beq.n	8005cd8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8005d3c <HAL_FDCAN_ActivateNotification+0xec>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	430b      	orrs	r3, r1
 8005d08:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d40 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	0f9b      	lsrs	r3, r3, #30
 8005d12:	490b      	ldr	r1, [pc, #44]	@ (8005d40 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e008      	b.n	8005d2e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d22:	f043 0202 	orr.w	r2, r3, #2
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
  }
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	3fcfffff 	.word	0x3fcfffff
 8005d40:	4000a800 	.word	0x4000a800

08005d44 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b096      	sub	sp, #88	@ 0x58
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005d4c:	4b95      	ldr	r3, [pc, #596]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	079b      	lsls	r3, r3, #30
 8005d52:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005d54:	4b93      	ldr	r3, [pc, #588]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	079b      	lsls	r3, r3, #30
 8005d5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d66:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005d6a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d74:	4013      	ands	r3, r2
 8005d76:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005da4:	4013      	ands	r3, r2
 8005da6:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dae:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005db2:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc6:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005dca:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00f      	beq.n	8005e12 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e04:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e06:	4b67      	ldr	r3, [pc, #412]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fa44 	bl	800629a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01c      	beq.n	8005e56 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d017      	beq.n	8005e56 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005e2e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e46:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e48:	4b56      	ldr	r3, [pc, #344]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005e4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f9f9 	bl	8006248 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00d      	beq.n	8005e78 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e62:	4b51      	ldr	r3, [pc, #324]	@ (8005fa8 <HAL_FDCAN_IRQHandler+0x264>)
 8005e64:	400b      	ands	r3, r1
 8005e66:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e68:	4a4e      	ldr	r2, [pc, #312]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e6c:	0f9b      	lsrs	r3, r3, #30
 8005e6e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005e70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f9b2 	bl	80061dc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e84:	4b48      	ldr	r3, [pc, #288]	@ (8005fa8 <HAL_FDCAN_IRQHandler+0x264>)
 8005e86:	400b      	ands	r3, r1
 8005e88:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e8a:	4a46      	ldr	r2, [pc, #280]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e8e:	0f9b      	lsrs	r3, r3, #30
 8005e90:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005e92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f9ac 	bl	80061f2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00d      	beq.n	8005ebc <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005ea6:	4b40      	ldr	r3, [pc, #256]	@ (8005fa8 <HAL_FDCAN_IRQHandler+0x264>)
 8005ea8:	400b      	ands	r3, r1
 8005eaa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005eac:	4a3d      	ldr	r2, [pc, #244]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eb0:	0f9b      	lsrs	r3, r3, #30
 8005eb2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005eb4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fa fb22 	bl	8000500 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005ebc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00d      	beq.n	8005ede <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005ec8:	4b37      	ldr	r3, [pc, #220]	@ (8005fa8 <HAL_FDCAN_IRQHandler+0x264>)
 8005eca:	400b      	ands	r3, r1
 8005ecc:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ece:	4a35      	ldr	r2, [pc, #212]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005ed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ed2:	0f9b      	lsrs	r3, r3, #30
 8005ed4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005ed6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f995 	bl	8006208 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00f      	beq.n	8005f08 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005efa:	651a      	str	r2, [r3, #80]	@ 0x50
 8005efc:	4b29      	ldr	r3, [pc, #164]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f98b 	bl	800621e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01c      	beq.n	8005f4c <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d017      	beq.n	8005f4c <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f24:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f30:	4013      	ands	r3, r2
 8005f32:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f3e:	4b19      	ldr	r3, [pc, #100]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005f44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f973 	bl	8006232 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00f      	beq.n	8005f76 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005f68:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f974 	bl	800625e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d015      	beq.n	8005fac <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d010      	beq.n	8005fac <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005f92:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f94:	4b03      	ldr	r3, [pc, #12]	@ (8005fa4 <HAL_FDCAN_IRQHandler+0x260>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f969 	bl	8006272 <HAL_FDCAN_TimestampWraparoundCallback>
 8005fa0:	e004      	b.n	8005fac <HAL_FDCAN_IRQHandler+0x268>
 8005fa2:	bf00      	nop
 8005fa4:	4000a800 	.word	0x4000a800
 8005fa8:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00f      	beq.n	8005fd6 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005fc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8005fca:	4b81      	ldr	r3, [pc, #516]	@ (80061d0 <HAL_FDCAN_IRQHandler+0x48c>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f958 	bl	8006286 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d014      	beq.n	800600a <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00f      	beq.n	800600a <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005ff2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ff4:	4b76      	ldr	r3, [pc, #472]	@ (80061d0 <HAL_FDCAN_IRQHandler+0x48c>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006000:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800600a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00d      	beq.n	800602c <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006016:	4b6f      	ldr	r3, [pc, #444]	@ (80061d4 <HAL_FDCAN_IRQHandler+0x490>)
 8006018:	400b      	ands	r3, r1
 800601a:	6513      	str	r3, [r2, #80]	@ 0x50
 800601c:	4a6c      	ldr	r2, [pc, #432]	@ (80061d0 <HAL_FDCAN_IRQHandler+0x48c>)
 800601e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006020:	0f9b      	lsrs	r3, r3, #30
 8006022:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006024:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f94b 	bl	80062c2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800602c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800602e:	2b00      	cmp	r3, #0
 8006030:	d011      	beq.n	8006056 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006038:	4b66      	ldr	r3, [pc, #408]	@ (80061d4 <HAL_FDCAN_IRQHandler+0x490>)
 800603a:	400b      	ands	r3, r1
 800603c:	6513      	str	r3, [r2, #80]	@ 0x50
 800603e:	4a64      	ldr	r2, [pc, #400]	@ (80061d0 <HAL_FDCAN_IRQHandler+0x48c>)
 8006040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006042:	0f9b      	lsrs	r3, r3, #30
 8006044:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800604c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a5f      	ldr	r2, [pc, #380]	@ (80061d8 <HAL_FDCAN_IRQHandler+0x494>)
 800605c:	4293      	cmp	r3, r2
 800605e:	f040 80aa 	bne.w	80061b6 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80a2 	beq.w	80061b6 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006084:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006086:	4013      	ands	r3, r2
 8006088:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006094:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800609e:	4013      	ands	r3, r2
 80060a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b6:	4013      	ands	r3, r2
 80060b8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80060c4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060cc:	6a3a      	ldr	r2, [r7, #32]
 80060ce:	4013      	ands	r3, r2
 80060d0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80060dc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	4013      	ands	r3, r2
 80060e8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80060fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006106:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006108:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f8e4 	bl	80062d8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800611c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800611e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f8e4 	bl	80062ee <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d019      	beq.n	8006164 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d014      	beq.n	8006164 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006140:	0c1b      	lsrs	r3, r3, #16
 8006142:	b29b      	uxth	r3, r3
 8006144:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006150:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2240      	movs	r2, #64	@ 0x40
 8006158:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	6939      	ldr	r1, [r7, #16]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f8d0 	bl	8006304 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006170:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006172:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f8d1 	bl	800631c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	6a3a      	ldr	r2, [r7, #32]
 8006186:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f874 	bl	80062ae <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80061c6:	bf00      	nop
 80061c8:	3758      	adds	r7, #88	@ 0x58
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	4000a800 	.word	0x4000a800
 80061d4:	3fcfffff 	.word	0x3fcfffff
 80061d8:	4000a000 	.word	0x4000a000

080061dc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006340:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800634a:	4ba7      	ldr	r3, [pc, #668]	@ (80065e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800634c:	4013      	ands	r3, r2
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	0091      	lsls	r1, r2, #2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	430b      	orrs	r3, r1
 8006358:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006364:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636c:	041a      	lsls	r2, r3, #16
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4413      	add	r3, r2
 8006380:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800638a:	4b97      	ldr	r3, [pc, #604]	@ (80065e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800638c:	4013      	ands	r3, r2
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	0091      	lsls	r1, r2, #2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	430b      	orrs	r3, r1
 8006398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ac:	041a      	lsls	r2, r3, #16
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	4413      	add	r3, r2
 80063c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80063cc:	4b86      	ldr	r3, [pc, #536]	@ (80065e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	0091      	lsls	r1, r2, #2
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	430b      	orrs	r3, r1
 80063da:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063e6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	041a      	lsls	r2, r3, #16
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006402:	fb02 f303 	mul.w	r3, r2, r3
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	4413      	add	r3, r2
 800640a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006414:	4b74      	ldr	r3, [pc, #464]	@ (80065e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006416:	4013      	ands	r3, r2
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	0091      	lsls	r1, r2, #2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	430b      	orrs	r3, r1
 8006422:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800642e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006436:	041a      	lsls	r2, r3, #16
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800644a:	fb02 f303 	mul.w	r3, r2, r3
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	4413      	add	r3, r2
 8006452:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800645c:	4b62      	ldr	r3, [pc, #392]	@ (80065e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800645e:	4013      	ands	r3, r2
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	0091      	lsls	r1, r2, #2
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	430b      	orrs	r3, r1
 800646a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006476:	fb02 f303 	mul.w	r3, r2, r3
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	4413      	add	r3, r2
 800647e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006488:	4b57      	ldr	r3, [pc, #348]	@ (80065e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800648a:	4013      	ands	r3, r2
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	0091      	lsls	r1, r2, #2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6812      	ldr	r2, [r2, #0]
 8006494:	430b      	orrs	r3, r1
 8006496:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064a2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064aa:	041a      	lsls	r2, r3, #16
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	4413      	add	r3, r2
 80064c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80064ca:	4b47      	ldr	r3, [pc, #284]	@ (80065e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	0091      	lsls	r1, r2, #2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	430b      	orrs	r3, r1
 80064d8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80064e4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ec:	041a      	lsls	r2, r3, #16
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006500:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006508:	061a      	lsls	r2, r3, #24
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006518:	4b34      	ldr	r3, [pc, #208]	@ (80065ec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800651a:	4413      	add	r3, r2
 800651c:	009a      	lsls	r2, r3, #2
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	441a      	add	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	441a      	add	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800654e:	fb01 f303 	mul.w	r3, r1, r3
 8006552:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006554:	441a      	add	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006562:	6879      	ldr	r1, [r7, #4]
 8006564:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006566:	fb01 f303 	mul.w	r3, r1, r3
 800656a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800656c:	441a      	add	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800657e:	fb01 f303 	mul.w	r3, r1, r3
 8006582:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006584:	441a      	add	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	441a      	add	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	441a      	add	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80065ca:	fb01 f303 	mul.w	r3, r1, r3
 80065ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80065d0:	441a      	add	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065de:	4a04      	ldr	r2, [pc, #16]	@ (80065f0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d915      	bls.n	8006610 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80065e4:	e006      	b.n	80065f4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80065e6:	bf00      	nop
 80065e8:	ffff0003 	.word	0xffff0003
 80065ec:	10002b00 	.word	0x10002b00
 80065f0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065fa:	f043 0220 	orr.w	r2, r3, #32
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2203      	movs	r2, #3
 8006608:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e010      	b.n	8006632 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	e005      	b.n	8006624 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3304      	adds	r3, #4
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	429a      	cmp	r2, r3
 800662e:	d3f3      	bcc.n	8006618 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006640:	b480      	push	{r7}
 8006642:	b089      	sub	sp, #36	@ 0x24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800665e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006666:	4313      	orrs	r3, r2
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	e00a      	b.n	8006682 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006674:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800667a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800667c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006680:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800668c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006692:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006698:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	fb01 f303 	mul.w	r3, r1, r3
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	3304      	adds	r3, #4
 80066c4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	3304      	adds	r3, #4
 80066d0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	e020      	b.n	800671a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	3303      	adds	r3, #3
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	4413      	add	r3, r2
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	3302      	adds	r3, #2
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	440b      	add	r3, r1
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80066f0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	3301      	adds	r3, #1
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	440b      	add	r3, r1
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80066fe:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006700:	6879      	ldr	r1, [r7, #4]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	440a      	add	r2, r1
 8006706:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006708:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	3304      	adds	r3, #4
 8006712:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	3304      	adds	r3, #4
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	4a06      	ldr	r2, [pc, #24]	@ (8006738 <FDCAN_CopyMessageToRAM+0xf8>)
 8006720:	5cd3      	ldrb	r3, [r2, r3]
 8006722:	461a      	mov	r2, r3
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4293      	cmp	r3, r2
 8006728:	d3d6      	bcc.n	80066d8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	3724      	adds	r7, #36	@ 0x24
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	0800b018 	.word	0x0800b018

0800673c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800673c:	b480      	push	{r7}
 800673e:	b089      	sub	sp, #36	@ 0x24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006746:	2300      	movs	r3, #0
 8006748:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800674a:	4b89      	ldr	r3, [pc, #548]	@ (8006970 <HAL_GPIO_Init+0x234>)
 800674c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800674e:	e194      	b.n	8006a7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	2101      	movs	r1, #1
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	fa01 f303 	lsl.w	r3, r1, r3
 800675c:	4013      	ands	r3, r2
 800675e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8186 	beq.w	8006a74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d005      	beq.n	8006780 <HAL_GPIO_Init+0x44>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 0303 	and.w	r3, r3, #3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d130      	bne.n	80067e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	2203      	movs	r2, #3
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	43db      	mvns	r3, r3
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	4013      	ands	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067b6:	2201      	movs	r2, #1
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	43db      	mvns	r3, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	4013      	ands	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	091b      	lsrs	r3, r3, #4
 80067cc:	f003 0201 	and.w	r2, r3, #1
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	4313      	orrs	r3, r2
 80067da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d017      	beq.n	800681e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	2203      	movs	r2, #3
 80067fa:	fa02 f303 	lsl.w	r3, r2, r3
 80067fe:	43db      	mvns	r3, r3
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	4013      	ands	r3, r2
 8006804:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	fa02 f303 	lsl.w	r3, r2, r3
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	4313      	orrs	r3, r2
 8006816:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d123      	bne.n	8006872 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	08da      	lsrs	r2, r3, #3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3208      	adds	r2, #8
 8006832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	220f      	movs	r2, #15
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	43db      	mvns	r3, r3
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	4013      	ands	r3, r2
 800684c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	4313      	orrs	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	08da      	lsrs	r2, r3, #3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3208      	adds	r2, #8
 800686c:	69b9      	ldr	r1, [r7, #24]
 800686e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	2203      	movs	r2, #3
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	43db      	mvns	r3, r3
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	4013      	ands	r3, r2
 8006888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f003 0203 	and.w	r2, r3, #3
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	fa02 f303 	lsl.w	r3, r2, r3
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	4313      	orrs	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80e0 	beq.w	8006a74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006974 <HAL_GPIO_Init+0x238>)
 80068b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80068ba:	4a2e      	ldr	r2, [pc, #184]	@ (8006974 <HAL_GPIO_Init+0x238>)
 80068bc:	f043 0302 	orr.w	r3, r3, #2
 80068c0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80068c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006974 <HAL_GPIO_Init+0x238>)
 80068c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068d2:	4a29      	ldr	r2, [pc, #164]	@ (8006978 <HAL_GPIO_Init+0x23c>)
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	089b      	lsrs	r3, r3, #2
 80068d8:	3302      	adds	r3, #2
 80068da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	220f      	movs	r2, #15
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	43db      	mvns	r3, r3
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	4013      	ands	r3, r2
 80068f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a20      	ldr	r2, [pc, #128]	@ (800697c <HAL_GPIO_Init+0x240>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d052      	beq.n	80069a4 <HAL_GPIO_Init+0x268>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a1f      	ldr	r2, [pc, #124]	@ (8006980 <HAL_GPIO_Init+0x244>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d031      	beq.n	800696a <HAL_GPIO_Init+0x22e>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a1e      	ldr	r2, [pc, #120]	@ (8006984 <HAL_GPIO_Init+0x248>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d02b      	beq.n	8006966 <HAL_GPIO_Init+0x22a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a1d      	ldr	r2, [pc, #116]	@ (8006988 <HAL_GPIO_Init+0x24c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d025      	beq.n	8006962 <HAL_GPIO_Init+0x226>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a1c      	ldr	r2, [pc, #112]	@ (800698c <HAL_GPIO_Init+0x250>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01f      	beq.n	800695e <HAL_GPIO_Init+0x222>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a1b      	ldr	r2, [pc, #108]	@ (8006990 <HAL_GPIO_Init+0x254>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d019      	beq.n	800695a <HAL_GPIO_Init+0x21e>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1a      	ldr	r2, [pc, #104]	@ (8006994 <HAL_GPIO_Init+0x258>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <HAL_GPIO_Init+0x21a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a19      	ldr	r2, [pc, #100]	@ (8006998 <HAL_GPIO_Init+0x25c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00d      	beq.n	8006952 <HAL_GPIO_Init+0x216>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a18      	ldr	r2, [pc, #96]	@ (800699c <HAL_GPIO_Init+0x260>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <HAL_GPIO_Init+0x212>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a17      	ldr	r2, [pc, #92]	@ (80069a0 <HAL_GPIO_Init+0x264>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d101      	bne.n	800694a <HAL_GPIO_Init+0x20e>
 8006946:	2309      	movs	r3, #9
 8006948:	e02d      	b.n	80069a6 <HAL_GPIO_Init+0x26a>
 800694a:	230a      	movs	r3, #10
 800694c:	e02b      	b.n	80069a6 <HAL_GPIO_Init+0x26a>
 800694e:	2308      	movs	r3, #8
 8006950:	e029      	b.n	80069a6 <HAL_GPIO_Init+0x26a>
 8006952:	2307      	movs	r3, #7
 8006954:	e027      	b.n	80069a6 <HAL_GPIO_Init+0x26a>
 8006956:	2306      	movs	r3, #6
 8006958:	e025      	b.n	80069a6 <HAL_GPIO_Init+0x26a>
 800695a:	2305      	movs	r3, #5
 800695c:	e023      	b.n	80069a6 <HAL_GPIO_Init+0x26a>
 800695e:	2304      	movs	r3, #4
 8006960:	e021      	b.n	80069a6 <HAL_GPIO_Init+0x26a>
 8006962:	2303      	movs	r3, #3
 8006964:	e01f      	b.n	80069a6 <HAL_GPIO_Init+0x26a>
 8006966:	2302      	movs	r3, #2
 8006968:	e01d      	b.n	80069a6 <HAL_GPIO_Init+0x26a>
 800696a:	2301      	movs	r3, #1
 800696c:	e01b      	b.n	80069a6 <HAL_GPIO_Init+0x26a>
 800696e:	bf00      	nop
 8006970:	58000080 	.word	0x58000080
 8006974:	58024400 	.word	0x58024400
 8006978:	58000400 	.word	0x58000400
 800697c:	58020000 	.word	0x58020000
 8006980:	58020400 	.word	0x58020400
 8006984:	58020800 	.word	0x58020800
 8006988:	58020c00 	.word	0x58020c00
 800698c:	58021000 	.word	0x58021000
 8006990:	58021400 	.word	0x58021400
 8006994:	58021800 	.word	0x58021800
 8006998:	58021c00 	.word	0x58021c00
 800699c:	58022000 	.word	0x58022000
 80069a0:	58022400 	.word	0x58022400
 80069a4:	2300      	movs	r3, #0
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	f002 0203 	and.w	r2, r2, #3
 80069ac:	0092      	lsls	r2, r2, #2
 80069ae:	4093      	lsls	r3, r2
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069b6:	4938      	ldr	r1, [pc, #224]	@ (8006a98 <HAL_GPIO_Init+0x35c>)
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	089b      	lsrs	r3, r3, #2
 80069bc:	3302      	adds	r3, #2
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	43db      	mvns	r3, r3
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	4013      	ands	r3, r2
 80069d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80069ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80069f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	43db      	mvns	r3, r3
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	4013      	ands	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	43db      	mvns	r3, r3
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	4013      	ands	r3, r2
 8006a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	3301      	adds	r3, #1
 8006a78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	fa22 f303 	lsr.w	r3, r2, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f47f ae63 	bne.w	8006750 <HAL_GPIO_Init+0x14>
  }
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	3724      	adds	r7, #36	@ 0x24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	58000400 	.word	0x58000400

08006a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	807b      	strh	r3, [r7, #2]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006aac:	787b      	ldrb	r3, [r7, #1]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ab2:	887a      	ldrh	r2, [r7, #2]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006ab8:	e003      	b.n	8006ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006aba:	887b      	ldrh	r3, [r7, #2]
 8006abc:	041a      	lsls	r2, r3, #16
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	619a      	str	r2, [r3, #24]
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ae0:	887a      	ldrh	r2, [r7, #2]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	041a      	lsls	r2, r3, #16
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	43d9      	mvns	r1, r3
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	400b      	ands	r3, r1
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	619a      	str	r2, [r3, #24]
}
 8006af6:	bf00      	nop
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
	...

08006b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e08b      	b.n	8006c2e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d106      	bne.n	8006b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fa fce0 	bl	80014f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2224      	movs	r2, #36	@ 0x24
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0201 	bic.w	r2, r2, #1
 8006b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d107      	bne.n	8006b7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b7a:	609a      	str	r2, [r3, #8]
 8006b7c:	e006      	b.n	8006b8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006b8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d108      	bne.n	8006ba6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ba2:	605a      	str	r2, [r3, #4]
 8006ba4:	e007      	b.n	8006bb6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6859      	ldr	r1, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c38 <HAL_I2C_Init+0x134>)
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69d9      	ldr	r1, [r3, #28]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1a      	ldr	r2, [r3, #32]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	02008000 	.word	0x02008000

08006c3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d138      	bne.n	8006cc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e032      	b.n	8006cc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2224      	movs	r2, #36	@ 0x24
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0201 	bic.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6819      	ldr	r1, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e000      	b.n	8006cc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cc4:	2302      	movs	r3, #2
  }
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d139      	bne.n	8006d5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e033      	b.n	8006d5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2224      	movs	r2, #36	@ 0x24
 8006d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0201 	bic.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0201 	orr.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e000      	b.n	8006d5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
  }
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
	...

08006d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006d74:	4b19      	ldr	r3, [pc, #100]	@ (8006ddc <HAL_PWREx_ConfigSupply+0x70>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d00a      	beq.n	8006d96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006d80:	4b16      	ldr	r3, [pc, #88]	@ (8006ddc <HAL_PWREx_ConfigSupply+0x70>)
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d001      	beq.n	8006d92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e01f      	b.n	8006dd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e01d      	b.n	8006dd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d96:	4b11      	ldr	r3, [pc, #68]	@ (8006ddc <HAL_PWREx_ConfigSupply+0x70>)
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f023 0207 	bic.w	r2, r3, #7
 8006d9e:	490f      	ldr	r1, [pc, #60]	@ (8006ddc <HAL_PWREx_ConfigSupply+0x70>)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006da6:	f7fa ff47 	bl	8001c38 <HAL_GetTick>
 8006daa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006dac:	e009      	b.n	8006dc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006dae:	f7fa ff43 	bl	8001c38 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006dbc:	d901      	bls.n	8006dc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e007      	b.n	8006dd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006dc2:	4b06      	ldr	r3, [pc, #24]	@ (8006ddc <HAL_PWREx_ConfigSupply+0x70>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dce:	d1ee      	bne.n	8006dae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	58024800 	.word	0x58024800

08006de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08c      	sub	sp, #48	@ 0x30
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d102      	bne.n	8006df4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f000 bc1f 	b.w	8007632 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80b3 	beq.w	8006f68 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e02:	4b95      	ldr	r3, [pc, #596]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e0c:	4b92      	ldr	r3, [pc, #584]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e14:	2b10      	cmp	r3, #16
 8006e16:	d007      	beq.n	8006e28 <HAL_RCC_OscConfig+0x48>
 8006e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1a:	2b18      	cmp	r3, #24
 8006e1c:	d112      	bne.n	8006e44 <HAL_RCC_OscConfig+0x64>
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d10d      	bne.n	8006e44 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e28:	4b8b      	ldr	r3, [pc, #556]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8098 	beq.w	8006f66 <HAL_RCC_OscConfig+0x186>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 8093 	bne.w	8006f66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e3f6      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e4c:	d106      	bne.n	8006e5c <HAL_RCC_OscConfig+0x7c>
 8006e4e:	4b82      	ldr	r3, [pc, #520]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a81      	ldr	r2, [pc, #516]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	e058      	b.n	8006f0e <HAL_RCC_OscConfig+0x12e>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d112      	bne.n	8006e8a <HAL_RCC_OscConfig+0xaa>
 8006e64:	4b7c      	ldr	r3, [pc, #496]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a7b      	ldr	r2, [pc, #492]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	4b79      	ldr	r3, [pc, #484]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a78      	ldr	r2, [pc, #480]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e76:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	4b76      	ldr	r3, [pc, #472]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a75      	ldr	r2, [pc, #468]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	e041      	b.n	8006f0e <HAL_RCC_OscConfig+0x12e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e92:	d112      	bne.n	8006eba <HAL_RCC_OscConfig+0xda>
 8006e94:	4b70      	ldr	r3, [pc, #448]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a6f      	ldr	r2, [pc, #444]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006e9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	4b6d      	ldr	r3, [pc, #436]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a6c      	ldr	r2, [pc, #432]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006ea6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	4b6a      	ldr	r3, [pc, #424]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a69      	ldr	r2, [pc, #420]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	e029      	b.n	8006f0e <HAL_RCC_OscConfig+0x12e>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006ec2:	d112      	bne.n	8006eea <HAL_RCC_OscConfig+0x10a>
 8006ec4:	4b64      	ldr	r3, [pc, #400]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a63      	ldr	r2, [pc, #396]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006eca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	4b61      	ldr	r3, [pc, #388]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a60      	ldr	r2, [pc, #384]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006ed6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	4b5e      	ldr	r3, [pc, #376]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	e011      	b.n	8006f0e <HAL_RCC_OscConfig+0x12e>
 8006eea:	4b5b      	ldr	r3, [pc, #364]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a5a      	ldr	r2, [pc, #360]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	4b58      	ldr	r3, [pc, #352]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a57      	ldr	r2, [pc, #348]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006efc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	4b55      	ldr	r3, [pc, #340]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a54      	ldr	r2, [pc, #336]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006f08:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d013      	beq.n	8006f3e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f16:	f7fa fe8f 	bl	8001c38 <HAL_GetTick>
 8006f1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f1c:	e008      	b.n	8006f30 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f1e:	f7fa fe8b 	bl	8001c38 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b64      	cmp	r3, #100	@ 0x64
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e380      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f30:	4b49      	ldr	r3, [pc, #292]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f0      	beq.n	8006f1e <HAL_RCC_OscConfig+0x13e>
 8006f3c:	e014      	b.n	8006f68 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f3e:	f7fa fe7b 	bl	8001c38 <HAL_GetTick>
 8006f42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f44:	e008      	b.n	8006f58 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f46:	f7fa fe77 	bl	8001c38 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b64      	cmp	r3, #100	@ 0x64
 8006f52:	d901      	bls.n	8006f58 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e36c      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f58:	4b3f      	ldr	r3, [pc, #252]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1f0      	bne.n	8006f46 <HAL_RCC_OscConfig+0x166>
 8006f64:	e000      	b.n	8006f68 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 808c 	beq.w	800708e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f76:	4b38      	ldr	r3, [pc, #224]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f7e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f80:	4b35      	ldr	r3, [pc, #212]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f84:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <HAL_RCC_OscConfig+0x1bc>
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	2b18      	cmp	r3, #24
 8006f90:	d137      	bne.n	8007002 <HAL_RCC_OscConfig+0x222>
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	f003 0303 	and.w	r3, r3, #3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d132      	bne.n	8007002 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x1d4>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e33e      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006fb4:	4b28      	ldr	r3, [pc, #160]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f023 0219 	bic.w	r2, r3, #25
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4925      	ldr	r1, [pc, #148]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc6:	f7fa fe37 	bl	8001c38 <HAL_GetTick>
 8006fca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fce:	f7fa fe33 	bl	8001c38 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e328      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0f0      	beq.n	8006fce <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fec:	4b1a      	ldr	r3, [pc, #104]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	4917      	ldr	r1, [pc, #92]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007000:	e045      	b.n	800708e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d028      	beq.n	800705c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800700a:	4b13      	ldr	r3, [pc, #76]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f023 0219 	bic.w	r2, r3, #25
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	4910      	ldr	r1, [pc, #64]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8007018:	4313      	orrs	r3, r2
 800701a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701c:	f7fa fe0c 	bl	8001c38 <HAL_GetTick>
 8007020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007024:	f7fa fe08 	bl	8001c38 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e2fd      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007036:	4b08      	ldr	r3, [pc, #32]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0f0      	beq.n	8007024 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007042:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	061b      	lsls	r3, r3, #24
 8007050:	4901      	ldr	r1, [pc, #4]	@ (8007058 <HAL_RCC_OscConfig+0x278>)
 8007052:	4313      	orrs	r3, r2
 8007054:	604b      	str	r3, [r1, #4]
 8007056:	e01a      	b.n	800708e <HAL_RCC_OscConfig+0x2ae>
 8007058:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800705c:	4b97      	ldr	r3, [pc, #604]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a96      	ldr	r2, [pc, #600]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007062:	f023 0301 	bic.w	r3, r3, #1
 8007066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007068:	f7fa fde6 	bl	8001c38 <HAL_GetTick>
 800706c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007070:	f7fa fde2 	bl	8001c38 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e2d7      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007082:	4b8e      	ldr	r3, [pc, #568]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f0      	bne.n	8007070 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b00      	cmp	r3, #0
 8007098:	d06a      	beq.n	8007170 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800709a:	4b88      	ldr	r3, [pc, #544]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070a4:	4b85      	ldr	r3, [pc, #532]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80070a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d007      	beq.n	80070c0 <HAL_RCC_OscConfig+0x2e0>
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b18      	cmp	r3, #24
 80070b4:	d11b      	bne.n	80070ee <HAL_RCC_OscConfig+0x30e>
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f003 0303 	and.w	r3, r3, #3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d116      	bne.n	80070ee <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070c0:	4b7e      	ldr	r3, [pc, #504]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <HAL_RCC_OscConfig+0x2f8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	2b80      	cmp	r3, #128	@ 0x80
 80070d2:	d001      	beq.n	80070d8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e2ac      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070d8:	4b78      	ldr	r3, [pc, #480]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	061b      	lsls	r3, r3, #24
 80070e6:	4975      	ldr	r1, [pc, #468]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070ec:	e040      	b.n	8007170 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d023      	beq.n	800713e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80070f6:	4b71      	ldr	r3, [pc, #452]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a70      	ldr	r2, [pc, #448]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80070fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007102:	f7fa fd99 	bl	8001c38 <HAL_GetTick>
 8007106:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007108:	e008      	b.n	800711c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800710a:	f7fa fd95 	bl	8001c38 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e28a      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800711c:	4b67      	ldr	r3, [pc, #412]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0f0      	beq.n	800710a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007128:	4b64      	ldr	r3, [pc, #400]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	061b      	lsls	r3, r3, #24
 8007136:	4961      	ldr	r1, [pc, #388]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007138:	4313      	orrs	r3, r2
 800713a:	60cb      	str	r3, [r1, #12]
 800713c:	e018      	b.n	8007170 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800713e:	4b5f      	ldr	r3, [pc, #380]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a5e      	ldr	r2, [pc, #376]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714a:	f7fa fd75 	bl	8001c38 <HAL_GetTick>
 800714e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007152:	f7fa fd71 	bl	8001c38 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e266      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007164:	4b55      	ldr	r3, [pc, #340]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1f0      	bne.n	8007152 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d036      	beq.n	80071ea <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d019      	beq.n	80071b8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007184:	4b4d      	ldr	r3, [pc, #308]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007188:	4a4c      	ldr	r2, [pc, #304]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007190:	f7fa fd52 	bl	8001c38 <HAL_GetTick>
 8007194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007198:	f7fa fd4e 	bl	8001c38 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e243      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071aa:	4b44      	ldr	r3, [pc, #272]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80071ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0f0      	beq.n	8007198 <HAL_RCC_OscConfig+0x3b8>
 80071b6:	e018      	b.n	80071ea <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071b8:	4b40      	ldr	r3, [pc, #256]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80071ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071bc:	4a3f      	ldr	r2, [pc, #252]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80071be:	f023 0301 	bic.w	r3, r3, #1
 80071c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c4:	f7fa fd38 	bl	8001c38 <HAL_GetTick>
 80071c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071cc:	f7fa fd34 	bl	8001c38 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e229      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071de:	4b37      	ldr	r3, [pc, #220]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80071e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1f0      	bne.n	80071cc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d036      	beq.n	8007264 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d019      	beq.n	8007232 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071fe:	4b2f      	ldr	r3, [pc, #188]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a2e      	ldr	r2, [pc, #184]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007204:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007208:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800720a:	f7fa fd15 	bl	8001c38 <HAL_GetTick>
 800720e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007210:	e008      	b.n	8007224 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007212:	f7fa fd11 	bl	8001c38 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e206      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007224:	4b25      	ldr	r3, [pc, #148]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0f0      	beq.n	8007212 <HAL_RCC_OscConfig+0x432>
 8007230:	e018      	b.n	8007264 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007232:	4b22      	ldr	r3, [pc, #136]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a21      	ldr	r2, [pc, #132]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 8007238:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800723c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800723e:	f7fa fcfb 	bl	8001c38 <HAL_GetTick>
 8007242:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007244:	e008      	b.n	8007258 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007246:	f7fa fcf7 	bl	8001c38 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d901      	bls.n	8007258 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e1ec      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007258:	4b18      	ldr	r3, [pc, #96]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1f0      	bne.n	8007246 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 80af 	beq.w	80073d0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007272:	4b13      	ldr	r3, [pc, #76]	@ (80072c0 <HAL_RCC_OscConfig+0x4e0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a12      	ldr	r2, [pc, #72]	@ (80072c0 <HAL_RCC_OscConfig+0x4e0>)
 8007278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800727c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800727e:	f7fa fcdb 	bl	8001c38 <HAL_GetTick>
 8007282:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007284:	e008      	b.n	8007298 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007286:	f7fa fcd7 	bl	8001c38 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b64      	cmp	r3, #100	@ 0x64
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e1cc      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007298:	4b09      	ldr	r3, [pc, #36]	@ (80072c0 <HAL_RCC_OscConfig+0x4e0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0f0      	beq.n	8007286 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d10b      	bne.n	80072c4 <HAL_RCC_OscConfig+0x4e4>
 80072ac:	4b03      	ldr	r3, [pc, #12]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80072ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b0:	4a02      	ldr	r2, [pc, #8]	@ (80072bc <HAL_RCC_OscConfig+0x4dc>)
 80072b2:	f043 0301 	orr.w	r3, r3, #1
 80072b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80072b8:	e05b      	b.n	8007372 <HAL_RCC_OscConfig+0x592>
 80072ba:	bf00      	nop
 80072bc:	58024400 	.word	0x58024400
 80072c0:	58024800 	.word	0x58024800
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d112      	bne.n	80072f2 <HAL_RCC_OscConfig+0x512>
 80072cc:	4b9d      	ldr	r3, [pc, #628]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80072ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d0:	4a9c      	ldr	r2, [pc, #624]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80072d2:	f023 0301 	bic.w	r3, r3, #1
 80072d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80072d8:	4b9a      	ldr	r3, [pc, #616]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80072da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072dc:	4a99      	ldr	r2, [pc, #612]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80072de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80072e4:	4b97      	ldr	r3, [pc, #604]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80072e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e8:	4a96      	ldr	r2, [pc, #600]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80072ea:	f023 0304 	bic.w	r3, r3, #4
 80072ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80072f0:	e03f      	b.n	8007372 <HAL_RCC_OscConfig+0x592>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	2b05      	cmp	r3, #5
 80072f8:	d112      	bne.n	8007320 <HAL_RCC_OscConfig+0x540>
 80072fa:	4b92      	ldr	r3, [pc, #584]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80072fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072fe:	4a91      	ldr	r2, [pc, #580]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007300:	f043 0304 	orr.w	r3, r3, #4
 8007304:	6713      	str	r3, [r2, #112]	@ 0x70
 8007306:	4b8f      	ldr	r3, [pc, #572]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800730a:	4a8e      	ldr	r2, [pc, #568]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 800730c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007310:	6713      	str	r3, [r2, #112]	@ 0x70
 8007312:	4b8c      	ldr	r3, [pc, #560]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007316:	4a8b      	ldr	r2, [pc, #556]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	6713      	str	r3, [r2, #112]	@ 0x70
 800731e:	e028      	b.n	8007372 <HAL_RCC_OscConfig+0x592>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	2b85      	cmp	r3, #133	@ 0x85
 8007326:	d112      	bne.n	800734e <HAL_RCC_OscConfig+0x56e>
 8007328:	4b86      	ldr	r3, [pc, #536]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 800732a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800732c:	4a85      	ldr	r2, [pc, #532]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 800732e:	f043 0304 	orr.w	r3, r3, #4
 8007332:	6713      	str	r3, [r2, #112]	@ 0x70
 8007334:	4b83      	ldr	r3, [pc, #524]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007338:	4a82      	ldr	r2, [pc, #520]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 800733a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800733e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007340:	4b80      	ldr	r3, [pc, #512]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007344:	4a7f      	ldr	r2, [pc, #508]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	6713      	str	r3, [r2, #112]	@ 0x70
 800734c:	e011      	b.n	8007372 <HAL_RCC_OscConfig+0x592>
 800734e:	4b7d      	ldr	r3, [pc, #500]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007352:	4a7c      	ldr	r2, [pc, #496]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	6713      	str	r3, [r2, #112]	@ 0x70
 800735a:	4b7a      	ldr	r3, [pc, #488]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 800735c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735e:	4a79      	ldr	r2, [pc, #484]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007360:	f023 0304 	bic.w	r3, r3, #4
 8007364:	6713      	str	r3, [r2, #112]	@ 0x70
 8007366:	4b77      	ldr	r3, [pc, #476]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800736a:	4a76      	ldr	r2, [pc, #472]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 800736c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007370:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d015      	beq.n	80073a6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737a:	f7fa fc5d 	bl	8001c38 <HAL_GetTick>
 800737e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007380:	e00a      	b.n	8007398 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007382:	f7fa fc59 	bl	8001c38 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007390:	4293      	cmp	r3, r2
 8007392:	d901      	bls.n	8007398 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e14c      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007398:	4b6a      	ldr	r3, [pc, #424]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 800739a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0ee      	beq.n	8007382 <HAL_RCC_OscConfig+0x5a2>
 80073a4:	e014      	b.n	80073d0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a6:	f7fa fc47 	bl	8001c38 <HAL_GetTick>
 80073aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073ac:	e00a      	b.n	80073c4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ae:	f7fa fc43 	bl	8001c38 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073bc:	4293      	cmp	r3, r2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e136      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073c4:	4b5f      	ldr	r3, [pc, #380]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80073c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1ee      	bne.n	80073ae <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 812b 	beq.w	8007630 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073da:	4b5a      	ldr	r3, [pc, #360]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073e2:	2b18      	cmp	r3, #24
 80073e4:	f000 80bb 	beq.w	800755e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	f040 8095 	bne.w	800751c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073f2:	4b54      	ldr	r3, [pc, #336]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a53      	ldr	r2, [pc, #332]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80073f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fe:	f7fa fc1b 	bl	8001c38 <HAL_GetTick>
 8007402:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007404:	e008      	b.n	8007418 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007406:	f7fa fc17 	bl	8001c38 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d901      	bls.n	8007418 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e10c      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007418:	4b4a      	ldr	r3, [pc, #296]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f0      	bne.n	8007406 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007424:	4b47      	ldr	r3, [pc, #284]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007426:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007428:	4b47      	ldr	r3, [pc, #284]	@ (8007548 <HAL_RCC_OscConfig+0x768>)
 800742a:	4013      	ands	r3, r2
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007434:	0112      	lsls	r2, r2, #4
 8007436:	430a      	orrs	r2, r1
 8007438:	4942      	ldr	r1, [pc, #264]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 800743a:	4313      	orrs	r3, r2
 800743c:	628b      	str	r3, [r1, #40]	@ 0x28
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007442:	3b01      	subs	r3, #1
 8007444:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800744c:	3b01      	subs	r3, #1
 800744e:	025b      	lsls	r3, r3, #9
 8007450:	b29b      	uxth	r3, r3
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007458:	3b01      	subs	r3, #1
 800745a:	041b      	lsls	r3, r3, #16
 800745c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007460:	431a      	orrs	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007466:	3b01      	subs	r3, #1
 8007468:	061b      	lsls	r3, r3, #24
 800746a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800746e:	4935      	ldr	r1, [pc, #212]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007470:	4313      	orrs	r3, r2
 8007472:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007474:	4b33      	ldr	r3, [pc, #204]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007478:	4a32      	ldr	r2, [pc, #200]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 800747a:	f023 0301 	bic.w	r3, r3, #1
 800747e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007480:	4b30      	ldr	r3, [pc, #192]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007484:	4b31      	ldr	r3, [pc, #196]	@ (800754c <HAL_RCC_OscConfig+0x76c>)
 8007486:	4013      	ands	r3, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800748c:	00d2      	lsls	r2, r2, #3
 800748e:	492d      	ldr	r1, [pc, #180]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007490:	4313      	orrs	r3, r2
 8007492:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007494:	4b2b      	ldr	r3, [pc, #172]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007498:	f023 020c 	bic.w	r2, r3, #12
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a0:	4928      	ldr	r1, [pc, #160]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80074a6:	4b27      	ldr	r3, [pc, #156]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	f023 0202 	bic.w	r2, r3, #2
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b2:	4924      	ldr	r1, [pc, #144]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80074b8:	4b22      	ldr	r3, [pc, #136]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074bc:	4a21      	ldr	r2, [pc, #132]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c4:	4b1f      	ldr	r3, [pc, #124]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	4a1e      	ldr	r2, [pc, #120]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80074d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80074dc:	4b19      	ldr	r3, [pc, #100]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e0:	4a18      	ldr	r2, [pc, #96]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074e2:	f043 0301 	orr.w	r3, r3, #1
 80074e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074e8:	4b16      	ldr	r3, [pc, #88]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a15      	ldr	r2, [pc, #84]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 80074ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f4:	f7fa fba0 	bl	8001c38 <HAL_GetTick>
 80074f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074fc:	f7fa fb9c 	bl	8001c38 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e091      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800750e:	4b0d      	ldr	r3, [pc, #52]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0f0      	beq.n	80074fc <HAL_RCC_OscConfig+0x71c>
 800751a:	e089      	b.n	8007630 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800751c:	4b09      	ldr	r3, [pc, #36]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a08      	ldr	r2, [pc, #32]	@ (8007544 <HAL_RCC_OscConfig+0x764>)
 8007522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007528:	f7fa fb86 	bl	8001c38 <HAL_GetTick>
 800752c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800752e:	e00f      	b.n	8007550 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007530:	f7fa fb82 	bl	8001c38 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d908      	bls.n	8007550 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e077      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
 8007542:	bf00      	nop
 8007544:	58024400 	.word	0x58024400
 8007548:	fffffc0c 	.word	0xfffffc0c
 800754c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007550:	4b3a      	ldr	r3, [pc, #232]	@ (800763c <HAL_RCC_OscConfig+0x85c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e9      	bne.n	8007530 <HAL_RCC_OscConfig+0x750>
 800755c:	e068      	b.n	8007630 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800755e:	4b37      	ldr	r3, [pc, #220]	@ (800763c <HAL_RCC_OscConfig+0x85c>)
 8007560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007562:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007564:	4b35      	ldr	r3, [pc, #212]	@ (800763c <HAL_RCC_OscConfig+0x85c>)
 8007566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007568:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756e:	2b01      	cmp	r3, #1
 8007570:	d031      	beq.n	80075d6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f003 0203 	and.w	r2, r3, #3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800757c:	429a      	cmp	r2, r3
 800757e:	d12a      	bne.n	80075d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	091b      	lsrs	r3, r3, #4
 8007584:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800758c:	429a      	cmp	r2, r3
 800758e:	d122      	bne.n	80075d6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800759c:	429a      	cmp	r2, r3
 800759e:	d11a      	bne.n	80075d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	0a5b      	lsrs	r3, r3, #9
 80075a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d111      	bne.n	80075d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d108      	bne.n	80075d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	0e1b      	lsrs	r3, r3, #24
 80075c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d001      	beq.n	80075da <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e02b      	b.n	8007632 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80075da:	4b18      	ldr	r3, [pc, #96]	@ (800763c <HAL_RCC_OscConfig+0x85c>)
 80075dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075de:	08db      	lsrs	r3, r3, #3
 80075e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075e4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d01f      	beq.n	8007630 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80075f0:	4b12      	ldr	r3, [pc, #72]	@ (800763c <HAL_RCC_OscConfig+0x85c>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f4:	4a11      	ldr	r2, [pc, #68]	@ (800763c <HAL_RCC_OscConfig+0x85c>)
 80075f6:	f023 0301 	bic.w	r3, r3, #1
 80075fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075fc:	f7fa fb1c 	bl	8001c38 <HAL_GetTick>
 8007600:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007602:	bf00      	nop
 8007604:	f7fa fb18 	bl	8001c38 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	4293      	cmp	r3, r2
 800760e:	d0f9      	beq.n	8007604 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007610:	4b0a      	ldr	r3, [pc, #40]	@ (800763c <HAL_RCC_OscConfig+0x85c>)
 8007612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007614:	4b0a      	ldr	r3, [pc, #40]	@ (8007640 <HAL_RCC_OscConfig+0x860>)
 8007616:	4013      	ands	r3, r2
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800761c:	00d2      	lsls	r2, r2, #3
 800761e:	4907      	ldr	r1, [pc, #28]	@ (800763c <HAL_RCC_OscConfig+0x85c>)
 8007620:	4313      	orrs	r3, r2
 8007622:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007624:	4b05      	ldr	r3, [pc, #20]	@ (800763c <HAL_RCC_OscConfig+0x85c>)
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	4a04      	ldr	r2, [pc, #16]	@ (800763c <HAL_RCC_OscConfig+0x85c>)
 800762a:	f043 0301 	orr.w	r3, r3, #1
 800762e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3730      	adds	r7, #48	@ 0x30
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	58024400 	.word	0x58024400
 8007640:	ffff0007 	.word	0xffff0007

08007644 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e19c      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007658:	4b8a      	ldr	r3, [pc, #552]	@ (8007884 <HAL_RCC_ClockConfig+0x240>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d910      	bls.n	8007688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007666:	4b87      	ldr	r3, [pc, #540]	@ (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f023 020f 	bic.w	r2, r3, #15
 800766e:	4985      	ldr	r1, [pc, #532]	@ (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	4313      	orrs	r3, r2
 8007674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007676:	4b83      	ldr	r3, [pc, #524]	@ (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d001      	beq.n	8007688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e184      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d010      	beq.n	80076b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	4b7b      	ldr	r3, [pc, #492]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d908      	bls.n	80076b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076a4:	4b78      	ldr	r3, [pc, #480]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	4975      	ldr	r1, [pc, #468]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d010      	beq.n	80076e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695a      	ldr	r2, [r3, #20]
 80076c6:	4b70      	ldr	r3, [pc, #448]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d908      	bls.n	80076e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076d2:	4b6d      	ldr	r3, [pc, #436]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	496a      	ldr	r1, [pc, #424]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0310 	and.w	r3, r3, #16
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d010      	beq.n	8007712 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	699a      	ldr	r2, [r3, #24]
 80076f4:	4b64      	ldr	r3, [pc, #400]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d908      	bls.n	8007712 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007700:	4b61      	ldr	r3, [pc, #388]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	495e      	ldr	r1, [pc, #376]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 800770e:	4313      	orrs	r3, r2
 8007710:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b00      	cmp	r3, #0
 800771c:	d010      	beq.n	8007740 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	69da      	ldr	r2, [r3, #28]
 8007722:	4b59      	ldr	r3, [pc, #356]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800772a:	429a      	cmp	r2, r3
 800772c:	d908      	bls.n	8007740 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800772e:	4b56      	ldr	r3, [pc, #344]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	4953      	ldr	r1, [pc, #332]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 800773c:	4313      	orrs	r3, r2
 800773e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d010      	beq.n	800776e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	4b4d      	ldr	r3, [pc, #308]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	429a      	cmp	r2, r3
 800775a:	d908      	bls.n	800776e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800775c:	4b4a      	ldr	r3, [pc, #296]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	f023 020f 	bic.w	r2, r3, #15
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	4947      	ldr	r1, [pc, #284]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 800776a:	4313      	orrs	r3, r2
 800776c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d055      	beq.n	8007826 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800777a:	4b43      	ldr	r3, [pc, #268]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	4940      	ldr	r1, [pc, #256]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007788:	4313      	orrs	r3, r2
 800778a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d107      	bne.n	80077a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007794:	4b3c      	ldr	r3, [pc, #240]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d121      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e0f6      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d107      	bne.n	80077bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80077ac:	4b36      	ldr	r3, [pc, #216]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d115      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e0ea      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d107      	bne.n	80077d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077c4:	4b30      	ldr	r3, [pc, #192]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d109      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e0de      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077d4:	4b2c      	ldr	r3, [pc, #176]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e0d6      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077e4:	4b28      	ldr	r3, [pc, #160]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f023 0207 	bic.w	r2, r3, #7
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	4925      	ldr	r1, [pc, #148]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077f6:	f7fa fa1f 	bl	8001c38 <HAL_GetTick>
 80077fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077fc:	e00a      	b.n	8007814 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077fe:	f7fa fa1b 	bl	8001c38 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800780c:	4293      	cmp	r3, r2
 800780e:	d901      	bls.n	8007814 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e0be      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007814:	4b1c      	ldr	r3, [pc, #112]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	429a      	cmp	r2, r3
 8007824:	d1eb      	bne.n	80077fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d010      	beq.n	8007854 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	4b14      	ldr	r3, [pc, #80]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	429a      	cmp	r2, r3
 8007840:	d208      	bcs.n	8007854 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007842:	4b11      	ldr	r3, [pc, #68]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	f023 020f 	bic.w	r2, r3, #15
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	490e      	ldr	r1, [pc, #56]	@ (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007850:	4313      	orrs	r3, r2
 8007852:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007854:	4b0b      	ldr	r3, [pc, #44]	@ (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 030f 	and.w	r3, r3, #15
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d214      	bcs.n	800788c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007862:	4b08      	ldr	r3, [pc, #32]	@ (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f023 020f 	bic.w	r2, r3, #15
 800786a:	4906      	ldr	r1, [pc, #24]	@ (8007884 <HAL_RCC_ClockConfig+0x240>)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	4313      	orrs	r3, r2
 8007870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007872:	4b04      	ldr	r3, [pc, #16]	@ (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d005      	beq.n	800788c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e086      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
 8007884:	52002000 	.word	0x52002000
 8007888:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d010      	beq.n	80078ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691a      	ldr	r2, [r3, #16]
 800789c:	4b3f      	ldr	r3, [pc, #252]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d208      	bcs.n	80078ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078a8:	4b3c      	ldr	r3, [pc, #240]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	4939      	ldr	r1, [pc, #228]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d010      	beq.n	80078e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695a      	ldr	r2, [r3, #20]
 80078ca:	4b34      	ldr	r3, [pc, #208]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d208      	bcs.n	80078e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078d6:	4b31      	ldr	r3, [pc, #196]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	492e      	ldr	r1, [pc, #184]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d010      	beq.n	8007916 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699a      	ldr	r2, [r3, #24]
 80078f8:	4b28      	ldr	r3, [pc, #160]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007900:	429a      	cmp	r2, r3
 8007902:	d208      	bcs.n	8007916 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007904:	4b25      	ldr	r3, [pc, #148]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	4922      	ldr	r1, [pc, #136]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 8007912:	4313      	orrs	r3, r2
 8007914:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0320 	and.w	r3, r3, #32
 800791e:	2b00      	cmp	r3, #0
 8007920:	d010      	beq.n	8007944 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69da      	ldr	r2, [r3, #28]
 8007926:	4b1d      	ldr	r3, [pc, #116]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800792e:	429a      	cmp	r2, r3
 8007930:	d208      	bcs.n	8007944 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007932:	4b1a      	ldr	r3, [pc, #104]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	4917      	ldr	r1, [pc, #92]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 8007940:	4313      	orrs	r3, r2
 8007942:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007944:	f000 f834 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 8007948:	4602      	mov	r2, r0
 800794a:	4b14      	ldr	r3, [pc, #80]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	f003 030f 	and.w	r3, r3, #15
 8007954:	4912      	ldr	r1, [pc, #72]	@ (80079a0 <HAL_RCC_ClockConfig+0x35c>)
 8007956:	5ccb      	ldrb	r3, [r1, r3]
 8007958:	f003 031f 	and.w	r3, r3, #31
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
 8007960:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007962:	4b0e      	ldr	r3, [pc, #56]	@ (800799c <HAL_RCC_ClockConfig+0x358>)
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	f003 030f 	and.w	r3, r3, #15
 800796a:	4a0d      	ldr	r2, [pc, #52]	@ (80079a0 <HAL_RCC_ClockConfig+0x35c>)
 800796c:	5cd3      	ldrb	r3, [r2, r3]
 800796e:	f003 031f 	and.w	r3, r3, #31
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	fa22 f303 	lsr.w	r3, r2, r3
 8007978:	4a0a      	ldr	r2, [pc, #40]	@ (80079a4 <HAL_RCC_ClockConfig+0x360>)
 800797a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800797c:	4a0a      	ldr	r2, [pc, #40]	@ (80079a8 <HAL_RCC_ClockConfig+0x364>)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007982:	4b0a      	ldr	r3, [pc, #40]	@ (80079ac <HAL_RCC_ClockConfig+0x368>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f7fa f90c 	bl	8001ba4 <HAL_InitTick>
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	58024400 	.word	0x58024400
 80079a0:	0800b000 	.word	0x0800b000
 80079a4:	24000004 	.word	0x24000004
 80079a8:	24000000 	.word	0x24000000
 80079ac:	24000008 	.word	0x24000008

080079b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b089      	sub	sp, #36	@ 0x24
 80079b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b6:	4bb3      	ldr	r3, [pc, #716]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079be:	2b18      	cmp	r3, #24
 80079c0:	f200 8155 	bhi.w	8007c6e <HAL_RCC_GetSysClockFreq+0x2be>
 80079c4:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	08007a31 	.word	0x08007a31
 80079d0:	08007c6f 	.word	0x08007c6f
 80079d4:	08007c6f 	.word	0x08007c6f
 80079d8:	08007c6f 	.word	0x08007c6f
 80079dc:	08007c6f 	.word	0x08007c6f
 80079e0:	08007c6f 	.word	0x08007c6f
 80079e4:	08007c6f 	.word	0x08007c6f
 80079e8:	08007c6f 	.word	0x08007c6f
 80079ec:	08007a57 	.word	0x08007a57
 80079f0:	08007c6f 	.word	0x08007c6f
 80079f4:	08007c6f 	.word	0x08007c6f
 80079f8:	08007c6f 	.word	0x08007c6f
 80079fc:	08007c6f 	.word	0x08007c6f
 8007a00:	08007c6f 	.word	0x08007c6f
 8007a04:	08007c6f 	.word	0x08007c6f
 8007a08:	08007c6f 	.word	0x08007c6f
 8007a0c:	08007a5d 	.word	0x08007a5d
 8007a10:	08007c6f 	.word	0x08007c6f
 8007a14:	08007c6f 	.word	0x08007c6f
 8007a18:	08007c6f 	.word	0x08007c6f
 8007a1c:	08007c6f 	.word	0x08007c6f
 8007a20:	08007c6f 	.word	0x08007c6f
 8007a24:	08007c6f 	.word	0x08007c6f
 8007a28:	08007c6f 	.word	0x08007c6f
 8007a2c:	08007a63 	.word	0x08007a63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a30:	4b94      	ldr	r3, [pc, #592]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0320 	and.w	r3, r3, #32
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d009      	beq.n	8007a50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a3c:	4b91      	ldr	r3, [pc, #580]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	08db      	lsrs	r3, r3, #3
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	4a90      	ldr	r2, [pc, #576]	@ (8007c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a48:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007a4e:	e111      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a50:	4b8d      	ldr	r3, [pc, #564]	@ (8007c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a52:	61bb      	str	r3, [r7, #24]
      break;
 8007a54:	e10e      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007a56:	4b8d      	ldr	r3, [pc, #564]	@ (8007c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a58:	61bb      	str	r3, [r7, #24]
      break;
 8007a5a:	e10b      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007a5c:	4b8c      	ldr	r3, [pc, #560]	@ (8007c90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a5e:	61bb      	str	r3, [r7, #24]
      break;
 8007a60:	e108      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a62:	4b88      	ldr	r3, [pc, #544]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007a6c:	4b85      	ldr	r3, [pc, #532]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	091b      	lsrs	r3, r3, #4
 8007a72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a78:	4b82      	ldr	r3, [pc, #520]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a82:	4b80      	ldr	r3, [pc, #512]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a86:	08db      	lsrs	r3, r3, #3
 8007a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	fb02 f303 	mul.w	r3, r2, r3
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80e1 	beq.w	8007c68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	f000 8083 	beq.w	8007bb4 <HAL_RCC_GetSysClockFreq+0x204>
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	f200 80a1 	bhi.w	8007bf8 <HAL_RCC_GetSysClockFreq+0x248>
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x114>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d056      	beq.n	8007b70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007ac2:	e099      	b.n	8007bf8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d02d      	beq.n	8007b2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	08db      	lsrs	r3, r3, #3
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	4a6b      	ldr	r2, [pc, #428]	@ (8007c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007adc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	ee07 3a90 	vmov	s15, r3
 8007ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007afa:	4b62      	ldr	r3, [pc, #392]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b0e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007b2a:	e087      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	ee07 3a90 	vmov	s15, r3
 8007b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b36:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007c98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3e:	4b51      	ldr	r3, [pc, #324]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b52:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b6e:	e065      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	ee07 3a90 	vmov	s15, r3
 8007b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b82:	4b40      	ldr	r3, [pc, #256]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b96:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bb2:	e043      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007ca0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bda:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bf6:	e021      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c02:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c1e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007c3c:	4b11      	ldr	r3, [pc, #68]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c40:	0a5b      	lsrs	r3, r3, #9
 8007c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c46:	3301      	adds	r3, #1
 8007c48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	ee07 3a90 	vmov	s15, r3
 8007c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c60:	ee17 3a90 	vmov	r3, s15
 8007c64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007c66:	e005      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61bb      	str	r3, [r7, #24]
      break;
 8007c6c:	e002      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007c6e:	4b07      	ldr	r3, [pc, #28]	@ (8007c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c70:	61bb      	str	r3, [r7, #24]
      break;
 8007c72:	bf00      	nop
  }

  return sysclockfreq;
 8007c74:	69bb      	ldr	r3, [r7, #24]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3724      	adds	r7, #36	@ 0x24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	58024400 	.word	0x58024400
 8007c88:	03d09000 	.word	0x03d09000
 8007c8c:	003d0900 	.word	0x003d0900
 8007c90:	017d7840 	.word	0x017d7840
 8007c94:	46000000 	.word	0x46000000
 8007c98:	4c742400 	.word	0x4c742400
 8007c9c:	4a742400 	.word	0x4a742400
 8007ca0:	4bbebc20 	.word	0x4bbebc20

08007ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007caa:	f7ff fe81 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	4b10      	ldr	r3, [pc, #64]	@ (8007cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	0a1b      	lsrs	r3, r3, #8
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	490f      	ldr	r1, [pc, #60]	@ (8007cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007cbc:	5ccb      	ldrb	r3, [r1, r3]
 8007cbe:	f003 031f 	and.w	r3, r3, #31
 8007cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	4a09      	ldr	r2, [pc, #36]	@ (8007cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007cd2:	5cd3      	ldrb	r3, [r2, r3]
 8007cd4:	f003 031f 	and.w	r3, r3, #31
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	fa22 f303 	lsr.w	r3, r2, r3
 8007cde:	4a07      	ldr	r2, [pc, #28]	@ (8007cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8007ce0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ce2:	4a07      	ldr	r2, [pc, #28]	@ (8007d00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ce8:	4b04      	ldr	r3, [pc, #16]	@ (8007cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8007cea:	681b      	ldr	r3, [r3, #0]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	0800b000 	.word	0x0800b000
 8007cfc:	24000004 	.word	0x24000004
 8007d00:	24000000 	.word	0x24000000

08007d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007d08:	f7ff ffcc 	bl	8007ca4 <HAL_RCC_GetHCLKFreq>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	4b06      	ldr	r3, [pc, #24]	@ (8007d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	091b      	lsrs	r3, r3, #4
 8007d14:	f003 0307 	and.w	r3, r3, #7
 8007d18:	4904      	ldr	r1, [pc, #16]	@ (8007d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d1a:	5ccb      	ldrb	r3, [r1, r3]
 8007d1c:	f003 031f 	and.w	r3, r3, #31
 8007d20:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	58024400 	.word	0x58024400
 8007d2c:	0800b000 	.word	0x0800b000

08007d30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d34:	b0c8      	sub	sp, #288	@ 0x120
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d42:	2300      	movs	r3, #0
 8007d44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007d54:	2500      	movs	r5, #0
 8007d56:	ea54 0305 	orrs.w	r3, r4, r5
 8007d5a:	d049      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d66:	d02f      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007d68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d6c:	d828      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d72:	d01a      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d78:	d822      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d82:	d007      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d84:	e01c      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d86:	4ba7      	ldr	r3, [pc, #668]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8a:	4aa6      	ldr	r2, [pc, #664]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d92:	e01a      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d98:	3308      	adds	r3, #8
 8007d9a:	2102      	movs	r1, #2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f002 fa6d 	bl	800a27c <RCCEx_PLL2_Config>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007da8:	e00f      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dae:	3328      	adds	r3, #40	@ 0x28
 8007db0:	2102      	movs	r1, #2
 8007db2:	4618      	mov	r0, r3
 8007db4:	f002 fb14 	bl	800a3e0 <RCCEx_PLL3_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007dbe:	e004      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007dc6:	e000      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007dd2:	4b94      	ldr	r3, [pc, #592]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de0:	4a90      	ldr	r2, [pc, #576]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007de2:	430b      	orrs	r3, r1
 8007de4:	6513      	str	r3, [r2, #80]	@ 0x50
 8007de6:	e003      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007dfc:	f04f 0900 	mov.w	r9, #0
 8007e00:	ea58 0309 	orrs.w	r3, r8, r9
 8007e04:	d047      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d82a      	bhi.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e10:	a201      	add	r2, pc, #4	@ (adr r2, 8007e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e2d 	.word	0x08007e2d
 8007e1c:	08007e3b 	.word	0x08007e3b
 8007e20:	08007e51 	.word	0x08007e51
 8007e24:	08007e6f 	.word	0x08007e6f
 8007e28:	08007e6f 	.word	0x08007e6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e2c:	4b7d      	ldr	r3, [pc, #500]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e30:	4a7c      	ldr	r2, [pc, #496]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e38:	e01a      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e3e:	3308      	adds	r3, #8
 8007e40:	2100      	movs	r1, #0
 8007e42:	4618      	mov	r0, r3
 8007e44:	f002 fa1a 	bl	800a27c <RCCEx_PLL2_Config>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e4e:	e00f      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e54:	3328      	adds	r3, #40	@ 0x28
 8007e56:	2100      	movs	r1, #0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f002 fac1 	bl	800a3e0 <RCCEx_PLL3_Config>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e64:	e004      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e6c:	e000      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e78:	4b6a      	ldr	r3, [pc, #424]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e7c:	f023 0107 	bic.w	r1, r3, #7
 8007e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e86:	4a67      	ldr	r2, [pc, #412]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e8c:	e003      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e92:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007ea2:	f04f 0b00 	mov.w	fp, #0
 8007ea6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007eaa:	d054      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eb2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007eb6:	d036      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007eb8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007ebc:	d82f      	bhi.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec2:	d032      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec8:	d829      	bhi.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007eca:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ecc:	d02f      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007ece:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ed0:	d825      	bhi.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ed2:	2b80      	cmp	r3, #128	@ 0x80
 8007ed4:	d018      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007ed6:	2b80      	cmp	r3, #128	@ 0x80
 8007ed8:	d821      	bhi.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007ede:	2b40      	cmp	r3, #64	@ 0x40
 8007ee0:	d007      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007ee2:	e01c      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee8:	4a4e      	ldr	r2, [pc, #312]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007ef0:	e01e      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f002 f9be 	bl	800a27c <RCCEx_PLL2_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007f06:	e013      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f0c:	3328      	adds	r3, #40	@ 0x28
 8007f0e:	2100      	movs	r1, #0
 8007f10:	4618      	mov	r0, r3
 8007f12:	f002 fa65 	bl	800a3e0 <RCCEx_PLL3_Config>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007f1c:	e008      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f24:	e004      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007f26:	bf00      	nop
 8007f28:	e002      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007f2a:	bf00      	nop
 8007f2c:	e000      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007f38:	4b3a      	ldr	r3, [pc, #232]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f3c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f46:	4a37      	ldr	r2, [pc, #220]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f48:	430b      	orrs	r3, r1
 8007f4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f4c:	e003      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f52:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007f62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007f66:	2300      	movs	r3, #0
 8007f68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007f6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007f70:	460b      	mov	r3, r1
 8007f72:	4313      	orrs	r3, r2
 8007f74:	d05c      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f7c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f80:	d03b      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f82:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f86:	d834      	bhi.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f8c:	d037      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f92:	d82e      	bhi.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f98:	d033      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007f9a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f9e:	d828      	bhi.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fa4:	d01a      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007faa:	d822      	bhi.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fb4:	d007      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007fb6:	e01c      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fbc:	4a19      	ldr	r2, [pc, #100]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007fc4:	e01e      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fca:	3308      	adds	r3, #8
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f002 f954 	bl	800a27c <RCCEx_PLL2_Config>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007fda:	e013      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe0:	3328      	adds	r3, #40	@ 0x28
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f002 f9fb 	bl	800a3e0 <RCCEx_PLL3_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007ff0:	e008      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ff8:	e004      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007ffa:	bf00      	nop
 8007ffc:	e002      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007ffe:	bf00      	nop
 8008000:	e000      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008004:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10d      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800800c:	4b05      	ldr	r3, [pc, #20]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800800e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008010:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800801a:	4a02      	ldr	r2, [pc, #8]	@ (8008024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800801c:	430b      	orrs	r3, r1
 800801e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008020:	e006      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008022:	bf00      	nop
 8008024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008028:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800802c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800803c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008040:	2300      	movs	r3, #0
 8008042:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008046:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800804a:	460b      	mov	r3, r1
 800804c:	4313      	orrs	r3, r2
 800804e:	d03a      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008056:	2b30      	cmp	r3, #48	@ 0x30
 8008058:	d01f      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800805a:	2b30      	cmp	r3, #48	@ 0x30
 800805c:	d819      	bhi.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800805e:	2b20      	cmp	r3, #32
 8008060:	d00c      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008062:	2b20      	cmp	r3, #32
 8008064:	d815      	bhi.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d019      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800806a:	2b10      	cmp	r3, #16
 800806c:	d111      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800806e:	4bae      	ldr	r3, [pc, #696]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008072:	4aad      	ldr	r2, [pc, #692]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008078:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800807a:	e011      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800807c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008080:	3308      	adds	r3, #8
 8008082:	2102      	movs	r1, #2
 8008084:	4618      	mov	r0, r3
 8008086:	f002 f8f9 	bl	800a27c <RCCEx_PLL2_Config>
 800808a:	4603      	mov	r3, r0
 800808c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008090:	e006      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008098:	e002      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800809a:	bf00      	nop
 800809c:	e000      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800809e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80080a8:	4b9f      	ldr	r3, [pc, #636]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80080b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b6:	4a9c      	ldr	r2, [pc, #624]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080b8:	430b      	orrs	r3, r1
 80080ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080bc:	e003      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80080c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80080d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80080d6:	2300      	movs	r3, #0
 80080d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80080dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80080e0:	460b      	mov	r3, r1
 80080e2:	4313      	orrs	r3, r2
 80080e4:	d051      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80080e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080f0:	d035      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80080f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080f6:	d82e      	bhi.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80080f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080fc:	d031      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80080fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008102:	d828      	bhi.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008108:	d01a      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800810a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800810e:	d822      	bhi.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008118:	d007      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800811a:	e01c      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800811c:	4b82      	ldr	r3, [pc, #520]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800811e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008120:	4a81      	ldr	r2, [pc, #516]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008128:	e01c      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800812a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812e:	3308      	adds	r3, #8
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f002 f8a2 	bl	800a27c <RCCEx_PLL2_Config>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800813e:	e011      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008144:	3328      	adds	r3, #40	@ 0x28
 8008146:	2100      	movs	r1, #0
 8008148:	4618      	mov	r0, r3
 800814a:	f002 f949 	bl	800a3e0 <RCCEx_PLL3_Config>
 800814e:	4603      	mov	r3, r0
 8008150:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008154:	e006      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800815c:	e002      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800815e:	bf00      	nop
 8008160:	e000      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800816c:	4b6e      	ldr	r3, [pc, #440]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800816e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008170:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800817a:	4a6b      	ldr	r2, [pc, #428]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800817c:	430b      	orrs	r3, r1
 800817e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008180:	e003      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008182:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008186:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800818a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008196:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800819a:	2300      	movs	r3, #0
 800819c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80081a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80081a4:	460b      	mov	r3, r1
 80081a6:	4313      	orrs	r3, r2
 80081a8:	d053      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80081aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081b4:	d033      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80081b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081ba:	d82c      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80081bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081c0:	d02f      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80081c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081c6:	d826      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80081c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081cc:	d02b      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80081ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081d2:	d820      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80081d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081d8:	d012      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80081da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081de:	d81a      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d022      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80081e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081e8:	d115      	bne.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081ee:	3308      	adds	r3, #8
 80081f0:	2101      	movs	r1, #1
 80081f2:	4618      	mov	r0, r3
 80081f4:	f002 f842 	bl	800a27c <RCCEx_PLL2_Config>
 80081f8:	4603      	mov	r3, r0
 80081fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081fe:	e015      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008204:	3328      	adds	r3, #40	@ 0x28
 8008206:	2101      	movs	r1, #1
 8008208:	4618      	mov	r0, r3
 800820a:	f002 f8e9 	bl	800a3e0 <RCCEx_PLL3_Config>
 800820e:	4603      	mov	r3, r0
 8008210:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008214:	e00a      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800821c:	e006      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800821e:	bf00      	nop
 8008220:	e004      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008222:	bf00      	nop
 8008224:	e002      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008226:	bf00      	nop
 8008228:	e000      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800822a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008234:	4b3c      	ldr	r3, [pc, #240]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008238:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800823c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008240:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008242:	4a39      	ldr	r2, [pc, #228]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008244:	430b      	orrs	r3, r1
 8008246:	6513      	str	r3, [r2, #80]	@ 0x50
 8008248:	e003      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800824e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800825e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008262:	2300      	movs	r3, #0
 8008264:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008268:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800826c:	460b      	mov	r3, r1
 800826e:	4313      	orrs	r3, r2
 8008270:	d060      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008276:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800827a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800827e:	d039      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008280:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008284:	d832      	bhi.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008286:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800828a:	d035      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800828c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008290:	d82c      	bhi.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008296:	d031      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800829c:	d826      	bhi.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800829e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082a2:	d02d      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80082a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082a8:	d820      	bhi.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80082aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082ae:	d012      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80082b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082b4:	d81a      	bhi.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d024      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80082ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082be:	d115      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082c4:	3308      	adds	r3, #8
 80082c6:	2101      	movs	r1, #1
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 ffd7 	bl	800a27c <RCCEx_PLL2_Config>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80082d4:	e017      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082da:	3328      	adds	r3, #40	@ 0x28
 80082dc:	2101      	movs	r1, #1
 80082de:	4618      	mov	r0, r3
 80082e0:	f002 f87e 	bl	800a3e0 <RCCEx_PLL3_Config>
 80082e4:	4603      	mov	r3, r0
 80082e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80082ea:	e00c      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082f2:	e008      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80082f4:	bf00      	nop
 80082f6:	e006      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80082f8:	bf00      	nop
 80082fa:	e004      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80082fc:	bf00      	nop
 80082fe:	e002      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008300:	bf00      	nop
 8008302:	e000      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008306:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10e      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800830e:	4b06      	ldr	r3, [pc, #24]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008312:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800831a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800831e:	4a02      	ldr	r2, [pc, #8]	@ (8008328 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008320:	430b      	orrs	r3, r1
 8008322:	6593      	str	r3, [r2, #88]	@ 0x58
 8008324:	e006      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008326:	bf00      	nop
 8008328:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008330:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008334:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008344:	2300      	movs	r3, #0
 8008346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800834a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800834e:	460b      	mov	r3, r1
 8008350:	4313      	orrs	r3, r2
 8008352:	d037      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800835a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800835e:	d00e      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008364:	d816      	bhi.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d018      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800836a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800836e:	d111      	bne.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008370:	4bc4      	ldr	r3, [pc, #784]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	4ac3      	ldr	r2, [pc, #780]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800837a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800837c:	e00f      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800837e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008382:	3308      	adds	r3, #8
 8008384:	2101      	movs	r1, #1
 8008386:	4618      	mov	r0, r3
 8008388:	f001 ff78 	bl	800a27c <RCCEx_PLL2_Config>
 800838c:	4603      	mov	r3, r0
 800838e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008392:	e004      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800839a:	e000      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800839c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800839e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80083a6:	4bb7      	ldr	r3, [pc, #732]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80083ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083b4:	4ab3      	ldr	r2, [pc, #716]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083b6:	430b      	orrs	r3, r1
 80083b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80083ba:	e003      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80083c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80083d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083d4:	2300      	movs	r3, #0
 80083d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80083da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80083de:	460b      	mov	r3, r1
 80083e0:	4313      	orrs	r3, r2
 80083e2:	d039      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80083e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d81c      	bhi.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80083ee:	a201      	add	r2, pc, #4	@ (adr r2, 80083f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80083f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f4:	08008431 	.word	0x08008431
 80083f8:	08008405 	.word	0x08008405
 80083fc:	08008413 	.word	0x08008413
 8008400:	08008431 	.word	0x08008431
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008404:	4b9f      	ldr	r3, [pc, #636]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008408:	4a9e      	ldr	r2, [pc, #632]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800840a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800840e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008410:	e00f      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008416:	3308      	adds	r3, #8
 8008418:	2102      	movs	r1, #2
 800841a:	4618      	mov	r0, r3
 800841c:	f001 ff2e 	bl	800a27c <RCCEx_PLL2_Config>
 8008420:	4603      	mov	r3, r0
 8008422:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008426:	e004      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800842e:	e000      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008432:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800843a:	4b92      	ldr	r3, [pc, #584]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800843c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800843e:	f023 0103 	bic.w	r1, r3, #3
 8008442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008448:	4a8e      	ldr	r2, [pc, #568]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800844a:	430b      	orrs	r3, r1
 800844c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800844e:	e003      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008450:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008454:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008464:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008468:	2300      	movs	r3, #0
 800846a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800846e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008472:	460b      	mov	r3, r1
 8008474:	4313      	orrs	r3, r2
 8008476:	f000 8099 	beq.w	80085ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800847a:	4b83      	ldr	r3, [pc, #524]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a82      	ldr	r2, [pc, #520]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008484:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008486:	f7f9 fbd7 	bl	8001c38 <HAL_GetTick>
 800848a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800848e:	e00b      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008490:	f7f9 fbd2 	bl	8001c38 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	2b64      	cmp	r3, #100	@ 0x64
 800849e:	d903      	bls.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084a6:	e005      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084a8:	4b77      	ldr	r3, [pc, #476]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0ed      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80084b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d173      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80084bc:	4b71      	ldr	r3, [pc, #452]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80084c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084c8:	4053      	eors	r3, r2
 80084ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d015      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084d2:	4b6c      	ldr	r3, [pc, #432]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084da:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084de:	4b69      	ldr	r3, [pc, #420]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e2:	4a68      	ldr	r2, [pc, #416]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084ea:	4b66      	ldr	r3, [pc, #408]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ee:	4a65      	ldr	r2, [pc, #404]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80084f6:	4a63      	ldr	r2, [pc, #396]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80084fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800850a:	d118      	bne.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800850c:	f7f9 fb94 	bl	8001c38 <HAL_GetTick>
 8008510:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008514:	e00d      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008516:	f7f9 fb8f 	bl	8001c38 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008520:	1ad2      	subs	r2, r2, r3
 8008522:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008526:	429a      	cmp	r2, r3
 8008528:	d903      	bls.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008530:	e005      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008532:	4b54      	ldr	r3, [pc, #336]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0eb      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800853e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008542:	2b00      	cmp	r3, #0
 8008544:	d129      	bne.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800854a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800854e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008556:	d10e      	bne.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008558:	4b4a      	ldr	r3, [pc, #296]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008564:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008568:	091a      	lsrs	r2, r3, #4
 800856a:	4b48      	ldr	r3, [pc, #288]	@ (800868c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800856c:	4013      	ands	r3, r2
 800856e:	4a45      	ldr	r2, [pc, #276]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008570:	430b      	orrs	r3, r1
 8008572:	6113      	str	r3, [r2, #16]
 8008574:	e005      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008576:	4b43      	ldr	r3, [pc, #268]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	4a42      	ldr	r2, [pc, #264]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800857c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008580:	6113      	str	r3, [r2, #16]
 8008582:	4b40      	ldr	r3, [pc, #256]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008584:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800858a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800858e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008592:	4a3c      	ldr	r2, [pc, #240]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008594:	430b      	orrs	r3, r1
 8008596:	6713      	str	r3, [r2, #112]	@ 0x70
 8008598:	e008      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800859a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800859e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80085a2:	e003      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80085ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f002 0301 	and.w	r3, r2, #1
 80085b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085bc:	2300      	movs	r3, #0
 80085be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80085c6:	460b      	mov	r3, r1
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f000 8090 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80085ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085d6:	2b28      	cmp	r3, #40	@ 0x28
 80085d8:	d870      	bhi.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80085da:	a201      	add	r2, pc, #4	@ (adr r2, 80085e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	080086c5 	.word	0x080086c5
 80085e4:	080086bd 	.word	0x080086bd
 80085e8:	080086bd 	.word	0x080086bd
 80085ec:	080086bd 	.word	0x080086bd
 80085f0:	080086bd 	.word	0x080086bd
 80085f4:	080086bd 	.word	0x080086bd
 80085f8:	080086bd 	.word	0x080086bd
 80085fc:	080086bd 	.word	0x080086bd
 8008600:	08008691 	.word	0x08008691
 8008604:	080086bd 	.word	0x080086bd
 8008608:	080086bd 	.word	0x080086bd
 800860c:	080086bd 	.word	0x080086bd
 8008610:	080086bd 	.word	0x080086bd
 8008614:	080086bd 	.word	0x080086bd
 8008618:	080086bd 	.word	0x080086bd
 800861c:	080086bd 	.word	0x080086bd
 8008620:	080086a7 	.word	0x080086a7
 8008624:	080086bd 	.word	0x080086bd
 8008628:	080086bd 	.word	0x080086bd
 800862c:	080086bd 	.word	0x080086bd
 8008630:	080086bd 	.word	0x080086bd
 8008634:	080086bd 	.word	0x080086bd
 8008638:	080086bd 	.word	0x080086bd
 800863c:	080086bd 	.word	0x080086bd
 8008640:	080086c5 	.word	0x080086c5
 8008644:	080086bd 	.word	0x080086bd
 8008648:	080086bd 	.word	0x080086bd
 800864c:	080086bd 	.word	0x080086bd
 8008650:	080086bd 	.word	0x080086bd
 8008654:	080086bd 	.word	0x080086bd
 8008658:	080086bd 	.word	0x080086bd
 800865c:	080086bd 	.word	0x080086bd
 8008660:	080086c5 	.word	0x080086c5
 8008664:	080086bd 	.word	0x080086bd
 8008668:	080086bd 	.word	0x080086bd
 800866c:	080086bd 	.word	0x080086bd
 8008670:	080086bd 	.word	0x080086bd
 8008674:	080086bd 	.word	0x080086bd
 8008678:	080086bd 	.word	0x080086bd
 800867c:	080086bd 	.word	0x080086bd
 8008680:	080086c5 	.word	0x080086c5
 8008684:	58024400 	.word	0x58024400
 8008688:	58024800 	.word	0x58024800
 800868c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008694:	3308      	adds	r3, #8
 8008696:	2101      	movs	r1, #1
 8008698:	4618      	mov	r0, r3
 800869a:	f001 fdef 	bl	800a27c <RCCEx_PLL2_Config>
 800869e:	4603      	mov	r3, r0
 80086a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80086a4:	e00f      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086aa:	3328      	adds	r3, #40	@ 0x28
 80086ac:	2101      	movs	r1, #1
 80086ae:	4618      	mov	r0, r3
 80086b0:	f001 fe96 	bl	800a3e0 <RCCEx_PLL3_Config>
 80086b4:	4603      	mov	r3, r0
 80086b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80086ba:	e004      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80086c2:	e000      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80086c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10b      	bne.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80086ce:	4bc0      	ldr	r3, [pc, #768]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80086d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80086d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086de:	4abc      	ldr	r2, [pc, #752]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80086e0:	430b      	orrs	r3, r1
 80086e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80086e4:	e003      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80086ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f002 0302 	and.w	r3, r2, #2
 80086fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086fe:	2300      	movs	r3, #0
 8008700:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008704:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008708:	460b      	mov	r3, r1
 800870a:	4313      	orrs	r3, r2
 800870c:	d043      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800870e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008716:	2b05      	cmp	r3, #5
 8008718:	d824      	bhi.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800871a:	a201      	add	r2, pc, #4	@ (adr r2, 8008720 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	0800876d 	.word	0x0800876d
 8008724:	08008739 	.word	0x08008739
 8008728:	0800874f 	.word	0x0800874f
 800872c:	0800876d 	.word	0x0800876d
 8008730:	0800876d 	.word	0x0800876d
 8008734:	0800876d 	.word	0x0800876d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800873c:	3308      	adds	r3, #8
 800873e:	2101      	movs	r1, #1
 8008740:	4618      	mov	r0, r3
 8008742:	f001 fd9b 	bl	800a27c <RCCEx_PLL2_Config>
 8008746:	4603      	mov	r3, r0
 8008748:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800874c:	e00f      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800874e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008752:	3328      	adds	r3, #40	@ 0x28
 8008754:	2101      	movs	r1, #1
 8008756:	4618      	mov	r0, r3
 8008758:	f001 fe42 	bl	800a3e0 <RCCEx_PLL3_Config>
 800875c:	4603      	mov	r3, r0
 800875e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008762:	e004      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800876a:	e000      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800876c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800876e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10b      	bne.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008776:	4b96      	ldr	r3, [pc, #600]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800877a:	f023 0107 	bic.w	r1, r3, #7
 800877e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008786:	4a92      	ldr	r2, [pc, #584]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008788:	430b      	orrs	r3, r1
 800878a:	6553      	str	r3, [r2, #84]	@ 0x54
 800878c:	e003      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008792:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	f002 0304 	and.w	r3, r2, #4
 80087a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087a6:	2300      	movs	r3, #0
 80087a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087ac:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4313      	orrs	r3, r2
 80087b4:	d043      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80087b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087be:	2b05      	cmp	r3, #5
 80087c0:	d824      	bhi.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80087c2:	a201      	add	r2, pc, #4	@ (adr r2, 80087c8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80087c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c8:	08008815 	.word	0x08008815
 80087cc:	080087e1 	.word	0x080087e1
 80087d0:	080087f7 	.word	0x080087f7
 80087d4:	08008815 	.word	0x08008815
 80087d8:	08008815 	.word	0x08008815
 80087dc:	08008815 	.word	0x08008815
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087e4:	3308      	adds	r3, #8
 80087e6:	2101      	movs	r1, #1
 80087e8:	4618      	mov	r0, r3
 80087ea:	f001 fd47 	bl	800a27c <RCCEx_PLL2_Config>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80087f4:	e00f      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087fa:	3328      	adds	r3, #40	@ 0x28
 80087fc:	2101      	movs	r1, #1
 80087fe:	4618      	mov	r0, r3
 8008800:	f001 fdee 	bl	800a3e0 <RCCEx_PLL3_Config>
 8008804:	4603      	mov	r3, r0
 8008806:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800880a:	e004      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008812:	e000      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008816:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10b      	bne.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800881e:	4b6c      	ldr	r3, [pc, #432]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008822:	f023 0107 	bic.w	r1, r3, #7
 8008826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800882a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800882e:	4a68      	ldr	r2, [pc, #416]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008830:	430b      	orrs	r3, r1
 8008832:	6593      	str	r3, [r2, #88]	@ 0x58
 8008834:	e003      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008836:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800883a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800883e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f002 0320 	and.w	r3, r2, #32
 800884a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800884e:	2300      	movs	r3, #0
 8008850:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008854:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008858:	460b      	mov	r3, r1
 800885a:	4313      	orrs	r3, r2
 800885c:	d055      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800885e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008862:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008866:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800886a:	d033      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800886c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008870:	d82c      	bhi.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008876:	d02f      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800887c:	d826      	bhi.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800887e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008882:	d02b      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008884:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008888:	d820      	bhi.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800888a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800888e:	d012      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008894:	d81a      	bhi.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008896:	2b00      	cmp	r3, #0
 8008898:	d022      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800889a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800889e:	d115      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088a4:	3308      	adds	r3, #8
 80088a6:	2100      	movs	r1, #0
 80088a8:	4618      	mov	r0, r3
 80088aa:	f001 fce7 	bl	800a27c <RCCEx_PLL2_Config>
 80088ae:	4603      	mov	r3, r0
 80088b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80088b4:	e015      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ba:	3328      	adds	r3, #40	@ 0x28
 80088bc:	2102      	movs	r1, #2
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 fd8e 	bl	800a3e0 <RCCEx_PLL3_Config>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80088ca:	e00a      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088d2:	e006      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80088d4:	bf00      	nop
 80088d6:	e004      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80088d8:	bf00      	nop
 80088da:	e002      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80088dc:	bf00      	nop
 80088de:	e000      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80088e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10b      	bne.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088ea:	4b39      	ldr	r3, [pc, #228]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80088f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088fa:	4a35      	ldr	r2, [pc, #212]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088fc:	430b      	orrs	r3, r1
 80088fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8008900:	e003      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008902:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008906:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800890a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800891a:	2300      	movs	r3, #0
 800891c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008920:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008924:	460b      	mov	r3, r1
 8008926:	4313      	orrs	r3, r2
 8008928:	d058      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800892a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800892e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008932:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008936:	d033      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008938:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800893c:	d82c      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800893e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008942:	d02f      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008948:	d826      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800894a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800894e:	d02b      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008950:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008954:	d820      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008956:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800895a:	d012      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800895c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008960:	d81a      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008962:	2b00      	cmp	r3, #0
 8008964:	d022      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800896a:	d115      	bne.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800896c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008970:	3308      	adds	r3, #8
 8008972:	2100      	movs	r1, #0
 8008974:	4618      	mov	r0, r3
 8008976:	f001 fc81 	bl	800a27c <RCCEx_PLL2_Config>
 800897a:	4603      	mov	r3, r0
 800897c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008980:	e015      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008986:	3328      	adds	r3, #40	@ 0x28
 8008988:	2102      	movs	r1, #2
 800898a:	4618      	mov	r0, r3
 800898c:	f001 fd28 	bl	800a3e0 <RCCEx_PLL3_Config>
 8008990:	4603      	mov	r3, r0
 8008992:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008996:	e00a      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800899e:	e006      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80089a0:	bf00      	nop
 80089a2:	e004      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80089a4:	bf00      	nop
 80089a6:	e002      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80089a8:	bf00      	nop
 80089aa:	e000      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80089ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10e      	bne.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089b6:	4b06      	ldr	r3, [pc, #24]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80089b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80089be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089c6:	4a02      	ldr	r2, [pc, #8]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80089c8:	430b      	orrs	r3, r1
 80089ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80089cc:	e006      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80089ce:	bf00      	nop
 80089d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80089dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80089e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089ec:	2300      	movs	r3, #0
 80089ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80089f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80089f6:	460b      	mov	r3, r1
 80089f8:	4313      	orrs	r3, r2
 80089fa:	d055      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80089fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a04:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008a08:	d033      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008a0a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008a0e:	d82c      	bhi.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008a10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a14:	d02f      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a1a:	d826      	bhi.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008a1c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008a20:	d02b      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008a22:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008a26:	d820      	bhi.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008a28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a2c:	d012      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008a2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a32:	d81a      	bhi.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d022      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a3c:	d115      	bne.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a42:	3308      	adds	r3, #8
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 fc18 	bl	800a27c <RCCEx_PLL2_Config>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a52:	e015      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a58:	3328      	adds	r3, #40	@ 0x28
 8008a5a:	2102      	movs	r1, #2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 fcbf 	bl	800a3e0 <RCCEx_PLL3_Config>
 8008a62:	4603      	mov	r3, r0
 8008a64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a68:	e00a      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a70:	e006      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008a72:	bf00      	nop
 8008a74:	e004      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008a76:	bf00      	nop
 8008a78:	e002      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008a7a:	bf00      	nop
 8008a7c:	e000      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a88:	4ba1      	ldr	r3, [pc, #644]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a8c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a98:	4a9d      	ldr	r2, [pc, #628]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a9a:	430b      	orrs	r3, r1
 8008a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a9e:	e003      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008aa4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f002 0308 	and.w	r3, r2, #8
 8008ab4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008abe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	d01e      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ad4:	d10c      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ada:	3328      	adds	r3, #40	@ 0x28
 8008adc:	2102      	movs	r1, #2
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f001 fc7e 	bl	800a3e0 <RCCEx_PLL3_Config>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008af0:	4b87      	ldr	r3, [pc, #540]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b00:	4a83      	ldr	r2, [pc, #524]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b02:	430b      	orrs	r3, r1
 8008b04:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f002 0310 	and.w	r3, r2, #16
 8008b12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b16:	2300      	movs	r3, #0
 8008b18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008b1c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008b20:	460b      	mov	r3, r1
 8008b22:	4313      	orrs	r3, r2
 8008b24:	d01e      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b32:	d10c      	bne.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b38:	3328      	adds	r3, #40	@ 0x28
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 fc4f 	bl	800a3e0 <RCCEx_PLL3_Config>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b4e:	4b70      	ldr	r3, [pc, #448]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b5e:	4a6c      	ldr	r2, [pc, #432]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b60:	430b      	orrs	r3, r1
 8008b62:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008b70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b74:	2300      	movs	r3, #0
 8008b76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b7a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4313      	orrs	r3, r2
 8008b82:	d03e      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b90:	d022      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008b92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b96:	d81b      	bhi.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ba0:	d00b      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008ba2:	e015      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ba8:	3308      	adds	r3, #8
 8008baa:	2100      	movs	r1, #0
 8008bac:	4618      	mov	r0, r3
 8008bae:	f001 fb65 	bl	800a27c <RCCEx_PLL2_Config>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008bb8:	e00f      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bbe:	3328      	adds	r3, #40	@ 0x28
 8008bc0:	2102      	movs	r1, #2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f001 fc0c 	bl	800a3e0 <RCCEx_PLL3_Config>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008bce:	e004      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008bd6:	e000      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10b      	bne.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008be2:	4b4b      	ldr	r3, [pc, #300]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008be6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008bf2:	4a47      	ldr	r2, [pc, #284]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bf4:	430b      	orrs	r3, r1
 8008bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bf8:	e003      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bfe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008c0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c10:	2300      	movs	r3, #0
 8008c12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c14:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	d03b      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c2a:	d01f      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008c2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c30:	d818      	bhi.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c36:	d003      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008c38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c3c:	d007      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008c3e:	e011      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c40:	4b33      	ldr	r3, [pc, #204]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c44:	4a32      	ldr	r2, [pc, #200]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c4c:	e00f      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c52:	3328      	adds	r3, #40	@ 0x28
 8008c54:	2101      	movs	r1, #1
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 fbc2 	bl	800a3e0 <RCCEx_PLL3_Config>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c62:	e004      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c6a:	e000      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10b      	bne.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c76:	4b26      	ldr	r3, [pc, #152]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c86:	4a22      	ldr	r2, [pc, #136]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c8c:	e003      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c92:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008ca2:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ca8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008cac:	460b      	mov	r3, r1
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	d034      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cc0:	d007      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008cc2:	e011      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc4:	4b12      	ldr	r3, [pc, #72]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc8:	4a11      	ldr	r2, [pc, #68]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008cd0:	e00e      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	2102      	movs	r1, #2
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f001 face 	bl	800a27c <RCCEx_PLL2_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ce6:	e003      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cf0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10d      	bne.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008cf8:	4b05      	ldr	r3, [pc, #20]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cfc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d06:	4a02      	ldr	r2, [pc, #8]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d0c:	e006      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008d0e:	bf00      	nop
 8008d10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008d28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d2e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008d32:	460b      	mov	r3, r1
 8008d34:	4313      	orrs	r3, r2
 8008d36:	d00c      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d3c:	3328      	adds	r3, #40	@ 0x28
 8008d3e:	2102      	movs	r1, #2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 fb4d 	bl	800a3e0 <RCCEx_PLL3_Config>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008d5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d60:	2300      	movs	r3, #0
 8008d62:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d64:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	d038      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d7a:	d018      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008d7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d80:	d811      	bhi.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008d82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d86:	d014      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d8c:	d80b      	bhi.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d011      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d96:	d106      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d98:	4bc3      	ldr	r3, [pc, #780]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d9c:	4ac2      	ldr	r2, [pc, #776]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008da2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008da4:	e008      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dac:	e004      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008dae:	bf00      	nop
 8008db0:	e002      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008db2:	bf00      	nop
 8008db4:	e000      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008db8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10b      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008dc0:	4bb9      	ldr	r3, [pc, #740]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dd0:	4ab5      	ldr	r2, [pc, #724]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dd2:	430b      	orrs	r3, r1
 8008dd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8008dd6:	e003      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ddc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008dec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008dee:	2300      	movs	r3, #0
 8008df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008df2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008df6:	460b      	mov	r3, r1
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	d009      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008dfc:	4baa      	ldr	r3, [pc, #680]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e0a:	4aa7      	ldr	r2, [pc, #668]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e0c:	430b      	orrs	r3, r1
 8008e0e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008e1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e1e:	2300      	movs	r3, #0
 8008e20:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e22:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008e26:	460b      	mov	r3, r1
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	d009      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e2c:	4b9e      	ldr	r3, [pc, #632]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e30:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e3a:	4a9b      	ldr	r2, [pc, #620]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e3c:	430b      	orrs	r3, r1
 8008e3e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e4e:	2300      	movs	r3, #0
 8008e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e52:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008e56:	460b      	mov	r3, r1
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	d009      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008e5c:	4b92      	ldr	r3, [pc, #584]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e60:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e6a:	4a8f      	ldr	r2, [pc, #572]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008e7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e7e:	2300      	movs	r3, #0
 8008e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e82:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008e86:	460b      	mov	r3, r1
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	d00e      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e8c:	4b86      	ldr	r3, [pc, #536]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	4a85      	ldr	r2, [pc, #532]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e96:	6113      	str	r3, [r2, #16]
 8008e98:	4b83      	ldr	r3, [pc, #524]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e9a:	6919      	ldr	r1, [r3, #16]
 8008e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008ea4:	4a80      	ldr	r2, [pc, #512]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ea6:	430b      	orrs	r3, r1
 8008ea8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008eb8:	2300      	movs	r3, #0
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ebc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	d009      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ec6:	4b78      	ldr	r3, [pc, #480]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ed4:	4a74      	ldr	r2, [pc, #464]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ed6:	430b      	orrs	r3, r1
 8008ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008ee6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ee8:	2300      	movs	r3, #0
 8008eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	d00a      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ef6:	4b6c      	ldr	r3, [pc, #432]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008efa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f06:	4a68      	ldr	r2, [pc, #416]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f08:	430b      	orrs	r3, r1
 8008f0a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	2100      	movs	r1, #0
 8008f16:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f1e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008f22:	460b      	mov	r3, r1
 8008f24:	4313      	orrs	r3, r2
 8008f26:	d011      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	2100      	movs	r1, #0
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 f9a3 	bl	800a27c <RCCEx_PLL2_Config>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008f3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	2100      	movs	r1, #0
 8008f56:	6239      	str	r1, [r7, #32]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008f62:	460b      	mov	r3, r1
 8008f64:	4313      	orrs	r3, r2
 8008f66:	d011      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	2101      	movs	r1, #1
 8008f70:	4618      	mov	r0, r3
 8008f72:	f001 f983 	bl	800a27c <RCCEx_PLL2_Config>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008f7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f88:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	2100      	movs	r1, #0
 8008f96:	61b9      	str	r1, [r7, #24]
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	61fb      	str	r3, [r7, #28]
 8008f9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	d011      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fac:	3308      	adds	r3, #8
 8008fae:	2102      	movs	r1, #2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f001 f963 	bl	800a27c <RCCEx_PLL2_Config>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d003      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	6139      	str	r1, [r7, #16]
 8008fd8:	f003 0308 	and.w	r3, r3, #8
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	d011      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fec:	3328      	adds	r3, #40	@ 0x28
 8008fee:	2100      	movs	r1, #0
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f001 f9f5 	bl	800a3e0 <RCCEx_PLL3_Config>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008ffc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009004:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009008:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800900c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	2100      	movs	r1, #0
 8009016:	60b9      	str	r1, [r7, #8]
 8009018:	f003 0310 	and.w	r3, r3, #16
 800901c:	60fb      	str	r3, [r7, #12]
 800901e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009022:	460b      	mov	r3, r1
 8009024:	4313      	orrs	r3, r2
 8009026:	d011      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800902c:	3328      	adds	r3, #40	@ 0x28
 800902e:	2101      	movs	r1, #1
 8009030:	4618      	mov	r0, r3
 8009032:	f001 f9d5 	bl	800a3e0 <RCCEx_PLL3_Config>
 8009036:	4603      	mov	r3, r0
 8009038:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800903c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009040:	2b00      	cmp	r3, #0
 8009042:	d003      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009044:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009048:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800904c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009054:	2100      	movs	r1, #0
 8009056:	6039      	str	r1, [r7, #0]
 8009058:	f003 0320 	and.w	r3, r3, #32
 800905c:	607b      	str	r3, [r7, #4]
 800905e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009062:	460b      	mov	r3, r1
 8009064:	4313      	orrs	r3, r2
 8009066:	d011      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800906c:	3328      	adds	r3, #40	@ 0x28
 800906e:	2102      	movs	r1, #2
 8009070:	4618      	mov	r0, r3
 8009072:	f001 f9b5 	bl	800a3e0 <RCCEx_PLL3_Config>
 8009076:	4603      	mov	r3, r0
 8009078:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800907c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009084:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009088:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800908c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	e000      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
}
 800909a:	4618      	mov	r0, r3
 800909c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80090a0:	46bd      	mov	sp, r7
 80090a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090a6:	bf00      	nop
 80090a8:	58024400 	.word	0x58024400

080090ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b090      	sub	sp, #64	@ 0x40
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80090b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ba:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80090be:	430b      	orrs	r3, r1
 80090c0:	f040 8094 	bne.w	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80090c4:	4b97      	ldr	r3, [pc, #604]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80090ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	f200 8087 	bhi.w	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80090d6:	a201      	add	r2, pc, #4	@ (adr r2, 80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	080090f1 	.word	0x080090f1
 80090e0:	08009119 	.word	0x08009119
 80090e4:	08009141 	.word	0x08009141
 80090e8:	080091dd 	.word	0x080091dd
 80090ec:	08009169 	.word	0x08009169
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090f0:	4b8c      	ldr	r3, [pc, #560]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090fc:	d108      	bne.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009102:	4618      	mov	r0, r3
 8009104:	f000 ff68 	bl	8009fd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800910c:	f000 bc97 	b.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009114:	f000 bc93 	b.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009118:	4b82      	ldr	r3, [pc, #520]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009124:	d108      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009126:	f107 0318 	add.w	r3, r7, #24
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fcac 	bl	8009a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009134:	f000 bc83 	b.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800913c:	f000 bc7f 	b.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009140:	4b78      	ldr	r3, [pc, #480]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800914c:	d108      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800914e:	f107 030c 	add.w	r3, r7, #12
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fdec 	bl	8009d30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800915c:	f000 bc6f 	b.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009164:	f000 bc6b 	b.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009168:	4b6e      	ldr	r3, [pc, #440]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800916a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800916c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009170:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009172:	4b6c      	ldr	r3, [pc, #432]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0304 	and.w	r3, r3, #4
 800917a:	2b04      	cmp	r3, #4
 800917c:	d10c      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800917e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009180:	2b00      	cmp	r3, #0
 8009182:	d109      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009184:	4b67      	ldr	r3, [pc, #412]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	08db      	lsrs	r3, r3, #3
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	4a66      	ldr	r2, [pc, #408]	@ (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009190:	fa22 f303 	lsr.w	r3, r2, r3
 8009194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009196:	e01f      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009198:	4b62      	ldr	r3, [pc, #392]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091a4:	d106      	bne.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80091a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091ac:	d102      	bne.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091ae:	4b5f      	ldr	r3, [pc, #380]	@ (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80091b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091b2:	e011      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091b4:	4b5b      	ldr	r3, [pc, #364]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091c0:	d106      	bne.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80091c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091c8:	d102      	bne.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091ca:	4b59      	ldr	r3, [pc, #356]	@ (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80091cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ce:	e003      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091d0:	2300      	movs	r3, #0
 80091d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80091d4:	f000 bc33 	b.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80091d8:	f000 bc31 	b.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091dc:	4b55      	ldr	r3, [pc, #340]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80091de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e0:	f000 bc2d 	b.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e8:	f000 bc29 	b.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80091ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091f0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80091f4:	430b      	orrs	r3, r1
 80091f6:	f040 809f 	bne.w	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80091fa:	4b4a      	ldr	r3, [pc, #296]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091fe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009202:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800920a:	d04d      	beq.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800920c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009212:	f200 8084 	bhi.w	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009218:	2bc0      	cmp	r3, #192	@ 0xc0
 800921a:	d07d      	beq.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800921c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009220:	d87d      	bhi.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009224:	2b80      	cmp	r3, #128	@ 0x80
 8009226:	d02d      	beq.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8009228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922a:	2b80      	cmp	r3, #128	@ 0x80
 800922c:	d877      	bhi.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8009234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009236:	2b40      	cmp	r3, #64	@ 0x40
 8009238:	d012      	beq.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800923a:	e070      	b.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800923c:	4b39      	ldr	r3, [pc, #228]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009244:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009248:	d107      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800924a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800924e:	4618      	mov	r0, r3
 8009250:	f000 fec2 	bl	8009fd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009258:	e3f1      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800925e:	e3ee      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009260:	4b30      	ldr	r3, [pc, #192]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009268:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800926c:	d107      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800926e:	f107 0318 	add.w	r3, r7, #24
 8009272:	4618      	mov	r0, r3
 8009274:	f000 fc08 	bl	8009a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800927c:	e3df      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009282:	e3dc      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009284:	4b27      	ldr	r3, [pc, #156]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800928c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009290:	d107      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009292:	f107 030c 	add.w	r3, r7, #12
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fd4a 	bl	8009d30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a0:	e3cd      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a6:	e3ca      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092a8:	4b1e      	ldr	r3, [pc, #120]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092b2:	4b1c      	ldr	r3, [pc, #112]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0304 	and.w	r3, r3, #4
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d10c      	bne.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80092be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d109      	bne.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092c4:	4b17      	ldr	r3, [pc, #92]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	08db      	lsrs	r3, r3, #3
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	4a16      	ldr	r2, [pc, #88]	@ (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80092d0:	fa22 f303 	lsr.w	r3, r2, r3
 80092d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092d6:	e01e      	b.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092d8:	4b12      	ldr	r3, [pc, #72]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092e4:	d106      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80092e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092ec:	d102      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092ee:	4b0f      	ldr	r3, [pc, #60]	@ (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80092f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092f2:	e010      	b.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009300:	d106      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009308:	d102      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800930a:	4b09      	ldr	r3, [pc, #36]	@ (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800930c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800930e:	e002      	b.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009314:	e393      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009316:	e392      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009318:	4b06      	ldr	r3, [pc, #24]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800931a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800931c:	e38f      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009322:	e38c      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009324:	58024400 	.word	0x58024400
 8009328:	03d09000 	.word	0x03d09000
 800932c:	003d0900 	.word	0x003d0900
 8009330:	017d7840 	.word	0x017d7840
 8009334:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800933c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009340:	430b      	orrs	r3, r1
 8009342:	f040 809c 	bne.w	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8009346:	4b9e      	ldr	r3, [pc, #632]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800934a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800934e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009352:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009356:	d054      	beq.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8009358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800935e:	f200 808b 	bhi.w	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009368:	f000 8083 	beq.w	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009372:	f200 8081 	bhi.w	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800937c:	d02f      	beq.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800937e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009384:	d878      	bhi.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800938c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009392:	d012      	beq.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8009394:	e070      	b.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009396:	4b8a      	ldr	r3, [pc, #552]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800939e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093a2:	d107      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 fe15 	bl	8009fd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093b2:	e344      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093b8:	e341      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093ba:	4b81      	ldr	r3, [pc, #516]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093c6:	d107      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093c8:	f107 0318 	add.w	r3, r7, #24
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 fb5b 	bl	8009a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093d6:	e332      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093dc:	e32f      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093de:	4b78      	ldr	r3, [pc, #480]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ea:	d107      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ec:	f107 030c 	add.w	r3, r7, #12
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 fc9d 	bl	8009d30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093fa:	e320      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009400:	e31d      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009402:	4b6f      	ldr	r3, [pc, #444]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009406:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800940a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800940c:	4b6c      	ldr	r3, [pc, #432]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b04      	cmp	r3, #4
 8009416:	d10c      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800941a:	2b00      	cmp	r3, #0
 800941c:	d109      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800941e:	4b68      	ldr	r3, [pc, #416]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	08db      	lsrs	r3, r3, #3
 8009424:	f003 0303 	and.w	r3, r3, #3
 8009428:	4a66      	ldr	r2, [pc, #408]	@ (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800942a:	fa22 f303 	lsr.w	r3, r2, r3
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009430:	e01e      	b.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009432:	4b63      	ldr	r3, [pc, #396]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800943a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800943e:	d106      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009446:	d102      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009448:	4b5f      	ldr	r3, [pc, #380]	@ (80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800944a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800944c:	e010      	b.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800944e:	4b5c      	ldr	r3, [pc, #368]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800945a:	d106      	bne.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800945c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009462:	d102      	bne.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009464:	4b59      	ldr	r3, [pc, #356]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009468:	e002      	b.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800946e:	e2e6      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009470:	e2e5      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009472:	4b57      	ldr	r3, [pc, #348]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009476:	e2e2      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800947c:	e2df      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800947e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009482:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009486:	430b      	orrs	r3, r1
 8009488:	f040 80a7 	bne.w	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800948c:	4b4c      	ldr	r3, [pc, #304]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800948e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009490:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009494:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800949c:	d055      	beq.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800949e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094a4:	f200 8096 	bhi.w	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80094a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094ae:	f000 8084 	beq.w	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80094b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094b8:	f200 808c 	bhi.w	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80094bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094c2:	d030      	beq.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80094c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094ca:	f200 8083 	bhi.w	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80094ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d004      	beq.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80094d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094da:	d012      	beq.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80094dc:	e07a      	b.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094de:	4b38      	ldr	r3, [pc, #224]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094ea:	d107      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 fd71 	bl	8009fd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094fa:	e2a0      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009500:	e29d      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009502:	4b2f      	ldr	r3, [pc, #188]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800950a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800950e:	d107      	bne.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009510:	f107 0318 	add.w	r3, r7, #24
 8009514:	4618      	mov	r0, r3
 8009516:	f000 fab7 	bl	8009a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800951e:	e28e      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009520:	2300      	movs	r3, #0
 8009522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009524:	e28b      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009526:	4b26      	ldr	r3, [pc, #152]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800952e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009532:	d107      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009534:	f107 030c 	add.w	r3, r7, #12
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fbf9 	bl	8009d30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009542:	e27c      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009548:	e279      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800954a:	4b1d      	ldr	r3, [pc, #116]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800954c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800954e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009552:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009554:	4b1a      	ldr	r3, [pc, #104]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b04      	cmp	r3, #4
 800955e:	d10c      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8009560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009566:	4b16      	ldr	r3, [pc, #88]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	08db      	lsrs	r3, r3, #3
 800956c:	f003 0303 	and.w	r3, r3, #3
 8009570:	4a14      	ldr	r2, [pc, #80]	@ (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8009572:	fa22 f303 	lsr.w	r3, r2, r3
 8009576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009578:	e01e      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800957a:	4b11      	ldr	r3, [pc, #68]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009586:	d106      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800958a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800958e:	d102      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009590:	4b0d      	ldr	r3, [pc, #52]	@ (80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009594:	e010      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009596:	4b0a      	ldr	r3, [pc, #40]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800959e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095a2:	d106      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80095a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095aa:	d102      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095ac:	4b07      	ldr	r3, [pc, #28]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80095ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095b0:	e002      	b.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80095b6:	e242      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80095b8:	e241      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80095ba:	4b05      	ldr	r3, [pc, #20]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80095bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095be:	e23e      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80095c0:	58024400 	.word	0x58024400
 80095c4:	03d09000 	.word	0x03d09000
 80095c8:	003d0900 	.word	0x003d0900
 80095cc:	017d7840 	.word	0x017d7840
 80095d0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d8:	e231      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80095da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095de:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80095e2:	430b      	orrs	r3, r1
 80095e4:	f040 8085 	bne.w	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80095e8:	4b9c      	ldr	r3, [pc, #624]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ec:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80095f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80095f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095f8:	d06b      	beq.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80095fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009600:	d874      	bhi.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009604:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009608:	d056      	beq.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800960a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009610:	d86c      	bhi.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009614:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009618:	d03b      	beq.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009620:	d864      	bhi.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009628:	d021      	beq.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800962a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009630:	d85c      	bhi.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009634:	2b00      	cmp	r3, #0
 8009636:	d004      	beq.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8009638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800963e:	d004      	beq.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8009640:	e054      	b.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009642:	f7fe fb5f 	bl	8007d04 <HAL_RCC_GetPCLK1Freq>
 8009646:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009648:	e1f9      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800964a:	4b84      	ldr	r3, [pc, #528]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009656:	d107      	bne.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009658:	f107 0318 	add.w	r3, r7, #24
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fa13 	bl	8009a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009666:	e1ea      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800966c:	e1e7      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800966e:	4b7b      	ldr	r3, [pc, #492]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800967a:	d107      	bne.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800967c:	f107 030c 	add.w	r3, r7, #12
 8009680:	4618      	mov	r0, r3
 8009682:	f000 fb55 	bl	8009d30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800968a:	e1d8      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800968c:	2300      	movs	r3, #0
 800968e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009690:	e1d5      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009692:	4b72      	ldr	r3, [pc, #456]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0304 	and.w	r3, r3, #4
 800969a:	2b04      	cmp	r3, #4
 800969c:	d109      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800969e:	4b6f      	ldr	r3, [pc, #444]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	08db      	lsrs	r3, r3, #3
 80096a4:	f003 0303 	and.w	r3, r3, #3
 80096a8:	4a6d      	ldr	r2, [pc, #436]	@ (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80096aa:	fa22 f303 	lsr.w	r3, r2, r3
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096b0:	e1c5      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096b2:	2300      	movs	r3, #0
 80096b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096b6:	e1c2      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096b8:	4b68      	ldr	r3, [pc, #416]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096c4:	d102      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80096c6:	4b67      	ldr	r3, [pc, #412]	@ (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80096c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ca:	e1b8      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d0:	e1b5      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096d2:	4b62      	ldr	r3, [pc, #392]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096de:	d102      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80096e0:	4b61      	ldr	r3, [pc, #388]	@ (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80096e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096e4:	e1ab      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ea:	e1a8      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f0:	e1a5      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80096f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096f6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80096fa:	430b      	orrs	r3, r1
 80096fc:	d173      	bne.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80096fe:	4b57      	ldr	r3, [pc, #348]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009702:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009706:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800970e:	d02f      	beq.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8009710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009716:	d863      	bhi.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971a:	2b00      	cmp	r3, #0
 800971c:	d004      	beq.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800971e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009724:	d012      	beq.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8009726:	e05b      	b.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009728:	4b4c      	ldr	r3, [pc, #304]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009734:	d107      	bne.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009736:	f107 0318 	add.w	r3, r7, #24
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f9a4 	bl	8009a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009744:	e17b      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800974a:	e178      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800974c:	4b43      	ldr	r3, [pc, #268]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009758:	d107      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800975a:	f107 030c 	add.w	r3, r7, #12
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fae6 	bl	8009d30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009768:	e169      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800976a:	2300      	movs	r3, #0
 800976c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800976e:	e166      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009770:	4b3a      	ldr	r3, [pc, #232]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009774:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009778:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800977a:	4b38      	ldr	r3, [pc, #224]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 0304 	and.w	r3, r3, #4
 8009782:	2b04      	cmp	r3, #4
 8009784:	d10c      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8009786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009788:	2b00      	cmp	r3, #0
 800978a:	d109      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800978c:	4b33      	ldr	r3, [pc, #204]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	08db      	lsrs	r3, r3, #3
 8009792:	f003 0303 	and.w	r3, r3, #3
 8009796:	4a32      	ldr	r2, [pc, #200]	@ (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009798:	fa22 f303 	lsr.w	r3, r2, r3
 800979c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800979e:	e01e      	b.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097a0:	4b2e      	ldr	r3, [pc, #184]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097ac:	d106      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80097ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097b4:	d102      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097b6:	4b2b      	ldr	r3, [pc, #172]	@ (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80097b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097ba:	e010      	b.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097bc:	4b27      	ldr	r3, [pc, #156]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097c8:	d106      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80097ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097d0:	d102      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097d2:	4b25      	ldr	r3, [pc, #148]	@ (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80097d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097d6:	e002      	b.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097dc:	e12f      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80097de:	e12e      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e4:	e12b      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80097e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097ea:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80097ee:	430b      	orrs	r3, r1
 80097f0:	d13c      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80097f2:	4b1a      	ldr	r3, [pc, #104]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097fa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80097fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d004      	beq.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8009802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009808:	d012      	beq.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800980a:	e023      	b.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800980c:	4b13      	ldr	r3, [pc, #76]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009814:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009818:	d107      	bne.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800981a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fbda 	bl	8009fd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009828:	e109      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800982a:	2300      	movs	r3, #0
 800982c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800982e:	e106      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009830:	4b0a      	ldr	r3, [pc, #40]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009838:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800983c:	d107      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800983e:	f107 0318 	add.w	r3, r7, #24
 8009842:	4618      	mov	r0, r3
 8009844:	f000 f920 	bl	8009a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800984c:	e0f7      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009852:	e0f4      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009858:	e0f1      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800985a:	bf00      	nop
 800985c:	58024400 	.word	0x58024400
 8009860:	03d09000 	.word	0x03d09000
 8009864:	003d0900 	.word	0x003d0900
 8009868:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800986c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009870:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009874:	430b      	orrs	r3, r1
 8009876:	f040 8091 	bne.w	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800987a:	4b73      	ldr	r3, [pc, #460]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800987c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800987e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009882:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800988a:	f000 8081 	beq.w	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800988e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009890:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009894:	d87f      	bhi.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800989c:	d06b      	beq.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098a4:	d877      	bhi.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80098a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ac:	d056      	beq.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80098ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098b4:	d86f      	bhi.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80098b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098bc:	d03b      	beq.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80098be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098c4:	d867      	bhi.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80098c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098cc:	d021      	beq.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80098ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098d4:	d85f      	bhi.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80098d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d004      	beq.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80098dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098e2:	d004      	beq.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80098e4:	e057      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80098e6:	f000 f8b9 	bl	8009a5c <HAL_RCCEx_GetD3PCLK1Freq>
 80098ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098ec:	e0a7      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098ee:	4b56      	ldr	r3, [pc, #344]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098fa:	d107      	bne.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098fc:	f107 0318 	add.w	r3, r7, #24
 8009900:	4618      	mov	r0, r3
 8009902:	f000 f8c1 	bl	8009a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800990a:	e098      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009910:	e095      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009912:	4b4d      	ldr	r3, [pc, #308]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800991a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800991e:	d107      	bne.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009920:	f107 030c 	add.w	r3, r7, #12
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fa03 	bl	8009d30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800992e:	e086      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009934:	e083      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009936:	4b44      	ldr	r3, [pc, #272]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0304 	and.w	r3, r3, #4
 800993e:	2b04      	cmp	r3, #4
 8009940:	d109      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009942:	4b41      	ldr	r3, [pc, #260]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	08db      	lsrs	r3, r3, #3
 8009948:	f003 0303 	and.w	r3, r3, #3
 800994c:	4a3f      	ldr	r2, [pc, #252]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800994e:	fa22 f303 	lsr.w	r3, r2, r3
 8009952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009954:	e073      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995a:	e070      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800995c:	4b3a      	ldr	r3, [pc, #232]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009968:	d102      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800996a:	4b39      	ldr	r3, [pc, #228]	@ (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800996c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800996e:	e066      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009974:	e063      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009976:	4b34      	ldr	r3, [pc, #208]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800997e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009982:	d102      	bne.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8009984:	4b33      	ldr	r3, [pc, #204]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009988:	e059      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800998e:	e056      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009990:	4b31      	ldr	r3, [pc, #196]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009994:	e053      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800999a:	e050      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800999c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099a0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80099a4:	430b      	orrs	r3, r1
 80099a6:	d148      	bne.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80099a8:	4b27      	ldr	r3, [pc, #156]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80099aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80099b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099b8:	d02a      	beq.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80099ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099c0:	d838      	bhi.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80099c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d004      	beq.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80099c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099ce:	d00d      	beq.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80099d0:	e030      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80099d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099de:	d102      	bne.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80099e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099e4:	e02b      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ea:	e028      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099ec:	4b16      	ldr	r3, [pc, #88]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099f8:	d107      	bne.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099fe:	4618      	mov	r0, r3
 8009a00:	f000 faea 	bl	8009fd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a08:	e019      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a0e:	e016      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a10:	4b0d      	ldr	r3, [pc, #52]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a1c:	d107      	bne.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a1e:	f107 0318 	add.w	r3, r7, #24
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 f830 	bl	8009a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a2c:	e007      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a32:	e004      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a38:	e001      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3740      	adds	r7, #64	@ 0x40
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	58024400 	.word	0x58024400
 8009a4c:	03d09000 	.word	0x03d09000
 8009a50:	003d0900 	.word	0x003d0900
 8009a54:	017d7840 	.word	0x017d7840
 8009a58:	00bb8000 	.word	0x00bb8000

08009a5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009a60:	f7fe f920 	bl	8007ca4 <HAL_RCC_GetHCLKFreq>
 8009a64:	4602      	mov	r2, r0
 8009a66:	4b06      	ldr	r3, [pc, #24]	@ (8009a80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	091b      	lsrs	r3, r3, #4
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	4904      	ldr	r1, [pc, #16]	@ (8009a84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a72:	5ccb      	ldrb	r3, [r1, r3]
 8009a74:	f003 031f 	and.w	r3, r3, #31
 8009a78:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	58024400 	.word	0x58024400
 8009a84:	0800b000 	.word	0x0800b000

08009a88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b089      	sub	sp, #36	@ 0x24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a90:	4ba1      	ldr	r3, [pc, #644]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a94:	f003 0303 	and.w	r3, r3, #3
 8009a98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009a9a:	4b9f      	ldr	r3, [pc, #636]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9e:	0b1b      	lsrs	r3, r3, #12
 8009aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009aa4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aaa:	091b      	lsrs	r3, r3, #4
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009ab2:	4b99      	ldr	r3, [pc, #612]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ab6:	08db      	lsrs	r3, r3, #3
 8009ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	fb02 f303 	mul.w	r3, r2, r3
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 8111 	beq.w	8009cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	f000 8083 	beq.w	8009be4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	f200 80a1 	bhi.w	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d056      	beq.n	8009ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009af2:	e099      	b.n	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009af4:	4b88      	ldr	r3, [pc, #544]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0320 	and.w	r3, r3, #32
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d02d      	beq.n	8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b00:	4b85      	ldr	r3, [pc, #532]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	08db      	lsrs	r3, r3, #3
 8009b06:	f003 0303 	and.w	r3, r3, #3
 8009b0a:	4a84      	ldr	r2, [pc, #528]	@ (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	ee07 3a90 	vmov	s15, r3
 8009b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b5a:	e087      	b.n	8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b9e:	e065      	b.n	8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009baa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb2:	4b59      	ldr	r3, [pc, #356]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009be2:	e043      	b.n	8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf6:	4b48      	ldr	r3, [pc, #288]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c26:	e021      	b.n	8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	ee07 3a90 	vmov	s15, r3
 8009c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c3a:	4b37      	ldr	r3, [pc, #220]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c70:	0a5b      	lsrs	r3, r3, #9
 8009c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c92:	ee17 2a90 	vmov	r2, s15
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c9e:	0c1b      	lsrs	r3, r3, #16
 8009ca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ca4:	ee07 3a90 	vmov	s15, r3
 8009ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc0:	ee17 2a90 	vmov	r2, s15
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009cc8:	4b13      	ldr	r3, [pc, #76]	@ (8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ccc:	0e1b      	lsrs	r3, r3, #24
 8009cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cee:	ee17 2a90 	vmov	r2, s15
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009cf6:	e008      	b.n	8009d0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	609a      	str	r2, [r3, #8]
}
 8009d0a:	bf00      	nop
 8009d0c:	3724      	adds	r7, #36	@ 0x24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	03d09000 	.word	0x03d09000
 8009d20:	46000000 	.word	0x46000000
 8009d24:	4c742400 	.word	0x4c742400
 8009d28:	4a742400 	.word	0x4a742400
 8009d2c:	4bbebc20 	.word	0x4bbebc20

08009d30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b089      	sub	sp, #36	@ 0x24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d38:	4ba1      	ldr	r3, [pc, #644]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d3c:	f003 0303 	and.w	r3, r3, #3
 8009d40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009d42:	4b9f      	ldr	r3, [pc, #636]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d46:	0d1b      	lsrs	r3, r3, #20
 8009d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d52:	0a1b      	lsrs	r3, r3, #8
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009d5a:	4b99      	ldr	r3, [pc, #612]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d5e:	08db      	lsrs	r3, r3, #3
 8009d60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	fb02 f303 	mul.w	r3, r2, r3
 8009d6a:	ee07 3a90 	vmov	s15, r3
 8009d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 8111 	beq.w	8009fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	f000 8083 	beq.w	8009e8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	f200 80a1 	bhi.w	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d056      	beq.n	8009e48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d9a:	e099      	b.n	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d9c:	4b88      	ldr	r3, [pc, #544]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 0320 	and.w	r3, r3, #32
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d02d      	beq.n	8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009da8:	4b85      	ldr	r3, [pc, #532]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	08db      	lsrs	r3, r3, #3
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	4a84      	ldr	r2, [pc, #528]	@ (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009db4:	fa22 f303 	lsr.w	r3, r2, r3
 8009db8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	ee07 3a90 	vmov	s15, r3
 8009dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	ee07 3a90 	vmov	s15, r3
 8009dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd2:	4b7b      	ldr	r3, [pc, #492]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dda:	ee07 3a90 	vmov	s15, r3
 8009dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e02:	e087      	b.n	8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e16:	4b6a      	ldr	r3, [pc, #424]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e46:	e065      	b.n	8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e5a:	4b59      	ldr	r3, [pc, #356]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e8a:	e043      	b.n	8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e9e:	4b48      	ldr	r3, [pc, #288]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea6:	ee07 3a90 	vmov	s15, r3
 8009eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ece:	e021      	b.n	8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	ee07 3a90 	vmov	s15, r3
 8009ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ee2:	4b37      	ldr	r3, [pc, #220]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eea:	ee07 3a90 	vmov	s15, r3
 8009eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ef6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009f14:	4b2a      	ldr	r3, [pc, #168]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f18:	0a5b      	lsrs	r3, r3, #9
 8009f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f3a:	ee17 2a90 	vmov	r2, s15
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009f42:	4b1f      	ldr	r3, [pc, #124]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f46:	0c1b      	lsrs	r3, r3, #16
 8009f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f4c:	ee07 3a90 	vmov	s15, r3
 8009f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f68:	ee17 2a90 	vmov	r2, s15
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009f70:	4b13      	ldr	r3, [pc, #76]	@ (8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f74:	0e1b      	lsrs	r3, r3, #24
 8009f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f7a:	ee07 3a90 	vmov	s15, r3
 8009f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f96:	ee17 2a90 	vmov	r2, s15
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f9e:	e008      	b.n	8009fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	609a      	str	r2, [r3, #8]
}
 8009fb2:	bf00      	nop
 8009fb4:	3724      	adds	r7, #36	@ 0x24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	58024400 	.word	0x58024400
 8009fc4:	03d09000 	.word	0x03d09000
 8009fc8:	46000000 	.word	0x46000000
 8009fcc:	4c742400 	.word	0x4c742400
 8009fd0:	4a742400 	.word	0x4a742400
 8009fd4:	4bbebc20 	.word	0x4bbebc20

08009fd8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b089      	sub	sp, #36	@ 0x24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fe0:	4ba0      	ldr	r3, [pc, #640]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe4:	f003 0303 	and.w	r3, r3, #3
 8009fe8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009fea:	4b9e      	ldr	r3, [pc, #632]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fee:	091b      	lsrs	r3, r3, #4
 8009ff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ff4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ff6:	4b9b      	ldr	r3, [pc, #620]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a000:	4b98      	ldr	r3, [pc, #608]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a004:	08db      	lsrs	r3, r3, #3
 800a006:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	fb02 f303 	mul.w	r3, r2, r3
 800a010:	ee07 3a90 	vmov	s15, r3
 800a014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a018:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 8111 	beq.w	800a246 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	2b02      	cmp	r3, #2
 800a028:	f000 8083 	beq.w	800a132 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	f200 80a1 	bhi.w	800a176 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d056      	beq.n	800a0ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a040:	e099      	b.n	800a176 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a042:	4b88      	ldr	r3, [pc, #544]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0320 	and.w	r3, r3, #32
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d02d      	beq.n	800a0aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a04e:	4b85      	ldr	r3, [pc, #532]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	08db      	lsrs	r3, r3, #3
 800a054:	f003 0303 	and.w	r3, r3, #3
 800a058:	4a83      	ldr	r2, [pc, #524]	@ (800a268 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a05a:	fa22 f303 	lsr.w	r3, r2, r3
 800a05e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	ee07 3a90 	vmov	s15, r3
 800a066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	ee07 3a90 	vmov	s15, r3
 800a070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a078:	4b7a      	ldr	r3, [pc, #488]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a07a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a080:	ee07 3a90 	vmov	s15, r3
 800a084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a088:	ed97 6a03 	vldr	s12, [r7, #12]
 800a08c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a098:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a09c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a0a8:	e087      	b.n	800a1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	ee07 3a90 	vmov	s15, r3
 800a0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a0b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0bc:	4b69      	ldr	r3, [pc, #420]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c4:	ee07 3a90 	vmov	s15, r3
 800a0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0d0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0ec:	e065      	b.n	800a1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	ee07 3a90 	vmov	s15, r3
 800a0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a274 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a100:	4b58      	ldr	r3, [pc, #352]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a108:	ee07 3a90 	vmov	s15, r3
 800a10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a110:	ed97 6a03 	vldr	s12, [r7, #12]
 800a114:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a120:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a130:	e043      	b.n	800a1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	ee07 3a90 	vmov	s15, r3
 800a138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a278 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a144:	4b47      	ldr	r3, [pc, #284]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14c:	ee07 3a90 	vmov	s15, r3
 800a150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a154:	ed97 6a03 	vldr	s12, [r7, #12]
 800a158:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a15c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a164:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a170:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a174:	e021      	b.n	800a1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	ee07 3a90 	vmov	s15, r3
 800a17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a180:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a188:	4b36      	ldr	r3, [pc, #216]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a18a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a190:	ee07 3a90 	vmov	s15, r3
 800a194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a198:	ed97 6a03 	vldr	s12, [r7, #12]
 800a19c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a1ba:	4b2a      	ldr	r3, [pc, #168]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1be:	0a5b      	lsrs	r3, r3, #9
 800a1c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1c4:	ee07 3a90 	vmov	s15, r3
 800a1c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1e0:	ee17 2a90 	vmov	r2, s15
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a1e8:	4b1e      	ldr	r3, [pc, #120]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1ec:	0c1b      	lsrs	r3, r3, #16
 800a1ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a202:	edd7 6a07 	vldr	s13, [r7, #28]
 800a206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a20a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a20e:	ee17 2a90 	vmov	r2, s15
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a216:	4b13      	ldr	r3, [pc, #76]	@ (800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a21a:	0e1b      	lsrs	r3, r3, #24
 800a21c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a220:	ee07 3a90 	vmov	s15, r3
 800a224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a228:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a22c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a230:	edd7 6a07 	vldr	s13, [r7, #28]
 800a234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a23c:	ee17 2a90 	vmov	r2, s15
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a244:	e008      	b.n	800a258 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	609a      	str	r2, [r3, #8]
}
 800a258:	bf00      	nop
 800a25a:	3724      	adds	r7, #36	@ 0x24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	58024400 	.word	0x58024400
 800a268:	03d09000 	.word	0x03d09000
 800a26c:	46000000 	.word	0x46000000
 800a270:	4c742400 	.word	0x4c742400
 800a274:	4a742400 	.word	0x4a742400
 800a278:	4bbebc20 	.word	0x4bbebc20

0800a27c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a28a:	4b53      	ldr	r3, [pc, #332]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a28e:	f003 0303 	and.w	r3, r3, #3
 800a292:	2b03      	cmp	r3, #3
 800a294:	d101      	bne.n	800a29a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e099      	b.n	800a3ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a29a:	4b4f      	ldr	r3, [pc, #316]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a4e      	ldr	r2, [pc, #312]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a2a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2a6:	f7f7 fcc7 	bl	8001c38 <HAL_GetTick>
 800a2aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2ac:	e008      	b.n	800a2c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2ae:	f7f7 fcc3 	bl	8001c38 <HAL_GetTick>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d901      	bls.n	800a2c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e086      	b.n	800a3ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2c0:	4b45      	ldr	r3, [pc, #276]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1f0      	bne.n	800a2ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a2cc:	4b42      	ldr	r3, [pc, #264]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	031b      	lsls	r3, r3, #12
 800a2da:	493f      	ldr	r1, [pc, #252]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	628b      	str	r3, [r1, #40]	@ 0x28
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	025b      	lsls	r3, r3, #9
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	431a      	orrs	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	041b      	lsls	r3, r3, #16
 800a2fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	3b01      	subs	r3, #1
 800a30a:	061b      	lsls	r3, r3, #24
 800a30c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a310:	4931      	ldr	r1, [pc, #196]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a312:	4313      	orrs	r3, r2
 800a314:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a316:	4b30      	ldr	r3, [pc, #192]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a31a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	492d      	ldr	r1, [pc, #180]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a324:	4313      	orrs	r3, r2
 800a326:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a328:	4b2b      	ldr	r3, [pc, #172]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a32c:	f023 0220 	bic.w	r2, r3, #32
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	4928      	ldr	r1, [pc, #160]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a336:	4313      	orrs	r3, r2
 800a338:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a33a:	4b27      	ldr	r3, [pc, #156]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33e:	4a26      	ldr	r2, [pc, #152]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a340:	f023 0310 	bic.w	r3, r3, #16
 800a344:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a346:	4b24      	ldr	r3, [pc, #144]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a348:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a34a:	4b24      	ldr	r3, [pc, #144]	@ (800a3dc <RCCEx_PLL2_Config+0x160>)
 800a34c:	4013      	ands	r3, r2
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	69d2      	ldr	r2, [r2, #28]
 800a352:	00d2      	lsls	r2, r2, #3
 800a354:	4920      	ldr	r1, [pc, #128]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a356:	4313      	orrs	r3, r2
 800a358:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a35a:	4b1f      	ldr	r3, [pc, #124]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a35e:	4a1e      	ldr	r2, [pc, #120]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a360:	f043 0310 	orr.w	r3, r3, #16
 800a364:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d106      	bne.n	800a37a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a36c:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a370:	4a19      	ldr	r2, [pc, #100]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a372:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a376:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a378:	e00f      	b.n	800a39a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d106      	bne.n	800a38e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a380:	4b15      	ldr	r3, [pc, #84]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a384:	4a14      	ldr	r2, [pc, #80]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a38a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a38c:	e005      	b.n	800a39a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a38e:	4b12      	ldr	r3, [pc, #72]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a392:	4a11      	ldr	r2, [pc, #68]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a394:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a398:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a39a:	4b0f      	ldr	r3, [pc, #60]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a0e      	ldr	r2, [pc, #56]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a3a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3a6:	f7f7 fc47 	bl	8001c38 <HAL_GetTick>
 800a3aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3ac:	e008      	b.n	800a3c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3ae:	f7f7 fc43 	bl	8001c38 <HAL_GetTick>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d901      	bls.n	800a3c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e006      	b.n	800a3ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3c0:	4b05      	ldr	r3, [pc, #20]	@ (800a3d8 <RCCEx_PLL2_Config+0x15c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d0f0      	beq.n	800a3ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	58024400 	.word	0x58024400
 800a3dc:	ffff0007 	.word	0xffff0007

0800a3e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3ee:	4b53      	ldr	r3, [pc, #332]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f2:	f003 0303 	and.w	r3, r3, #3
 800a3f6:	2b03      	cmp	r3, #3
 800a3f8:	d101      	bne.n	800a3fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e099      	b.n	800a532 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a3fe:	4b4f      	ldr	r3, [pc, #316]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a4e      	ldr	r2, [pc, #312]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a40a:	f7f7 fc15 	bl	8001c38 <HAL_GetTick>
 800a40e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a410:	e008      	b.n	800a424 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a412:	f7f7 fc11 	bl	8001c38 <HAL_GetTick>
 800a416:	4602      	mov	r2, r0
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d901      	bls.n	800a424 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a420:	2303      	movs	r3, #3
 800a422:	e086      	b.n	800a532 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a424:	4b45      	ldr	r3, [pc, #276]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1f0      	bne.n	800a412 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a430:	4b42      	ldr	r3, [pc, #264]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a434:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	051b      	lsls	r3, r3, #20
 800a43e:	493f      	ldr	r1, [pc, #252]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a440:	4313      	orrs	r3, r2
 800a442:	628b      	str	r3, [r1, #40]	@ 0x28
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	3b01      	subs	r3, #1
 800a44a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	3b01      	subs	r3, #1
 800a454:	025b      	lsls	r3, r3, #9
 800a456:	b29b      	uxth	r3, r3
 800a458:	431a      	orrs	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	3b01      	subs	r3, #1
 800a460:	041b      	lsls	r3, r3, #16
 800a462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a466:	431a      	orrs	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	061b      	lsls	r3, r3, #24
 800a470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a474:	4931      	ldr	r1, [pc, #196]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a476:	4313      	orrs	r3, r2
 800a478:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a47a:	4b30      	ldr	r3, [pc, #192]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	492d      	ldr	r1, [pc, #180]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a488:	4313      	orrs	r3, r2
 800a48a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a48c:	4b2b      	ldr	r3, [pc, #172]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a490:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	4928      	ldr	r1, [pc, #160]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a49a:	4313      	orrs	r3, r2
 800a49c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a49e:	4b27      	ldr	r3, [pc, #156]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a2:	4a26      	ldr	r2, [pc, #152]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4aa:	4b24      	ldr	r3, [pc, #144]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4ae:	4b24      	ldr	r3, [pc, #144]	@ (800a540 <RCCEx_PLL3_Config+0x160>)
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	69d2      	ldr	r2, [r2, #28]
 800a4b6:	00d2      	lsls	r2, r2, #3
 800a4b8:	4920      	ldr	r1, [pc, #128]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a4be:	4b1f      	ldr	r3, [pc, #124]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d106      	bne.n	800a4de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a4d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d4:	4a19      	ldr	r2, [pc, #100]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a4da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4dc:	e00f      	b.n	800a4fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d106      	bne.n	800a4f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a4e4:	4b15      	ldr	r3, [pc, #84]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e8:	4a14      	ldr	r2, [pc, #80]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4f0:	e005      	b.n	800a4fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4f2:	4b12      	ldr	r3, [pc, #72]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f6:	4a11      	ldr	r2, [pc, #68]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a4f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a4fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a4fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a0e      	ldr	r2, [pc, #56]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a50a:	f7f7 fb95 	bl	8001c38 <HAL_GetTick>
 800a50e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a510:	e008      	b.n	800a524 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a512:	f7f7 fb91 	bl	8001c38 <HAL_GetTick>
 800a516:	4602      	mov	r2, r0
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d901      	bls.n	800a524 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a520:	2303      	movs	r3, #3
 800a522:	e006      	b.n	800a532 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a524:	4b05      	ldr	r3, [pc, #20]	@ (800a53c <RCCEx_PLL3_Config+0x15c>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d0f0      	beq.n	800a512 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a530:	7bfb      	ldrb	r3, [r7, #15]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	58024400 	.word	0x58024400
 800a540:	ffff0007 	.word	0xffff0007

0800a544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e049      	b.n	800a5ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d106      	bne.n	800a570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7f7 f8f0 	bl	8001750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	3304      	adds	r3, #4
 800a580:	4619      	mov	r1, r3
 800a582:	4610      	mov	r0, r2
 800a584:	f000 fae0 	bl	800ab48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b01      	cmp	r3, #1
 800a606:	d001      	beq.n	800a60c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e054      	b.n	800a6b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2202      	movs	r2, #2
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68da      	ldr	r2, [r3, #12]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0201 	orr.w	r2, r2, #1
 800a622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a26      	ldr	r2, [pc, #152]	@ (800a6c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d022      	beq.n	800a674 <HAL_TIM_Base_Start_IT+0x80>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a636:	d01d      	beq.n	800a674 <HAL_TIM_Base_Start_IT+0x80>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a22      	ldr	r2, [pc, #136]	@ (800a6c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d018      	beq.n	800a674 <HAL_TIM_Base_Start_IT+0x80>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a21      	ldr	r2, [pc, #132]	@ (800a6cc <HAL_TIM_Base_Start_IT+0xd8>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d013      	beq.n	800a674 <HAL_TIM_Base_Start_IT+0x80>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a1f      	ldr	r2, [pc, #124]	@ (800a6d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d00e      	beq.n	800a674 <HAL_TIM_Base_Start_IT+0x80>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a1e      	ldr	r2, [pc, #120]	@ (800a6d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d009      	beq.n	800a674 <HAL_TIM_Base_Start_IT+0x80>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a1c      	ldr	r2, [pc, #112]	@ (800a6d8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d004      	beq.n	800a674 <HAL_TIM_Base_Start_IT+0x80>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a1b      	ldr	r2, [pc, #108]	@ (800a6dc <HAL_TIM_Base_Start_IT+0xe8>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d115      	bne.n	800a6a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689a      	ldr	r2, [r3, #8]
 800a67a:	4b19      	ldr	r3, [pc, #100]	@ (800a6e0 <HAL_TIM_Base_Start_IT+0xec>)
 800a67c:	4013      	ands	r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2b06      	cmp	r3, #6
 800a684:	d015      	beq.n	800a6b2 <HAL_TIM_Base_Start_IT+0xbe>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a68c:	d011      	beq.n	800a6b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f042 0201 	orr.w	r2, r2, #1
 800a69c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a69e:	e008      	b.n	800a6b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f042 0201 	orr.w	r2, r2, #1
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	e000      	b.n	800a6b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	40010000 	.word	0x40010000
 800a6c8:	40000400 	.word	0x40000400
 800a6cc:	40000800 	.word	0x40000800
 800a6d0:	40000c00 	.word	0x40000c00
 800a6d4:	40010400 	.word	0x40010400
 800a6d8:	40001800 	.word	0x40001800
 800a6dc:	40014000 	.word	0x40014000
 800a6e0:	00010007 	.word	0x00010007

0800a6e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f003 0302 	and.w	r3, r3, #2
 800a702:	2b00      	cmp	r3, #0
 800a704:	d020      	beq.n	800a748 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f003 0302 	and.w	r3, r3, #2
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d01b      	beq.n	800a748 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f06f 0202 	mvn.w	r2, #2
 800a718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	f003 0303 	and.w	r3, r3, #3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f9ec 	bl	800ab0c <HAL_TIM_IC_CaptureCallback>
 800a734:	e005      	b.n	800a742 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f9de 	bl	800aaf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 f9ef 	bl	800ab20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	f003 0304 	and.w	r3, r3, #4
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d020      	beq.n	800a794 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f003 0304 	and.w	r3, r3, #4
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01b      	beq.n	800a794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f06f 0204 	mvn.w	r2, #4
 800a764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2202      	movs	r2, #2
 800a76a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f9c6 	bl	800ab0c <HAL_TIM_IC_CaptureCallback>
 800a780:	e005      	b.n	800a78e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f9b8 	bl	800aaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f9c9 	bl	800ab20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f003 0308 	and.w	r3, r3, #8
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d020      	beq.n	800a7e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f003 0308 	and.w	r3, r3, #8
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d01b      	beq.n	800a7e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f06f 0208 	mvn.w	r2, #8
 800a7b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2204      	movs	r2, #4
 800a7b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	f003 0303 	and.w	r3, r3, #3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d003      	beq.n	800a7ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f9a0 	bl	800ab0c <HAL_TIM_IC_CaptureCallback>
 800a7cc:	e005      	b.n	800a7da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f992 	bl	800aaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 f9a3 	bl	800ab20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	f003 0310 	and.w	r3, r3, #16
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d020      	beq.n	800a82c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f003 0310 	and.w	r3, r3, #16
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d01b      	beq.n	800a82c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f06f 0210 	mvn.w	r2, #16
 800a7fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2208      	movs	r2, #8
 800a802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f97a 	bl	800ab0c <HAL_TIM_IC_CaptureCallback>
 800a818:	e005      	b.n	800a826 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f96c 	bl	800aaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f97d 	bl	800ab20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00c      	beq.n	800a850 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d007      	beq.n	800a850 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f06f 0201 	mvn.w	r2, #1
 800a848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f94a 	bl	800aae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a856:	2b00      	cmp	r3, #0
 800a858:	d104      	bne.n	800a864 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00c      	beq.n	800a87e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d007      	beq.n	800a87e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fb41 	bl	800af00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00c      	beq.n	800a8a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d007      	beq.n	800a8a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a89a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fb39 	bl	800af14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00c      	beq.n	800a8c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d007      	beq.n	800a8c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a8be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f937 	bl	800ab34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	f003 0320 	and.w	r3, r3, #32
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00c      	beq.n	800a8ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f003 0320 	and.w	r3, r3, #32
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d007      	beq.n	800a8ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f06f 0220 	mvn.w	r2, #32
 800a8e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fb01 	bl	800aeec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8ea:	bf00      	nop
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d101      	bne.n	800a910 <HAL_TIM_ConfigClockSource+0x1c>
 800a90c:	2302      	movs	r3, #2
 800a90e:	e0dc      	b.n	800aaca <HAL_TIM_ConfigClockSource+0x1d6>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	4b6a      	ldr	r3, [pc, #424]	@ (800aad4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a92c:	4013      	ands	r3, r2
 800a92e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a64      	ldr	r2, [pc, #400]	@ (800aad8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a946:	4293      	cmp	r3, r2
 800a948:	f000 80a9 	beq.w	800aa9e <HAL_TIM_ConfigClockSource+0x1aa>
 800a94c:	4a62      	ldr	r2, [pc, #392]	@ (800aad8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	f200 80ae 	bhi.w	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a954:	4a61      	ldr	r2, [pc, #388]	@ (800aadc <HAL_TIM_ConfigClockSource+0x1e8>)
 800a956:	4293      	cmp	r3, r2
 800a958:	f000 80a1 	beq.w	800aa9e <HAL_TIM_ConfigClockSource+0x1aa>
 800a95c:	4a5f      	ldr	r2, [pc, #380]	@ (800aadc <HAL_TIM_ConfigClockSource+0x1e8>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	f200 80a6 	bhi.w	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a964:	4a5e      	ldr	r2, [pc, #376]	@ (800aae0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a966:	4293      	cmp	r3, r2
 800a968:	f000 8099 	beq.w	800aa9e <HAL_TIM_ConfigClockSource+0x1aa>
 800a96c:	4a5c      	ldr	r2, [pc, #368]	@ (800aae0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	f200 809e 	bhi.w	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a974:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a978:	f000 8091 	beq.w	800aa9e <HAL_TIM_ConfigClockSource+0x1aa>
 800a97c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a980:	f200 8096 	bhi.w	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a984:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a988:	f000 8089 	beq.w	800aa9e <HAL_TIM_ConfigClockSource+0x1aa>
 800a98c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a990:	f200 808e 	bhi.w	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a998:	d03e      	beq.n	800aa18 <HAL_TIM_ConfigClockSource+0x124>
 800a99a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a99e:	f200 8087 	bhi.w	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9a6:	f000 8086 	beq.w	800aab6 <HAL_TIM_ConfigClockSource+0x1c2>
 800a9aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9ae:	d87f      	bhi.n	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9b0:	2b70      	cmp	r3, #112	@ 0x70
 800a9b2:	d01a      	beq.n	800a9ea <HAL_TIM_ConfigClockSource+0xf6>
 800a9b4:	2b70      	cmp	r3, #112	@ 0x70
 800a9b6:	d87b      	bhi.n	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9b8:	2b60      	cmp	r3, #96	@ 0x60
 800a9ba:	d050      	beq.n	800aa5e <HAL_TIM_ConfigClockSource+0x16a>
 800a9bc:	2b60      	cmp	r3, #96	@ 0x60
 800a9be:	d877      	bhi.n	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9c0:	2b50      	cmp	r3, #80	@ 0x50
 800a9c2:	d03c      	beq.n	800aa3e <HAL_TIM_ConfigClockSource+0x14a>
 800a9c4:	2b50      	cmp	r3, #80	@ 0x50
 800a9c6:	d873      	bhi.n	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9c8:	2b40      	cmp	r3, #64	@ 0x40
 800a9ca:	d058      	beq.n	800aa7e <HAL_TIM_ConfigClockSource+0x18a>
 800a9cc:	2b40      	cmp	r3, #64	@ 0x40
 800a9ce:	d86f      	bhi.n	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9d0:	2b30      	cmp	r3, #48	@ 0x30
 800a9d2:	d064      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0x1aa>
 800a9d4:	2b30      	cmp	r3, #48	@ 0x30
 800a9d6:	d86b      	bhi.n	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9d8:	2b20      	cmp	r3, #32
 800a9da:	d060      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0x1aa>
 800a9dc:	2b20      	cmp	r3, #32
 800a9de:	d867      	bhi.n	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d05c      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0x1aa>
 800a9e4:	2b10      	cmp	r3, #16
 800a9e6:	d05a      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0x1aa>
 800a9e8:	e062      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9fa:	f000 f9c9 	bl	800ad90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	609a      	str	r2, [r3, #8]
      break;
 800aa16:	e04f      	b.n	800aab8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa28:	f000 f9b2 	bl	800ad90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	689a      	ldr	r2, [r3, #8]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa3a:	609a      	str	r2, [r3, #8]
      break;
 800aa3c:	e03c      	b.n	800aab8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	f000 f922 	bl	800ac94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2150      	movs	r1, #80	@ 0x50
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 f97c 	bl	800ad54 <TIM_ITRx_SetConfig>
      break;
 800aa5c:	e02c      	b.n	800aab8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f000 f941 	bl	800acf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2160      	movs	r1, #96	@ 0x60
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 f96c 	bl	800ad54 <TIM_ITRx_SetConfig>
      break;
 800aa7c:	e01c      	b.n	800aab8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	f000 f902 	bl	800ac94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2140      	movs	r1, #64	@ 0x40
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 f95c 	bl	800ad54 <TIM_ITRx_SetConfig>
      break;
 800aa9c:	e00c      	b.n	800aab8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	f000 f953 	bl	800ad54 <TIM_ITRx_SetConfig>
      break;
 800aaae:	e003      	b.n	800aab8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	73fb      	strb	r3, [r7, #15]
      break;
 800aab4:	e000      	b.n	800aab8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	ffceff88 	.word	0xffceff88
 800aad8:	00100040 	.word	0x00100040
 800aadc:	00100030 	.word	0x00100030
 800aae0:	00100020 	.word	0x00100020

0800aae4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a46      	ldr	r2, [pc, #280]	@ (800ac74 <TIM_Base_SetConfig+0x12c>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d013      	beq.n	800ab88 <TIM_Base_SetConfig+0x40>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab66:	d00f      	beq.n	800ab88 <TIM_Base_SetConfig+0x40>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a43      	ldr	r2, [pc, #268]	@ (800ac78 <TIM_Base_SetConfig+0x130>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d00b      	beq.n	800ab88 <TIM_Base_SetConfig+0x40>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a42      	ldr	r2, [pc, #264]	@ (800ac7c <TIM_Base_SetConfig+0x134>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d007      	beq.n	800ab88 <TIM_Base_SetConfig+0x40>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a41      	ldr	r2, [pc, #260]	@ (800ac80 <TIM_Base_SetConfig+0x138>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d003      	beq.n	800ab88 <TIM_Base_SetConfig+0x40>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a40      	ldr	r2, [pc, #256]	@ (800ac84 <TIM_Base_SetConfig+0x13c>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d108      	bne.n	800ab9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a35      	ldr	r2, [pc, #212]	@ (800ac74 <TIM_Base_SetConfig+0x12c>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d01f      	beq.n	800abe2 <TIM_Base_SetConfig+0x9a>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aba8:	d01b      	beq.n	800abe2 <TIM_Base_SetConfig+0x9a>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a32      	ldr	r2, [pc, #200]	@ (800ac78 <TIM_Base_SetConfig+0x130>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d017      	beq.n	800abe2 <TIM_Base_SetConfig+0x9a>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a31      	ldr	r2, [pc, #196]	@ (800ac7c <TIM_Base_SetConfig+0x134>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d013      	beq.n	800abe2 <TIM_Base_SetConfig+0x9a>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a30      	ldr	r2, [pc, #192]	@ (800ac80 <TIM_Base_SetConfig+0x138>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d00f      	beq.n	800abe2 <TIM_Base_SetConfig+0x9a>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a2f      	ldr	r2, [pc, #188]	@ (800ac84 <TIM_Base_SetConfig+0x13c>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d00b      	beq.n	800abe2 <TIM_Base_SetConfig+0x9a>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a2e      	ldr	r2, [pc, #184]	@ (800ac88 <TIM_Base_SetConfig+0x140>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d007      	beq.n	800abe2 <TIM_Base_SetConfig+0x9a>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a2d      	ldr	r2, [pc, #180]	@ (800ac8c <TIM_Base_SetConfig+0x144>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d003      	beq.n	800abe2 <TIM_Base_SetConfig+0x9a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a2c      	ldr	r2, [pc, #176]	@ (800ac90 <TIM_Base_SetConfig+0x148>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d108      	bne.n	800abf4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	689a      	ldr	r2, [r3, #8]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a16      	ldr	r2, [pc, #88]	@ (800ac74 <TIM_Base_SetConfig+0x12c>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d00f      	beq.n	800ac40 <TIM_Base_SetConfig+0xf8>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a18      	ldr	r2, [pc, #96]	@ (800ac84 <TIM_Base_SetConfig+0x13c>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00b      	beq.n	800ac40 <TIM_Base_SetConfig+0xf8>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a17      	ldr	r2, [pc, #92]	@ (800ac88 <TIM_Base_SetConfig+0x140>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d007      	beq.n	800ac40 <TIM_Base_SetConfig+0xf8>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a16      	ldr	r2, [pc, #88]	@ (800ac8c <TIM_Base_SetConfig+0x144>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d003      	beq.n	800ac40 <TIM_Base_SetConfig+0xf8>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a15      	ldr	r2, [pc, #84]	@ (800ac90 <TIM_Base_SetConfig+0x148>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d103      	bne.n	800ac48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	691a      	ldr	r2, [r3, #16]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	f003 0301 	and.w	r3, r3, #1
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d105      	bne.n	800ac66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	f023 0201 	bic.w	r2, r3, #1
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	611a      	str	r2, [r3, #16]
  }
}
 800ac66:	bf00      	nop
 800ac68:	3714      	adds	r7, #20
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	40010000 	.word	0x40010000
 800ac78:	40000400 	.word	0x40000400
 800ac7c:	40000800 	.word	0x40000800
 800ac80:	40000c00 	.word	0x40000c00
 800ac84:	40010400 	.word	0x40010400
 800ac88:	40014000 	.word	0x40014000
 800ac8c:	40014400 	.word	0x40014400
 800ac90:	40014800 	.word	0x40014800

0800ac94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6a1b      	ldr	r3, [r3, #32]
 800aca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	f023 0201 	bic.w	r2, r3, #1
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800acbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	011b      	lsls	r3, r3, #4
 800acc4:	693a      	ldr	r2, [r7, #16]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f023 030a 	bic.w	r3, r3, #10
 800acd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	621a      	str	r2, [r3, #32]
}
 800ace6:	bf00      	nop
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b087      	sub	sp, #28
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	60f8      	str	r0, [r7, #12]
 800acfa:	60b9      	str	r1, [r7, #8]
 800acfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	f023 0210 	bic.w	r2, r3, #16
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	031b      	lsls	r3, r3, #12
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	011b      	lsls	r3, r3, #4
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	621a      	str	r2, [r3, #32]
}
 800ad46:	bf00      	nop
 800ad48:	371c      	adds	r7, #28
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
	...

0800ad54 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4b09      	ldr	r3, [pc, #36]	@ (800ad8c <TIM_ITRx_SetConfig+0x38>)
 800ad68:	4013      	ands	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	f043 0307 	orr.w	r3, r3, #7
 800ad76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	609a      	str	r2, [r3, #8]
}
 800ad7e:	bf00      	nop
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	ffcfff8f 	.word	0xffcfff8f

0800ad90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b087      	sub	sp, #28
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
 800ad9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	021a      	lsls	r2, r3, #8
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	431a      	orrs	r2, r3
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	4313      	orrs	r3, r2
 800adbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	609a      	str	r2, [r3, #8]
}
 800adc4:	bf00      	nop
 800adc6:	371c      	adds	r7, #28
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d101      	bne.n	800ade8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ade4:	2302      	movs	r3, #2
 800ade6:	e06d      	b.n	800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2202      	movs	r2, #2
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a30      	ldr	r2, [pc, #192]	@ (800aed0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d004      	beq.n	800ae1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a2f      	ldr	r2, [pc, #188]	@ (800aed4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d108      	bne.n	800ae2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ae22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a20      	ldr	r2, [pc, #128]	@ (800aed0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d022      	beq.n	800ae98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae5a:	d01d      	beq.n	800ae98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a1d      	ldr	r2, [pc, #116]	@ (800aed8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d018      	beq.n	800ae98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a1c      	ldr	r2, [pc, #112]	@ (800aedc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d013      	beq.n	800ae98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a1a      	ldr	r2, [pc, #104]	@ (800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d00e      	beq.n	800ae98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a15      	ldr	r2, [pc, #84]	@ (800aed4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d009      	beq.n	800ae98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a16      	ldr	r2, [pc, #88]	@ (800aee4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d004      	beq.n	800ae98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a15      	ldr	r2, [pc, #84]	@ (800aee8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d10c      	bne.n	800aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	40010000 	.word	0x40010000
 800aed4:	40010400 	.word	0x40010400
 800aed8:	40000400 	.word	0x40000400
 800aedc:	40000800 	.word	0x40000800
 800aee0:	40000c00 	.word	0x40000c00
 800aee4:	40001800 	.word	0x40001800
 800aee8:	40014000 	.word	0x40014000

0800aeec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <memset>:
 800af28:	4402      	add	r2, r0
 800af2a:	4603      	mov	r3, r0
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d100      	bne.n	800af32 <memset+0xa>
 800af30:	4770      	bx	lr
 800af32:	f803 1b01 	strb.w	r1, [r3], #1
 800af36:	e7f9      	b.n	800af2c <memset+0x4>

0800af38 <__libc_init_array>:
 800af38:	b570      	push	{r4, r5, r6, lr}
 800af3a:	4d0d      	ldr	r5, [pc, #52]	@ (800af70 <__libc_init_array+0x38>)
 800af3c:	4c0d      	ldr	r4, [pc, #52]	@ (800af74 <__libc_init_array+0x3c>)
 800af3e:	1b64      	subs	r4, r4, r5
 800af40:	10a4      	asrs	r4, r4, #2
 800af42:	2600      	movs	r6, #0
 800af44:	42a6      	cmp	r6, r4
 800af46:	d109      	bne.n	800af5c <__libc_init_array+0x24>
 800af48:	4d0b      	ldr	r5, [pc, #44]	@ (800af78 <__libc_init_array+0x40>)
 800af4a:	4c0c      	ldr	r4, [pc, #48]	@ (800af7c <__libc_init_array+0x44>)
 800af4c:	f000 f826 	bl	800af9c <_init>
 800af50:	1b64      	subs	r4, r4, r5
 800af52:	10a4      	asrs	r4, r4, #2
 800af54:	2600      	movs	r6, #0
 800af56:	42a6      	cmp	r6, r4
 800af58:	d105      	bne.n	800af66 <__libc_init_array+0x2e>
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af60:	4798      	blx	r3
 800af62:	3601      	adds	r6, #1
 800af64:	e7ee      	b.n	800af44 <__libc_init_array+0xc>
 800af66:	f855 3b04 	ldr.w	r3, [r5], #4
 800af6a:	4798      	blx	r3
 800af6c:	3601      	adds	r6, #1
 800af6e:	e7f2      	b.n	800af56 <__libc_init_array+0x1e>
 800af70:	0800b028 	.word	0x0800b028
 800af74:	0800b028 	.word	0x0800b028
 800af78:	0800b028 	.word	0x0800b028
 800af7c:	0800b02c 	.word	0x0800b02c

0800af80 <memcpy>:
 800af80:	440a      	add	r2, r1
 800af82:	4291      	cmp	r1, r2
 800af84:	f100 33ff 	add.w	r3, r0, #4294967295
 800af88:	d100      	bne.n	800af8c <memcpy+0xc>
 800af8a:	4770      	bx	lr
 800af8c:	b510      	push	{r4, lr}
 800af8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af96:	4291      	cmp	r1, r2
 800af98:	d1f9      	bne.n	800af8e <memcpy+0xe>
 800af9a:	bd10      	pop	{r4, pc}

0800af9c <_init>:
 800af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9e:	bf00      	nop
 800afa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afa2:	bc08      	pop	{r3}
 800afa4:	469e      	mov	lr, r3
 800afa6:	4770      	bx	lr

0800afa8 <_fini>:
 800afa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afaa:	bf00      	nop
 800afac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afae:	bc08      	pop	{r3}
 800afb0:	469e      	mov	lr, r3
 800afb2:	4770      	bx	lr

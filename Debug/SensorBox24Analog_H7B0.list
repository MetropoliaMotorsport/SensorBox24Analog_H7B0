
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab94  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800ae40  0800ae40  0000be40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800aeb4  0800aeb4  0000beb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800aeb8  0800aeb8  0000beb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800aebc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008d8  24000010  0800aecc  0000c010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240008e8  0800aecc  0000c8e8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c370  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002fe5  00000000  00000000  000283ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018c0  00000000  00000000  0002b393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001352  00000000  00000000  0002cc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033e53  00000000  00000000  0002dfa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f633  00000000  00000000  00061df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a0ee  00000000  00000000  0008142b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001db519  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006d00  00000000  00000000  001db55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800ae28 	.word	0x0800ae28

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800ae28 	.word	0x0800ae28

080002ec <Config_Setup>:

#include "config.h"

#define ID 1

void Config_Setup(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

#if ID == 1
	Config_1();
 80002f0:	f000 f802 	bl	80002f8 <Config_1>
#elif ID == 2
	Config_2();
#elif ID == 3
	Config_3();
#endif
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Config_1>:

void Config_1(){
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

	CAN_interval = 20;
 80002fc:	4b33      	ldr	r3, [pc, #204]	@ (80003cc <Config_1+0xd4>)
 80002fe:	2214      	movs	r2, #20
 8000300:	801a      	strh	r2, [r3, #0]

	transfer_functions[0] = VOLTAGE_3V3;		// PA6
 8000302:	4b33      	ldr	r3, [pc, #204]	@ (80003d0 <Config_1+0xd8>)
 8000304:	2200      	movs	r2, #0
 8000306:	801a      	strh	r2, [r3, #0]
	transfer_functions[1] = VOLTAGE_3V3;	// PC4
 8000308:	4b31      	ldr	r3, [pc, #196]	@ (80003d0 <Config_1+0xd8>)
 800030a:	2200      	movs	r2, #0
 800030c:	805a      	strh	r2, [r3, #2]
	transfer_functions[2] = VOLTAGE_3V3;		//PB1
 800030e:	4b30      	ldr	r3, [pc, #192]	@ (80003d0 <Config_1+0xd8>)
 8000310:	2200      	movs	r2, #0
 8000312:	809a      	strh	r2, [r3, #4]
	transfer_functions[3] = VOLTAGE_3V3;		//PA7
 8000314:	4b2e      	ldr	r3, [pc, #184]	@ (80003d0 <Config_1+0xd8>)
 8000316:	2200      	movs	r2, #0
 8000318:	80da      	strh	r2, [r3, #6]
	transfer_functions[4] = VOLTAGE_3V3;		//PC5
 800031a:	4b2d      	ldr	r3, [pc, #180]	@ (80003d0 <Config_1+0xd8>)
 800031c:	2200      	movs	r2, #0
 800031e:	811a      	strh	r2, [r3, #8]
	transfer_functions[5] = VOLTAGE_3V3;			//PB0
 8000320:	4b2b      	ldr	r3, [pc, #172]	@ (80003d0 <Config_1+0xd8>)
 8000322:	2200      	movs	r2, #0
 8000324:	815a      	strh	r2, [r3, #10]
	transfer_functions[6] = VOLTAGE_3V3;			//PC0
 8000326:	4b2a      	ldr	r3, [pc, #168]	@ (80003d0 <Config_1+0xd8>)
 8000328:	2200      	movs	r2, #0
 800032a:	819a      	strh	r2, [r3, #12]
	transfer_functions[7] = VOLTAGE_3V3;			//PC1
 800032c:	4b28      	ldr	r3, [pc, #160]	@ (80003d0 <Config_1+0xd8>)
 800032e:	2200      	movs	r2, #0
 8000330:	81da      	strh	r2, [r3, #14]
	transfer_functions[8] = VOLTAGE_3V3;		//PC2
 8000332:	4b27      	ldr	r3, [pc, #156]	@ (80003d0 <Config_1+0xd8>)
 8000334:	2200      	movs	r2, #0
 8000336:	821a      	strh	r2, [r3, #16]
	transfer_functions[9] = VOLTAGE_3V3;		//PC3
 8000338:	4b25      	ldr	r3, [pc, #148]	@ (80003d0 <Config_1+0xd8>)
 800033a:	2200      	movs	r2, #0
 800033c:	825a      	strh	r2, [r3, #18]
	transfer_functions[10] = VOLTAGE_3V3;	//PA2
 800033e:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <Config_1+0xd8>)
 8000340:	2200      	movs	r2, #0
 8000342:	829a      	strh	r2, [r3, #20]
	transfer_functions[11] = VOLTAGE_3V3;	//PA3
 8000344:	4b22      	ldr	r3, [pc, #136]	@ (80003d0 <Config_1+0xd8>)
 8000346:	2200      	movs	r2, #0
 8000348:	82da      	strh	r2, [r3, #22]
	transfer_functions[12] = VOLTAGE_3V3;	//PA0
 800034a:	4b21      	ldr	r3, [pc, #132]	@ (80003d0 <Config_1+0xd8>)
 800034c:	2200      	movs	r2, #0
 800034e:	831a      	strh	r2, [r3, #24]
	transfer_functions[13] = VOLTAGE_3V3;	//PA1
 8000350:	4b1f      	ldr	r3, [pc, #124]	@ (80003d0 <Config_1+0xd8>)
 8000352:	2200      	movs	r2, #0
 8000354:	835a      	strh	r2, [r3, #26]
	transfer_functions[14] = VOLTAGE_3V3;	//PA4
 8000356:	4b1e      	ldr	r3, [pc, #120]	@ (80003d0 <Config_1+0xd8>)
 8000358:	2200      	movs	r2, #0
 800035a:	839a      	strh	r2, [r3, #28]
	transfer_functions[15] = VOLTAGE_3V3;	//PA5
 800035c:	4b1c      	ldr	r3, [pc, #112]	@ (80003d0 <Config_1+0xd8>)
 800035e:	2200      	movs	r2, #0
 8000360:	83da      	strh	r2, [r3, #30]

	CAN_ID[0] = 1;
 8000362:	4b1c      	ldr	r3, [pc, #112]	@ (80003d4 <Config_1+0xdc>)
 8000364:	2201      	movs	r2, #1
 8000366:	801a      	strh	r2, [r3, #0]
	CAN_ID[1] = 2;
 8000368:	4b1a      	ldr	r3, [pc, #104]	@ (80003d4 <Config_1+0xdc>)
 800036a:	2202      	movs	r2, #2
 800036c:	805a      	strh	r2, [r3, #2]
	CAN_ID[2] = 3;
 800036e:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <Config_1+0xdc>)
 8000370:	2203      	movs	r2, #3
 8000372:	809a      	strh	r2, [r3, #4]
	CAN_ID[3] = 4;
 8000374:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <Config_1+0xdc>)
 8000376:	2204      	movs	r2, #4
 8000378:	80da      	strh	r2, [r3, #6]
	CAN_ID[4] = 5;
 800037a:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <Config_1+0xdc>)
 800037c:	2205      	movs	r2, #5
 800037e:	811a      	strh	r2, [r3, #8]
	CAN_ID[5] = 6;
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <Config_1+0xdc>)
 8000382:	2206      	movs	r2, #6
 8000384:	815a      	strh	r2, [r3, #10]
	CAN_ID[6] = 7;
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <Config_1+0xdc>)
 8000388:	2207      	movs	r2, #7
 800038a:	819a      	strh	r2, [r3, #12]
	CAN_ID[7] = 8;
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <Config_1+0xdc>)
 800038e:	2208      	movs	r2, #8
 8000390:	81da      	strh	r2, [r3, #14]
	CAN_ID[8] = 9;
 8000392:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <Config_1+0xdc>)
 8000394:	2209      	movs	r2, #9
 8000396:	821a      	strh	r2, [r3, #16]
	CAN_ID[9] = 10;
 8000398:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <Config_1+0xdc>)
 800039a:	220a      	movs	r2, #10
 800039c:	825a      	strh	r2, [r3, #18]
	CAN_ID[10] = 11;
 800039e:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <Config_1+0xdc>)
 80003a0:	220b      	movs	r2, #11
 80003a2:	829a      	strh	r2, [r3, #20]
	CAN_ID[11] = 12;
 80003a4:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <Config_1+0xdc>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	82da      	strh	r2, [r3, #22]
	CAN_ID[12] = 13;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <Config_1+0xdc>)
 80003ac:	220d      	movs	r2, #13
 80003ae:	831a      	strh	r2, [r3, #24]
	CAN_ID[13] = 14;
 80003b0:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <Config_1+0xdc>)
 80003b2:	220e      	movs	r2, #14
 80003b4:	835a      	strh	r2, [r3, #26]
	CAN_ID[14] = 15;
 80003b6:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <Config_1+0xdc>)
 80003b8:	220f      	movs	r2, #15
 80003ba:	839a      	strh	r2, [r3, #28]
	CAN_ID[15] = 16;
 80003bc:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <Config_1+0xdc>)
 80003be:	2210      	movs	r2, #16
 80003c0:	83da      	strh	r2, [r3, #30]

}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	2400084e 	.word	0x2400084e
 80003d0:	24000874 	.word	0x24000874
 80003d4:	24000850 	.word	0x24000850

080003d8 <CanSend>:

uint8_t TxData[8];
uint8_t RxData[8];


void CanSend(uint8_t *TxData){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80003e0:	e001      	b.n	80003e6 <CanSend+0xe>
		Error_Handler();
 80003e2:	f000 fde1 	bl	8000fa8 <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80003e6:	4809      	ldr	r0, [pc, #36]	@ (800040c <CanSend+0x34>)
 80003e8:	f005 fc14 	bl	8005c14 <HAL_FDCAN_GetTxFifoFreeLevel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d007      	beq.n	8000402 <CanSend+0x2a>
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	4906      	ldr	r1, [pc, #24]	@ (8000410 <CanSend+0x38>)
 80003f6:	4805      	ldr	r0, [pc, #20]	@ (800040c <CanSend+0x34>)
 80003f8:	f005 fa45 	bl	8005886 <HAL_FDCAN_AddMessageToTxFifoQ>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1ef      	bne.n	80003e2 <CanSend+0xa>
	}
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	24000118 	.word	0x24000118
 8000410:	24000894 	.word	0x24000894

08000414 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	2b00      	cmp	r3, #0
 8000426:	d014      	beq.n	8000452 <HAL_FDCAN_RxFifo0Callback+0x3e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000428:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <HAL_FDCAN_RxFifo0Callback+0x48>)
 800042a:	4a0d      	ldr	r2, [pc, #52]	@ (8000460 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800042c:	2140      	movs	r1, #64	@ 0x40
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f005 fa84 	bl	800593c <HAL_FDCAN_GetRxMessage>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <HAL_FDCAN_RxFifo0Callback+0x2a>
		{
			/* Reception Error */
			Error_Handler();
 800043a:	f000 fdb5 	bl	8000fa8 <Error_Handler>
		}else{
			//decode();
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800043e:	2200      	movs	r2, #0
 8000440:	2101      	movs	r1, #1
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f005 fbf8 	bl	8005c38 <HAL_FDCAN_ActivateNotification>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			/* Notification Error */
			Error_Handler();
 800044e:	f000 fdab 	bl	8000fa8 <Error_Handler>
		}
	}
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	24000034 	.word	0x24000034
 8000460:	240008b8 	.word	0x240008b8

08000464 <print>:



void print(uint16_t select){
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	80fb      	strh	r3, [r7, #6]
		uint16_t Data = TF_Select(1,averages[select],transfer_functions[select]);
 800046e:	88fb      	ldrh	r3, [r7, #6]
 8000470:	4a12      	ldr	r2, [pc, #72]	@ (80004bc <print+0x58>)
 8000472:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000476:	88fb      	ldrh	r3, [r7, #6]
 8000478:	4a11      	ldr	r2, [pc, #68]	@ (80004c0 <print+0x5c>)
 800047a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	461a      	mov	r2, r3
 8000482:	2001      	movs	r0, #1
 8000484:	f001 f9ae 	bl	80017e4 <TF_Select>
 8000488:	4603      	mov	r3, r0
 800048a:	81fb      	strh	r3, [r7, #14]
		TxData[0] = Data;
 800048c:	89fb      	ldrh	r3, [r7, #14]
 800048e:	b2da      	uxtb	r2, r3
 8000490:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <print+0x60>)
 8000492:	701a      	strb	r2, [r3, #0]
		TxData[1] = Data >> 8;
 8000494:	89fb      	ldrh	r3, [r7, #14]
 8000496:	0a1b      	lsrs	r3, r3, #8
 8000498:	b29b      	uxth	r3, r3
 800049a:	b2da      	uxtb	r2, r3
 800049c:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <print+0x60>)
 800049e:	705a      	strb	r2, [r3, #1]
		TxHeader.Identifier = CAN_ID[select];
 80004a0:	88fb      	ldrh	r3, [r7, #6]
 80004a2:	4a09      	ldr	r2, [pc, #36]	@ (80004c8 <print+0x64>)
 80004a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004a8:	461a      	mov	r2, r3
 80004aa:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <print+0x68>)
 80004ac:	601a      	str	r2, [r3, #0]

		CanSend(TxData);
 80004ae:	4805      	ldr	r0, [pc, #20]	@ (80004c4 <print+0x60>)
 80004b0:	f7ff ff92 	bl	80003d8 <CanSend>
}
 80004b4:	bf00      	nop
 80004b6:	3710      	adds	r7, #16
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	2400080c 	.word	0x2400080c
 80004c0:	24000874 	.word	0x24000874
 80004c4:	2400002c 	.word	0x2400002c
 80004c8:	24000850 	.word	0x24000850
 80004cc:	24000894 	.word	0x24000894

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f001 fb1e 	bl	8001b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f83c 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 fca6 	bl	8000e2c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 fc84 	bl	8000dec <MX_DMA_Init>
  MX_FDCAN1_Init();
 80004e4:	f000 fa22 	bl	800092c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80004e8:	f000 faa2 	bl	8000a30 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80004ec:	f000 fb1c 	bl	8000b28 <MX_I2C1_Init>
  MX_I2C3_Init();
 80004f0:	f000 fb5a 	bl	8000ba8 <MX_I2C3_Init>
  MX_ADC1_Init();
 80004f4:	f000 f8a4 	bl	8000640 <MX_ADC1_Init>
  MX_I2C4_Init();
 80004f8:	f000 fb96 	bl	8000c28 <MX_I2C4_Init>
  MX_TIM1_Init();
 80004fc:	f000 fbd4 	bl	8000ca8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000500:	f000 fc26 	bl	8000d50 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000504:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <main+0x78>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	461a      	mov	r2, r3
 800050a:	4910      	ldr	r1, [pc, #64]	@ (800054c <main+0x7c>)
 800050c:	480e      	ldr	r0, [pc, #56]	@ (8000548 <main+0x78>)
 800050e:	f001 fed5 	bl	80022bc <HAL_ADC_Start_DMA>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <main+0x4c>
 8000518:	f000 fd46 	bl	8000fa8 <Error_Handler>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }
 800051c:	480c      	ldr	r0, [pc, #48]	@ (8000550 <main+0x80>)
 800051e:	f005 f987 	bl	8005830 <HAL_FDCAN_Start>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <main+0x5c>
 8000528:	f000 fd3e 	bl	8000fa8 <Error_Handler>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	4807      	ldr	r0, [pc, #28]	@ (8000550 <main+0x80>)
 8000532:	f005 fb81 	bl	8005c38 <HAL_FDCAN_ActivateNotification>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <main+0x70>
 800053c:	f000 fd34 	bl	8000fa8 <Error_Handler>

  Config_Setup();
 8000540:	f7ff fed4 	bl	80002ec <Config_Setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x74>
 8000548:	2400003c 	.word	0x2400003c
 800054c:	240003ec 	.word	0x240003ec
 8000550:	24000118 	.word	0x24000118

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b09c      	sub	sp, #112	@ 0x70
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800055e:	224c      	movs	r2, #76	@ 0x4c
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f00a fc26 	bl	800adb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2220      	movs	r2, #32
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f00a fc20 	bl	800adb4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000574:	4b30      	ldr	r3, [pc, #192]	@ (8000638 <SystemClock_Config+0xe4>)
 8000576:	f04f 32ff 	mov.w	r2, #4294967295
 800057a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800057e:	2002      	movs	r0, #2
 8000580:	f006 fbb4 	bl	8006cec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000584:	2300      	movs	r3, #0
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	4b2c      	ldr	r3, [pc, #176]	@ (800063c <SystemClock_Config+0xe8>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a2b      	ldr	r2, [pc, #172]	@ (800063c <SystemClock_Config+0xe8>)
 800058e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b29      	ldr	r3, [pc, #164]	@ (800063c <SystemClock_Config+0xe8>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005a0:	bf00      	nop
 80005a2:	4b26      	ldr	r3, [pc, #152]	@ (800063c <SystemClock_Config+0xe8>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005ae:	d1f8      	bne.n	80005a2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80005b8:	2340      	movs	r3, #64	@ 0x40
 80005ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005d8:	230c      	movs	r3, #12
 80005da:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005dc:	2300      	movs	r3, #0
 80005de:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e8:	4618      	mov	r0, r3
 80005ea:	f006 fbb9 	bl	8006d60 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005f4:	f000 fcd8 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	233f      	movs	r3, #63	@ 0x3f
 80005fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000608:	2340      	movs	r3, #64	@ 0x40
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800060c:	2340      	movs	r3, #64	@ 0x40
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000614:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000616:	2340      	movs	r3, #64	@ 0x40
 8000618:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f006 ffd0 	bl	80075c4 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800062a:	f000 fcbd 	bl	8000fa8 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3770      	adds	r7, #112	@ 0x70
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	58024400 	.word	0x58024400
 800063c:	58024800 	.word	0x58024800

08000640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000664:	4b9f      	ldr	r3, [pc, #636]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000666:	4aa0      	ldr	r2, [pc, #640]	@ (80008e8 <MX_ADC1_Init+0x2a8>)
 8000668:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800066a:	4b9e      	ldr	r3, [pc, #632]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 800066c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000670:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000672:	4b9c      	ldr	r3, [pc, #624]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000674:	2208      	movs	r2, #8
 8000676:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000678:	4b9a      	ldr	r3, [pc, #616]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 800067a:	2201      	movs	r2, #1
 800067c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067e:	4b99      	ldr	r3, [pc, #612]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000680:	2204      	movs	r2, #4
 8000682:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000684:	4b97      	ldr	r3, [pc, #604]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000686:	2200      	movs	r2, #0
 8000688:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800068a:	4b96      	ldr	r3, [pc, #600]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 800068c:	2201      	movs	r2, #1
 800068e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 8000690:	4b94      	ldr	r3, [pc, #592]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000692:	2210      	movs	r2, #16
 8000694:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000696:	4b93      	ldr	r3, [pc, #588]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000698:	2200      	movs	r2, #0
 800069a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069c:	4b91      	ldr	r3, [pc, #580]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	4b90      	ldr	r3, [pc, #576]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006a8:	4b8e      	ldr	r3, [pc, #568]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80006aa:	2203      	movs	r2, #3
 80006ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ae:	4b8d      	ldr	r3, [pc, #564]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006b4:	4b8b      	ldr	r3, [pc, #556]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006ba:	4b8a      	ldr	r3, [pc, #552]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c2:	4888      	ldr	r0, [pc, #544]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80006c4:	f001 fca0 	bl	8002008 <HAL_ADC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006ce:	f000 fc6b 	bl	8000fa8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4881      	ldr	r0, [pc, #516]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80006de:	f002 fba3 	bl	8002e28 <HAL_ADCEx_MultiModeConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006e8:	f000 fc5e 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006ec:	4b7f      	ldr	r3, [pc, #508]	@ (80008ec <MX_ADC1_Init+0x2ac>)
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f0:	2306      	movs	r3, #6
 80006f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80006f4:	2306      	movs	r3, #6
 80006f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006fe:	2304      	movs	r3, #4
 8000700:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4875      	ldr	r0, [pc, #468]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000710:	f001 fe9c 	bl	800244c <HAL_ADC_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800071a:	f000 fc45 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800071e:	4b74      	ldr	r3, [pc, #464]	@ (80008f0 <MX_ADC1_Init+0x2b0>)
 8000720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000722:	230c      	movs	r3, #12
 8000724:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000726:	463b      	mov	r3, r7
 8000728:	4619      	mov	r1, r3
 800072a:	486e      	ldr	r0, [pc, #440]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 800072c:	f001 fe8e 	bl	800244c <HAL_ADC_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000736:	f000 fc37 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800073a:	4b6e      	ldr	r3, [pc, #440]	@ (80008f4 <MX_ADC1_Init+0x2b4>)
 800073c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800073e:	2312      	movs	r3, #18
 8000740:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4867      	ldr	r0, [pc, #412]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000748:	f001 fe80 	bl	800244c <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000752:	f000 fc29 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000756:	4b68      	ldr	r3, [pc, #416]	@ (80008f8 <MX_ADC1_Init+0x2b8>)
 8000758:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800075a:	2318      	movs	r3, #24
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4860      	ldr	r0, [pc, #384]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000764:	f001 fe72 	bl	800244c <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800076e:	f000 fc1b 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000772:	4b62      	ldr	r3, [pc, #392]	@ (80008fc <MX_ADC1_Init+0x2bc>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4858      	ldr	r0, [pc, #352]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000782:	f001 fe63 	bl	800244c <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 800078c:	f000 fc0c 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000790:	4b5b      	ldr	r3, [pc, #364]	@ (8000900 <MX_ADC1_Init+0x2c0>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000794:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4851      	ldr	r0, [pc, #324]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80007a0:	f001 fe54 	bl	800244c <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80007aa:	f000 fbfd 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007ae:	4b55      	ldr	r3, [pc, #340]	@ (8000904 <MX_ADC1_Init+0x2c4>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80007b2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4849      	ldr	r0, [pc, #292]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80007be:	f001 fe45 	bl	800244c <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80007c8:	f000 fbee 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007cc:	4b4e      	ldr	r3, [pc, #312]	@ (8000908 <MX_ADC1_Init+0x2c8>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80007d0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4842      	ldr	r0, [pc, #264]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80007dc:	f001 fe36 	bl	800244c <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80007e6:	f000 fbdf 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007ea:	4b48      	ldr	r3, [pc, #288]	@ (800090c <MX_ADC1_Init+0x2cc>)
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80007ee:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80007f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	483a      	ldr	r0, [pc, #232]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80007fa:	f001 fe27 	bl	800244c <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 8000804:	f000 fbd0 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000808:	4b41      	ldr	r3, [pc, #260]	@ (8000910 <MX_ADC1_Init+0x2d0>)
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800080c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000810:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	4833      	ldr	r0, [pc, #204]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000818:	f001 fe18 	bl	800244c <HAL_ADC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8000822:	f000 fbc1 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000826:	4b3b      	ldr	r3, [pc, #236]	@ (8000914 <MX_ADC1_Init+0x2d4>)
 8000828:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800082a:	f240 2306 	movw	r3, #518	@ 0x206
 800082e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	482b      	ldr	r0, [pc, #172]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000836:	f001 fe09 	bl	800244c <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 8000840:	f000 fbb2 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000844:	4b34      	ldr	r3, [pc, #208]	@ (8000918 <MX_ADC1_Init+0x2d8>)
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000848:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 800084c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	4619      	mov	r1, r3
 8000852:	4824      	ldr	r0, [pc, #144]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000854:	f001 fdfa 	bl	800244c <HAL_ADC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 800085e:	f000 fba3 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000862:	4b2e      	ldr	r3, [pc, #184]	@ (800091c <MX_ADC1_Init+0x2dc>)
 8000864:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000866:	f240 2312 	movw	r3, #530	@ 0x212
 800086a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	4619      	mov	r1, r3
 8000870:	481c      	ldr	r0, [pc, #112]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000872:	f001 fdeb 	bl	800244c <HAL_ADC_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 800087c:	f000 fb94 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000880:	4b27      	ldr	r3, [pc, #156]	@ (8000920 <MX_ADC1_Init+0x2e0>)
 8000882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000884:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8000888:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	4619      	mov	r1, r3
 800088e:	4815      	ldr	r0, [pc, #84]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 8000890:	f001 fddc 	bl	800244c <HAL_ADC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 800089a:	f000 fb85 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800089e:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <MX_ADC1_Init+0x2e4>)
 80008a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80008a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a8:	463b      	mov	r3, r7
 80008aa:	4619      	mov	r1, r3
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80008ae:	f001 fdcd 	bl	800244c <HAL_ADC_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 80008b8:	f000 fb76 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_ADC1_Init+0x2e8>)
 80008be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80008c0:	f240 3306 	movw	r3, #774	@ 0x306
 80008c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <MX_ADC1_Init+0x2a4>)
 80008cc:	f001 fdbe 	bl	800244c <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 80008d6:	f000 fb67 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3728      	adds	r7, #40	@ 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2400003c 	.word	0x2400003c
 80008e8:	40022000 	.word	0x40022000
 80008ec:	0c900008 	.word	0x0c900008
 80008f0:	10c00010 	.word	0x10c00010
 80008f4:	14f00020 	.word	0x14f00020
 80008f8:	1d500080 	.word	0x1d500080
 80008fc:	21800100 	.word	0x21800100
 8000900:	25b00200 	.word	0x25b00200
 8000904:	2a000400 	.word	0x2a000400
 8000908:	2e300800 	.word	0x2e300800
 800090c:	32601000 	.word	0x32601000
 8000910:	36902000 	.word	0x36902000
 8000914:	3ac04000 	.word	0x3ac04000
 8000918:	3ef08000 	.word	0x3ef08000
 800091c:	43210000 	.word	0x43210000
 8000920:	47520000 	.word	0x47520000
 8000924:	4b840000 	.word	0x4b840000
 8000928:	4fb80000 	.word	0x4fb80000

0800092c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000930:	4b3c      	ldr	r3, [pc, #240]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000932:	4a3d      	ldr	r2, [pc, #244]	@ (8000a28 <MX_FDCAN1_Init+0xfc>)
 8000934:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000936:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800093c:	4b39      	ldr	r3, [pc, #228]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000942:	4b38      	ldr	r3, [pc, #224]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000944:	2201      	movs	r2, #1
 8000946:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000948:	4b36      	ldr	r3, [pc, #216]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 800094a:	2200      	movs	r2, #0
 800094c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800094e:	4b35      	ldr	r3, [pc, #212]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000950:	2200      	movs	r2, #0
 8000952:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000954:	4b33      	ldr	r3, [pc, #204]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000956:	2201      	movs	r2, #1
 8000958:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800095a:	4b32      	ldr	r3, [pc, #200]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 800095c:	2201      	movs	r2, #1
 800095e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000960:	4b30      	ldr	r3, [pc, #192]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000962:	220d      	movs	r2, #13
 8000964:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000966:	4b2f      	ldr	r3, [pc, #188]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000968:	2202      	movs	r2, #2
 800096a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800096c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 800096e:	2201      	movs	r2, #1
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000972:	4b2c      	ldr	r3, [pc, #176]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000974:	2201      	movs	r2, #1
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000978:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 800097a:	2201      	movs	r2, #1
 800097c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800097e:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000980:	2201      	movs	r2, #1
 8000982:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000984:	4b27      	ldr	r3, [pc, #156]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000986:	2200      	movs	r2, #0
 8000988:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 28;
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 800098c:	221c      	movs	r2, #28
 800098e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000990:	4b24      	ldr	r3, [pc, #144]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000992:	2200      	movs	r2, #0
 8000994:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000996:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 8000998:	2200      	movs	r2, #0
 800099a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800099c:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 800099e:	2204      	movs	r2, #4
 80009a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 80009aa:	2204      	movs	r2, #4
 80009ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 80009b6:	2204      	movs	r2, #4
 80009b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80009c0:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009cc:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009d2:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 80009d4:	2204      	movs	r2, #4
 80009d6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009d8:	4812      	ldr	r0, [pc, #72]	@ (8000a24 <MX_FDCAN1_Init+0xf8>)
 80009da:	f004 fd4b 	bl	8005474 <HAL_FDCAN_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80009e4:	f000 fae0 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = 0;
 80009e8:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <MX_FDCAN1_Init+0x100>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_FDCAN1_Init+0x100>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <MX_FDCAN1_Init+0x100>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 3;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_FDCAN1_Init+0x100>)
 80009fc:	2203      	movs	r2, #3
 80009fe:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <MX_FDCAN1_Init+0x100>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_FDCAN1_Init+0x100>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <MX_FDCAN1_Init+0x100>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_FDCAN1_Init+0x100>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <MX_FDCAN1_Init+0x100>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	24000118 	.word	0x24000118
 8000a28:	4000a000 	.word	0x4000a000
 8000a2c:	24000894 	.word	0x24000894

08000a30 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000a34:	4b39      	ldr	r3, [pc, #228]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a36:	4a3a      	ldr	r2, [pc, #232]	@ (8000b20 <MX_FDCAN2_Init+0xf0>)
 8000a38:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a3a:	4b38      	ldr	r3, [pc, #224]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a40:	4b36      	ldr	r3, [pc, #216]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000a46:	4b35      	ldr	r3, [pc, #212]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a4c:	4b33      	ldr	r3, [pc, #204]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a52:	4b32      	ldr	r3, [pc, #200]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000a58:	4b30      	ldr	r3, [pc, #192]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a5a:	2210      	movs	r2, #16
 8000a5c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000a76:	4b29      	ldr	r3, [pc, #164]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000a82:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000a88:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000a8e:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000a94:	4b21      	ldr	r3, [pc, #132]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000a9a:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000abe:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000aca:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000ad8:	2204      	movs	r2, #4
 8000ada:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000adc:	480f      	ldr	r0, [pc, #60]	@ (8000b1c <MX_FDCAN2_Init+0xec>)
 8000ade:	f004 fcc9 	bl	8005474 <HAL_FDCAN_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ae8:	f000 fa5e 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  //TxHeader.IdType = FDCAN_STANDARD_ID;
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <MX_FDCAN2_Init+0xf4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_FDCAN2_Init+0xf4>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <MX_FDCAN2_Init+0xf4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_FDCAN2_Init+0xf4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b04:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <MX_FDCAN2_Init+0xf4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_FDCAN2_Init+0xf4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <MX_FDCAN2_Init+0xf4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	240001b8 	.word	0x240001b8
 8000b20:	4000a400 	.word	0x4000a400
 8000b24:	24000894 	.word	0x24000894

08000b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <MX_I2C1_Init+0x78>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba4 <MX_I2C1_Init+0x7c>)
 8000b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b44:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b62:	480e      	ldr	r0, [pc, #56]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b64:	f005 ff8e 	bl	8006a84 <HAL_I2C_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b6e:	f000 fa1b 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4809      	ldr	r0, [pc, #36]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b76:	f006 f821 	bl	8006bbc <HAL_I2CEx_ConfigAnalogFilter>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b80:	f000 fa12 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b84:	2100      	movs	r1, #0
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b88:	f006 f863 	bl	8006c52 <HAL_I2CEx_ConfigDigitalFilter>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b92:	f000 fa09 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	24000258 	.word	0x24000258
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	00707cbb 	.word	0x00707cbb

08000ba8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000bae:	4a1c      	ldr	r2, [pc, #112]	@ (8000c20 <MX_I2C3_Init+0x78>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c24 <MX_I2C3_Init+0x7c>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000be2:	480e      	ldr	r0, [pc, #56]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000be4:	f005 ff4e 	bl	8006a84 <HAL_I2C_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000bee:	f000 f9db 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000bf6:	f005 ffe1 	bl	8006bbc <HAL_I2CEx_ConfigAnalogFilter>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c00:	f000 f9d2 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_I2C3_Init+0x74>)
 8000c08:	f006 f823 	bl	8006c52 <HAL_I2CEx_ConfigDigitalFilter>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f000 f9c9 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	240002ac 	.word	0x240002ac
 8000c20:	40005c00 	.word	0x40005c00
 8000c24:	00707cbb 	.word	0x00707cbb

08000c28 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca0 <MX_I2C4_Init+0x78>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca4 <MX_I2C4_Init+0x7c>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c38:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c44:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c62:	480e      	ldr	r0, [pc, #56]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c64:	f005 ff0e 	bl	8006a84 <HAL_I2C_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000c6e:	f000 f99b 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c76:	f005 ffa1 	bl	8006bbc <HAL_I2CEx_ConfigAnalogFilter>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c80:	f000 f992 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_I2C4_Init+0x74>)
 8000c88:	f005 ffe3 	bl	8006c52 <HAL_I2CEx_ConfigDigitalFilter>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c92:	f000 f989 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	24000300 	.word	0x24000300
 8000ca0:	58001c00 	.word	0x58001c00
 8000ca4:	00707cbb 	.word	0x00707cbb

08000ca8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc6:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <MX_TIM1_Init+0xa0>)
 8000cc8:	4a20      	ldr	r2, [pc, #128]	@ (8000d4c <MX_TIM1_Init+0xa4>)
 8000cca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <MX_TIM1_Init+0xa0>)
 8000cce:	223f      	movs	r2, #63	@ 0x3f
 8000cd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <MX_TIM1_Init+0xa0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <MX_TIM1_Init+0xa0>)
 8000cda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <MX_TIM1_Init+0xa0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_TIM1_Init+0xa0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <MX_TIM1_Init+0xa0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cf2:	4815      	ldr	r0, [pc, #84]	@ (8000d48 <MX_TIM1_Init+0xa0>)
 8000cf4:	f009 fbe6 	bl	800a4c4 <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000cfe:	f000 f953 	bl	8000fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480e      	ldr	r0, [pc, #56]	@ (8000d48 <MX_TIM1_Init+0xa0>)
 8000d10:	f009 fd36 	bl	800a780 <HAL_TIM_ConfigClockSource>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d1a:	f000 f945 	bl	8000fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <MX_TIM1_Init+0xa0>)
 8000d30:	f009 ff94 	bl	800ac5c <HAL_TIMEx_MasterConfigSynchronization>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d3a:	f000 f935 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	24000354 	.word	0x24000354
 8000d4c:	40010000 	.word	0x40010000

08000d50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <MX_TIM3_Init+0x94>)
 8000d70:	4a1d      	ldr	r2, [pc, #116]	@ (8000de8 <MX_TIM3_Init+0x98>)
 8000d72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <MX_TIM3_Init+0x94>)
 8000d76:	223f      	movs	r2, #63	@ 0x3f
 8000d78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <MX_TIM3_Init+0x94>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <MX_TIM3_Init+0x94>)
 8000d82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <MX_TIM3_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <MX_TIM3_Init+0x94>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d94:	4813      	ldr	r0, [pc, #76]	@ (8000de4 <MX_TIM3_Init+0x94>)
 8000d96:	f009 fb95 	bl	800a4c4 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000da0:	f000 f902 	bl	8000fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <MX_TIM3_Init+0x94>)
 8000db2:	f009 fce5 	bl	800a780 <HAL_TIM_ConfigClockSource>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000dbc:	f000 f8f4 	bl	8000fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_TIM3_Init+0x94>)
 8000dce:	f009 ff45 	bl	800ac5c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000dd8:	f000 f8e6 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	240003a0 	.word	0x240003a0
 8000de8:	40000400 	.word	0x40000400

08000dec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <MX_DMA_Init+0x3c>)
 8000df4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000df8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e28 <MX_DMA_Init+0x3c>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <MX_DMA_Init+0x3c>)
 8000e04:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	200b      	movs	r0, #11
 8000e16:	f002 f97e 	bl	8003116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e1a:	200b      	movs	r0, #11
 8000e1c:	f002 f995 	bl	800314a <HAL_NVIC_EnableIRQ>

}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	58024400 	.word	0x58024400

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e38:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e3e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e50:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e56:	4a18      	ldr	r2, [pc, #96]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e74:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e92:	4a09      	ldr	r2, [pc, #36]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <MX_GPIO_Init+0x8c>)
 8000e9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	58024400 	.word	0x58024400

08000ebc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a32      	ldr	r2, [pc, #200]	@ (8000f94 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d15e      	bne.n	8000f8c <HAL_ADC_ConvCpltCallback+0xd0>
		if(AVE_POS < ROLLING_AVE){
 8000ece:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b1f      	cmp	r3, #31
 8000ed4:	d806      	bhi.n	8000ee4 <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 8000ed6:	4b30      	ldr	r3, [pc, #192]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e03a      	b.n	8000f5a <HAL_ADC_ConvCpltCallback+0x9e>
		}
		else{
			AVE_POS = 0;
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e02f      	b.n	8000f50 <HAL_ADC_ConvCpltCallback+0x94>
				for(int z = 0; z < ROLLING_AVE;z++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	e021      	b.n	8000f3a <HAL_ADC_ConvCpltCallback+0x7e>
					if(z == 0){
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10a      	bne.n	8000f12 <HAL_ADC_ConvCpltCallback+0x56>
						averages[i] = all_raw_data[i][0];
 8000efc:	4a27      	ldr	r2, [pc, #156]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	019b      	lsls	r3, r3, #6
 8000f02:	4413      	add	r3, r2
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	4a25      	ldr	r2, [pc, #148]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f10:	e010      	b.n	8000f34 <HAL_ADC_ConvCpltCallback+0x78>
					}else{
						averages[i]=(averages[i] + all_raw_data[i][z])/2;
 8000f12:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	4820      	ldr	r0, [pc, #128]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	0151      	lsls	r1, r2, #5
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	440a      	add	r2, r1
 8000f24:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8000f28:	4413      	add	r3, r2
 8000f2a:	085a      	lsrs	r2, r3, #1
 8000f2c:	491c      	ldr	r1, [pc, #112]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int z = 0; z < ROLLING_AVE;z++){
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	3301      	adds	r3, #1
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b1f      	cmp	r3, #31
 8000f3e:	ddda      	ble.n	8000ef6 <HAL_ADC_ConvCpltCallback+0x3a>
					}
				}
				print(i);
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa8d 	bl	8000464 <print>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	699a      	ldr	r2, [r3, #24]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d8ca      	bhi.n	8000ef0 <HAL_ADC_ConvCpltCallback+0x34>
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e010      	b.n	8000f82 <HAL_ADC_ConvCpltCallback+0xc6>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 8000f60:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	490f      	ldr	r1, [pc, #60]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8000f6e:	490b      	ldr	r1, [pc, #44]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	0152      	lsls	r2, r2, #5
 8000f74:	4413      	add	r3, r2
 8000f76:	4602      	mov	r2, r0
 8000f78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	699a      	ldr	r2, [r3, #24]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8e9      	bhi.n	8000f60 <HAL_ADC_ConvCpltCallback+0xa4>
		}
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40022000 	.word	0x40022000
 8000f98:	2400084c 	.word	0x2400084c
 8000f9c:	2400040c 	.word	0x2400040c
 8000fa0:	2400080c 	.word	0x2400080c
 8000fa4:	240003ec 	.word	0x240003ec

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <Error_Handler+0x8>

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_MspInit+0x30>)
 8000fbc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000fc0:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <HAL_MspInit+0x30>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_MspInit+0x30>)
 8000fcc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58024400 	.word	0x58024400

08000fe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0bc      	sub	sp, #240	@ 0xf0
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	f107 0318 	add.w	r3, r7, #24
 8001004:	22c0      	movs	r2, #192	@ 0xc0
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f009 fed3 	bl	800adb4 <memset>
  if(hadc->Instance==ADC1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a62      	ldr	r2, [pc, #392]	@ (800119c <HAL_ADC_MspInit+0x1b4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	f040 80bc 	bne.w	8001192 <HAL_ADC_MspInit+0x1aa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800101a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001026:	2304      	movs	r3, #4
 8001028:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 800102a:	2308      	movs	r3, #8
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 800102e:	2303      	movs	r3, #3
 8001030:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001032:	2302      	movs	r3, #2
 8001034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001036:	2302      	movs	r3, #2
 8001038:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800103a:	23c0      	movs	r3, #192	@ 0xc0
 800103c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800103e:	2300      	movs	r3, #0
 8001040:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104c:	f107 0318 	add.w	r3, r7, #24
 8001050:	4618      	mov	r0, r3
 8001052:	f006 fe2d 	bl	8007cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800105c:	f7ff ffa4 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001060:	4b4f      	ldr	r3, [pc, #316]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 8001062:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001066:	4a4e      	ldr	r2, [pc, #312]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 8001068:	f043 0320 	orr.w	r3, r3, #32
 800106c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001070:	4b4b      	ldr	r3, [pc, #300]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 8001072:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b48      	ldr	r3, [pc, #288]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 8001080:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001084:	4a46      	ldr	r2, [pc, #280]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800108e:	4b44      	ldr	r3, [pc, #272]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 8001090:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b40      	ldr	r3, [pc, #256]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 800109e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010a2:	4a3f      	ldr	r2, [pc, #252]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80010ac:	4b3c      	ldr	r3, [pc, #240]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 80010ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b39      	ldr	r3, [pc, #228]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 80010bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010c0:	4a37      	ldr	r2, [pc, #220]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80010ca:	4b35      	ldr	r3, [pc, #212]	@ (80011a0 <HAL_ADC_MspInit+0x1b8>)
 80010cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010d8:	233f      	movs	r3, #63	@ 0x3f
 80010da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010de:	2303      	movs	r3, #3
 80010e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010ee:	4619      	mov	r1, r3
 80010f0:	482c      	ldr	r0, [pc, #176]	@ (80011a4 <HAL_ADC_MspInit+0x1bc>)
 80010f2:	f005 fb17 	bl	8006724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010f6:	23ff      	movs	r3, #255	@ 0xff
 80010f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800110c:	4619      	mov	r1, r3
 800110e:	4826      	ldr	r0, [pc, #152]	@ (80011a8 <HAL_ADC_MspInit+0x1c0>)
 8001110:	f005 fb08 	bl	8006724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001114:	2303      	movs	r3, #3
 8001116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111a:	2303      	movs	r3, #3
 800111c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800112a:	4619      	mov	r1, r3
 800112c:	481f      	ldr	r0, [pc, #124]	@ (80011ac <HAL_ADC_MspInit+0x1c4>)
 800112e:	f005 faf9 	bl	8006724 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 8001134:	4a1f      	ldr	r2, [pc, #124]	@ (80011b4 <HAL_ADC_MspInit+0x1cc>)
 8001136:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 800113a:	2209      	movs	r2, #9
 800113c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001144:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 800114c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001150:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 8001154:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001158:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 800115c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001160:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 8001164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001168:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001176:	480e      	ldr	r0, [pc, #56]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 8001178:	f002 f802 	bl	8003180 <HAL_DMA_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 8001182:	f7ff ff11 	bl	8000fa8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a09      	ldr	r2, [pc, #36]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 800118a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800118c:	4a08      	ldr	r2, [pc, #32]	@ (80011b0 <HAL_ADC_MspInit+0x1c8>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	37f0      	adds	r7, #240	@ 0xf0
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40022000 	.word	0x40022000
 80011a0:	58024400 	.word	0x58024400
 80011a4:	58020800 	.word	0x58020800
 80011a8:	58020000 	.word	0x58020000
 80011ac:	58020400 	.word	0x58020400
 80011b0:	240000a0 	.word	0x240000a0
 80011b4:	40020010 	.word	0x40020010

080011b8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0bc      	sub	sp, #240	@ 0xf0
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	22c0      	movs	r2, #192	@ 0xc0
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f009 fdeb 	bl	800adb4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001350 <HAL_FDCAN_MspInit+0x198>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d159      	bne.n	800129c <HAL_FDCAN_MspInit+0xe4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80011f4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80011f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	4618      	mov	r0, r3
 8001202:	f006 fd55 	bl	8007cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800120c:	f7ff fecc 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001210:	4b50      	ldr	r3, [pc, #320]	@ (8001354 <HAL_FDCAN_MspInit+0x19c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a4f      	ldr	r2, [pc, #316]	@ (8001354 <HAL_FDCAN_MspInit+0x19c>)
 8001218:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800121a:	4b4e      	ldr	r3, [pc, #312]	@ (8001354 <HAL_FDCAN_MspInit+0x19c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d10e      	bne.n	8001240 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001222:	4b4d      	ldr	r3, [pc, #308]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 8001224:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001228:	4a4b      	ldr	r2, [pc, #300]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 800122a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122e:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001232:	4b49      	ldr	r3, [pc, #292]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 8001234:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b45      	ldr	r3, [pc, #276]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 8001242:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001246:	4a44      	ldr	r2, [pc, #272]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001250:	4b41      	ldr	r3, [pc, #260]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 8001252:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800125e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001278:	2309      	movs	r3, #9
 800127a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001282:	4619      	mov	r1, r3
 8001284:	4835      	ldr	r0, [pc, #212]	@ (800135c <HAL_FDCAN_MspInit+0x1a4>)
 8001286:	f005 fa4d 	bl	8006724 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2013      	movs	r0, #19
 8001290:	f001 ff41 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001294:	2013      	movs	r0, #19
 8001296:	f001 ff58 	bl	800314a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800129a:	e055      	b.n	8001348 <HAL_FDCAN_MspInit+0x190>
  else if(hfdcan->Instance==FDCAN2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001360 <HAL_FDCAN_MspInit+0x1a8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d150      	bne.n	8001348 <HAL_FDCAN_MspInit+0x190>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80012b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80012b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 fcf6 	bl	8007cb0 <HAL_RCCEx_PeriphCLKConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_FDCAN_MspInit+0x116>
      Error_Handler();
 80012ca:	f7ff fe6d 	bl	8000fa8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <HAL_FDCAN_MspInit+0x19c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001354 <HAL_FDCAN_MspInit+0x19c>)
 80012d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80012d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <HAL_FDCAN_MspInit+0x19c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d10e      	bne.n	80012fe <HAL_FDCAN_MspInit+0x146>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80012e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 80012e2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80012e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ec:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80012f0:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 80012f2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80012f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 8001300:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001304:	4a14      	ldr	r2, [pc, #80]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <HAL_FDCAN_MspInit+0x1a0>)
 8001310:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800131c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001320:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001336:	2309      	movs	r3, #9
 8001338:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001340:	4619      	mov	r1, r3
 8001342:	4808      	ldr	r0, [pc, #32]	@ (8001364 <HAL_FDCAN_MspInit+0x1ac>)
 8001344:	f005 f9ee 	bl	8006724 <HAL_GPIO_Init>
}
 8001348:	bf00      	nop
 800134a:	37f0      	adds	r7, #240	@ 0xf0
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	4000a000 	.word	0x4000a000
 8001354:	240008e0 	.word	0x240008e0
 8001358:	58024400 	.word	0x58024400
 800135c:	58020000 	.word	0x58020000
 8001360:	4000a400 	.word	0x4000a400
 8001364:	58020400 	.word	0x58020400

08001368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0c0      	sub	sp, #256	@ 0x100
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001380:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001384:	22c0      	movs	r2, #192	@ 0xc0
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f009 fd13 	bl	800adb4 <memset>
  if(hi2c->Instance==I2C1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a86      	ldr	r2, [pc, #536]	@ (80015ac <HAL_I2C_MspInit+0x244>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d146      	bne.n	8001426 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001398:	f04f 0208 	mov.w	r2, #8
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ae:	4618      	mov	r0, r3
 80013b0:	f006 fc7e 	bl	8007cb0 <HAL_RCCEx_PeriphCLKConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013ba:	f7ff fdf5 	bl	8000fa8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b7c      	ldr	r3, [pc, #496]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 80013c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013c4:	4a7a      	ldr	r2, [pc, #488]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013ce:	4b78      	ldr	r3, [pc, #480]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 80013d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013dc:	23c0      	movs	r3, #192	@ 0xc0
 80013de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e2:	2312      	movs	r3, #18
 80013e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f4:	2304      	movs	r3, #4
 80013f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80013fe:	4619      	mov	r1, r3
 8001400:	486c      	ldr	r0, [pc, #432]	@ (80015b4 <HAL_I2C_MspInit+0x24c>)
 8001402:	f005 f98f 	bl	8006724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001406:	4b6a      	ldr	r3, [pc, #424]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 8001408:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800140c:	4a68      	ldr	r2, [pc, #416]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 800140e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001412:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001416:	4b66      	ldr	r3, [pc, #408]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 8001418:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800141c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001420:	623b      	str	r3, [r7, #32]
 8001422:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001424:	e0bd      	b.n	80015a2 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a63      	ldr	r2, [pc, #396]	@ (80015b8 <HAL_I2C_MspInit+0x250>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d16c      	bne.n	800150a <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001430:	f04f 0208 	mov.w	r2, #8
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001442:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001446:	4618      	mov	r0, r3
 8001448:	f006 fc32 	bl	8007cb0 <HAL_RCCEx_PeriphCLKConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001452:	f7ff fda9 	bl	8000fa8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b56      	ldr	r3, [pc, #344]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 8001458:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800145c:	4a54      	ldr	r2, [pc, #336]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001466:	4b52      	ldr	r3, [pc, #328]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 8001468:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	4b4e      	ldr	r3, [pc, #312]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 8001476:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800147a:	4a4d      	ldr	r2, [pc, #308]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001484:	4b4a      	ldr	r3, [pc, #296]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 8001486:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001492:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001496:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014ac:	2304      	movs	r3, #4
 80014ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80014b6:	4619      	mov	r1, r3
 80014b8:	4840      	ldr	r0, [pc, #256]	@ (80015bc <HAL_I2C_MspInit+0x254>)
 80014ba:	f005 f933 	bl	8006724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c6:	2312      	movs	r3, #18
 80014c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014d8:	2304      	movs	r3, #4
 80014da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80014e2:	4619      	mov	r1, r3
 80014e4:	4836      	ldr	r0, [pc, #216]	@ (80015c0 <HAL_I2C_MspInit+0x258>)
 80014e6:	f005 f91d 	bl	8006724 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014ea:	4b31      	ldr	r3, [pc, #196]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 80014ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014f0:	4a2f      	ldr	r2, [pc, #188]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 80014f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014f6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80014fa:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 80014fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001500:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
}
 8001508:	e04b      	b.n	80015a2 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a2d      	ldr	r2, [pc, #180]	@ (80015c4 <HAL_I2C_MspInit+0x25c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d146      	bne.n	80015a2 <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001514:	f04f 0210 	mov.w	r2, #16
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001526:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152a:	4618      	mov	r0, r3
 800152c:	f006 fbc0 	bl	8007cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8001536:	f7ff fd37 	bl	8000fa8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 800153c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001540:	4a1b      	ldr	r2, [pc, #108]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 800154c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001558:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800155c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001572:	2306      	movs	r3, #6
 8001574:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800157c:	4619      	mov	r1, r3
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <HAL_I2C_MspInit+0x24c>)
 8001580:	f005 f8d0 	bl	8006724 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 8001586:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800158a:	4a09      	ldr	r2, [pc, #36]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 800158c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001590:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_I2C_MspInit+0x248>)
 8001596:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800159a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
}
 80015a2:	bf00      	nop
 80015a4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40005400 	.word	0x40005400
 80015b0:	58024400 	.word	0x58024400
 80015b4:	58020400 	.word	0x58020400
 80015b8:	40005c00 	.word	0x40005c00
 80015bc:	58020800 	.word	0x58020800
 80015c0:	58020000 	.word	0x58020000
 80015c4:	58001c00 	.word	0x58001c00

080015c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a19      	ldr	r2, [pc, #100]	@ (800163c <HAL_TIM_Base_MspInit+0x74>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10f      	bne.n	80015fa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015da:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <HAL_TIM_Base_MspInit+0x78>)
 80015dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80015e0:	4a17      	ldr	r2, [pc, #92]	@ (8001640 <HAL_TIM_Base_MspInit+0x78>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <HAL_TIM_Base_MspInit+0x78>)
 80015ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015f8:	e01b      	b.n	8001632 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a11      	ldr	r2, [pc, #68]	@ (8001644 <HAL_TIM_Base_MspInit+0x7c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d116      	bne.n	8001632 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001604:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <HAL_TIM_Base_MspInit+0x78>)
 8001606:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800160a:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <HAL_TIM_Base_MspInit+0x78>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_TIM_Base_MspInit+0x78>)
 8001616:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	201d      	movs	r0, #29
 8001628:	f001 fd75 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800162c:	201d      	movs	r0, #29
 800162e:	f001 fd8c 	bl	800314a <HAL_NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40010000 	.word	0x40010000
 8001640:	58024400 	.word	0x58024400
 8001644:	40000400 	.word	0x40000400

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <NMI_Handler+0x4>

08001650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <MemManage_Handler+0x4>

08001660 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <UsageFault_Handler+0x4>

08001670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169e:	f000 faab 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016ac:	4802      	ldr	r0, [pc, #8]	@ (80016b8 <DMA1_Stream0_IRQHandler+0x10>)
 80016ae:	f002 fb5f 	bl	8003d70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	240000a0 	.word	0x240000a0

080016bc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016c0:	4802      	ldr	r0, [pc, #8]	@ (80016cc <FDCAN1_IT0_IRQHandler+0x10>)
 80016c2:	f004 fb33 	bl	8005d2c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	24000118 	.word	0x24000118

080016d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <TIM3_IRQHandler+0x1c>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <TIM3_IRQHandler+0x1c>)
 80016de:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016e0:	4803      	ldr	r0, [pc, #12]	@ (80016f0 <TIM3_IRQHandler+0x20>)
 80016e2:	f008 ff46 	bl	800a572 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	24000870 	.word	0x24000870
 80016f0:	240003a0 	.word	0x240003a0

080016f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016f8:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <SystemInit+0xd0>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	4a31      	ldr	r2, [pc, #196]	@ (80017c4 <SystemInit+0xd0>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001708:	4b2f      	ldr	r3, [pc, #188]	@ (80017c8 <SystemInit+0xd4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	2b02      	cmp	r3, #2
 8001712:	d807      	bhi.n	8001724 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001714:	4b2c      	ldr	r3, [pc, #176]	@ (80017c8 <SystemInit+0xd4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 030f 	bic.w	r3, r3, #15
 800171c:	4a2a      	ldr	r2, [pc, #168]	@ (80017c8 <SystemInit+0xd4>)
 800171e:	f043 0303 	orr.w	r3, r3, #3
 8001722:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001724:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <SystemInit+0xd8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a28      	ldr	r2, [pc, #160]	@ (80017cc <SystemInit+0xd8>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001730:	4b26      	ldr	r3, [pc, #152]	@ (80017cc <SystemInit+0xd8>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001736:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <SystemInit+0xd8>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4924      	ldr	r1, [pc, #144]	@ (80017cc <SystemInit+0xd8>)
 800173c:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <SystemInit+0xdc>)
 800173e:	4013      	ands	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001742:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <SystemInit+0xd4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800174e:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <SystemInit+0xd4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 030f 	bic.w	r3, r3, #15
 8001756:	4a1c      	ldr	r2, [pc, #112]	@ (80017c8 <SystemInit+0xd4>)
 8001758:	f043 0303 	orr.w	r3, r3, #3
 800175c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800175e:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <SystemInit+0xd8>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001764:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <SystemInit+0xd8>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800176a:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <SystemInit+0xd8>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001770:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <SystemInit+0xd8>)
 8001772:	4a18      	ldr	r2, [pc, #96]	@ (80017d4 <SystemInit+0xe0>)
 8001774:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <SystemInit+0xd8>)
 8001778:	4a17      	ldr	r2, [pc, #92]	@ (80017d8 <SystemInit+0xe4>)
 800177a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <SystemInit+0xd8>)
 800177e:	4a17      	ldr	r2, [pc, #92]	@ (80017dc <SystemInit+0xe8>)
 8001780:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001782:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <SystemInit+0xd8>)
 8001784:	2200      	movs	r2, #0
 8001786:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001788:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <SystemInit+0xd8>)
 800178a:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <SystemInit+0xe8>)
 800178c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <SystemInit+0xd8>)
 8001790:	2200      	movs	r2, #0
 8001792:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001794:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <SystemInit+0xd8>)
 8001796:	4a11      	ldr	r2, [pc, #68]	@ (80017dc <SystemInit+0xe8>)
 8001798:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <SystemInit+0xd8>)
 800179c:	2200      	movs	r2, #0
 800179e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <SystemInit+0xd8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <SystemInit+0xd8>)
 80017a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <SystemInit+0xd8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <SystemInit+0xec>)
 80017b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00
 80017c8:	52002000 	.word	0x52002000
 80017cc:	58024400 	.word	0x58024400
 80017d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80017d4:	02020200 	.word	0x02020200
 80017d8:	01ff0000 	.word	0x01ff0000
 80017dc:	01010280 	.word	0x01010280
 80017e0:	52004000 	.word	0x52004000

080017e4 <TF_Select>:
#include "functions.h"
#include "main.h"



uint16_t TF_Select(uint8_t bytes, uint32_t raw, uint8_t sensor){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	4613      	mov	r3, r2
 80017f2:	71bb      	strb	r3, [r7, #6]

	uint16_t transmit = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	81fb      	strh	r3, [r7, #14]

	switch(sensor){
 80017f8:	79bb      	ldrb	r3, [r7, #6]
 80017fa:	2b0b      	cmp	r3, #11
 80017fc:	d879      	bhi.n	80018f2 <TF_Select+0x10e>
 80017fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001804 <TF_Select+0x20>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001835 	.word	0x08001835
 8001808:	08001845 	.word	0x08001845
 800180c:	08001855 	.word	0x08001855
 8001810:	08001865 	.word	0x08001865
 8001814:	08001875 	.word	0x08001875
 8001818:	08001895 	.word	0x08001895
 800181c:	08001885 	.word	0x08001885
 8001820:	080018a5 	.word	0x080018a5
 8001824:	080018b5 	.word	0x080018b5
 8001828:	080018c5 	.word	0x080018c5
 800182c:	080018d5 	.word	0x080018d5
 8001830:	080018e5 	.word	0x080018e5
	case VOLTAGE_3V3:
		transmit = TF_3V3(bytes, raw);
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f861 	bl	8001900 <TF_3V3>
 800183e:	4603      	mov	r3, r0
 8001840:	81fb      	strh	r3, [r7, #14]
		break;
 8001842:	e057      	b.n	80018f4 <TF_Select+0x110>
	case VOLTAGE_5V:
		transmit = TF_5V(bytes, raw);
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f877 	bl	800193c <TF_5V>
 800184e:	4603      	mov	r3, r0
 8001850:	81fb      	strh	r3, [r7, #14]
		break;
 8001852:	e04f      	b.n	80018f4 <TF_Select+0x110>
	case BPPS:
		transmit = TF_BPPS(bytes, raw);
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	6839      	ldr	r1, [r7, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f88d 	bl	8001978 <TF_BPPS>
 800185e:	4603      	mov	r3, r0
 8001860:	81fb      	strh	r3, [r7, #14]
		break;
 8001862:	e047      	b.n	80018f4 <TF_Select+0x110>
	case APPS:
		transmit = TF_APPS(bytes, raw);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	6839      	ldr	r1, [r7, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f8a3 	bl	80019b4 <TF_APPS>
 800186e:	4603      	mov	r3, r0
 8001870:	81fb      	strh	r3, [r7, #14]
		break;
 8001872:	e03f      	b.n	80018f4 <TF_Select+0x110>
	case FRONT_HEAVE:
		transmit = TF_FRONT_HEAVE(bytes, raw);
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	6839      	ldr	r1, [r7, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 f8b9 	bl	80019f0 <TF_FRONT_HEAVE>
 800187e:	4603      	mov	r3, r0
 8001880:	81fb      	strh	r3, [r7, #14]
		break;
 8001882:	e037      	b.n	80018f4 <TF_Select+0x110>
	case REAR_HEAVE:
		transmit = TF_REAR_HEAVE(bytes, raw);
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	6839      	ldr	r1, [r7, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f000 f8be 	bl	8001a0a <TF_REAR_HEAVE>
 800188e:	4603      	mov	r3, r0
 8001890:	81fb      	strh	r3, [r7, #14]
		break;
 8001892:	e02f      	b.n	80018f4 <TF_Select+0x110>
	case FRONT_ROLL:
		transmit = TF_FRONT_ROLL(bytes, raw);
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f8c3 	bl	8001a24 <TF_FRONT_ROLL>
 800189e:	4603      	mov	r3, r0
 80018a0:	81fb      	strh	r3, [r7, #14]
		break;
 80018a2:	e027      	b.n	80018f4 <TF_Select+0x110>
	case REAR_ROLL:
		transmit = TF_REAR_ROLL(bytes, raw);
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f8c8 	bl	8001a3e <TF_REAR_ROLL>
 80018ae:	4603      	mov	r3, r0
 80018b0:	81fb      	strh	r3, [r7, #14]
		break;
 80018b2:	e01f      	b.n	80018f4 <TF_Select+0x110>
	case TYRE_TEMP:
		transmit = TF_TYRE_TEMP(bytes, raw);
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	6839      	ldr	r1, [r7, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f8cd 	bl	8001a58 <TF_TYRE_TEMP>
 80018be:	4603      	mov	r3, r0
 80018c0:	81fb      	strh	r3, [r7, #14]
		break;
 80018c2:	e017      	b.n	80018f4 <TF_Select+0x110>
	case ANGLE_GEAR:
		transmit = TF_ANGLE_GEAR(bytes, raw);
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f8d2 	bl	8001a72 <TF_ANGLE_GEAR>
 80018ce:	4603      	mov	r3, r0
 80018d0:	81fb      	strh	r3, [r7, #14]
		break;
 80018d2:	e00f      	b.n	80018f4 <TF_Select+0x110>
	case WATER_LVL:
		transmit = TF_WATER_LVL(bytes, raw);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f8d7 	bl	8001a8c <TF_WATER_LVL>
 80018de:	4603      	mov	r3, r0
 80018e0:	81fb      	strh	r3, [r7, #14]
		break;
 80018e2:	e007      	b.n	80018f4 <TF_Select+0x110>
	case BRK_PRES:
		transmit = TF_BRK_PRES(bytes, raw);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	6839      	ldr	r1, [r7, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 f8dc 	bl	8001aa6 <TF_BRK_PRES>
 80018ee:	4603      	mov	r3, r0
 80018f0:	81fb      	strh	r3, [r7, #14]
	default:
		//TODO implement error here
		break;
 80018f2:	bf00      	nop
	}

	return transmit;
 80018f4:	89fb      	ldrh	r3, [r7, #14]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop

08001900 <TF_3V3>:

uint16_t TF_3V3(uint8_t bytes, uint32_t raw){
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 3300;
 800190c:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001910:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 8001912:	89fb      	ldrh	r3, [r7, #14]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	fb03 f202 	mul.w	r2, r3, r2
 800191a:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <TF_3V3+0x38>)
 800191c:	fba3 1302 	umull	r1, r3, r3, r2
 8001920:	1ad2      	subs	r2, r2, r3
 8001922:	0852      	lsrs	r2, r2, #1
 8001924:	4413      	add	r3, r2
 8001926:	0adb      	lsrs	r3, r3, #11
 8001928:	81bb      	strh	r3, [r7, #12]
	return voltage;
 800192a:	89bb      	ldrh	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	00100101 	.word	0x00100101

0800193c <TF_5V>:

uint16_t TF_5V(uint8_t bytes, uint32_t raw){
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 5000;
 8001948:	f241 3388 	movw	r3, #5000	@ 0x1388
 800194c:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	fb03 f202 	mul.w	r2, r3, r2
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <TF_5V+0x38>)
 8001958:	fba3 1302 	umull	r1, r3, r3, r2
 800195c:	1ad2      	subs	r2, r2, r3
 800195e:	0852      	lsrs	r2, r2, #1
 8001960:	4413      	add	r3, r2
 8001962:	0adb      	lsrs	r3, r3, #11
 8001964:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001966:	89bb      	ldrh	r3, [r7, #12]

}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	00100101 	.word	0x00100101

08001978 <TF_BPPS>:
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw){ //brake pedal position sensor
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
	uint16_t max_brake_pres = 200;
 8001984:	23c8      	movs	r3, #200	@ 0xc8
 8001986:	81fb      	strh	r3, [r7, #14]

	uint16_t brake_pres = raw*max_brake_pres / 4095;
 8001988:	89fb      	ldrh	r3, [r7, #14]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	fb03 f202 	mul.w	r2, r3, r2
 8001990:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <TF_BPPS+0x38>)
 8001992:	fba3 1302 	umull	r1, r3, r3, r2
 8001996:	1ad2      	subs	r2, r2, r3
 8001998:	0852      	lsrs	r2, r2, #1
 800199a:	4413      	add	r3, r2
 800199c:	0adb      	lsrs	r3, r3, #11
 800199e:	81bb      	strh	r3, [r7, #12]
	return brake_pres;
 80019a0:	89bb      	ldrh	r3, [r7, #12]

}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	00100101 	.word	0x00100101

080019b4 <TF_APPS>:
uint16_t TF_APPS(uint8_t bytes, uint32_t raw){
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 80019c0:	2364      	movs	r3, #100	@ 0x64
 80019c2:	81fb      	strh	r3, [r7, #14]

	uint16_t apps = raw*max_pos / 4095;
 80019c4:	89fb      	ldrh	r3, [r7, #14]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	fb03 f202 	mul.w	r2, r3, r2
 80019cc:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <TF_APPS+0x38>)
 80019ce:	fba3 1302 	umull	r1, r3, r3, r2
 80019d2:	1ad2      	subs	r2, r2, r3
 80019d4:	0852      	lsrs	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	0adb      	lsrs	r3, r3, #11
 80019da:	81bb      	strh	r3, [r7, #12]
	return apps;
 80019dc:	89bb      	ldrh	r3, [r7, #12]

}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	00100101 	.word	0x00100101

080019f0 <TF_FRONT_HEAVE>:
uint16_t TF_FRONT_HEAVE(uint8_t bytes, uint32_t raw){
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]

}
 80019fc:	bf00      	nop
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <TF_REAR_HEAVE>:
uint16_t TF_REAR_HEAVE(uint8_t bytes, uint32_t raw){
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	6039      	str	r1, [r7, #0]
 8001a14:	71fb      	strb	r3, [r7, #7]

}
 8001a16:	bf00      	nop
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <TF_FRONT_ROLL>:
uint16_t TF_FRONT_ROLL(uint8_t bytes, uint32_t raw){
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]

}
 8001a30:	bf00      	nop
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <TF_REAR_ROLL>:
uint16_t TF_REAR_ROLL(uint8_t bytes, uint32_t raw){
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	6039      	str	r1, [r7, #0]
 8001a48:	71fb      	strb	r3, [r7, #7]

}
 8001a4a:	bf00      	nop
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <TF_TYRE_TEMP>:
uint16_t TF_TYRE_TEMP(uint8_t bytes, uint32_t raw){
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]

}
 8001a64:	bf00      	nop
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <TF_ANGLE_GEAR>:
uint16_t TF_ANGLE_GEAR(uint8_t bytes, uint32_t raw){
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	6039      	str	r1, [r7, #0]
 8001a7c:	71fb      	strb	r3, [r7, #7]

}
 8001a7e:	bf00      	nop
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <TF_WATER_LVL>:
uint16_t TF_WATER_LVL(uint8_t bytes, uint32_t raw){
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]

}
 8001a98:	bf00      	nop
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <TF_BRK_PRES>:

uint16_t TF_BRK_PRES(uint8_t bytes, uint32_t raw){
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	6039      	str	r1, [r7, #0]
 8001ab0:	71fb      	strb	r3, [r7, #7]

}
 8001ab2:	bf00      	nop
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <Reset_Handler>:
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af8 <LoopFillZerobss+0xe>
 8001ac4:	f7ff fe16 	bl	80016f4 <SystemInit>
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <LoopFillZerobss+0x12>)
 8001aca:	490d      	ldr	r1, [pc, #52]	@ (8001b00 <LoopFillZerobss+0x16>)
 8001acc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b04 <LoopFillZerobss+0x1a>)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:
 8001ad2:	58d4      	ldr	r4, [r2, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:
 8001ad8:	18c4      	adds	r4, r0, r3
 8001ada:	428c      	cmp	r4, r1
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <LoopFillZerobss+0x1e>)
 8001ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8001b0c <LoopFillZerobss+0x22>)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:
 8001aea:	42a2      	cmp	r2, r4
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>
 8001aee:	f009 f969 	bl	800adc4 <__libc_init_array>
 8001af2:	f7fe fced 	bl	80004d0 <main>
 8001af6:	4770      	bx	lr
 8001af8:	24100000 	.word	0x24100000
 8001afc:	24000000 	.word	0x24000000
 8001b00:	24000010 	.word	0x24000010
 8001b04:	0800aebc 	.word	0x0800aebc
 8001b08:	24000010 	.word	0x24000010
 8001b0c:	240008e8 	.word	0x240008e8

08001b10 <ADC_IRQHandler>:
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	f001 faf0 	bl	8003100 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b20:	f005 ff06 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <HAL_Init+0x68>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	4913      	ldr	r1, [pc, #76]	@ (8001b80 <HAL_Init+0x6c>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <HAL_Init+0x68>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	4a0e      	ldr	r2, [pc, #56]	@ (8001b80 <HAL_Init+0x6c>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
 8001b54:	4a0b      	ldr	r2, [pc, #44]	@ (8001b84 <HAL_Init+0x70>)
 8001b56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b58:	4a0b      	ldr	r2, [pc, #44]	@ (8001b88 <HAL_Init+0x74>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b5e:	200f      	movs	r0, #15
 8001b60:	f000 f814 	bl	8001b8c <HAL_InitTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e002      	b.n	8001b74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6e:	f7ff fa21 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	0800ae8c 	.word	0x0800ae8c
 8001b84:	24000004 	.word	0x24000004
 8001b88:	24000000 	.word	0x24000000

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_InitTick+0x60>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e021      	b.n	8001be4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_InitTick+0x64>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <HAL_InitTick+0x60>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 fad5 	bl	8003166 <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f001 fa9f 	bl	8003116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	@ (8001bf4 <HAL_InitTick+0x68>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2400000c 	.word	0x2400000c
 8001bf0:	24000000 	.word	0x24000000
 8001bf4:	24000008 	.word	0x24000008

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	2400000c 	.word	0x2400000c
 8001c1c:	240008e4 	.word	0x240008e4

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	240008e4 	.word	0x240008e4

08001c38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	609a      	str	r2, [r3, #8]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3360      	adds	r3, #96	@ 0x60
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	431a      	orrs	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	611a      	str	r2, [r3, #16]
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b087      	sub	sp, #28
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3360      	adds	r3, #96	@ 0x60
 8001d22:	461a      	mov	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	601a      	str	r2, [r3, #0]
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	371c      	adds	r7, #28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b087      	sub	sp, #28
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3330      	adds	r3, #48	@ 0x30
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	4413      	add	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	211f      	movs	r1, #31
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	401a      	ands	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	f003 011f 	and.w	r1, r3, #31
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	431a      	orrs	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dba:	bf00      	nop
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f023 0203 	bic.w	r2, r3, #3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3314      	adds	r3, #20
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	0e5b      	lsrs	r3, r3, #25
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	4413      	add	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	0d1b      	lsrs	r3, r3, #20
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2107      	movs	r1, #7
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	401a      	ands	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	0d1b      	lsrs	r3, r3, #20
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	431a      	orrs	r2, r3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e36:	bf00      	nop
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0318 	and.w	r3, r3, #24
 8001e66:	4908      	ldr	r1, [pc, #32]	@ (8001e88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e68:	40d9      	lsrs	r1, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	000fffff 	.word	0x000fffff

08001e8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 031f 	and.w	r3, r3, #31
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6093      	str	r3, [r2, #8]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	5fffffc0 	.word	0x5fffffc0

08001ecc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ee0:	d101      	bne.n	8001ee6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	6fffffc0 	.word	0x6fffffc0

08001f1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f30:	d101      	bne.n	8001f36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <LL_ADC_Enable+0x24>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	7fffffc0 	.word	0x7fffffc0

08001f6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <LL_ADC_IsEnabled+0x18>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <LL_ADC_IsEnabled+0x1a>
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <LL_ADC_REG_StartConversion+0x24>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	f043 0204 	orr.w	r2, r3, #4
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	7fffffc0 	.word	0x7fffffc0

08001fbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d101      	bne.n	8001fd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b089      	sub	sp, #36	@ 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e138      	b.n	8002294 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202c:	2b00      	cmp	r3, #0
 800202e:	d109      	bne.n	8002044 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7fe ffd9 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff3f 	bl	8001ecc <LL_ADC_IsDeepPowerDownEnabled>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff25 	bl	8001ea8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff5a 	bl	8001f1c <LL_ADC_IsInternalRegulatorEnabled>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d114      	bne.n	8002098 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff3e 	bl	8001ef4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002078:	4b88      	ldr	r3, [pc, #544]	@ (800229c <HAL_ADC_Init+0x294>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	4a88      	ldr	r2, [pc, #544]	@ (80022a0 <HAL_ADC_Init+0x298>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	3301      	adds	r3, #1
 8002088:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800208a:	e002      	b.n	8002092 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	3b01      	subs	r3, #1
 8002090:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f9      	bne.n	800208c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff3d 	bl	8001f1c <LL_ADC_IsInternalRegulatorEnabled>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10d      	bne.n	80020c4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ac:	f043 0210 	orr.w	r2, r3, #16
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b8:	f043 0201 	orr.w	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff77 	bl	8001fbc <LL_ADC_REG_IsConversionOngoing>
 80020ce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f040 80d2 	bne.w	8002282 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f040 80ce 	bne.w	8002282 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ea:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020ee:	f043 0202 	orr.w	r2, r3, #2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff36 	bl	8001f6c <LL_ADC_IsEnabled>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d110      	bne.n	8002128 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002106:	4867      	ldr	r0, [pc, #412]	@ (80022a4 <HAL_ADC_Init+0x29c>)
 8002108:	f7ff ff30 	bl	8001f6c <LL_ADC_IsEnabled>
 800210c:	4604      	mov	r4, r0
 800210e:	4866      	ldr	r0, [pc, #408]	@ (80022a8 <HAL_ADC_Init+0x2a0>)
 8002110:	f7ff ff2c 	bl	8001f6c <LL_ADC_IsEnabled>
 8002114:	4603      	mov	r3, r0
 8002116:	4323      	orrs	r3, r4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4619      	mov	r1, r3
 8002122:	4862      	ldr	r0, [pc, #392]	@ (80022ac <HAL_ADC_Init+0x2a4>)
 8002124:	f7ff fd88 	bl	8001c38 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7d5b      	ldrb	r3, [r3, #21]
 800212c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002132:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002138:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7f1b      	ldrb	r3, [r3, #28]
 800213e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7f1b      	ldrb	r3, [r3, #28]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	3b01      	subs	r3, #1
 8002152:	045b      	lsls	r3, r3, #17
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002166:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	4b4c      	ldr	r3, [pc, #304]	@ (80022b0 <HAL_ADC_Init+0x2a8>)
 800217e:	4013      	ands	r3, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	69b9      	ldr	r1, [r7, #24]
 8002186:	430b      	orrs	r3, r1
 8002188:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff14 	bl	8001fbc <LL_ADC_REG_IsConversionOngoing>
 8002194:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff21 	bl	8001fe2 <LL_ADC_INJ_IsConversionOngoing>
 80021a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d14a      	bne.n	800223e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d147      	bne.n	800223e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7d1b      	ldrb	r3, [r3, #20]
 80021b2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	4b3c      	ldr	r3, [pc, #240]	@ (80022b4 <HAL_ADC_Init+0x2ac>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	430b      	orrs	r3, r1
 80021ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d11b      	bne.n	8002212 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021de:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	4b34      	ldr	r3, [pc, #208]	@ (80022b8 <HAL_ADC_Init+0x2b0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021ee:	3a01      	subs	r2, #1
 80021f0:	0411      	lsls	r1, r2, #16
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021fc:	4311      	orrs	r1, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002202:	430a      	orrs	r2, r1
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	611a      	str	r2, [r3, #16]
 8002210:	e007      	b.n	8002222 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fd01 	bl	8002c40 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10c      	bne.n	8002260 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	f023 010f 	bic.w	r1, r3, #15
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	631a      	str	r2, [r3, #48]	@ 0x30
 800225e:	e007      	b.n	8002270 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020f 	bic.w	r2, r2, #15
 800226e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002274:	f023 0303 	bic.w	r3, r3, #3
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002280:	e007      	b.n	8002292 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002286:	f043 0210 	orr.w	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002292:	7ffb      	ldrb	r3, [r7, #31]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3724      	adds	r7, #36	@ 0x24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	24000000 	.word	0x24000000
 80022a0:	053e2d63 	.word	0x053e2d63
 80022a4:	40022000 	.word	0x40022000
 80022a8:	40022100 	.word	0x40022100
 80022ac:	40022300 	.word	0x40022300
 80022b0:	fff0c003 	.word	0xfff0c003
 80022b4:	ffffbffc 	.word	0xffffbffc
 80022b8:	fc00f81e 	.word	0xfc00f81e

080022bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022c8:	484f      	ldr	r0, [pc, #316]	@ (8002408 <HAL_ADC_Start_DMA+0x14c>)
 80022ca:	f7ff fddf 	bl	8001e8c <LL_ADC_GetMultimode>
 80022ce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fe71 	bl	8001fbc <LL_ADC_REG_IsConversionOngoing>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 808c 	bne.w	80023fa <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_Start_DMA+0x34>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e087      	b.n	8002400 <HAL_ADC_Start_DMA+0x144>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d002      	beq.n	800230a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b09      	cmp	r3, #9
 8002308:	d170      	bne.n	80023ec <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fb88 	bl	8002a20 <ADC_Enable>
 8002310:	4603      	mov	r3, r0
 8002312:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d163      	bne.n	80023e2 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800231e:	4b3b      	ldr	r3, [pc, #236]	@ (800240c <HAL_ADC_Start_DMA+0x150>)
 8002320:	4013      	ands	r3, r2
 8002322:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a38      	ldr	r2, [pc, #224]	@ (8002410 <HAL_ADC_Start_DMA+0x154>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d002      	beq.n	800233a <HAL_ADC_Start_DMA+0x7e>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	e000      	b.n	800233c <HAL_ADC_Start_DMA+0x80>
 800233a:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_ADC_Start_DMA+0x158>)
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	4293      	cmp	r3, r2
 8002342:	d002      	beq.n	800234a <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	f023 0206 	bic.w	r2, r3, #6
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	659a      	str	r2, [r3, #88]	@ 0x58
 800236e:	e002      	b.n	8002376 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237a:	4a27      	ldr	r2, [pc, #156]	@ (8002418 <HAL_ADC_Start_DMA+0x15c>)
 800237c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	4a26      	ldr	r2, [pc, #152]	@ (800241c <HAL_ADC_Start_DMA+0x160>)
 8002384:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	4a25      	ldr	r2, [pc, #148]	@ (8002420 <HAL_ADC_Start_DMA+0x164>)
 800238c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	221c      	movs	r2, #28
 8002394:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0210 	orr.w	r2, r2, #16
 80023ac:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7ff fd04 	bl	8001dc6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3340      	adds	r3, #64	@ 0x40
 80023c8:	4619      	mov	r1, r3
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f001 fa65 	bl	800389c <HAL_DMA_Start_IT>
 80023d2:	4603      	mov	r3, r0
 80023d4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fdda 	bl	8001f94 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80023e0:	e00d      	b.n	80023fe <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80023ea:	e008      	b.n	80023fe <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80023f8:	e001      	b.n	80023fe <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
 80023fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40022300 	.word	0x40022300
 800240c:	fffff0fe 	.word	0xfffff0fe
 8002410:	40022100 	.word	0x40022100
 8002414:	40022000 	.word	0x40022000
 8002418:	08002b19 	.word	0x08002b19
 800241c:	08002bf1 	.word	0x08002bf1
 8002420:	08002c0d 	.word	0x08002c0d

08002424 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b0a1      	sub	sp, #132	@ 0x84
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a95      	ldr	r2, [pc, #596]	@ (80026bc <HAL_ADC_ConfigChannel+0x270>)
 8002466:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x2a>
 8002472:	2302      	movs	r3, #2
 8002474:	e2c0      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x5ac>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fd9a 	bl	8001fbc <LL_ADC_REG_IsConversionOngoing>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 82a5 	bne.w	80029da <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db2c      	blt.n	80024f2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d108      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x6a>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2201      	movs	r2, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	e016      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x98>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024c6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80024ce:	2320      	movs	r3, #32
 80024d0:	e003      	b.n	80024da <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80024d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	2201      	movs	r2, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	69d1      	ldr	r1, [r2, #28]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	430b      	orrs	r3, r1
 80024f0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	f7ff fc35 	bl	8001d6e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fd57 	bl	8001fbc <LL_ADC_REG_IsConversionOngoing>
 800250e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fd64 	bl	8001fe2 <LL_ADC_INJ_IsConversionOngoing>
 800251a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800251c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 80a0 	bne.w	8002664 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 809c 	bne.w	8002664 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	461a      	mov	r2, r3
 800253a:	f7ff fc57 	bl	8001dec <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10b      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x118>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	e00a      	b.n	800257a <HAL_ADC_ConfigChannel+0x12e>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b04      	cmp	r3, #4
 8002582:	d027      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6919      	ldr	r1, [r3, #16]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002592:	f7ff fb85 	bl	8001ca0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6919      	ldr	r1, [r3, #16]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	7e5b      	ldrb	r3, [r3, #25]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d102      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x160>
 80025a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80025aa:	e000      	b.n	80025ae <HAL_ADC_ConfigChannel+0x162>
 80025ac:	2300      	movs	r3, #0
 80025ae:	461a      	mov	r2, r3
 80025b0:	f7ff fbaf 	bl	8001d12 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6919      	ldr	r1, [r3, #16]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	7e1b      	ldrb	r3, [r3, #24]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x17e>
 80025c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025c8:	e000      	b.n	80025cc <HAL_ADC_ConfigChannel+0x180>
 80025ca:	2300      	movs	r3, #0
 80025cc:	461a      	mov	r2, r3
 80025ce:	f7ff fb87 	bl	8001ce0 <LL_ADC_SetDataRightShift>
 80025d2:	e047      	b.n	8002664 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	069b      	lsls	r3, r3, #26
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d107      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025f6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	069b      	lsls	r3, r3, #26
 8002608:	429a      	cmp	r2, r3
 800260a:	d107      	bne.n	800261c <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800261a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002622:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	069b      	lsls	r3, r3, #26
 800262c:	429a      	cmp	r2, r3
 800262e:	d107      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800263e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002646:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	069b      	lsls	r3, r3, #26
 8002650:	429a      	cmp	r2, r3
 8002652:	d107      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002662:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fc7f 	bl	8001f6c <LL_ADC_IsEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 81bb 	bne.w	80029ec <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	461a      	mov	r2, r3
 8002684:	f7ff fbde 	bl	8001e44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_ADC_ConfigChannel+0x270>)
 800268e:	4293      	cmp	r3, r2
 8002690:	f040 8130 	bne.w	80028f4 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10d      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x274>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0e9b      	lsrs	r3, r3, #26
 80026aa:	3301      	adds	r3, #1
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2b09      	cmp	r3, #9
 80026b2:	bf94      	ite	ls
 80026b4:	2301      	movls	r3, #1
 80026b6:	2300      	movhi	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e01b      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x2a8>
 80026bc:	47ff0000 	.word	0x47ff0000
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	e003      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 80026dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2b09      	cmp	r3, #9
 80026ec:	bf94      	ite	ls
 80026ee:	2301      	movls	r3, #1
 80026f0:	2300      	movhi	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d079      	beq.n	80027ec <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002700:	2b00      	cmp	r3, #0
 8002702:	d107      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x2c8>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	3301      	adds	r3, #1
 800270c:	069b      	lsls	r3, r3, #26
 800270e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002712:	e015      	b.n	8002740 <HAL_ADC_ConfigChannel+0x2f4>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002724:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	069b      	lsls	r3, r3, #26
 800273c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x314>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0e9b      	lsrs	r3, r3, #26
 8002752:	3301      	adds	r3, #1
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	e017      	b.n	8002790 <HAL_ADC_ConfigChannel+0x344>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800276e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002770:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002778:	2320      	movs	r3, #32
 800277a:	e003      	b.n	8002784 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 800277c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	ea42 0103 	orr.w	r1, r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x36a>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	3301      	adds	r3, #1
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	051b      	lsls	r3, r3, #20
 80027b4:	e018      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x39c>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e003      	b.n	80027da <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80027d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e8:	430b      	orrs	r3, r1
 80027ea:	e07e      	b.n	80028ea <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d107      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x3bc>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	3301      	adds	r3, #1
 8002800:	069b      	lsls	r3, r3, #26
 8002802:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002806:	e015      	b.n	8002834 <HAL_ADC_ConfigChannel+0x3e8>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e003      	b.n	800282c <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	3301      	adds	r3, #1
 800282e:	069b      	lsls	r3, r3, #26
 8002830:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x408>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	3301      	adds	r3, #1
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	e017      	b.n	8002884 <HAL_ADC_ConfigChannel+0x438>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	61bb      	str	r3, [r7, #24]
  return result;
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e003      	b.n	8002878 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	3301      	adds	r3, #1
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	ea42 0103 	orr.w	r1, r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10d      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x464>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0e9b      	lsrs	r3, r3, #26
 800289a:	3301      	adds	r3, #1
 800289c:	f003 021f 	and.w	r2, r3, #31
 80028a0:	4613      	mov	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	3b1e      	subs	r3, #30
 80028a8:	051b      	lsls	r3, r3, #20
 80028aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	e01b      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x49c>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	60fb      	str	r3, [r7, #12]
  return result;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80028c8:	2320      	movs	r3, #32
 80028ca:	e003      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	f003 021f 	and.w	r2, r3, #31
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	3b1e      	subs	r3, #30
 80028e2:	051b      	lsls	r3, r3, #20
 80028e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e8:	430b      	orrs	r3, r1
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	6892      	ldr	r2, [r2, #8]
 80028ee:	4619      	mov	r1, r3
 80028f0:	f7ff fa7c 	bl	8001dec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	da77      	bge.n	80029ec <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028fc:	4840      	ldr	r0, [pc, #256]	@ (8002a00 <HAL_ADC_ConfigChannel+0x5b4>)
 80028fe:	f7ff f9c1 	bl	8001c84 <LL_ADC_GetCommonPathInternalCh>
 8002902:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002904:	483f      	ldr	r0, [pc, #252]	@ (8002a04 <HAL_ADC_ConfigChannel+0x5b8>)
 8002906:	f7ff fb31 	bl	8001f6c <LL_ADC_IsEnabled>
 800290a:	4604      	mov	r4, r0
 800290c:	483e      	ldr	r0, [pc, #248]	@ (8002a08 <HAL_ADC_ConfigChannel+0x5bc>)
 800290e:	f7ff fb2d 	bl	8001f6c <LL_ADC_IsEnabled>
 8002912:	4603      	mov	r3, r0
 8002914:	4323      	orrs	r3, r4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d155      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a0c <HAL_ADC_ConfigChannel+0x5c0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d122      	bne.n	800296a <HAL_ADC_ConfigChannel+0x51e>
 8002924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002926:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11d      	bne.n	800296a <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a35      	ldr	r2, [pc, #212]	@ (8002a08 <HAL_ADC_ConfigChannel+0x5bc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d159      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800293a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800293e:	4619      	mov	r1, r3
 8002940:	482f      	ldr	r0, [pc, #188]	@ (8002a00 <HAL_ADC_ConfigChannel+0x5b4>)
 8002942:	f7ff f98c 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002946:	4b32      	ldr	r3, [pc, #200]	@ (8002a10 <HAL_ADC_ConfigChannel+0x5c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	099b      	lsrs	r3, r3, #6
 800294c:	4a31      	ldr	r2, [pc, #196]	@ (8002a14 <HAL_ADC_ConfigChannel+0x5c8>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	099b      	lsrs	r3, r3, #6
 8002954:	3301      	adds	r3, #1
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800295a:	e002      	b.n	8002962 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	3b01      	subs	r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f9      	bne.n	800295c <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002968:	e040      	b.n	80029ec <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2a      	ldr	r2, [pc, #168]	@ (8002a18 <HAL_ADC_ConfigChannel+0x5cc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d111      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x54c>
 8002974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002976:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10c      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a21      	ldr	r2, [pc, #132]	@ (8002a08 <HAL_ADC_ConfigChannel+0x5bc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d131      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800298a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800298e:	4619      	mov	r1, r3
 8002990:	481b      	ldr	r0, [pc, #108]	@ (8002a00 <HAL_ADC_ConfigChannel+0x5b4>)
 8002992:	f7ff f964 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002996:	e029      	b.n	80029ec <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a1c <HAL_ADC_ConfigChannel+0x5d0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d124      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x5a0>
 80029a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d11f      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a15      	ldr	r2, [pc, #84]	@ (8002a08 <HAL_ADC_ConfigChannel+0x5bc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d11a      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80029b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029bc:	4619      	mov	r1, r3
 80029be:	4810      	ldr	r0, [pc, #64]	@ (8002a00 <HAL_ADC_ConfigChannel+0x5b4>)
 80029c0:	f7ff f94d 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
 80029c4:	e012      	b.n	80029ec <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	f043 0220 	orr.w	r2, r3, #32
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80029d8:	e008      	b.n	80029ec <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029f4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3784      	adds	r7, #132	@ 0x84
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}
 8002a00:	40022300 	.word	0x40022300
 8002a04:	40022000 	.word	0x40022000
 8002a08:	40022100 	.word	0x40022100
 8002a0c:	cb840000 	.word	0xcb840000
 8002a10:	24000000 	.word	0x24000000
 8002a14:	053e2d63 	.word	0x053e2d63
 8002a18:	bac04000 	.word	0xbac04000
 8002a1c:	cfb80000 	.word	0xcfb80000

08002a20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fa9d 	bl	8001f6c <LL_ADC_IsEnabled>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d161      	bne.n	8002afc <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	4b32      	ldr	r3, [pc, #200]	@ (8002b08 <ADC_Enable+0xe8>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00d      	beq.n	8002a62 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4a:	f043 0210 	orr.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e04d      	b.n	8002afe <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fa6c 	bl	8001f44 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a6c:	f7ff f8d8 	bl	8001c20 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a72:	4826      	ldr	r0, [pc, #152]	@ (8002b0c <ADC_Enable+0xec>)
 8002a74:	f7ff fa0a 	bl	8001e8c <LL_ADC_GetMultimode>
 8002a78:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a24      	ldr	r2, [pc, #144]	@ (8002b10 <ADC_Enable+0xf0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d002      	beq.n	8002a8a <ADC_Enable+0x6a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e000      	b.n	8002a8c <ADC_Enable+0x6c>
 8002a8a:	4b22      	ldr	r3, [pc, #136]	@ (8002b14 <ADC_Enable+0xf4>)
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d02c      	beq.n	8002aee <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d130      	bne.n	8002afc <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a9a:	e028      	b.n	8002aee <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fa63 	bl	8001f6c <LL_ADC_IsEnabled>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fa47 	bl	8001f44 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ab6:	f7ff f8b3 	bl	8001c20 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d914      	bls.n	8002aee <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d00d      	beq.n	8002aee <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad6:	f043 0210 	orr.w	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e007      	b.n	8002afe <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d1cf      	bne.n	8002a9c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	8000003f 	.word	0x8000003f
 8002b0c:	40022300 	.word	0x40022300
 8002b10:	40022100 	.word	0x40022100
 8002b14:	40022000 	.word	0x40022000

08002b18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d14b      	bne.n	8002bca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b36:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d021      	beq.n	8002b90 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff f8f9 	bl	8001d48 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d032      	beq.n	8002bc2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d12b      	bne.n	8002bc2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11f      	bne.n	8002bc2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b8e:	e018      	b.n	8002bc2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d111      	bne.n	8002bc2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f7fe f97a 	bl	8000ebc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bc8:	e00e      	b.n	8002be8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7ff fc2e 	bl	8002438 <HAL_ADC_ErrorCallback>
}
 8002bdc:	e004      	b.n	8002be8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7ff fc10 	bl	8002424 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2a:	f043 0204 	orr.w	r2, r3, #4
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff fc00 	bl	8002438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c48:	4b60      	ldr	r3, [pc, #384]	@ (8002dcc <ADC_ConfigureBoostMode+0x18c>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01c      	beq.n	8002c8e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002c54:	f004 ffe6 	bl	8007c24 <HAL_RCC_GetHCLKFreq>
 8002c58:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c62:	d010      	beq.n	8002c86 <ADC_ConfigureBoostMode+0x46>
 8002c64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c68:	d873      	bhi.n	8002d52 <ADC_ConfigureBoostMode+0x112>
 8002c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c6e:	d002      	beq.n	8002c76 <ADC_ConfigureBoostMode+0x36>
 8002c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c74:	d16d      	bne.n	8002d52 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	60fb      	str	r3, [r7, #12]
        break;
 8002c84:	e068      	b.n	8002d58 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	60fb      	str	r3, [r7, #12]
        break;
 8002c8c:	e064      	b.n	8002d58 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c8e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	f006 f9c9 	bl	800902c <HAL_RCCEx_GetPeriphCLKFreq>
 8002c9a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002ca4:	d051      	beq.n	8002d4a <ADC_ConfigureBoostMode+0x10a>
 8002ca6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002caa:	d854      	bhi.n	8002d56 <ADC_ConfigureBoostMode+0x116>
 8002cac:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002cb0:	d047      	beq.n	8002d42 <ADC_ConfigureBoostMode+0x102>
 8002cb2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002cb6:	d84e      	bhi.n	8002d56 <ADC_ConfigureBoostMode+0x116>
 8002cb8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002cbc:	d03d      	beq.n	8002d3a <ADC_ConfigureBoostMode+0xfa>
 8002cbe:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002cc2:	d848      	bhi.n	8002d56 <ADC_ConfigureBoostMode+0x116>
 8002cc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cc8:	d033      	beq.n	8002d32 <ADC_ConfigureBoostMode+0xf2>
 8002cca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cce:	d842      	bhi.n	8002d56 <ADC_ConfigureBoostMode+0x116>
 8002cd0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002cd4:	d029      	beq.n	8002d2a <ADC_ConfigureBoostMode+0xea>
 8002cd6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002cda:	d83c      	bhi.n	8002d56 <ADC_ConfigureBoostMode+0x116>
 8002cdc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ce0:	d01a      	beq.n	8002d18 <ADC_ConfigureBoostMode+0xd8>
 8002ce2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ce6:	d836      	bhi.n	8002d56 <ADC_ConfigureBoostMode+0x116>
 8002ce8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002cec:	d014      	beq.n	8002d18 <ADC_ConfigureBoostMode+0xd8>
 8002cee:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002cf2:	d830      	bhi.n	8002d56 <ADC_ConfigureBoostMode+0x116>
 8002cf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cf8:	d00e      	beq.n	8002d18 <ADC_ConfigureBoostMode+0xd8>
 8002cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cfe:	d82a      	bhi.n	8002d56 <ADC_ConfigureBoostMode+0x116>
 8002d00:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d04:	d008      	beq.n	8002d18 <ADC_ConfigureBoostMode+0xd8>
 8002d06:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d0a:	d824      	bhi.n	8002d56 <ADC_ConfigureBoostMode+0x116>
 8002d0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d10:	d002      	beq.n	8002d18 <ADC_ConfigureBoostMode+0xd8>
 8002d12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d16:	d11e      	bne.n	8002d56 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	0c9b      	lsrs	r3, r3, #18
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	60fb      	str	r3, [r7, #12]
        break;
 8002d28:	e016      	b.n	8002d58 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
        break;
 8002d30:	e012      	b.n	8002d58 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	60fb      	str	r3, [r7, #12]
        break;
 8002d38:	e00e      	b.n	8002d58 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	60fb      	str	r3, [r7, #12]
        break;
 8002d40:	e00a      	b.n	8002d58 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	09db      	lsrs	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]
        break;
 8002d48:	e006      	b.n	8002d58 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	60fb      	str	r3, [r7, #12]
        break;
 8002d50:	e002      	b.n	8002d58 <ADC_ConfigureBoostMode+0x118>
        break;
 8002d52:	bf00      	nop
 8002d54:	e000      	b.n	8002d58 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002d56:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd0 <ADC_ConfigureBoostMode+0x190>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d808      	bhi.n	8002d78 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002d74:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d76:	e025      	b.n	8002dc4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4a16      	ldr	r2, [pc, #88]	@ (8002dd4 <ADC_ConfigureBoostMode+0x194>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d80a      	bhi.n	8002d96 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	e016      	b.n	8002dc4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd8 <ADC_ConfigureBoostMode+0x198>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d80a      	bhi.n	8002db4 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db0:	609a      	str	r2, [r3, #8]
}
 8002db2:	e007      	b.n	8002dc4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002dc2:	609a      	str	r2, [r3, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40022300 	.word	0x40022300
 8002dd0:	005f5e10 	.word	0x005f5e10
 8002dd4:	00bebc20 	.word	0x00bebc20
 8002dd8:	017d7840 	.word	0x017d7840

08002ddc <LL_ADC_IsEnabled>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <LL_ADC_IsEnabled+0x18>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <LL_ADC_IsEnabled+0x1a>
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d101      	bne.n	8002e1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b09f      	sub	sp, #124	@ 0x7c
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e080      	b.n	8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d102      	bne.n	8002e66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e60:	4b3c      	ldr	r3, [pc, #240]	@ (8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	e001      	b.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10b      	bne.n	8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e05f      	b.n	8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ffb9 	bl	8002e02 <LL_ADC_REG_IsConversionOngoing>
 8002e90:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ffb3 	bl	8002e02 <LL_ADC_REG_IsConversionOngoing>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d141      	bne.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d13e      	bne.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002eaa:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ec6:	4822      	ldr	r0, [pc, #136]	@ (8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ec8:	f7ff ff88 	bl	8002ddc <LL_ADC_IsEnabled>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	4821      	ldr	r0, [pc, #132]	@ (8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002ed0:	f7ff ff84 	bl	8002ddc <LL_ADC_IsEnabled>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4323      	orrs	r3, r4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d12e      	bne.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	6811      	ldr	r1, [r2, #0]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	6892      	ldr	r2, [r2, #8]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef4:	e021      	b.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f00:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f02:	4813      	ldr	r0, [pc, #76]	@ (8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f04:	f7ff ff6a 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f08:	4604      	mov	r4, r0
 8002f0a:	4812      	ldr	r0, [pc, #72]	@ (8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f0c:	f7ff ff66 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f10:	4603      	mov	r3, r0
 8002f12:	4323      	orrs	r3, r4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d110      	bne.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f22:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f24:	e009      	b.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002f38:	e000      	b.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f3a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f44:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	377c      	adds	r7, #124	@ 0x7c
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}
 8002f50:	40022000 	.word	0x40022000
 8002f54:	40022100 	.word	0x40022100
 8002f58:	40022300 	.word	0x40022300
 8002f5c:	fffff0e0 	.word	0xfffff0e0

08002f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8e:	4a04      	ldr	r2, [pc, #16]	@ (8002fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	60d3      	str	r3, [r2, #12]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00
 8002fa4:	05fa0000 	.word	0x05fa0000

08002fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fac:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	f003 0307 	and.w	r3, r3, #7
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	db0b      	blt.n	8002fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	4907      	ldr	r1, [pc, #28]	@ (8002ffc <__NVIC_EnableIRQ+0x38>)
 8002fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000e100 	.word	0xe000e100

08003000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800300c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003010:	2b00      	cmp	r3, #0
 8003012:	db0a      	blt.n	800302a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	b2da      	uxtb	r2, r3
 8003018:	490c      	ldr	r1, [pc, #48]	@ (800304c <__NVIC_SetPriority+0x4c>)
 800301a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	440b      	add	r3, r1
 8003024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003028:	e00a      	b.n	8003040 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4908      	ldr	r1, [pc, #32]	@ (8003050 <__NVIC_SetPriority+0x50>)
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	3b04      	subs	r3, #4
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	440b      	add	r3, r1
 800303e:	761a      	strb	r2, [r3, #24]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000e100 	.word	0xe000e100
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	@ 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f1c3 0307 	rsb	r3, r3, #7
 800306e:	2b04      	cmp	r3, #4
 8003070:	bf28      	it	cs
 8003072:	2304      	movcs	r3, #4
 8003074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3304      	adds	r3, #4
 800307a:	2b06      	cmp	r3, #6
 800307c:	d902      	bls.n	8003084 <NVIC_EncodePriority+0x30>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3b03      	subs	r3, #3
 8003082:	e000      	b.n	8003086 <NVIC_EncodePriority+0x32>
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003088:	f04f 32ff 	mov.w	r2, #4294967295
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	401a      	ands	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800309c:	f04f 31ff 	mov.w	r1, #4294967295
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43d9      	mvns	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	4313      	orrs	r3, r2
         );
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3724      	adds	r7, #36	@ 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030cc:	d301      	bcc.n	80030d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00f      	b.n	80030f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d2:	4a0a      	ldr	r2, [pc, #40]	@ (80030fc <SysTick_Config+0x40>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030da:	210f      	movs	r1, #15
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	f7ff ff8e 	bl	8003000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e4:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <SysTick_Config+0x40>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ea:	4b04      	ldr	r3, [pc, #16]	@ (80030fc <SysTick_Config+0x40>)
 80030ec:	2207      	movs	r2, #7
 80030ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	e000e010 	.word	0xe000e010

08003100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ff29 	bl	8002f60 <__NVIC_SetPriorityGrouping>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003124:	f7ff ff40 	bl	8002fa8 <__NVIC_GetPriorityGrouping>
 8003128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff90 	bl	8003054 <NVIC_EncodePriority>
 8003134:	4602      	mov	r2, r0
 8003136:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff5f 	bl	8003000 <__NVIC_SetPriority>
}
 8003142:	bf00      	nop
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff33 	bl	8002fc4 <__NVIC_EnableIRQ>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ffa4 	bl	80030bc <SysTick_Config>
 8003174:	4603      	mov	r3, r0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003188:	f7fe fd4a 	bl	8001c20 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e37d      	b.n	8003894 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a66      	ldr	r2, [pc, #408]	@ (8003338 <HAL_DMA_Init+0x1b8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d04a      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a65      	ldr	r2, [pc, #404]	@ (800333c <HAL_DMA_Init+0x1bc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d045      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a63      	ldr	r2, [pc, #396]	@ (8003340 <HAL_DMA_Init+0x1c0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d040      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a62      	ldr	r2, [pc, #392]	@ (8003344 <HAL_DMA_Init+0x1c4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d03b      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a60      	ldr	r2, [pc, #384]	@ (8003348 <HAL_DMA_Init+0x1c8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d036      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5f      	ldr	r2, [pc, #380]	@ (800334c <HAL_DMA_Init+0x1cc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d031      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003350 <HAL_DMA_Init+0x1d0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d02c      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003354 <HAL_DMA_Init+0x1d4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d027      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003358 <HAL_DMA_Init+0x1d8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d022      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a59      	ldr	r2, [pc, #356]	@ (800335c <HAL_DMA_Init+0x1dc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d01d      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a57      	ldr	r2, [pc, #348]	@ (8003360 <HAL_DMA_Init+0x1e0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d018      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a56      	ldr	r2, [pc, #344]	@ (8003364 <HAL_DMA_Init+0x1e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a54      	ldr	r2, [pc, #336]	@ (8003368 <HAL_DMA_Init+0x1e8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a53      	ldr	r2, [pc, #332]	@ (800336c <HAL_DMA_Init+0x1ec>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a51      	ldr	r2, [pc, #324]	@ (8003370 <HAL_DMA_Init+0x1f0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_DMA_Init+0xb8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a50      	ldr	r2, [pc, #320]	@ (8003374 <HAL_DMA_Init+0x1f4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_DMA_Init+0xbc>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_DMA_Init+0xbe>
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 813c 	beq.w	80034bc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a37      	ldr	r2, [pc, #220]	@ (8003338 <HAL_DMA_Init+0x1b8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d04a      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a36      	ldr	r2, [pc, #216]	@ (800333c <HAL_DMA_Init+0x1bc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d045      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a34      	ldr	r2, [pc, #208]	@ (8003340 <HAL_DMA_Init+0x1c0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d040      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a33      	ldr	r2, [pc, #204]	@ (8003344 <HAL_DMA_Init+0x1c4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d03b      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a31      	ldr	r2, [pc, #196]	@ (8003348 <HAL_DMA_Init+0x1c8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d036      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a30      	ldr	r2, [pc, #192]	@ (800334c <HAL_DMA_Init+0x1cc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d031      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2e      	ldr	r2, [pc, #184]	@ (8003350 <HAL_DMA_Init+0x1d0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02c      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2d      	ldr	r2, [pc, #180]	@ (8003354 <HAL_DMA_Init+0x1d4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d027      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003358 <HAL_DMA_Init+0x1d8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d022      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2a      	ldr	r2, [pc, #168]	@ (800335c <HAL_DMA_Init+0x1dc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d01d      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a28      	ldr	r2, [pc, #160]	@ (8003360 <HAL_DMA_Init+0x1e0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d018      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <HAL_DMA_Init+0x1e4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a25      	ldr	r2, [pc, #148]	@ (8003368 <HAL_DMA_Init+0x1e8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00e      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a24      	ldr	r2, [pc, #144]	@ (800336c <HAL_DMA_Init+0x1ec>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a22      	ldr	r2, [pc, #136]	@ (8003370 <HAL_DMA_Init+0x1f0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_DMA_Init+0x174>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <HAL_DMA_Init+0x1f4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d108      	bne.n	8003306 <HAL_DMA_Init+0x186>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e007      	b.n	8003316 <HAL_DMA_Init+0x196>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003316:	e02f      	b.n	8003378 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003318:	f7fe fc82 	bl	8001c20 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b05      	cmp	r3, #5
 8003324:	d928      	bls.n	8003378 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2203      	movs	r2, #3
 8003330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e2ad      	b.n	8003894 <HAL_DMA_Init+0x714>
 8003338:	40020010 	.word	0x40020010
 800333c:	40020028 	.word	0x40020028
 8003340:	40020040 	.word	0x40020040
 8003344:	40020058 	.word	0x40020058
 8003348:	40020070 	.word	0x40020070
 800334c:	40020088 	.word	0x40020088
 8003350:	400200a0 	.word	0x400200a0
 8003354:	400200b8 	.word	0x400200b8
 8003358:	40020410 	.word	0x40020410
 800335c:	40020428 	.word	0x40020428
 8003360:	40020440 	.word	0x40020440
 8003364:	40020458 	.word	0x40020458
 8003368:	40020470 	.word	0x40020470
 800336c:	40020488 	.word	0x40020488
 8003370:	400204a0 	.word	0x400204a0
 8003374:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1c8      	bne.n	8003318 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4b73      	ldr	r3, [pc, #460]	@ (8003560 <HAL_DMA_Init+0x3e0>)
 8003392:	4013      	ands	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800339e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d107      	bne.n	80033dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	4313      	orrs	r3, r2
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b28      	cmp	r3, #40	@ 0x28
 80033e2:	d903      	bls.n	80033ec <HAL_DMA_Init+0x26c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80033ea:	d91f      	bls.n	800342c <HAL_DMA_Init+0x2ac>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80033f2:	d903      	bls.n	80033fc <HAL_DMA_Init+0x27c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b42      	cmp	r3, #66	@ 0x42
 80033fa:	d917      	bls.n	800342c <HAL_DMA_Init+0x2ac>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b46      	cmp	r3, #70	@ 0x46
 8003402:	d903      	bls.n	800340c <HAL_DMA_Init+0x28c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b48      	cmp	r3, #72	@ 0x48
 800340a:	d90f      	bls.n	800342c <HAL_DMA_Init+0x2ac>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b4e      	cmp	r3, #78	@ 0x4e
 8003412:	d903      	bls.n	800341c <HAL_DMA_Init+0x29c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b52      	cmp	r3, #82	@ 0x52
 800341a:	d907      	bls.n	800342c <HAL_DMA_Init+0x2ac>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b73      	cmp	r3, #115	@ 0x73
 8003422:	d905      	bls.n	8003430 <HAL_DMA_Init+0x2b0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b77      	cmp	r3, #119	@ 0x77
 800342a:	d801      	bhi.n	8003430 <HAL_DMA_Init+0x2b0>
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <HAL_DMA_Init+0x2b2>
 8003430:	2300      	movs	r3, #0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800343c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 0307 	bic.w	r3, r3, #7
 8003454:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	2b04      	cmp	r3, #4
 8003466:	d117      	bne.n	8003498 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00e      	beq.n	8003498 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f001 fe70 	bl	8005160 <DMA_CheckFifoParam>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2240      	movs	r2, #64	@ 0x40
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e1fd      	b.n	8003894 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f001 fdab 	bl	8004ffc <DMA_CalcBaseAndBitshift>
 80034a6:	4603      	mov	r3, r0
 80034a8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	223f      	movs	r2, #63	@ 0x3f
 80034b4:	409a      	lsls	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	e0fd      	b.n	80036b8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a28      	ldr	r2, [pc, #160]	@ (8003564 <HAL_DMA_Init+0x3e4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d04a      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a27      	ldr	r2, [pc, #156]	@ (8003568 <HAL_DMA_Init+0x3e8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d045      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a25      	ldr	r2, [pc, #148]	@ (800356c <HAL_DMA_Init+0x3ec>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d040      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a24      	ldr	r2, [pc, #144]	@ (8003570 <HAL_DMA_Init+0x3f0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d03b      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a22      	ldr	r2, [pc, #136]	@ (8003574 <HAL_DMA_Init+0x3f4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d036      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a21      	ldr	r2, [pc, #132]	@ (8003578 <HAL_DMA_Init+0x3f8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d031      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1f      	ldr	r2, [pc, #124]	@ (800357c <HAL_DMA_Init+0x3fc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d02c      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1e      	ldr	r2, [pc, #120]	@ (8003580 <HAL_DMA_Init+0x400>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d027      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1c      	ldr	r2, [pc, #112]	@ (8003584 <HAL_DMA_Init+0x404>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d022      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1b      	ldr	r2, [pc, #108]	@ (8003588 <HAL_DMA_Init+0x408>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d01d      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a19      	ldr	r2, [pc, #100]	@ (800358c <HAL_DMA_Init+0x40c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d018      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <HAL_DMA_Init+0x410>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d013      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <HAL_DMA_Init+0x414>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00e      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a15      	ldr	r2, [pc, #84]	@ (8003598 <HAL_DMA_Init+0x418>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d009      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a13      	ldr	r2, [pc, #76]	@ (800359c <HAL_DMA_Init+0x41c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_DMA_Init+0x3dc>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a12      	ldr	r2, [pc, #72]	@ (80035a0 <HAL_DMA_Init+0x420>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d123      	bne.n	80035a4 <HAL_DMA_Init+0x424>
 800355c:	2301      	movs	r3, #1
 800355e:	e022      	b.n	80035a6 <HAL_DMA_Init+0x426>
 8003560:	fe10803f 	.word	0xfe10803f
 8003564:	48022c08 	.word	0x48022c08
 8003568:	48022c1c 	.word	0x48022c1c
 800356c:	48022c30 	.word	0x48022c30
 8003570:	48022c44 	.word	0x48022c44
 8003574:	48022c58 	.word	0x48022c58
 8003578:	48022c6c 	.word	0x48022c6c
 800357c:	48022c80 	.word	0x48022c80
 8003580:	48022c94 	.word	0x48022c94
 8003584:	58025408 	.word	0x58025408
 8003588:	5802541c 	.word	0x5802541c
 800358c:	58025430 	.word	0x58025430
 8003590:	58025444 	.word	0x58025444
 8003594:	58025458 	.word	0x58025458
 8003598:	5802546c 	.word	0x5802546c
 800359c:	58025480 	.word	0x58025480
 80035a0:	58025494 	.word	0x58025494
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d07d      	beq.n	80036a6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a7f      	ldr	r2, [pc, #508]	@ (80037ac <HAL_DMA_Init+0x62c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d021      	beq.n	80035f8 <HAL_DMA_Init+0x478>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a7d      	ldr	r2, [pc, #500]	@ (80037b0 <HAL_DMA_Init+0x630>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01c      	beq.n	80035f8 <HAL_DMA_Init+0x478>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a7c      	ldr	r2, [pc, #496]	@ (80037b4 <HAL_DMA_Init+0x634>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d017      	beq.n	80035f8 <HAL_DMA_Init+0x478>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a7a      	ldr	r2, [pc, #488]	@ (80037b8 <HAL_DMA_Init+0x638>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d012      	beq.n	80035f8 <HAL_DMA_Init+0x478>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a79      	ldr	r2, [pc, #484]	@ (80037bc <HAL_DMA_Init+0x63c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00d      	beq.n	80035f8 <HAL_DMA_Init+0x478>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a77      	ldr	r2, [pc, #476]	@ (80037c0 <HAL_DMA_Init+0x640>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d008      	beq.n	80035f8 <HAL_DMA_Init+0x478>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a76      	ldr	r2, [pc, #472]	@ (80037c4 <HAL_DMA_Init+0x644>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <HAL_DMA_Init+0x478>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a74      	ldr	r2, [pc, #464]	@ (80037c8 <HAL_DMA_Init+0x648>)
 80035f6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4b6e      	ldr	r3, [pc, #440]	@ (80037cc <HAL_DMA_Init+0x64c>)
 8003614:	4013      	ands	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b40      	cmp	r3, #64	@ 0x40
 800361e:	d008      	beq.n	8003632 <HAL_DMA_Init+0x4b2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b80      	cmp	r3, #128	@ 0x80
 8003626:	d102      	bne.n	800362e <HAL_DMA_Init+0x4ae>
 8003628:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800362c:	e002      	b.n	8003634 <HAL_DMA_Init+0x4b4>
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_DMA_Init+0x4b4>
 8003632:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68d2      	ldr	r2, [r2, #12]
 8003638:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800363a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003642:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800364a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003652:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800365a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003662:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	4b55      	ldr	r3, [pc, #340]	@ (80037d0 <HAL_DMA_Init+0x650>)
 800367a:	4413      	add	r3, r2
 800367c:	4a55      	ldr	r2, [pc, #340]	@ (80037d4 <HAL_DMA_Init+0x654>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	009a      	lsls	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f001 fcb6 	bl	8004ffc <DMA_CalcBaseAndBitshift>
 8003690:	4603      	mov	r3, r0
 8003692:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	2201      	movs	r2, #1
 800369e:	409a      	lsls	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	e008      	b.n	80036b8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2240      	movs	r2, #64	@ 0x40
 80036aa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2203      	movs	r2, #3
 80036b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0ed      	b.n	8003894 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a46      	ldr	r2, [pc, #280]	@ (80037d8 <HAL_DMA_Init+0x658>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d072      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a45      	ldr	r2, [pc, #276]	@ (80037dc <HAL_DMA_Init+0x65c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d06d      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a43      	ldr	r2, [pc, #268]	@ (80037e0 <HAL_DMA_Init+0x660>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d068      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a42      	ldr	r2, [pc, #264]	@ (80037e4 <HAL_DMA_Init+0x664>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d063      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a40      	ldr	r2, [pc, #256]	@ (80037e8 <HAL_DMA_Init+0x668>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d05e      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a3f      	ldr	r2, [pc, #252]	@ (80037ec <HAL_DMA_Init+0x66c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d059      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a3d      	ldr	r2, [pc, #244]	@ (80037f0 <HAL_DMA_Init+0x670>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d054      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a3c      	ldr	r2, [pc, #240]	@ (80037f4 <HAL_DMA_Init+0x674>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d04f      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a3a      	ldr	r2, [pc, #232]	@ (80037f8 <HAL_DMA_Init+0x678>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d04a      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a39      	ldr	r2, [pc, #228]	@ (80037fc <HAL_DMA_Init+0x67c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d045      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a37      	ldr	r2, [pc, #220]	@ (8003800 <HAL_DMA_Init+0x680>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d040      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a36      	ldr	r2, [pc, #216]	@ (8003804 <HAL_DMA_Init+0x684>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d03b      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a34      	ldr	r2, [pc, #208]	@ (8003808 <HAL_DMA_Init+0x688>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d036      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a33      	ldr	r2, [pc, #204]	@ (800380c <HAL_DMA_Init+0x68c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d031      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a31      	ldr	r2, [pc, #196]	@ (8003810 <HAL_DMA_Init+0x690>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02c      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a30      	ldr	r2, [pc, #192]	@ (8003814 <HAL_DMA_Init+0x694>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d027      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a13      	ldr	r2, [pc, #76]	@ (80037ac <HAL_DMA_Init+0x62c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d022      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a12      	ldr	r2, [pc, #72]	@ (80037b0 <HAL_DMA_Init+0x630>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d01d      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a10      	ldr	r2, [pc, #64]	@ (80037b4 <HAL_DMA_Init+0x634>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d018      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a0f      	ldr	r2, [pc, #60]	@ (80037b8 <HAL_DMA_Init+0x638>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0d      	ldr	r2, [pc, #52]	@ (80037bc <HAL_DMA_Init+0x63c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00e      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a0c      	ldr	r2, [pc, #48]	@ (80037c0 <HAL_DMA_Init+0x640>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0a      	ldr	r2, [pc, #40]	@ (80037c4 <HAL_DMA_Init+0x644>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_DMA_Init+0x628>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a09      	ldr	r2, [pc, #36]	@ (80037c8 <HAL_DMA_Init+0x648>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d137      	bne.n	8003818 <HAL_DMA_Init+0x698>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e036      	b.n	800381a <HAL_DMA_Init+0x69a>
 80037ac:	58025408 	.word	0x58025408
 80037b0:	5802541c 	.word	0x5802541c
 80037b4:	58025430 	.word	0x58025430
 80037b8:	58025444 	.word	0x58025444
 80037bc:	58025458 	.word	0x58025458
 80037c0:	5802546c 	.word	0x5802546c
 80037c4:	58025480 	.word	0x58025480
 80037c8:	58025494 	.word	0x58025494
 80037cc:	fffe000f 	.word	0xfffe000f
 80037d0:	a7fdabf8 	.word	0xa7fdabf8
 80037d4:	cccccccd 	.word	0xcccccccd
 80037d8:	40020010 	.word	0x40020010
 80037dc:	40020028 	.word	0x40020028
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020058 	.word	0x40020058
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40020088 	.word	0x40020088
 80037f0:	400200a0 	.word	0x400200a0
 80037f4:	400200b8 	.word	0x400200b8
 80037f8:	40020410 	.word	0x40020410
 80037fc:	40020428 	.word	0x40020428
 8003800:	40020440 	.word	0x40020440
 8003804:	40020458 	.word	0x40020458
 8003808:	40020470 	.word	0x40020470
 800380c:	40020488 	.word	0x40020488
 8003810:	400204a0 	.word	0x400204a0
 8003814:	400204b8 	.word	0x400204b8
 8003818:	2300      	movs	r3, #0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d032      	beq.n	8003884 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f001 fd1a 	bl	8005258 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b80      	cmp	r3, #128	@ 0x80
 800382a:	d102      	bne.n	8003832 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003846:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d010      	beq.n	8003872 <HAL_DMA_Init+0x6f2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d80c      	bhi.n	8003872 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f001 fd97 	bl	800538c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	e008      	b.n	8003884 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e226      	b.n	8003d06 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_DMA_Start_IT+0x2a>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e21f      	b.n	8003d06 <HAL_DMA_Start_IT+0x46a>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	f040 820a 	bne.w	8003cf0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a68      	ldr	r2, [pc, #416]	@ (8003a90 <HAL_DMA_Start_IT+0x1f4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d04a      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a66      	ldr	r2, [pc, #408]	@ (8003a94 <HAL_DMA_Start_IT+0x1f8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d045      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a65      	ldr	r2, [pc, #404]	@ (8003a98 <HAL_DMA_Start_IT+0x1fc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d040      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a63      	ldr	r2, [pc, #396]	@ (8003a9c <HAL_DMA_Start_IT+0x200>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d03b      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a62      	ldr	r2, [pc, #392]	@ (8003aa0 <HAL_DMA_Start_IT+0x204>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d036      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a60      	ldr	r2, [pc, #384]	@ (8003aa4 <HAL_DMA_Start_IT+0x208>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d031      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a5f      	ldr	r2, [pc, #380]	@ (8003aa8 <HAL_DMA_Start_IT+0x20c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d02c      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a5d      	ldr	r2, [pc, #372]	@ (8003aac <HAL_DMA_Start_IT+0x210>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d027      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ab0 <HAL_DMA_Start_IT+0x214>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d022      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a5a      	ldr	r2, [pc, #360]	@ (8003ab4 <HAL_DMA_Start_IT+0x218>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01d      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a59      	ldr	r2, [pc, #356]	@ (8003ab8 <HAL_DMA_Start_IT+0x21c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d018      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a57      	ldr	r2, [pc, #348]	@ (8003abc <HAL_DMA_Start_IT+0x220>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a56      	ldr	r2, [pc, #344]	@ (8003ac0 <HAL_DMA_Start_IT+0x224>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00e      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a54      	ldr	r2, [pc, #336]	@ (8003ac4 <HAL_DMA_Start_IT+0x228>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d009      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a53      	ldr	r2, [pc, #332]	@ (8003ac8 <HAL_DMA_Start_IT+0x22c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_DMA_Start_IT+0xee>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a51      	ldr	r2, [pc, #324]	@ (8003acc <HAL_DMA_Start_IT+0x230>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d108      	bne.n	800399c <HAL_DMA_Start_IT+0x100>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e007      	b.n	80039ac <HAL_DMA_Start_IT+0x110>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f001 f93e 	bl	8004c34 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a34      	ldr	r2, [pc, #208]	@ (8003a90 <HAL_DMA_Start_IT+0x1f4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d04a      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a33      	ldr	r2, [pc, #204]	@ (8003a94 <HAL_DMA_Start_IT+0x1f8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d045      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a31      	ldr	r2, [pc, #196]	@ (8003a98 <HAL_DMA_Start_IT+0x1fc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d040      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a30      	ldr	r2, [pc, #192]	@ (8003a9c <HAL_DMA_Start_IT+0x200>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d03b      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2e      	ldr	r2, [pc, #184]	@ (8003aa0 <HAL_DMA_Start_IT+0x204>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d036      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa4 <HAL_DMA_Start_IT+0x208>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d031      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa8 <HAL_DMA_Start_IT+0x20c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d02c      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2a      	ldr	r2, [pc, #168]	@ (8003aac <HAL_DMA_Start_IT+0x210>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d027      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a28      	ldr	r2, [pc, #160]	@ (8003ab0 <HAL_DMA_Start_IT+0x214>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d022      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a27      	ldr	r2, [pc, #156]	@ (8003ab4 <HAL_DMA_Start_IT+0x218>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d01d      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a25      	ldr	r2, [pc, #148]	@ (8003ab8 <HAL_DMA_Start_IT+0x21c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d018      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a24      	ldr	r2, [pc, #144]	@ (8003abc <HAL_DMA_Start_IT+0x220>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d013      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a22      	ldr	r2, [pc, #136]	@ (8003ac0 <HAL_DMA_Start_IT+0x224>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00e      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a21      	ldr	r2, [pc, #132]	@ (8003ac4 <HAL_DMA_Start_IT+0x228>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d009      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac8 <HAL_DMA_Start_IT+0x22c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_DMA_Start_IT+0x1bc>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1e      	ldr	r2, [pc, #120]	@ (8003acc <HAL_DMA_Start_IT+0x230>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d101      	bne.n	8003a5c <HAL_DMA_Start_IT+0x1c0>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_DMA_Start_IT+0x1c2>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d036      	beq.n	8003ad0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 021e 	bic.w	r2, r3, #30
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0216 	orr.w	r2, r2, #22
 8003a74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d03e      	beq.n	8003afc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0208 	orr.w	r2, r2, #8
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e035      	b.n	8003afc <HAL_DMA_Start_IT+0x260>
 8003a90:	40020010 	.word	0x40020010
 8003a94:	40020028 	.word	0x40020028
 8003a98:	40020040 	.word	0x40020040
 8003a9c:	40020058 	.word	0x40020058
 8003aa0:	40020070 	.word	0x40020070
 8003aa4:	40020088 	.word	0x40020088
 8003aa8:	400200a0 	.word	0x400200a0
 8003aac:	400200b8 	.word	0x400200b8
 8003ab0:	40020410 	.word	0x40020410
 8003ab4:	40020428 	.word	0x40020428
 8003ab8:	40020440 	.word	0x40020440
 8003abc:	40020458 	.word	0x40020458
 8003ac0:	40020470 	.word	0x40020470
 8003ac4:	40020488 	.word	0x40020488
 8003ac8:	400204a0 	.word	0x400204a0
 8003acc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 020e 	bic.w	r2, r3, #14
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 020a 	orr.w	r2, r2, #10
 8003ae2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0204 	orr.w	r2, r2, #4
 8003afa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a83      	ldr	r2, [pc, #524]	@ (8003d10 <HAL_DMA_Start_IT+0x474>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d072      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a82      	ldr	r2, [pc, #520]	@ (8003d14 <HAL_DMA_Start_IT+0x478>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d06d      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a80      	ldr	r2, [pc, #512]	@ (8003d18 <HAL_DMA_Start_IT+0x47c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d068      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a7f      	ldr	r2, [pc, #508]	@ (8003d1c <HAL_DMA_Start_IT+0x480>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d063      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a7d      	ldr	r2, [pc, #500]	@ (8003d20 <HAL_DMA_Start_IT+0x484>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d05e      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a7c      	ldr	r2, [pc, #496]	@ (8003d24 <HAL_DMA_Start_IT+0x488>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d059      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a7a      	ldr	r2, [pc, #488]	@ (8003d28 <HAL_DMA_Start_IT+0x48c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d054      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a79      	ldr	r2, [pc, #484]	@ (8003d2c <HAL_DMA_Start_IT+0x490>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d04f      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a77      	ldr	r2, [pc, #476]	@ (8003d30 <HAL_DMA_Start_IT+0x494>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d04a      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a76      	ldr	r2, [pc, #472]	@ (8003d34 <HAL_DMA_Start_IT+0x498>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d045      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a74      	ldr	r2, [pc, #464]	@ (8003d38 <HAL_DMA_Start_IT+0x49c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d040      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a73      	ldr	r2, [pc, #460]	@ (8003d3c <HAL_DMA_Start_IT+0x4a0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d03b      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a71      	ldr	r2, [pc, #452]	@ (8003d40 <HAL_DMA_Start_IT+0x4a4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d036      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a70      	ldr	r2, [pc, #448]	@ (8003d44 <HAL_DMA_Start_IT+0x4a8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d031      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d48 <HAL_DMA_Start_IT+0x4ac>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d02c      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a6d      	ldr	r2, [pc, #436]	@ (8003d4c <HAL_DMA_Start_IT+0x4b0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d027      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6b      	ldr	r2, [pc, #428]	@ (8003d50 <HAL_DMA_Start_IT+0x4b4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d022      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6a      	ldr	r2, [pc, #424]	@ (8003d54 <HAL_DMA_Start_IT+0x4b8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d01d      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a68      	ldr	r2, [pc, #416]	@ (8003d58 <HAL_DMA_Start_IT+0x4bc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d018      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a67      	ldr	r2, [pc, #412]	@ (8003d5c <HAL_DMA_Start_IT+0x4c0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d013      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a65      	ldr	r2, [pc, #404]	@ (8003d60 <HAL_DMA_Start_IT+0x4c4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00e      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a64      	ldr	r2, [pc, #400]	@ (8003d64 <HAL_DMA_Start_IT+0x4c8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d009      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a62      	ldr	r2, [pc, #392]	@ (8003d68 <HAL_DMA_Start_IT+0x4cc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d004      	beq.n	8003bec <HAL_DMA_Start_IT+0x350>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a61      	ldr	r2, [pc, #388]	@ (8003d6c <HAL_DMA_Start_IT+0x4d0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_DMA_Start_IT+0x354>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <HAL_DMA_Start_IT+0x356>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d01a      	beq.n	8003c2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a37      	ldr	r2, [pc, #220]	@ (8003d10 <HAL_DMA_Start_IT+0x474>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d04a      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a36      	ldr	r2, [pc, #216]	@ (8003d14 <HAL_DMA_Start_IT+0x478>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d045      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a34      	ldr	r2, [pc, #208]	@ (8003d18 <HAL_DMA_Start_IT+0x47c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d040      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a33      	ldr	r2, [pc, #204]	@ (8003d1c <HAL_DMA_Start_IT+0x480>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d03b      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a31      	ldr	r2, [pc, #196]	@ (8003d20 <HAL_DMA_Start_IT+0x484>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d036      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a30      	ldr	r2, [pc, #192]	@ (8003d24 <HAL_DMA_Start_IT+0x488>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d031      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003d28 <HAL_DMA_Start_IT+0x48c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d02c      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2d      	ldr	r2, [pc, #180]	@ (8003d2c <HAL_DMA_Start_IT+0x490>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d027      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2b      	ldr	r2, [pc, #172]	@ (8003d30 <HAL_DMA_Start_IT+0x494>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d022      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d34 <HAL_DMA_Start_IT+0x498>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d01d      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a28      	ldr	r2, [pc, #160]	@ (8003d38 <HAL_DMA_Start_IT+0x49c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d018      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <HAL_DMA_Start_IT+0x4a0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a25      	ldr	r2, [pc, #148]	@ (8003d40 <HAL_DMA_Start_IT+0x4a4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00e      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a24      	ldr	r2, [pc, #144]	@ (8003d44 <HAL_DMA_Start_IT+0x4a8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d009      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a22      	ldr	r2, [pc, #136]	@ (8003d48 <HAL_DMA_Start_IT+0x4ac>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <HAL_DMA_Start_IT+0x430>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a21      	ldr	r2, [pc, #132]	@ (8003d4c <HAL_DMA_Start_IT+0x4b0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d108      	bne.n	8003cde <HAL_DMA_Start_IT+0x442>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e012      	b.n	8003d04 <HAL_DMA_Start_IT+0x468>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0201 	orr.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e009      	b.n	8003d04 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cf6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40020010 	.word	0x40020010
 8003d14:	40020028 	.word	0x40020028
 8003d18:	40020040 	.word	0x40020040
 8003d1c:	40020058 	.word	0x40020058
 8003d20:	40020070 	.word	0x40020070
 8003d24:	40020088 	.word	0x40020088
 8003d28:	400200a0 	.word	0x400200a0
 8003d2c:	400200b8 	.word	0x400200b8
 8003d30:	40020410 	.word	0x40020410
 8003d34:	40020428 	.word	0x40020428
 8003d38:	40020440 	.word	0x40020440
 8003d3c:	40020458 	.word	0x40020458
 8003d40:	40020470 	.word	0x40020470
 8003d44:	40020488 	.word	0x40020488
 8003d48:	400204a0 	.word	0x400204a0
 8003d4c:	400204b8 	.word	0x400204b8
 8003d50:	58025408 	.word	0x58025408
 8003d54:	5802541c 	.word	0x5802541c
 8003d58:	58025430 	.word	0x58025430
 8003d5c:	58025444 	.word	0x58025444
 8003d60:	58025458 	.word	0x58025458
 8003d64:	5802546c 	.word	0x5802546c
 8003d68:	58025480 	.word	0x58025480
 8003d6c:	58025494 	.word	0x58025494

08003d70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	@ 0x28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d7c:	4b67      	ldr	r3, [pc, #412]	@ (8003f1c <HAL_DMA_IRQHandler+0x1ac>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a67      	ldr	r2, [pc, #412]	@ (8003f20 <HAL_DMA_IRQHandler+0x1b0>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	0a9b      	lsrs	r3, r3, #10
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a5f      	ldr	r2, [pc, #380]	@ (8003f24 <HAL_DMA_IRQHandler+0x1b4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d04a      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a5d      	ldr	r2, [pc, #372]	@ (8003f28 <HAL_DMA_IRQHandler+0x1b8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d045      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a5c      	ldr	r2, [pc, #368]	@ (8003f2c <HAL_DMA_IRQHandler+0x1bc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d040      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f30 <HAL_DMA_IRQHandler+0x1c0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d03b      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a59      	ldr	r2, [pc, #356]	@ (8003f34 <HAL_DMA_IRQHandler+0x1c4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d036      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a57      	ldr	r2, [pc, #348]	@ (8003f38 <HAL_DMA_IRQHandler+0x1c8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d031      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a56      	ldr	r2, [pc, #344]	@ (8003f3c <HAL_DMA_IRQHandler+0x1cc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d02c      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a54      	ldr	r2, [pc, #336]	@ (8003f40 <HAL_DMA_IRQHandler+0x1d0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d027      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a53      	ldr	r2, [pc, #332]	@ (8003f44 <HAL_DMA_IRQHandler+0x1d4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d022      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a51      	ldr	r2, [pc, #324]	@ (8003f48 <HAL_DMA_IRQHandler+0x1d8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01d      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a50      	ldr	r2, [pc, #320]	@ (8003f4c <HAL_DMA_IRQHandler+0x1dc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d018      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a4e      	ldr	r2, [pc, #312]	@ (8003f50 <HAL_DMA_IRQHandler+0x1e0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a4d      	ldr	r2, [pc, #308]	@ (8003f54 <HAL_DMA_IRQHandler+0x1e4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00e      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a4b      	ldr	r2, [pc, #300]	@ (8003f58 <HAL_DMA_IRQHandler+0x1e8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a4a      	ldr	r2, [pc, #296]	@ (8003f5c <HAL_DMA_IRQHandler+0x1ec>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xd2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a48      	ldr	r2, [pc, #288]	@ (8003f60 <HAL_DMA_IRQHandler+0x1f0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <HAL_DMA_IRQHandler+0xd6>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <HAL_DMA_IRQHandler+0xd8>
 8003e46:	2300      	movs	r3, #0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 842b 	beq.w	80046a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2208      	movs	r2, #8
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80a2 	beq.w	8003fa8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a2e      	ldr	r2, [pc, #184]	@ (8003f24 <HAL_DMA_IRQHandler+0x1b4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d04a      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2d      	ldr	r2, [pc, #180]	@ (8003f28 <HAL_DMA_IRQHandler+0x1b8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d045      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f2c <HAL_DMA_IRQHandler+0x1bc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d040      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2a      	ldr	r2, [pc, #168]	@ (8003f30 <HAL_DMA_IRQHandler+0x1c0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d03b      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a28      	ldr	r2, [pc, #160]	@ (8003f34 <HAL_DMA_IRQHandler+0x1c4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d036      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a27      	ldr	r2, [pc, #156]	@ (8003f38 <HAL_DMA_IRQHandler+0x1c8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d031      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	@ (8003f3c <HAL_DMA_IRQHandler+0x1cc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d02c      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a24      	ldr	r2, [pc, #144]	@ (8003f40 <HAL_DMA_IRQHandler+0x1d0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d027      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a22      	ldr	r2, [pc, #136]	@ (8003f44 <HAL_DMA_IRQHandler+0x1d4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d022      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a21      	ldr	r2, [pc, #132]	@ (8003f48 <HAL_DMA_IRQHandler+0x1d8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d01d      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f4c <HAL_DMA_IRQHandler+0x1dc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d018      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f50 <HAL_DMA_IRQHandler+0x1e0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f54 <HAL_DMA_IRQHandler+0x1e4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1b      	ldr	r2, [pc, #108]	@ (8003f58 <HAL_DMA_IRQHandler+0x1e8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a19      	ldr	r2, [pc, #100]	@ (8003f5c <HAL_DMA_IRQHandler+0x1ec>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x194>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a18      	ldr	r2, [pc, #96]	@ (8003f60 <HAL_DMA_IRQHandler+0x1f0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d12f      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x1f4>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bf14      	ite	ne
 8003f12:	2301      	movne	r3, #1
 8003f14:	2300      	moveq	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	e02e      	b.n	8003f78 <HAL_DMA_IRQHandler+0x208>
 8003f1a:	bf00      	nop
 8003f1c:	24000000 	.word	0x24000000
 8003f20:	1b4e81b5 	.word	0x1b4e81b5
 8003f24:	40020010 	.word	0x40020010
 8003f28:	40020028 	.word	0x40020028
 8003f2c:	40020040 	.word	0x40020040
 8003f30:	40020058 	.word	0x40020058
 8003f34:	40020070 	.word	0x40020070
 8003f38:	40020088 	.word	0x40020088
 8003f3c:	400200a0 	.word	0x400200a0
 8003f40:	400200b8 	.word	0x400200b8
 8003f44:	40020410 	.word	0x40020410
 8003f48:	40020428 	.word	0x40020428
 8003f4c:	40020440 	.word	0x40020440
 8003f50:	40020458 	.word	0x40020458
 8003f54:	40020470 	.word	0x40020470
 8003f58:	40020488 	.word	0x40020488
 8003f5c:	400204a0 	.word	0x400204a0
 8003f60:	400204b8 	.word	0x400204b8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bf14      	ite	ne
 8003f72:	2301      	movne	r3, #1
 8003f74:	2300      	moveq	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d015      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0204 	bic.w	r2, r2, #4
 8003f8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2208      	movs	r2, #8
 8003f96:	409a      	lsls	r2, r3
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa0:	f043 0201 	orr.w	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d06e      	beq.n	800409c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a69      	ldr	r2, [pc, #420]	@ (8004168 <HAL_DMA_IRQHandler+0x3f8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d04a      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a67      	ldr	r2, [pc, #412]	@ (800416c <HAL_DMA_IRQHandler+0x3fc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d045      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a66      	ldr	r2, [pc, #408]	@ (8004170 <HAL_DMA_IRQHandler+0x400>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d040      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a64      	ldr	r2, [pc, #400]	@ (8004174 <HAL_DMA_IRQHandler+0x404>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d03b      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a63      	ldr	r2, [pc, #396]	@ (8004178 <HAL_DMA_IRQHandler+0x408>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d036      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a61      	ldr	r2, [pc, #388]	@ (800417c <HAL_DMA_IRQHandler+0x40c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d031      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a60      	ldr	r2, [pc, #384]	@ (8004180 <HAL_DMA_IRQHandler+0x410>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d02c      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a5e      	ldr	r2, [pc, #376]	@ (8004184 <HAL_DMA_IRQHandler+0x414>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d027      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a5d      	ldr	r2, [pc, #372]	@ (8004188 <HAL_DMA_IRQHandler+0x418>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d022      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a5b      	ldr	r2, [pc, #364]	@ (800418c <HAL_DMA_IRQHandler+0x41c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01d      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a5a      	ldr	r2, [pc, #360]	@ (8004190 <HAL_DMA_IRQHandler+0x420>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a58      	ldr	r2, [pc, #352]	@ (8004194 <HAL_DMA_IRQHandler+0x424>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a57      	ldr	r2, [pc, #348]	@ (8004198 <HAL_DMA_IRQHandler+0x428>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a55      	ldr	r2, [pc, #340]	@ (800419c <HAL_DMA_IRQHandler+0x42c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a54      	ldr	r2, [pc, #336]	@ (80041a0 <HAL_DMA_IRQHandler+0x430>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_DMA_IRQHandler+0x2ee>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a52      	ldr	r2, [pc, #328]	@ (80041a4 <HAL_DMA_IRQHandler+0x434>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10a      	bne.n	8004074 <HAL_DMA_IRQHandler+0x304>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	e003      	b.n	800407c <HAL_DMA_IRQHandler+0x30c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2300      	movs	r3, #0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	2201      	movs	r2, #1
 800408a:	409a      	lsls	r2, r3
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004094:	f043 0202 	orr.w	r2, r3, #2
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	2204      	movs	r2, #4
 80040a6:	409a      	lsls	r2, r3
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 808f 	beq.w	80041d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004168 <HAL_DMA_IRQHandler+0x3f8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d04a      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2a      	ldr	r2, [pc, #168]	@ (800416c <HAL_DMA_IRQHandler+0x3fc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d045      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a29      	ldr	r2, [pc, #164]	@ (8004170 <HAL_DMA_IRQHandler+0x400>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d040      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a27      	ldr	r2, [pc, #156]	@ (8004174 <HAL_DMA_IRQHandler+0x404>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d03b      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a26      	ldr	r2, [pc, #152]	@ (8004178 <HAL_DMA_IRQHandler+0x408>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d036      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a24      	ldr	r2, [pc, #144]	@ (800417c <HAL_DMA_IRQHandler+0x40c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d031      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a23      	ldr	r2, [pc, #140]	@ (8004180 <HAL_DMA_IRQHandler+0x410>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d02c      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a21      	ldr	r2, [pc, #132]	@ (8004184 <HAL_DMA_IRQHandler+0x414>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d027      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <HAL_DMA_IRQHandler+0x418>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d022      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1e      	ldr	r2, [pc, #120]	@ (800418c <HAL_DMA_IRQHandler+0x41c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01d      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <HAL_DMA_IRQHandler+0x420>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d018      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <HAL_DMA_IRQHandler+0x424>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1a      	ldr	r2, [pc, #104]	@ (8004198 <HAL_DMA_IRQHandler+0x428>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00e      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a18      	ldr	r2, [pc, #96]	@ (800419c <HAL_DMA_IRQHandler+0x42c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d009      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a17      	ldr	r2, [pc, #92]	@ (80041a0 <HAL_DMA_IRQHandler+0x430>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <HAL_DMA_IRQHandler+0x3e2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a15      	ldr	r2, [pc, #84]	@ (80041a4 <HAL_DMA_IRQHandler+0x434>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d12a      	bne.n	80041a8 <HAL_DMA_IRQHandler+0x438>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e023      	b.n	80041b0 <HAL_DMA_IRQHandler+0x440>
 8004168:	40020010 	.word	0x40020010
 800416c:	40020028 	.word	0x40020028
 8004170:	40020040 	.word	0x40020040
 8004174:	40020058 	.word	0x40020058
 8004178:	40020070 	.word	0x40020070
 800417c:	40020088 	.word	0x40020088
 8004180:	400200a0 	.word	0x400200a0
 8004184:	400200b8 	.word	0x400200b8
 8004188:	40020410 	.word	0x40020410
 800418c:	40020428 	.word	0x40020428
 8004190:	40020440 	.word	0x40020440
 8004194:	40020458 	.word	0x40020458
 8004198:	40020470 	.word	0x40020470
 800419c:	40020488 	.word	0x40020488
 80041a0:	400204a0 	.word	0x400204a0
 80041a4:	400204b8 	.word	0x400204b8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2300      	movs	r3, #0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	2204      	movs	r2, #4
 80041be:	409a      	lsls	r2, r3
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	f043 0204 	orr.w	r2, r3, #4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	2210      	movs	r2, #16
 80041da:	409a      	lsls	r2, r3
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80a6 	beq.w	8004332 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a85      	ldr	r2, [pc, #532]	@ (8004400 <HAL_DMA_IRQHandler+0x690>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d04a      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a83      	ldr	r2, [pc, #524]	@ (8004404 <HAL_DMA_IRQHandler+0x694>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d045      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a82      	ldr	r2, [pc, #520]	@ (8004408 <HAL_DMA_IRQHandler+0x698>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d040      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a80      	ldr	r2, [pc, #512]	@ (800440c <HAL_DMA_IRQHandler+0x69c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d03b      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a7f      	ldr	r2, [pc, #508]	@ (8004410 <HAL_DMA_IRQHandler+0x6a0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d036      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a7d      	ldr	r2, [pc, #500]	@ (8004414 <HAL_DMA_IRQHandler+0x6a4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d031      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7c      	ldr	r2, [pc, #496]	@ (8004418 <HAL_DMA_IRQHandler+0x6a8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d02c      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a7a      	ldr	r2, [pc, #488]	@ (800441c <HAL_DMA_IRQHandler+0x6ac>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a79      	ldr	r2, [pc, #484]	@ (8004420 <HAL_DMA_IRQHandler+0x6b0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a77      	ldr	r2, [pc, #476]	@ (8004424 <HAL_DMA_IRQHandler+0x6b4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01d      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a76      	ldr	r2, [pc, #472]	@ (8004428 <HAL_DMA_IRQHandler+0x6b8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a74      	ldr	r2, [pc, #464]	@ (800442c <HAL_DMA_IRQHandler+0x6bc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a73      	ldr	r2, [pc, #460]	@ (8004430 <HAL_DMA_IRQHandler+0x6c0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a71      	ldr	r2, [pc, #452]	@ (8004434 <HAL_DMA_IRQHandler+0x6c4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a70      	ldr	r2, [pc, #448]	@ (8004438 <HAL_DMA_IRQHandler+0x6c8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_DMA_IRQHandler+0x516>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a6e      	ldr	r2, [pc, #440]	@ (800443c <HAL_DMA_IRQHandler+0x6cc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10a      	bne.n	800429c <HAL_DMA_IRQHandler+0x52c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf14      	ite	ne
 8004294:	2301      	movne	r3, #1
 8004296:	2300      	moveq	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	e009      	b.n	80042b0 <HAL_DMA_IRQHandler+0x540>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d03e      	beq.n	8004332 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2210      	movs	r2, #16
 80042be:	409a      	lsls	r2, r3
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d018      	beq.n	8004304 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d108      	bne.n	80042f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d024      	beq.n	8004332 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4798      	blx	r3
 80042f0:	e01f      	b.n	8004332 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01b      	beq.n	8004332 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
 8004302:	e016      	b.n	8004332 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d107      	bne.n	8004322 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0208 	bic.w	r2, r2, #8
 8004320:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2220      	movs	r2, #32
 800433c:	409a      	lsls	r2, r3
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8110 	beq.w	8004568 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2c      	ldr	r2, [pc, #176]	@ (8004400 <HAL_DMA_IRQHandler+0x690>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d04a      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2b      	ldr	r2, [pc, #172]	@ (8004404 <HAL_DMA_IRQHandler+0x694>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d045      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a29      	ldr	r2, [pc, #164]	@ (8004408 <HAL_DMA_IRQHandler+0x698>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d040      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a28      	ldr	r2, [pc, #160]	@ (800440c <HAL_DMA_IRQHandler+0x69c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d03b      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a26      	ldr	r2, [pc, #152]	@ (8004410 <HAL_DMA_IRQHandler+0x6a0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d036      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a25      	ldr	r2, [pc, #148]	@ (8004414 <HAL_DMA_IRQHandler+0x6a4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d031      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a23      	ldr	r2, [pc, #140]	@ (8004418 <HAL_DMA_IRQHandler+0x6a8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d02c      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a22      	ldr	r2, [pc, #136]	@ (800441c <HAL_DMA_IRQHandler+0x6ac>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d027      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a20      	ldr	r2, [pc, #128]	@ (8004420 <HAL_DMA_IRQHandler+0x6b0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d022      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004424 <HAL_DMA_IRQHandler+0x6b4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d01d      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004428 <HAL_DMA_IRQHandler+0x6b8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d018      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1c      	ldr	r2, [pc, #112]	@ (800442c <HAL_DMA_IRQHandler+0x6bc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004430 <HAL_DMA_IRQHandler+0x6c0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a19      	ldr	r2, [pc, #100]	@ (8004434 <HAL_DMA_IRQHandler+0x6c4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a17      	ldr	r2, [pc, #92]	@ (8004438 <HAL_DMA_IRQHandler+0x6c8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x678>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a16      	ldr	r2, [pc, #88]	@ (800443c <HAL_DMA_IRQHandler+0x6cc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d12b      	bne.n	8004440 <HAL_DMA_IRQHandler+0x6d0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	e02a      	b.n	8004454 <HAL_DMA_IRQHandler+0x6e4>
 80043fe:	bf00      	nop
 8004400:	40020010 	.word	0x40020010
 8004404:	40020028 	.word	0x40020028
 8004408:	40020040 	.word	0x40020040
 800440c:	40020058 	.word	0x40020058
 8004410:	40020070 	.word	0x40020070
 8004414:	40020088 	.word	0x40020088
 8004418:	400200a0 	.word	0x400200a0
 800441c:	400200b8 	.word	0x400200b8
 8004420:	40020410 	.word	0x40020410
 8004424:	40020428 	.word	0x40020428
 8004428:	40020440 	.word	0x40020440
 800442c:	40020458 	.word	0x40020458
 8004430:	40020470 	.word	0x40020470
 8004434:	40020488 	.word	0x40020488
 8004438:	400204a0 	.word	0x400204a0
 800443c:	400204b8 	.word	0x400204b8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8087 	beq.w	8004568 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	2220      	movs	r2, #32
 8004464:	409a      	lsls	r2, r3
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b04      	cmp	r3, #4
 8004474:	d139      	bne.n	80044ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0216 	bic.w	r2, r2, #22
 8004484:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004494:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <HAL_DMA_IRQHandler+0x736>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0208 	bic.w	r2, r2, #8
 80044b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	223f      	movs	r2, #63	@ 0x3f
 80044c0:	409a      	lsls	r2, r3
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8382 	beq.w	8004be4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
          }
          return;
 80044e8:	e37c      	b.n	8004be4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d018      	beq.n	800452a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d108      	bne.n	8004518 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	2b00      	cmp	r3, #0
 800450c:	d02c      	beq.n	8004568 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4798      	blx	r3
 8004516:	e027      	b.n	8004568 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d023      	beq.n	8004568 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
 8004528:	e01e      	b.n	8004568 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10f      	bne.n	8004558 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0210 	bic.w	r2, r2, #16
 8004546:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 833e 	beq.w	8004bee <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8088 	beq.w	8004690 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2204      	movs	r2, #4
 8004584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a89      	ldr	r2, [pc, #548]	@ (80047b4 <HAL_DMA_IRQHandler+0xa44>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d04a      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a88      	ldr	r2, [pc, #544]	@ (80047b8 <HAL_DMA_IRQHandler+0xa48>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d045      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a86      	ldr	r2, [pc, #536]	@ (80047bc <HAL_DMA_IRQHandler+0xa4c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d040      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a85      	ldr	r2, [pc, #532]	@ (80047c0 <HAL_DMA_IRQHandler+0xa50>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d03b      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a83      	ldr	r2, [pc, #524]	@ (80047c4 <HAL_DMA_IRQHandler+0xa54>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d036      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a82      	ldr	r2, [pc, #520]	@ (80047c8 <HAL_DMA_IRQHandler+0xa58>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d031      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a80      	ldr	r2, [pc, #512]	@ (80047cc <HAL_DMA_IRQHandler+0xa5c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02c      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a7f      	ldr	r2, [pc, #508]	@ (80047d0 <HAL_DMA_IRQHandler+0xa60>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d027      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a7d      	ldr	r2, [pc, #500]	@ (80047d4 <HAL_DMA_IRQHandler+0xa64>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d022      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7c      	ldr	r2, [pc, #496]	@ (80047d8 <HAL_DMA_IRQHandler+0xa68>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d01d      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a7a      	ldr	r2, [pc, #488]	@ (80047dc <HAL_DMA_IRQHandler+0xa6c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d018      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a79      	ldr	r2, [pc, #484]	@ (80047e0 <HAL_DMA_IRQHandler+0xa70>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d013      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a77      	ldr	r2, [pc, #476]	@ (80047e4 <HAL_DMA_IRQHandler+0xa74>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00e      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a76      	ldr	r2, [pc, #472]	@ (80047e8 <HAL_DMA_IRQHandler+0xa78>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a74      	ldr	r2, [pc, #464]	@ (80047ec <HAL_DMA_IRQHandler+0xa7c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_DMA_IRQHandler+0x8b8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a73      	ldr	r2, [pc, #460]	@ (80047f0 <HAL_DMA_IRQHandler+0xa80>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d108      	bne.n	800463a <HAL_DMA_IRQHandler+0x8ca>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e007      	b.n	800464a <HAL_DMA_IRQHandler+0x8da>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3301      	adds	r3, #1
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004652:	429a      	cmp	r2, r3
 8004654:	d307      	bcc.n	8004666 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f2      	bne.n	800464a <HAL_DMA_IRQHandler+0x8da>
 8004664:	e000      	b.n	8004668 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004666:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d004      	beq.n	8004680 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2203      	movs	r2, #3
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800467e:	e003      	b.n	8004688 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 82aa 	beq.w	8004bee <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	4798      	blx	r3
 80046a2:	e2a4      	b.n	8004bee <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a52      	ldr	r2, [pc, #328]	@ (80047f4 <HAL_DMA_IRQHandler+0xa84>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d04a      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a51      	ldr	r2, [pc, #324]	@ (80047f8 <HAL_DMA_IRQHandler+0xa88>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d045      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a4f      	ldr	r2, [pc, #316]	@ (80047fc <HAL_DMA_IRQHandler+0xa8c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d040      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004800 <HAL_DMA_IRQHandler+0xa90>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d03b      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a4c      	ldr	r2, [pc, #304]	@ (8004804 <HAL_DMA_IRQHandler+0xa94>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d036      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a4b      	ldr	r2, [pc, #300]	@ (8004808 <HAL_DMA_IRQHandler+0xa98>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d031      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a49      	ldr	r2, [pc, #292]	@ (800480c <HAL_DMA_IRQHandler+0xa9c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d02c      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a48      	ldr	r2, [pc, #288]	@ (8004810 <HAL_DMA_IRQHandler+0xaa0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d027      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a46      	ldr	r2, [pc, #280]	@ (8004814 <HAL_DMA_IRQHandler+0xaa4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d022      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a45      	ldr	r2, [pc, #276]	@ (8004818 <HAL_DMA_IRQHandler+0xaa8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d01d      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a43      	ldr	r2, [pc, #268]	@ (800481c <HAL_DMA_IRQHandler+0xaac>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d018      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a42      	ldr	r2, [pc, #264]	@ (8004820 <HAL_DMA_IRQHandler+0xab0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d013      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a40      	ldr	r2, [pc, #256]	@ (8004824 <HAL_DMA_IRQHandler+0xab4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00e      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a3f      	ldr	r2, [pc, #252]	@ (8004828 <HAL_DMA_IRQHandler+0xab8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d009      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a3d      	ldr	r2, [pc, #244]	@ (800482c <HAL_DMA_IRQHandler+0xabc>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <HAL_DMA_IRQHandler+0x9d4>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a3c      	ldr	r2, [pc, #240]	@ (8004830 <HAL_DMA_IRQHandler+0xac0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d101      	bne.n	8004748 <HAL_DMA_IRQHandler+0x9d8>
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <HAL_DMA_IRQHandler+0x9da>
 8004748:	2300      	movs	r3, #0
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 824f 	beq.w	8004bee <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	2204      	movs	r2, #4
 8004762:	409a      	lsls	r2, r3
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80dd 	beq.w	8004928 <HAL_DMA_IRQHandler+0xbb8>
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80d7 	beq.w	8004928 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	2204      	movs	r2, #4
 8004784:	409a      	lsls	r2, r3
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d059      	beq.n	8004848 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d14a      	bne.n	8004834 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 8220 	beq.w	8004be8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047b0:	e21a      	b.n	8004be8 <HAL_DMA_IRQHandler+0xe78>
 80047b2:	bf00      	nop
 80047b4:	40020010 	.word	0x40020010
 80047b8:	40020028 	.word	0x40020028
 80047bc:	40020040 	.word	0x40020040
 80047c0:	40020058 	.word	0x40020058
 80047c4:	40020070 	.word	0x40020070
 80047c8:	40020088 	.word	0x40020088
 80047cc:	400200a0 	.word	0x400200a0
 80047d0:	400200b8 	.word	0x400200b8
 80047d4:	40020410 	.word	0x40020410
 80047d8:	40020428 	.word	0x40020428
 80047dc:	40020440 	.word	0x40020440
 80047e0:	40020458 	.word	0x40020458
 80047e4:	40020470 	.word	0x40020470
 80047e8:	40020488 	.word	0x40020488
 80047ec:	400204a0 	.word	0x400204a0
 80047f0:	400204b8 	.word	0x400204b8
 80047f4:	48022c08 	.word	0x48022c08
 80047f8:	48022c1c 	.word	0x48022c1c
 80047fc:	48022c30 	.word	0x48022c30
 8004800:	48022c44 	.word	0x48022c44
 8004804:	48022c58 	.word	0x48022c58
 8004808:	48022c6c 	.word	0x48022c6c
 800480c:	48022c80 	.word	0x48022c80
 8004810:	48022c94 	.word	0x48022c94
 8004814:	58025408 	.word	0x58025408
 8004818:	5802541c 	.word	0x5802541c
 800481c:	58025430 	.word	0x58025430
 8004820:	58025444 	.word	0x58025444
 8004824:	58025458 	.word	0x58025458
 8004828:	5802546c 	.word	0x5802546c
 800482c:	58025480 	.word	0x58025480
 8004830:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 81d5 	beq.w	8004be8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004846:	e1cf      	b.n	8004be8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d160      	bne.n	8004914 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a7f      	ldr	r2, [pc, #508]	@ (8004a54 <HAL_DMA_IRQHandler+0xce4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d04a      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a7d      	ldr	r2, [pc, #500]	@ (8004a58 <HAL_DMA_IRQHandler+0xce8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d045      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a7c      	ldr	r2, [pc, #496]	@ (8004a5c <HAL_DMA_IRQHandler+0xcec>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d040      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a7a      	ldr	r2, [pc, #488]	@ (8004a60 <HAL_DMA_IRQHandler+0xcf0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d03b      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a79      	ldr	r2, [pc, #484]	@ (8004a64 <HAL_DMA_IRQHandler+0xcf4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d036      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a77      	ldr	r2, [pc, #476]	@ (8004a68 <HAL_DMA_IRQHandler+0xcf8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d031      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a76      	ldr	r2, [pc, #472]	@ (8004a6c <HAL_DMA_IRQHandler+0xcfc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d02c      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a74      	ldr	r2, [pc, #464]	@ (8004a70 <HAL_DMA_IRQHandler+0xd00>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d027      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a73      	ldr	r2, [pc, #460]	@ (8004a74 <HAL_DMA_IRQHandler+0xd04>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d022      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a71      	ldr	r2, [pc, #452]	@ (8004a78 <HAL_DMA_IRQHandler+0xd08>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01d      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a70      	ldr	r2, [pc, #448]	@ (8004a7c <HAL_DMA_IRQHandler+0xd0c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d018      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004a80 <HAL_DMA_IRQHandler+0xd10>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004a84 <HAL_DMA_IRQHandler+0xd14>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00e      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004a88 <HAL_DMA_IRQHandler+0xd18>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d009      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a6a      	ldr	r2, [pc, #424]	@ (8004a8c <HAL_DMA_IRQHandler+0xd1c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xb82>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a68      	ldr	r2, [pc, #416]	@ (8004a90 <HAL_DMA_IRQHandler+0xd20>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d108      	bne.n	8004904 <HAL_DMA_IRQHandler+0xb94>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0208 	bic.w	r2, r2, #8
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e007      	b.n	8004914 <HAL_DMA_IRQHandler+0xba4>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0204 	bic.w	r2, r2, #4
 8004912:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8165 	beq.w	8004be8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004926:	e15f      	b.n	8004be8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	2202      	movs	r2, #2
 8004932:	409a      	lsls	r2, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	4013      	ands	r3, r2
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80c5 	beq.w	8004ac8 <HAL_DMA_IRQHandler+0xd58>
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80bf 	beq.w	8004ac8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	2202      	movs	r2, #2
 8004954:	409a      	lsls	r2, r3
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d018      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 813a 	beq.w	8004bec <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004980:	e134      	b.n	8004bec <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8130 	beq.w	8004bec <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004994:	e12a      	b.n	8004bec <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 8089 	bne.w	8004ab4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004a54 <HAL_DMA_IRQHandler+0xce4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d04a      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a29      	ldr	r2, [pc, #164]	@ (8004a58 <HAL_DMA_IRQHandler+0xce8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d045      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a28      	ldr	r2, [pc, #160]	@ (8004a5c <HAL_DMA_IRQHandler+0xcec>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d040      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a26      	ldr	r2, [pc, #152]	@ (8004a60 <HAL_DMA_IRQHandler+0xcf0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d03b      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a25      	ldr	r2, [pc, #148]	@ (8004a64 <HAL_DMA_IRQHandler+0xcf4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d036      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a23      	ldr	r2, [pc, #140]	@ (8004a68 <HAL_DMA_IRQHandler+0xcf8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d031      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a22      	ldr	r2, [pc, #136]	@ (8004a6c <HAL_DMA_IRQHandler+0xcfc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d02c      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a20      	ldr	r2, [pc, #128]	@ (8004a70 <HAL_DMA_IRQHandler+0xd00>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d027      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a74 <HAL_DMA_IRQHandler+0xd04>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1d      	ldr	r2, [pc, #116]	@ (8004a78 <HAL_DMA_IRQHandler+0xd08>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a7c <HAL_DMA_IRQHandler+0xd0c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1a      	ldr	r2, [pc, #104]	@ (8004a80 <HAL_DMA_IRQHandler+0xd10>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a19      	ldr	r2, [pc, #100]	@ (8004a84 <HAL_DMA_IRQHandler+0xd14>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a17      	ldr	r2, [pc, #92]	@ (8004a88 <HAL_DMA_IRQHandler+0xd18>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a16      	ldr	r2, [pc, #88]	@ (8004a8c <HAL_DMA_IRQHandler+0xd1c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xcd2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a14      	ldr	r2, [pc, #80]	@ (8004a90 <HAL_DMA_IRQHandler+0xd20>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d128      	bne.n	8004a94 <HAL_DMA_IRQHandler+0xd24>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0214 	bic.w	r2, r2, #20
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e027      	b.n	8004aa4 <HAL_DMA_IRQHandler+0xd34>
 8004a54:	40020010 	.word	0x40020010
 8004a58:	40020028 	.word	0x40020028
 8004a5c:	40020040 	.word	0x40020040
 8004a60:	40020058 	.word	0x40020058
 8004a64:	40020070 	.word	0x40020070
 8004a68:	40020088 	.word	0x40020088
 8004a6c:	400200a0 	.word	0x400200a0
 8004a70:	400200b8 	.word	0x400200b8
 8004a74:	40020410 	.word	0x40020410
 8004a78:	40020428 	.word	0x40020428
 8004a7c:	40020440 	.word	0x40020440
 8004a80:	40020458 	.word	0x40020458
 8004a84:	40020470 	.word	0x40020470
 8004a88:	40020488 	.word	0x40020488
 8004a8c:	400204a0 	.word	0x400204a0
 8004a90:	400204b8 	.word	0x400204b8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 020a 	bic.w	r2, r2, #10
 8004aa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8097 	beq.w	8004bec <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ac6:	e091      	b.n	8004bec <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8088 	beq.w	8004bee <HAL_DMA_IRQHandler+0xe7e>
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8082 	beq.w	8004bee <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a41      	ldr	r2, [pc, #260]	@ (8004bf4 <HAL_DMA_IRQHandler+0xe84>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d04a      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a3f      	ldr	r2, [pc, #252]	@ (8004bf8 <HAL_DMA_IRQHandler+0xe88>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d045      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a3e      	ldr	r2, [pc, #248]	@ (8004bfc <HAL_DMA_IRQHandler+0xe8c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d040      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c00 <HAL_DMA_IRQHandler+0xe90>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d03b      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a3b      	ldr	r2, [pc, #236]	@ (8004c04 <HAL_DMA_IRQHandler+0xe94>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d036      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a39      	ldr	r2, [pc, #228]	@ (8004c08 <HAL_DMA_IRQHandler+0xe98>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d031      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a38      	ldr	r2, [pc, #224]	@ (8004c0c <HAL_DMA_IRQHandler+0xe9c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d02c      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a36      	ldr	r2, [pc, #216]	@ (8004c10 <HAL_DMA_IRQHandler+0xea0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d027      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a35      	ldr	r2, [pc, #212]	@ (8004c14 <HAL_DMA_IRQHandler+0xea4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d022      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a33      	ldr	r2, [pc, #204]	@ (8004c18 <HAL_DMA_IRQHandler+0xea8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01d      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a32      	ldr	r2, [pc, #200]	@ (8004c1c <HAL_DMA_IRQHandler+0xeac>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d018      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a30      	ldr	r2, [pc, #192]	@ (8004c20 <HAL_DMA_IRQHandler+0xeb0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d013      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a2f      	ldr	r2, [pc, #188]	@ (8004c24 <HAL_DMA_IRQHandler+0xeb4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00e      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a2d      	ldr	r2, [pc, #180]	@ (8004c28 <HAL_DMA_IRQHandler+0xeb8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d009      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c2c <HAL_DMA_IRQHandler+0xebc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d004      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe1a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2a      	ldr	r2, [pc, #168]	@ (8004c30 <HAL_DMA_IRQHandler+0xec0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d108      	bne.n	8004b9c <HAL_DMA_IRQHandler+0xe2c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 021c 	bic.w	r2, r2, #28
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e007      	b.n	8004bac <HAL_DMA_IRQHandler+0xe3c>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 020e 	bic.w	r2, r2, #14
 8004baa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
 8004be2:	e004      	b.n	8004bee <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004be4:	bf00      	nop
 8004be6:	e002      	b.n	8004bee <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004bee:	3728      	adds	r7, #40	@ 0x28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40020010 	.word	0x40020010
 8004bf8:	40020028 	.word	0x40020028
 8004bfc:	40020040 	.word	0x40020040
 8004c00:	40020058 	.word	0x40020058
 8004c04:	40020070 	.word	0x40020070
 8004c08:	40020088 	.word	0x40020088
 8004c0c:	400200a0 	.word	0x400200a0
 8004c10:	400200b8 	.word	0x400200b8
 8004c14:	40020410 	.word	0x40020410
 8004c18:	40020428 	.word	0x40020428
 8004c1c:	40020440 	.word	0x40020440
 8004c20:	40020458 	.word	0x40020458
 8004c24:	40020470 	.word	0x40020470
 8004c28:	40020488 	.word	0x40020488
 8004c2c:	400204a0 	.word	0x400204a0
 8004c30:	400204b8 	.word	0x400204b8

08004c34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c46:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a7f      	ldr	r2, [pc, #508]	@ (8004e50 <DMA_SetConfig+0x21c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d072      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a7d      	ldr	r2, [pc, #500]	@ (8004e54 <DMA_SetConfig+0x220>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d06d      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a7c      	ldr	r2, [pc, #496]	@ (8004e58 <DMA_SetConfig+0x224>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d068      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a7a      	ldr	r2, [pc, #488]	@ (8004e5c <DMA_SetConfig+0x228>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d063      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a79      	ldr	r2, [pc, #484]	@ (8004e60 <DMA_SetConfig+0x22c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d05e      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a77      	ldr	r2, [pc, #476]	@ (8004e64 <DMA_SetConfig+0x230>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d059      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a76      	ldr	r2, [pc, #472]	@ (8004e68 <DMA_SetConfig+0x234>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d054      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a74      	ldr	r2, [pc, #464]	@ (8004e6c <DMA_SetConfig+0x238>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d04f      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a73      	ldr	r2, [pc, #460]	@ (8004e70 <DMA_SetConfig+0x23c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d04a      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a71      	ldr	r2, [pc, #452]	@ (8004e74 <DMA_SetConfig+0x240>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d045      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a70      	ldr	r2, [pc, #448]	@ (8004e78 <DMA_SetConfig+0x244>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d040      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e7c <DMA_SetConfig+0x248>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d03b      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a6d      	ldr	r2, [pc, #436]	@ (8004e80 <DMA_SetConfig+0x24c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d036      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a6b      	ldr	r2, [pc, #428]	@ (8004e84 <DMA_SetConfig+0x250>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d031      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6a      	ldr	r2, [pc, #424]	@ (8004e88 <DMA_SetConfig+0x254>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d02c      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a68      	ldr	r2, [pc, #416]	@ (8004e8c <DMA_SetConfig+0x258>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d027      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a67      	ldr	r2, [pc, #412]	@ (8004e90 <DMA_SetConfig+0x25c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d022      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a65      	ldr	r2, [pc, #404]	@ (8004e94 <DMA_SetConfig+0x260>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01d      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a64      	ldr	r2, [pc, #400]	@ (8004e98 <DMA_SetConfig+0x264>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a62      	ldr	r2, [pc, #392]	@ (8004e9c <DMA_SetConfig+0x268>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a61      	ldr	r2, [pc, #388]	@ (8004ea0 <DMA_SetConfig+0x26c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5f      	ldr	r2, [pc, #380]	@ (8004ea4 <DMA_SetConfig+0x270>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ea8 <DMA_SetConfig+0x274>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <DMA_SetConfig+0x10a>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a5c      	ldr	r2, [pc, #368]	@ (8004eac <DMA_SetConfig+0x278>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d101      	bne.n	8004d42 <DMA_SetConfig+0x10e>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <DMA_SetConfig+0x110>
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00d      	beq.n	8004d64 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d50:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d004      	beq.n	8004d64 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d62:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a39      	ldr	r2, [pc, #228]	@ (8004e50 <DMA_SetConfig+0x21c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d04a      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a38      	ldr	r2, [pc, #224]	@ (8004e54 <DMA_SetConfig+0x220>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d045      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a36      	ldr	r2, [pc, #216]	@ (8004e58 <DMA_SetConfig+0x224>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d040      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a35      	ldr	r2, [pc, #212]	@ (8004e5c <DMA_SetConfig+0x228>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d03b      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a33      	ldr	r2, [pc, #204]	@ (8004e60 <DMA_SetConfig+0x22c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d036      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a32      	ldr	r2, [pc, #200]	@ (8004e64 <DMA_SetConfig+0x230>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d031      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a30      	ldr	r2, [pc, #192]	@ (8004e68 <DMA_SetConfig+0x234>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d02c      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2f      	ldr	r2, [pc, #188]	@ (8004e6c <DMA_SetConfig+0x238>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d027      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a2d      	ldr	r2, [pc, #180]	@ (8004e70 <DMA_SetConfig+0x23c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d022      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e74 <DMA_SetConfig+0x240>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d01d      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004e78 <DMA_SetConfig+0x244>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d018      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a29      	ldr	r2, [pc, #164]	@ (8004e7c <DMA_SetConfig+0x248>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a27      	ldr	r2, [pc, #156]	@ (8004e80 <DMA_SetConfig+0x24c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00e      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a26      	ldr	r2, [pc, #152]	@ (8004e84 <DMA_SetConfig+0x250>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d009      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a24      	ldr	r2, [pc, #144]	@ (8004e88 <DMA_SetConfig+0x254>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <DMA_SetConfig+0x1d0>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a23      	ldr	r2, [pc, #140]	@ (8004e8c <DMA_SetConfig+0x258>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <DMA_SetConfig+0x1d4>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <DMA_SetConfig+0x1d6>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d059      	beq.n	8004ec2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	223f      	movs	r2, #63	@ 0x3f
 8004e18:	409a      	lsls	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e2c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b40      	cmp	r3, #64	@ 0x40
 8004e3c:	d138      	bne.n	8004eb0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e4e:	e0ae      	b.n	8004fae <DMA_SetConfig+0x37a>
 8004e50:	40020010 	.word	0x40020010
 8004e54:	40020028 	.word	0x40020028
 8004e58:	40020040 	.word	0x40020040
 8004e5c:	40020058 	.word	0x40020058
 8004e60:	40020070 	.word	0x40020070
 8004e64:	40020088 	.word	0x40020088
 8004e68:	400200a0 	.word	0x400200a0
 8004e6c:	400200b8 	.word	0x400200b8
 8004e70:	40020410 	.word	0x40020410
 8004e74:	40020428 	.word	0x40020428
 8004e78:	40020440 	.word	0x40020440
 8004e7c:	40020458 	.word	0x40020458
 8004e80:	40020470 	.word	0x40020470
 8004e84:	40020488 	.word	0x40020488
 8004e88:	400204a0 	.word	0x400204a0
 8004e8c:	400204b8 	.word	0x400204b8
 8004e90:	58025408 	.word	0x58025408
 8004e94:	5802541c 	.word	0x5802541c
 8004e98:	58025430 	.word	0x58025430
 8004e9c:	58025444 	.word	0x58025444
 8004ea0:	58025458 	.word	0x58025458
 8004ea4:	5802546c 	.word	0x5802546c
 8004ea8:	58025480 	.word	0x58025480
 8004eac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	60da      	str	r2, [r3, #12]
}
 8004ec0:	e075      	b.n	8004fae <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a3d      	ldr	r2, [pc, #244]	@ (8004fbc <DMA_SetConfig+0x388>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d04a      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a3b      	ldr	r2, [pc, #236]	@ (8004fc0 <DMA_SetConfig+0x38c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d045      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a3a      	ldr	r2, [pc, #232]	@ (8004fc4 <DMA_SetConfig+0x390>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d040      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a38      	ldr	r2, [pc, #224]	@ (8004fc8 <DMA_SetConfig+0x394>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d03b      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a37      	ldr	r2, [pc, #220]	@ (8004fcc <DMA_SetConfig+0x398>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d036      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a35      	ldr	r2, [pc, #212]	@ (8004fd0 <DMA_SetConfig+0x39c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d031      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a34      	ldr	r2, [pc, #208]	@ (8004fd4 <DMA_SetConfig+0x3a0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d02c      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a32      	ldr	r2, [pc, #200]	@ (8004fd8 <DMA_SetConfig+0x3a4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d027      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a31      	ldr	r2, [pc, #196]	@ (8004fdc <DMA_SetConfig+0x3a8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d022      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a2f      	ldr	r2, [pc, #188]	@ (8004fe0 <DMA_SetConfig+0x3ac>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01d      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004fe4 <DMA_SetConfig+0x3b0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d018      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe8 <DMA_SetConfig+0x3b4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8004fec <DMA_SetConfig+0x3b8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a29      	ldr	r2, [pc, #164]	@ (8004ff0 <DMA_SetConfig+0x3bc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a28      	ldr	r2, [pc, #160]	@ (8004ff4 <DMA_SetConfig+0x3c0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <DMA_SetConfig+0x32e>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a26      	ldr	r2, [pc, #152]	@ (8004ff8 <DMA_SetConfig+0x3c4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d101      	bne.n	8004f66 <DMA_SetConfig+0x332>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <DMA_SetConfig+0x334>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d020      	beq.n	8004fae <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	2201      	movs	r2, #1
 8004f76:	409a      	lsls	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b40      	cmp	r3, #64	@ 0x40
 8004f8a:	d108      	bne.n	8004f9e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	60da      	str	r2, [r3, #12]
}
 8004f9c:	e007      	b.n	8004fae <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	48022c08 	.word	0x48022c08
 8004fc0:	48022c1c 	.word	0x48022c1c
 8004fc4:	48022c30 	.word	0x48022c30
 8004fc8:	48022c44 	.word	0x48022c44
 8004fcc:	48022c58 	.word	0x48022c58
 8004fd0:	48022c6c 	.word	0x48022c6c
 8004fd4:	48022c80 	.word	0x48022c80
 8004fd8:	48022c94 	.word	0x48022c94
 8004fdc:	58025408 	.word	0x58025408
 8004fe0:	5802541c 	.word	0x5802541c
 8004fe4:	58025430 	.word	0x58025430
 8004fe8:	58025444 	.word	0x58025444
 8004fec:	58025458 	.word	0x58025458
 8004ff0:	5802546c 	.word	0x5802546c
 8004ff4:	58025480 	.word	0x58025480
 8004ff8:	58025494 	.word	0x58025494

08004ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a42      	ldr	r2, [pc, #264]	@ (8005114 <DMA_CalcBaseAndBitshift+0x118>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d04a      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a41      	ldr	r2, [pc, #260]	@ (8005118 <DMA_CalcBaseAndBitshift+0x11c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d045      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a3f      	ldr	r2, [pc, #252]	@ (800511c <DMA_CalcBaseAndBitshift+0x120>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d040      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a3e      	ldr	r2, [pc, #248]	@ (8005120 <DMA_CalcBaseAndBitshift+0x124>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d03b      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3c      	ldr	r2, [pc, #240]	@ (8005124 <DMA_CalcBaseAndBitshift+0x128>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d036      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3b      	ldr	r2, [pc, #236]	@ (8005128 <DMA_CalcBaseAndBitshift+0x12c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d031      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a39      	ldr	r2, [pc, #228]	@ (800512c <DMA_CalcBaseAndBitshift+0x130>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d02c      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a38      	ldr	r2, [pc, #224]	@ (8005130 <DMA_CalcBaseAndBitshift+0x134>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d027      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a36      	ldr	r2, [pc, #216]	@ (8005134 <DMA_CalcBaseAndBitshift+0x138>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d022      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a35      	ldr	r2, [pc, #212]	@ (8005138 <DMA_CalcBaseAndBitshift+0x13c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d01d      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a33      	ldr	r2, [pc, #204]	@ (800513c <DMA_CalcBaseAndBitshift+0x140>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d018      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a32      	ldr	r2, [pc, #200]	@ (8005140 <DMA_CalcBaseAndBitshift+0x144>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a30      	ldr	r2, [pc, #192]	@ (8005144 <DMA_CalcBaseAndBitshift+0x148>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2f      	ldr	r2, [pc, #188]	@ (8005148 <DMA_CalcBaseAndBitshift+0x14c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d009      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2d      	ldr	r2, [pc, #180]	@ (800514c <DMA_CalcBaseAndBitshift+0x150>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <DMA_CalcBaseAndBitshift+0xa8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2c      	ldr	r2, [pc, #176]	@ (8005150 <DMA_CalcBaseAndBitshift+0x154>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d101      	bne.n	80050a8 <DMA_CalcBaseAndBitshift+0xac>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <DMA_CalcBaseAndBitshift+0xae>
 80050a8:	2300      	movs	r3, #0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d024      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	3b10      	subs	r3, #16
 80050b6:	4a27      	ldr	r2, [pc, #156]	@ (8005154 <DMA_CalcBaseAndBitshift+0x158>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	4a24      	ldr	r2, [pc, #144]	@ (8005158 <DMA_CalcBaseAndBitshift+0x15c>)
 80050c8:	5cd3      	ldrb	r3, [r2, r3]
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d908      	bls.n	80050e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	4b1f      	ldr	r3, [pc, #124]	@ (800515c <DMA_CalcBaseAndBitshift+0x160>)
 80050de:	4013      	ands	r3, r2
 80050e0:	1d1a      	adds	r2, r3, #4
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80050e6:	e00d      	b.n	8005104 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	4b1b      	ldr	r3, [pc, #108]	@ (800515c <DMA_CalcBaseAndBitshift+0x160>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80050f6:	e005      	b.n	8005104 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40020010 	.word	0x40020010
 8005118:	40020028 	.word	0x40020028
 800511c:	40020040 	.word	0x40020040
 8005120:	40020058 	.word	0x40020058
 8005124:	40020070 	.word	0x40020070
 8005128:	40020088 	.word	0x40020088
 800512c:	400200a0 	.word	0x400200a0
 8005130:	400200b8 	.word	0x400200b8
 8005134:	40020410 	.word	0x40020410
 8005138:	40020428 	.word	0x40020428
 800513c:	40020440 	.word	0x40020440
 8005140:	40020458 	.word	0x40020458
 8005144:	40020470 	.word	0x40020470
 8005148:	40020488 	.word	0x40020488
 800514c:	400204a0 	.word	0x400204a0
 8005150:	400204b8 	.word	0x400204b8
 8005154:	aaaaaaab 	.word	0xaaaaaaab
 8005158:	0800ae9c 	.word	0x0800ae9c
 800515c:	fffffc00 	.word	0xfffffc00

08005160 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d120      	bne.n	80051b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	2b03      	cmp	r3, #3
 800517a:	d858      	bhi.n	800522e <DMA_CheckFifoParam+0xce>
 800517c:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <DMA_CheckFifoParam+0x24>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	08005195 	.word	0x08005195
 8005188:	080051a7 	.word	0x080051a7
 800518c:	08005195 	.word	0x08005195
 8005190:	0800522f 	.word	0x0800522f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d048      	beq.n	8005232 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051a4:	e045      	b.n	8005232 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051ae:	d142      	bne.n	8005236 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051b4:	e03f      	b.n	8005236 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051be:	d123      	bne.n	8005208 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d838      	bhi.n	800523a <DMA_CheckFifoParam+0xda>
 80051c8:	a201      	add	r2, pc, #4	@ (adr r2, 80051d0 <DMA_CheckFifoParam+0x70>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051e7 	.word	0x080051e7
 80051d8:	080051e1 	.word	0x080051e1
 80051dc:	080051f9 	.word	0x080051f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
        break;
 80051e4:	e030      	b.n	8005248 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d025      	beq.n	800523e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051f6:	e022      	b.n	800523e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005200:	d11f      	bne.n	8005242 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005206:	e01c      	b.n	8005242 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520c:	2b02      	cmp	r3, #2
 800520e:	d902      	bls.n	8005216 <DMA_CheckFifoParam+0xb6>
 8005210:	2b03      	cmp	r3, #3
 8005212:	d003      	beq.n	800521c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005214:	e018      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
        break;
 800521a:	e015      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00e      	beq.n	8005246 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
    break;
 800522c:	e00b      	b.n	8005246 <DMA_CheckFifoParam+0xe6>
        break;
 800522e:	bf00      	nop
 8005230:	e00a      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
        break;
 8005232:	bf00      	nop
 8005234:	e008      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
        break;
 8005236:	bf00      	nop
 8005238:	e006      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
        break;
 800523a:	bf00      	nop
 800523c:	e004      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
        break;
 800523e:	bf00      	nop
 8005240:	e002      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
        break;
 8005242:	bf00      	nop
 8005244:	e000      	b.n	8005248 <DMA_CheckFifoParam+0xe8>
    break;
 8005246:	bf00      	nop
    }
  }

  return status;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop

08005258 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a38      	ldr	r2, [pc, #224]	@ (800534c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d022      	beq.n	80052b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a36      	ldr	r2, [pc, #216]	@ (8005350 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d01d      	beq.n	80052b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a35      	ldr	r2, [pc, #212]	@ (8005354 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a33      	ldr	r2, [pc, #204]	@ (8005358 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a32      	ldr	r2, [pc, #200]	@ (800535c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a30      	ldr	r2, [pc, #192]	@ (8005360 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005364 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005368 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d101      	bne.n	80052ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01a      	beq.n	80052f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	3b08      	subs	r3, #8
 80052c8:	4a28      	ldr	r2, [pc, #160]	@ (800536c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80052ca:	fba2 2303 	umull	r2, r3, r2, r3
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4b26      	ldr	r3, [pc, #152]	@ (8005370 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	461a      	mov	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a24      	ldr	r2, [pc, #144]	@ (8005374 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80052e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	2201      	movs	r2, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80052f4:	e024      	b.n	8005340 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	3b10      	subs	r3, #16
 80052fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005378 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005300:	fba2 2303 	umull	r2, r3, r2, r3
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a1c      	ldr	r2, [pc, #112]	@ (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d806      	bhi.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4a1b      	ldr	r2, [pc, #108]	@ (8005380 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d902      	bls.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3308      	adds	r3, #8
 800531c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4b18      	ldr	r3, [pc, #96]	@ (8005384 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	461a      	mov	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a16      	ldr	r2, [pc, #88]	@ (8005388 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005330:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	2201      	movs	r2, #1
 800533a:	409a      	lsls	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	58025408 	.word	0x58025408
 8005350:	5802541c 	.word	0x5802541c
 8005354:	58025430 	.word	0x58025430
 8005358:	58025444 	.word	0x58025444
 800535c:	58025458 	.word	0x58025458
 8005360:	5802546c 	.word	0x5802546c
 8005364:	58025480 	.word	0x58025480
 8005368:	58025494 	.word	0x58025494
 800536c:	cccccccd 	.word	0xcccccccd
 8005370:	16009600 	.word	0x16009600
 8005374:	58025880 	.word	0x58025880
 8005378:	aaaaaaab 	.word	0xaaaaaaab
 800537c:	400204b8 	.word	0x400204b8
 8005380:	4002040f 	.word	0x4002040f
 8005384:	10008200 	.word	0x10008200
 8005388:	40020880 	.word	0x40020880

0800538c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d04a      	beq.n	8005438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d847      	bhi.n	8005438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a25      	ldr	r2, [pc, #148]	@ (8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d022      	beq.n	80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a24      	ldr	r2, [pc, #144]	@ (8005448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d01d      	beq.n	80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a22      	ldr	r2, [pc, #136]	@ (800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d018      	beq.n	80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a21      	ldr	r2, [pc, #132]	@ (8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00e      	beq.n	80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1e      	ldr	r2, [pc, #120]	@ (8005458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d009      	beq.n	80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1c      	ldr	r2, [pc, #112]	@ (800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d101      	bne.n	80053fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4b17      	ldr	r3, [pc, #92]	@ (8005464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a15      	ldr	r2, [pc, #84]	@ (8005468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005414:	671a      	str	r2, [r3, #112]	@ 0x70
 8005416:	e009      	b.n	800542c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4b14      	ldr	r3, [pc, #80]	@ (800546c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	461a      	mov	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a11      	ldr	r2, [pc, #68]	@ (8005470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800542a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3b01      	subs	r3, #1
 8005430:	2201      	movs	r2, #1
 8005432:	409a      	lsls	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	58025408 	.word	0x58025408
 8005448:	5802541c 	.word	0x5802541c
 800544c:	58025430 	.word	0x58025430
 8005450:	58025444 	.word	0x58025444
 8005454:	58025458 	.word	0x58025458
 8005458:	5802546c 	.word	0x5802546c
 800545c:	58025480 	.word	0x58025480
 8005460:	58025494 	.word	0x58025494
 8005464:	1600963f 	.word	0x1600963f
 8005468:	58025940 	.word	0x58025940
 800546c:	1000823f 	.word	0x1000823f
 8005470:	40020940 	.word	0x40020940

08005474 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b098      	sub	sp, #96	@ 0x60
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800547c:	4a84      	ldr	r2, [pc, #528]	@ (8005690 <HAL_FDCAN_Init+0x21c>)
 800547e:	f107 030c 	add.w	r3, r7, #12
 8005482:	4611      	mov	r1, r2
 8005484:	224c      	movs	r2, #76	@ 0x4c
 8005486:	4618      	mov	r0, r3
 8005488:	f005 fcc0 	bl	800ae0c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e1c6      	b.n	8005824 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a7e      	ldr	r2, [pc, #504]	@ (8005694 <HAL_FDCAN_Init+0x220>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d106      	bne.n	80054ae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054a8:	461a      	mov	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fb fe78 	bl	80011b8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0210 	bic.w	r2, r2, #16
 80054d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054d8:	f7fc fba2 	bl	8001c20 <HAL_GetTick>
 80054dc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80054de:	e014      	b.n	800550a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80054e0:	f7fc fb9e 	bl	8001c20 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b0a      	cmp	r3, #10
 80054ec:	d90d      	bls.n	800550a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054f4:	f043 0201 	orr.w	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2203      	movs	r2, #3
 8005502:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e18c      	b.n	8005824 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b08      	cmp	r3, #8
 8005516:	d0e3      	beq.n	80054e0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005528:	f7fc fb7a 	bl	8001c20 <HAL_GetTick>
 800552c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800552e:	e014      	b.n	800555a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005530:	f7fc fb76 	bl	8001c20 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b0a      	cmp	r3, #10
 800553c:	d90d      	bls.n	800555a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005544:	f043 0201 	orr.w	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2203      	movs	r2, #3
 8005552:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e164      	b.n	8005824 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0e3      	beq.n	8005530 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0202 	orr.w	r2, r2, #2
 8005576:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	7c1b      	ldrb	r3, [r3, #16]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d108      	bne.n	8005592 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800558e:	619a      	str	r2, [r3, #24]
 8005590:	e007      	b.n	80055a2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	7c5b      	ldrb	r3, [r3, #17]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d108      	bne.n	80055bc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055b8:	619a      	str	r2, [r3, #24]
 80055ba:	e007      	b.n	80055cc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	7c9b      	ldrb	r3, [r3, #18]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d108      	bne.n	80055e6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055e2:	619a      	str	r2, [r3, #24]
 80055e4:	e007      	b.n	80055f6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699a      	ldr	r2, [r3, #24]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055f4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800561a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0210 	bic.w	r2, r2, #16
 800562a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d108      	bne.n	8005646 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0204 	orr.w	r2, r2, #4
 8005642:	619a      	str	r2, [r3, #24]
 8005644:	e030      	b.n	80056a8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d02c      	beq.n	80056a8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d020      	beq.n	8005698 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699a      	ldr	r2, [r3, #24]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005664:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0210 	orr.w	r2, r2, #16
 8005674:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b03      	cmp	r3, #3
 800567c:	d114      	bne.n	80056a8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0220 	orr.w	r2, r2, #32
 800568c:	619a      	str	r2, [r3, #24]
 800568e:	e00b      	b.n	80056a8 <HAL_FDCAN_Init+0x234>
 8005690:	0800ae40 	.word	0x0800ae40
 8005694:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0220 	orr.w	r2, r2, #32
 80056a6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056b8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80056c0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80056d0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056d2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056dc:	d115      	bne.n	800570a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	3b01      	subs	r3, #1
 80056ea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80056ec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f2:	3b01      	subs	r3, #1
 80056f4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80056f6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fe:	3b01      	subs	r3, #1
 8005700:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005706:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005708:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005730:	4413      	add	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d011      	beq.n	800575a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800573e:	f023 0107 	bic.w	r1, r3, #7
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	3360      	adds	r3, #96	@ 0x60
 800574a:	443b      	add	r3, r7
 800574c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d011      	beq.n	8005786 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800576a:	f023 0107 	bic.w	r1, r3, #7
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	3360      	adds	r3, #96	@ 0x60
 8005776:	443b      	add	r3, r7
 8005778:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800578a:	2b00      	cmp	r3, #0
 800578c:	d012      	beq.n	80057b4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005796:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	3360      	adds	r3, #96	@ 0x60
 80057a2:	443b      	add	r3, r7
 80057a4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80057a8:	011a      	lsls	r2, r3, #4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d012      	beq.n	80057e2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057c4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	3360      	adds	r3, #96	@ 0x60
 80057d0:	443b      	add	r3, r7
 80057d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80057d6:	021a      	lsls	r2, r3, #8
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a11      	ldr	r2, [pc, #68]	@ (800582c <HAL_FDCAN_Init+0x3b8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d107      	bne.n	80057fc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f022 0203 	bic.w	r2, r2, #3
 80057fa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fd81 	bl	800631c <FDCAN_CalcultateRamBlockAddresses>
 800581a:	4603      	mov	r3, r0
 800581c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005820:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005824:	4618      	mov	r0, r3
 8005826:	3760      	adds	r7, #96	@ 0x60
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	4000a000 	.word	0x4000a000

08005830 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d111      	bne.n	8005868 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	e008      	b.n	800587a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800586e:	f043 0204 	orr.w	r2, r3, #4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b086      	sub	sp, #24
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d141      	bne.n	8005922 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80058a6:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e038      	b.n	8005934 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80058ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e026      	b.n	8005934 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80058ee:	0c1b      	lsrs	r3, r3, #16
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fe93 	bl	8006628 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2101      	movs	r1, #1
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	fa01 f202 	lsl.w	r2, r1, r2
 800590e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005912:	2201      	movs	r2, #1
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	409a      	lsls	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e008      	b.n	8005934 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005928:	f043 0208 	orr.w	r2, r3, #8
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
  }
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800593c:	b480      	push	{r7}
 800593e:	b08b      	sub	sp, #44	@ 0x2c
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005954:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005956:	7efb      	ldrb	r3, [r7, #27]
 8005958:	2b02      	cmp	r3, #2
 800595a:	f040 8149 	bne.w	8005bf0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b40      	cmp	r3, #64	@ 0x40
 8005962:	d14c      	bne.n	80059fe <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800596c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800597a:	f043 0220 	orr.w	r2, r3, #32
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e13c      	b.n	8005c02 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005994:	2b00      	cmp	r3, #0
 8005996:	d109      	bne.n	80059ac <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800599e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e12a      	b.n	8005c02 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059b4:	0e1b      	lsrs	r3, r3, #24
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d10a      	bne.n	80059d4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059c6:	0fdb      	lsrs	r3, r3, #31
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80059d0:	2301      	movs	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059dc:	0a1b      	lsrs	r3, r3, #8
 80059de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f0:	69f9      	ldr	r1, [r7, #28]
 80059f2:	fb01 f303 	mul.w	r3, r1, r3
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fc:	e068      	b.n	8005ad0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b41      	cmp	r3, #65	@ 0x41
 8005a02:	d14c      	bne.n	8005a9e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a0c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d109      	bne.n	8005a28 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0ec      	b.n	8005c02 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d109      	bne.n	8005a4c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0da      	b.n	8005c02 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a54:	0e1b      	lsrs	r3, r3, #24
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d10a      	bne.n	8005a74 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a66:	0fdb      	lsrs	r3, r3, #31
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005a70:	2301      	movs	r3, #1
 8005a72:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a7c:	0a1b      	lsrs	r3, r3, #8
 8005a7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a90:	69f9      	ldr	r1, [r7, #28]
 8005a92:	fb01 f303 	mul.w	r3, r1, r3
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a9c:	e018      	b.n	8005ad0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d309      	bcc.n	8005abc <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aae:	f043 0220 	orr.w	r2, r3, #32
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0a2      	b.n	8005c02 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	fb01 f303 	mul.w	r3, r1, r3
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d107      	bne.n	8005af4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	0c9b      	lsrs	r3, r3, #18
 8005aea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e005      	b.n	8005b00 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	0c1b      	lsrs	r3, r3, #16
 8005b2e:	f003 020f 	and.w	r2, r3, #15
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	0e1b      	lsrs	r3, r3, #24
 8005b54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	0fda      	lsrs	r2, r3, #31
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	3304      	adds	r3, #4
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005b70:	2300      	movs	r3, #0
 8005b72:	623b      	str	r3, [r7, #32]
 8005b74:	e00a      	b.n	8005b8c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	441a      	add	r2, r3
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	440b      	add	r3, r1
 8005b82:	7812      	ldrb	r2, [r2, #0]
 8005b84:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	623b      	str	r3, [r7, #32]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4a1f      	ldr	r2, [pc, #124]	@ (8005c10 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005b92:	5cd3      	ldrb	r3, [r2, r3]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d3ec      	bcc.n	8005b76 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ba0:	d105      	bne.n	8005bae <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005bac:	e01e      	b.n	8005bec <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b41      	cmp	r3, #65	@ 0x41
 8005bb2:	d105      	bne.n	8005bc0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005bbe:	e015      	b.n	8005bec <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b1f      	cmp	r3, #31
 8005bc4:	d808      	bhi.n	8005bd8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2101      	movs	r1, #1
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005bd6:	e009      	b.n	8005bec <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 021f 	and.w	r2, r3, #31
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2101      	movs	r1, #1
 8005be4:	fa01 f202 	lsl.w	r2, r1, r2
 8005be8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e008      	b.n	8005c02 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bf6:	f043 0208 	orr.w	r2, r3, #8
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
  }
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	372c      	adds	r7, #44	@ 0x2c
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	0800aea4 	.word	0x0800aea4

08005c14 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005c4a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d002      	beq.n	8005c58 <HAL_FDCAN_ActivateNotification+0x20>
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d155      	bne.n	8005d04 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d108      	bne.n	8005c78 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0201 	orr.w	r2, r2, #1
 8005c74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c76:	e014      	b.n	8005ca2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	4013      	ands	r3, r2
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d108      	bne.n	8005c9a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0202 	orr.w	r2, r2, #2
 8005c96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c98:	e003      	b.n	8005ca2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d009      	beq.n	8005cc0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d24 <HAL_FDCAN_ActivateNotification+0xec>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d28 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	0f9b      	lsrs	r3, r3, #30
 8005cfa:	490b      	ldr	r1, [pc, #44]	@ (8005d28 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e008      	b.n	8005d16 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d0a:	f043 0202 	orr.w	r2, r3, #2
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	3fcfffff 	.word	0x3fcfffff
 8005d28:	4000a800 	.word	0x4000a800

08005d2c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b096      	sub	sp, #88	@ 0x58
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005d34:	4b95      	ldr	r3, [pc, #596]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	079b      	lsls	r3, r3, #30
 8005d3a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005d3c:	4b93      	ldr	r3, [pc, #588]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	079b      	lsls	r3, r3, #30
 8005d42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d44:	4013      	ands	r3, r2
 8005d46:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005d52:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d74:	4013      	ands	r3, r2
 8005d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d96:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005d9a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005da4:	4013      	ands	r3, r2
 8005da6:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dae:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005db2:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00f      	beq.n	8005dfa <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dec:	651a      	str	r2, [r3, #80]	@ 0x50
 8005dee:	4b67      	ldr	r3, [pc, #412]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fa44 	bl	8006282 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01c      	beq.n	8005e3e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d017      	beq.n	8005e3e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005e16:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e22:	4013      	ands	r3, r2
 8005e24:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e30:	4b56      	ldr	r3, [pc, #344]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005e36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f9f9 	bl	8006230 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00d      	beq.n	8005e60 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e4a:	4b51      	ldr	r3, [pc, #324]	@ (8005f90 <HAL_FDCAN_IRQHandler+0x264>)
 8005e4c:	400b      	ands	r3, r1
 8005e4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e50:	4a4e      	ldr	r2, [pc, #312]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e54:	0f9b      	lsrs	r3, r3, #30
 8005e56:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005e58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f9b2 	bl	80061c4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e6c:	4b48      	ldr	r3, [pc, #288]	@ (8005f90 <HAL_FDCAN_IRQHandler+0x264>)
 8005e6e:	400b      	ands	r3, r1
 8005e70:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e72:	4a46      	ldr	r2, [pc, #280]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e76:	0f9b      	lsrs	r3, r3, #30
 8005e78:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005e7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f9ac 	bl	80061da <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005e8e:	4b40      	ldr	r3, [pc, #256]	@ (8005f90 <HAL_FDCAN_IRQHandler+0x264>)
 8005e90:	400b      	ands	r3, r1
 8005e92:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e94:	4a3d      	ldr	r2, [pc, #244]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e98:	0f9b      	lsrs	r3, r3, #30
 8005e9a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005e9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fa fab8 	bl	8000414 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005eb0:	4b37      	ldr	r3, [pc, #220]	@ (8005f90 <HAL_FDCAN_IRQHandler+0x264>)
 8005eb2:	400b      	ands	r3, r1
 8005eb4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005eb6:	4a35      	ldr	r2, [pc, #212]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005eb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eba:	0f9b      	lsrs	r3, r3, #30
 8005ebc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005ebe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f995 	bl	80061f0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00f      	beq.n	8005ef0 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ee2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ee4:	4b29      	ldr	r3, [pc, #164]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f98b 	bl	8006206 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01c      	beq.n	8005f34 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d017      	beq.n	8005f34 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f0c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f18:	4013      	ands	r3, r2
 8005f1a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f24:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f26:	4b19      	ldr	r3, [pc, #100]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005f2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f973 	bl	800621a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00f      	beq.n	8005f5e <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005f50:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f52:	4b0e      	ldr	r3, [pc, #56]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f974 	bl	8006246 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d015      	beq.n	8005f94 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d010      	beq.n	8005f94 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005f7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f7c:	4b03      	ldr	r3, [pc, #12]	@ (8005f8c <HAL_FDCAN_IRQHandler+0x260>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f969 	bl	800625a <HAL_FDCAN_TimestampWraparoundCallback>
 8005f88:	e004      	b.n	8005f94 <HAL_FDCAN_IRQHandler+0x268>
 8005f8a:	bf00      	nop
 8005f8c:	4000a800 	.word	0x4000a800
 8005f90:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00f      	beq.n	8005fbe <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005fb0:	651a      	str	r2, [r3, #80]	@ 0x50
 8005fb2:	4b81      	ldr	r3, [pc, #516]	@ (80061b8 <HAL_FDCAN_IRQHandler+0x48c>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f958 	bl	800626e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d014      	beq.n	8005ff2 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00f      	beq.n	8005ff2 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005fda:	651a      	str	r2, [r3, #80]	@ 0x50
 8005fdc:	4b76      	ldr	r3, [pc, #472]	@ (80061b8 <HAL_FDCAN_IRQHandler+0x48c>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fe8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00d      	beq.n	8006014 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ffe:	4b6f      	ldr	r3, [pc, #444]	@ (80061bc <HAL_FDCAN_IRQHandler+0x490>)
 8006000:	400b      	ands	r3, r1
 8006002:	6513      	str	r3, [r2, #80]	@ 0x50
 8006004:	4a6c      	ldr	r2, [pc, #432]	@ (80061b8 <HAL_FDCAN_IRQHandler+0x48c>)
 8006006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006008:	0f9b      	lsrs	r3, r3, #30
 800600a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800600c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f94b 	bl	80062aa <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006016:	2b00      	cmp	r3, #0
 8006018:	d011      	beq.n	800603e <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006020:	4b66      	ldr	r3, [pc, #408]	@ (80061bc <HAL_FDCAN_IRQHandler+0x490>)
 8006022:	400b      	ands	r3, r1
 8006024:	6513      	str	r3, [r2, #80]	@ 0x50
 8006026:	4a64      	ldr	r2, [pc, #400]	@ (80061b8 <HAL_FDCAN_IRQHandler+0x48c>)
 8006028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800602a:	0f9b      	lsrs	r3, r3, #30
 800602c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a5f      	ldr	r2, [pc, #380]	@ (80061c0 <HAL_FDCAN_IRQHandler+0x494>)
 8006044:	4293      	cmp	r3, r2
 8006046:	f040 80aa 	bne.w	800619e <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80a2 	beq.w	800619e <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800606e:	4013      	ands	r3, r2
 8006070:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800607c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006086:	4013      	ands	r3, r2
 8006088:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8006094:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609e:	4013      	ands	r3, r2
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80060ac:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b4:	6a3a      	ldr	r2, [r7, #32]
 80060b6:	4013      	ands	r3, r2
 80060b8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80060c4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	4013      	ands	r3, r2
 80060d0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80060e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ee:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80060f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f8e4 	bl	80062c0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80060f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006104:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006106:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f8e4 	bl	80062d6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d019      	beq.n	800614c <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d014      	beq.n	800614c <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006128:	0c1b      	lsrs	r3, r3, #16
 800612a:	b29b      	uxth	r3, r3
 800612c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006138:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2240      	movs	r2, #64	@ 0x40
 8006140:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	6939      	ldr	r1, [r7, #16]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f8d0 	bl	80062ec <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006158:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800615a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8d1 	bl	8006304 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	6a3a      	ldr	r2, [r7, #32]
 800616e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f874 	bl	8006296 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80061ae:	bf00      	nop
 80061b0:	3758      	adds	r7, #88	@ 0x58
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	4000a800 	.word	0x4000a800
 80061bc:	3fcfffff 	.word	0x3fcfffff
 80061c0:	4000a000 	.word	0x4000a000

080061c4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006328:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006332:	4ba7      	ldr	r3, [pc, #668]	@ (80065d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006334:	4013      	ands	r3, r2
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	0091      	lsls	r1, r2, #2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	430b      	orrs	r3, r1
 8006340:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800634c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006354:	041a      	lsls	r2, r3, #16
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	4413      	add	r3, r2
 8006368:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006372:	4b97      	ldr	r3, [pc, #604]	@ (80065d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006374:	4013      	ands	r3, r2
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	0091      	lsls	r1, r2, #2
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	430b      	orrs	r3, r1
 8006380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006394:	041a      	lsls	r2, r3, #16
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4413      	add	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80063b4:	4b86      	ldr	r3, [pc, #536]	@ (80065d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	0091      	lsls	r1, r2, #2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	430b      	orrs	r3, r1
 80063c2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063ce:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	041a      	lsls	r2, r3, #16
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80063ea:	fb02 f303 	mul.w	r3, r2, r3
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4413      	add	r3, r2
 80063f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80063fc:	4b74      	ldr	r3, [pc, #464]	@ (80065d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80063fe:	4013      	ands	r3, r2
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	0091      	lsls	r1, r2, #2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	430b      	orrs	r3, r1
 800640a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006416:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641e:	041a      	lsls	r2, r3, #16
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006432:	fb02 f303 	mul.w	r3, r2, r3
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	4413      	add	r3, r2
 800643a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006444:	4b62      	ldr	r3, [pc, #392]	@ (80065d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006446:	4013      	ands	r3, r2
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	0091      	lsls	r1, r2, #2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	430b      	orrs	r3, r1
 8006452:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	4413      	add	r3, r2
 8006466:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006470:	4b57      	ldr	r3, [pc, #348]	@ (80065d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006472:	4013      	ands	r3, r2
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	0091      	lsls	r1, r2, #2
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	430b      	orrs	r3, r1
 800647e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800648a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006492:	041a      	lsls	r2, r3, #16
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	4413      	add	r3, r2
 80064a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80064b2:	4b47      	ldr	r3, [pc, #284]	@ (80065d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	0091      	lsls	r1, r2, #2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	430b      	orrs	r3, r1
 80064c0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80064cc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d4:	041a      	lsls	r2, r3, #16
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80064e8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f0:	061a      	lsls	r2, r3, #24
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006500:	4b34      	ldr	r3, [pc, #208]	@ (80065d4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006502:	4413      	add	r3, r2
 8006504:	009a      	lsls	r2, r3, #2
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	441a      	add	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006536:	fb01 f303 	mul.w	r3, r1, r3
 800653a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800653c:	441a      	add	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800654e:	fb01 f303 	mul.w	r3, r1, r3
 8006552:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006554:	441a      	add	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006562:	6879      	ldr	r1, [r7, #4]
 8006564:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006566:	fb01 f303 	mul.w	r3, r1, r3
 800656a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800656c:	441a      	add	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	441a      	add	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006596:	fb01 f303 	mul.w	r3, r1, r3
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80065b2:	fb01 f303 	mul.w	r3, r1, r3
 80065b6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80065b8:	441a      	add	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c6:	4a04      	ldr	r2, [pc, #16]	@ (80065d8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d915      	bls.n	80065f8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80065cc:	e006      	b.n	80065dc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80065ce:	bf00      	nop
 80065d0:	ffff0003 	.word	0xffff0003
 80065d4:	10002b00 	.word	0x10002b00
 80065d8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065e2:	f043 0220 	orr.w	r2, r3, #32
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2203      	movs	r2, #3
 80065f0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e010      	b.n	800661a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	e005      	b.n	800660c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3304      	adds	r3, #4
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	429a      	cmp	r2, r3
 8006616:	d3f3      	bcc.n	8006600 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop

08006628 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006628:	b480      	push	{r7}
 800662a:	b089      	sub	sp, #36	@ 0x24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10a      	bne.n	8006654 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006646:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800664e:	4313      	orrs	r3, r2
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	e00a      	b.n	800666a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800665c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006662:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006664:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006668:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006674:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800667a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006680:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	3304      	adds	r3, #4
 80066ac:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	3304      	adds	r3, #4
 80066b8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	e020      	b.n	8006702 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	3303      	adds	r3, #3
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	4413      	add	r3, r2
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	3302      	adds	r3, #2
 80066d0:	6879      	ldr	r1, [r7, #4]
 80066d2:	440b      	add	r3, r1
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80066d8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	3301      	adds	r3, #1
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	440b      	add	r3, r1
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80066e6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	440a      	add	r2, r1
 80066ee:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80066f0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	3304      	adds	r3, #4
 80066fa:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	3304      	adds	r3, #4
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	4a06      	ldr	r2, [pc, #24]	@ (8006720 <FDCAN_CopyMessageToRAM+0xf8>)
 8006708:	5cd3      	ldrb	r3, [r2, r3]
 800670a:	461a      	mov	r2, r3
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	4293      	cmp	r3, r2
 8006710:	d3d6      	bcc.n	80066c0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006712:	bf00      	nop
 8006714:	bf00      	nop
 8006716:	3724      	adds	r7, #36	@ 0x24
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	0800aea4 	.word	0x0800aea4

08006724 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006724:	b480      	push	{r7}
 8006726:	b089      	sub	sp, #36	@ 0x24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006732:	4b89      	ldr	r3, [pc, #548]	@ (8006958 <HAL_GPIO_Init+0x234>)
 8006734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006736:	e194      	b.n	8006a62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	2101      	movs	r1, #1
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	fa01 f303 	lsl.w	r3, r1, r3
 8006744:	4013      	ands	r3, r2
 8006746:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 8186 	beq.w	8006a5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f003 0303 	and.w	r3, r3, #3
 8006758:	2b01      	cmp	r3, #1
 800675a:	d005      	beq.n	8006768 <HAL_GPIO_Init+0x44>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f003 0303 	and.w	r3, r3, #3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d130      	bne.n	80067ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	2203      	movs	r2, #3
 8006774:	fa02 f303 	lsl.w	r3, r2, r3
 8006778:	43db      	mvns	r3, r3
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	4013      	ands	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	4313      	orrs	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800679e:	2201      	movs	r2, #1
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	fa02 f303 	lsl.w	r3, r2, r3
 80067a6:	43db      	mvns	r3, r3
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	4013      	ands	r3, r2
 80067ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	091b      	lsrs	r3, r3, #4
 80067b4:	f003 0201 	and.w	r2, r3, #1
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d017      	beq.n	8006806 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	2203      	movs	r2, #3
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	43db      	mvns	r3, r3
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	4013      	ands	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d123      	bne.n	800685a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	08da      	lsrs	r2, r3, #3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3208      	adds	r2, #8
 800681a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	220f      	movs	r2, #15
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	43db      	mvns	r3, r3
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	4013      	ands	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	691a      	ldr	r2, [r3, #16]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4313      	orrs	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	08da      	lsrs	r2, r3, #3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3208      	adds	r2, #8
 8006854:	69b9      	ldr	r1, [r7, #24]
 8006856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	2203      	movs	r2, #3
 8006866:	fa02 f303 	lsl.w	r3, r2, r3
 800686a:	43db      	mvns	r3, r3
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	4013      	ands	r3, r2
 8006870:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f003 0203 	and.w	r2, r3, #3
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	4313      	orrs	r3, r2
 8006886:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80e0 	beq.w	8006a5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800689c:	4b2f      	ldr	r3, [pc, #188]	@ (800695c <HAL_GPIO_Init+0x238>)
 800689e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80068a2:	4a2e      	ldr	r2, [pc, #184]	@ (800695c <HAL_GPIO_Init+0x238>)
 80068a4:	f043 0302 	orr.w	r3, r3, #2
 80068a8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80068ac:	4b2b      	ldr	r3, [pc, #172]	@ (800695c <HAL_GPIO_Init+0x238>)
 80068ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068ba:	4a29      	ldr	r2, [pc, #164]	@ (8006960 <HAL_GPIO_Init+0x23c>)
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	089b      	lsrs	r3, r3, #2
 80068c0:	3302      	adds	r3, #2
 80068c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	220f      	movs	r2, #15
 80068d2:	fa02 f303 	lsl.w	r3, r2, r3
 80068d6:	43db      	mvns	r3, r3
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	4013      	ands	r3, r2
 80068dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a20      	ldr	r2, [pc, #128]	@ (8006964 <HAL_GPIO_Init+0x240>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d052      	beq.n	800698c <HAL_GPIO_Init+0x268>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006968 <HAL_GPIO_Init+0x244>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d031      	beq.n	8006952 <HAL_GPIO_Init+0x22e>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a1e      	ldr	r2, [pc, #120]	@ (800696c <HAL_GPIO_Init+0x248>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d02b      	beq.n	800694e <HAL_GPIO_Init+0x22a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006970 <HAL_GPIO_Init+0x24c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d025      	beq.n	800694a <HAL_GPIO_Init+0x226>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a1c      	ldr	r2, [pc, #112]	@ (8006974 <HAL_GPIO_Init+0x250>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01f      	beq.n	8006946 <HAL_GPIO_Init+0x222>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a1b      	ldr	r2, [pc, #108]	@ (8006978 <HAL_GPIO_Init+0x254>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d019      	beq.n	8006942 <HAL_GPIO_Init+0x21e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a1a      	ldr	r2, [pc, #104]	@ (800697c <HAL_GPIO_Init+0x258>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <HAL_GPIO_Init+0x21a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a19      	ldr	r2, [pc, #100]	@ (8006980 <HAL_GPIO_Init+0x25c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00d      	beq.n	800693a <HAL_GPIO_Init+0x216>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <HAL_GPIO_Init+0x260>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d007      	beq.n	8006936 <HAL_GPIO_Init+0x212>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a17      	ldr	r2, [pc, #92]	@ (8006988 <HAL_GPIO_Init+0x264>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d101      	bne.n	8006932 <HAL_GPIO_Init+0x20e>
 800692e:	2309      	movs	r3, #9
 8006930:	e02d      	b.n	800698e <HAL_GPIO_Init+0x26a>
 8006932:	230a      	movs	r3, #10
 8006934:	e02b      	b.n	800698e <HAL_GPIO_Init+0x26a>
 8006936:	2308      	movs	r3, #8
 8006938:	e029      	b.n	800698e <HAL_GPIO_Init+0x26a>
 800693a:	2307      	movs	r3, #7
 800693c:	e027      	b.n	800698e <HAL_GPIO_Init+0x26a>
 800693e:	2306      	movs	r3, #6
 8006940:	e025      	b.n	800698e <HAL_GPIO_Init+0x26a>
 8006942:	2305      	movs	r3, #5
 8006944:	e023      	b.n	800698e <HAL_GPIO_Init+0x26a>
 8006946:	2304      	movs	r3, #4
 8006948:	e021      	b.n	800698e <HAL_GPIO_Init+0x26a>
 800694a:	2303      	movs	r3, #3
 800694c:	e01f      	b.n	800698e <HAL_GPIO_Init+0x26a>
 800694e:	2302      	movs	r3, #2
 8006950:	e01d      	b.n	800698e <HAL_GPIO_Init+0x26a>
 8006952:	2301      	movs	r3, #1
 8006954:	e01b      	b.n	800698e <HAL_GPIO_Init+0x26a>
 8006956:	bf00      	nop
 8006958:	58000080 	.word	0x58000080
 800695c:	58024400 	.word	0x58024400
 8006960:	58000400 	.word	0x58000400
 8006964:	58020000 	.word	0x58020000
 8006968:	58020400 	.word	0x58020400
 800696c:	58020800 	.word	0x58020800
 8006970:	58020c00 	.word	0x58020c00
 8006974:	58021000 	.word	0x58021000
 8006978:	58021400 	.word	0x58021400
 800697c:	58021800 	.word	0x58021800
 8006980:	58021c00 	.word	0x58021c00
 8006984:	58022000 	.word	0x58022000
 8006988:	58022400 	.word	0x58022400
 800698c:	2300      	movs	r3, #0
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	f002 0203 	and.w	r2, r2, #3
 8006994:	0092      	lsls	r2, r2, #2
 8006996:	4093      	lsls	r3, r2
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	4313      	orrs	r3, r2
 800699c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800699e:	4938      	ldr	r1, [pc, #224]	@ (8006a80 <HAL_GPIO_Init+0x35c>)
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	089b      	lsrs	r3, r3, #2
 80069a4:	3302      	adds	r3, #2
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	43db      	mvns	r3, r3
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	4013      	ands	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80069d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80069da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	43db      	mvns	r3, r3
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	4013      	ands	r3, r2
 80069ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4013      	ands	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	43db      	mvns	r3, r3
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f47f ae63 	bne.w	8006738 <HAL_GPIO_Init+0x14>
  }
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	3724      	adds	r7, #36	@ 0x24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	58000400 	.word	0x58000400

08006a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e08b      	b.n	8006bae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fa fc5c 	bl	8001368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2224      	movs	r2, #36	@ 0x24
 8006ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0201 	bic.w	r2, r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d107      	bne.n	8006afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006afa:	609a      	str	r2, [r3, #8]
 8006afc:	e006      	b.n	8006b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d108      	bne.n	8006b26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b22:	605a      	str	r2, [r3, #4]
 8006b24:	e007      	b.n	8006b36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6859      	ldr	r1, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb8 <HAL_I2C_Init+0x134>)
 8006b42:	430b      	orrs	r3, r1
 8006b44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691a      	ldr	r2, [r3, #16]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69d9      	ldr	r1, [r3, #28]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1a      	ldr	r2, [r3, #32]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	02008000 	.word	0x02008000

08006bbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	d138      	bne.n	8006c44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e032      	b.n	8006c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2224      	movs	r2, #36	@ 0x24
 8006bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0201 	bic.w	r2, r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6819      	ldr	r1, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e000      	b.n	8006c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c44:	2302      	movs	r3, #2
  }
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b20      	cmp	r3, #32
 8006c66:	d139      	bne.n	8006cdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e033      	b.n	8006cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2224      	movs	r2, #36	@ 0x24
 8006c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0201 	bic.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006ca4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e000      	b.n	8006cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cdc:	2302      	movs	r3, #2
  }
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
	...

08006cec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006cf4:	4b19      	ldr	r3, [pc, #100]	@ (8006d5c <HAL_PWREx_ConfigSupply+0x70>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d00a      	beq.n	8006d16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006d00:	4b16      	ldr	r3, [pc, #88]	@ (8006d5c <HAL_PWREx_ConfigSupply+0x70>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d001      	beq.n	8006d12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e01f      	b.n	8006d52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	e01d      	b.n	8006d52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d16:	4b11      	ldr	r3, [pc, #68]	@ (8006d5c <HAL_PWREx_ConfigSupply+0x70>)
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f023 0207 	bic.w	r2, r3, #7
 8006d1e:	490f      	ldr	r1, [pc, #60]	@ (8006d5c <HAL_PWREx_ConfigSupply+0x70>)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006d26:	f7fa ff7b 	bl	8001c20 <HAL_GetTick>
 8006d2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d2c:	e009      	b.n	8006d42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d2e:	f7fa ff77 	bl	8001c20 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d3c:	d901      	bls.n	8006d42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e007      	b.n	8006d52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d42:	4b06      	ldr	r3, [pc, #24]	@ (8006d5c <HAL_PWREx_ConfigSupply+0x70>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d4e:	d1ee      	bne.n	8006d2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	58024800 	.word	0x58024800

08006d60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08c      	sub	sp, #48	@ 0x30
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f000 bc1f 	b.w	80075b2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80b3 	beq.w	8006ee8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d82:	4b95      	ldr	r3, [pc, #596]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d8c:	4b92      	ldr	r3, [pc, #584]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d94:	2b10      	cmp	r3, #16
 8006d96:	d007      	beq.n	8006da8 <HAL_RCC_OscConfig+0x48>
 8006d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9a:	2b18      	cmp	r3, #24
 8006d9c:	d112      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x64>
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	f003 0303 	and.w	r3, r3, #3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d10d      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da8:	4b8b      	ldr	r3, [pc, #556]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8098 	beq.w	8006ee6 <HAL_RCC_OscConfig+0x186>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f040 8093 	bne.w	8006ee6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e3f6      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dcc:	d106      	bne.n	8006ddc <HAL_RCC_OscConfig+0x7c>
 8006dce:	4b82      	ldr	r3, [pc, #520]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a81      	ldr	r2, [pc, #516]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e058      	b.n	8006e8e <HAL_RCC_OscConfig+0x12e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d112      	bne.n	8006e0a <HAL_RCC_OscConfig+0xaa>
 8006de4:	4b7c      	ldr	r3, [pc, #496]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a7b      	ldr	r2, [pc, #492]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	4b79      	ldr	r3, [pc, #484]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a78      	ldr	r2, [pc, #480]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006df6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	4b76      	ldr	r3, [pc, #472]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a75      	ldr	r2, [pc, #468]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	e041      	b.n	8006e8e <HAL_RCC_OscConfig+0x12e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e12:	d112      	bne.n	8006e3a <HAL_RCC_OscConfig+0xda>
 8006e14:	4b70      	ldr	r3, [pc, #448]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a6f      	ldr	r2, [pc, #444]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	4b6d      	ldr	r3, [pc, #436]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6c      	ldr	r2, [pc, #432]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e26:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a69      	ldr	r2, [pc, #420]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	e029      	b.n	8006e8e <HAL_RCC_OscConfig+0x12e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006e42:	d112      	bne.n	8006e6a <HAL_RCC_OscConfig+0x10a>
 8006e44:	4b64      	ldr	r3, [pc, #400]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a63      	ldr	r2, [pc, #396]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	4b61      	ldr	r3, [pc, #388]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a60      	ldr	r2, [pc, #384]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a5d      	ldr	r2, [pc, #372]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	e011      	b.n	8006e8e <HAL_RCC_OscConfig+0x12e>
 8006e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a5a      	ldr	r2, [pc, #360]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	4b58      	ldr	r3, [pc, #352]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a57      	ldr	r2, [pc, #348]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	4b55      	ldr	r3, [pc, #340]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a54      	ldr	r2, [pc, #336]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006e88:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d013      	beq.n	8006ebe <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e96:	f7fa fec3 	bl	8001c20 <HAL_GetTick>
 8006e9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e9c:	e008      	b.n	8006eb0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e9e:	f7fa febf 	bl	8001c20 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	2b64      	cmp	r3, #100	@ 0x64
 8006eaa:	d901      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e380      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006eb0:	4b49      	ldr	r3, [pc, #292]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0f0      	beq.n	8006e9e <HAL_RCC_OscConfig+0x13e>
 8006ebc:	e014      	b.n	8006ee8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebe:	f7fa feaf 	bl	8001c20 <HAL_GetTick>
 8006ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec6:	f7fa feab 	bl	8001c20 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b64      	cmp	r3, #100	@ 0x64
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e36c      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ed8:	4b3f      	ldr	r3, [pc, #252]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f0      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x166>
 8006ee4:	e000      	b.n	8006ee8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 808c 	beq.w	800700e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ef6:	4b38      	ldr	r3, [pc, #224]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006efe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f00:	4b35      	ldr	r3, [pc, #212]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f04:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <HAL_RCC_OscConfig+0x1bc>
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	2b18      	cmp	r3, #24
 8006f10:	d137      	bne.n	8006f82 <HAL_RCC_OscConfig+0x222>
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d132      	bne.n	8006f82 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_RCC_OscConfig+0x1d4>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e33e      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f34:	4b28      	ldr	r3, [pc, #160]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f023 0219 	bic.w	r2, r3, #25
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	4925      	ldr	r1, [pc, #148]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f46:	f7fa fe6b 	bl	8001c20 <HAL_GetTick>
 8006f4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f4e:	f7fa fe67 	bl	8001c20 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e328      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f60:	4b1d      	ldr	r3, [pc, #116]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0f0      	beq.n	8006f4e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	061b      	lsls	r3, r3, #24
 8006f7a:	4917      	ldr	r1, [pc, #92]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f80:	e045      	b.n	800700e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d028      	beq.n	8006fdc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f8a:	4b13      	ldr	r3, [pc, #76]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f023 0219 	bic.w	r2, r3, #25
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	4910      	ldr	r1, [pc, #64]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9c:	f7fa fe40 	bl	8001c20 <HAL_GetTick>
 8006fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fa4:	f7fa fe3c 	bl	8001c20 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e2fd      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fb6:	4b08      	ldr	r3, [pc, #32]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0f0      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc2:	4b05      	ldr	r3, [pc, #20]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	061b      	lsls	r3, r3, #24
 8006fd0:	4901      	ldr	r1, [pc, #4]	@ (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	604b      	str	r3, [r1, #4]
 8006fd6:	e01a      	b.n	800700e <HAL_RCC_OscConfig+0x2ae>
 8006fd8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fdc:	4b97      	ldr	r3, [pc, #604]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a96      	ldr	r2, [pc, #600]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8006fe2:	f023 0301 	bic.w	r3, r3, #1
 8006fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe8:	f7fa fe1a 	bl	8001c20 <HAL_GetTick>
 8006fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ff0:	f7fa fe16 	bl	8001c20 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e2d7      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007002:	4b8e      	ldr	r3, [pc, #568]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1f0      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0310 	and.w	r3, r3, #16
 8007016:	2b00      	cmp	r3, #0
 8007018:	d06a      	beq.n	80070f0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800701a:	4b88      	ldr	r3, [pc, #544]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007022:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007024:	4b85      	ldr	r3, [pc, #532]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8007026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007028:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b08      	cmp	r3, #8
 800702e:	d007      	beq.n	8007040 <HAL_RCC_OscConfig+0x2e0>
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2b18      	cmp	r3, #24
 8007034:	d11b      	bne.n	800706e <HAL_RCC_OscConfig+0x30e>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f003 0303 	and.w	r3, r3, #3
 800703c:	2b01      	cmp	r3, #1
 800703e:	d116      	bne.n	800706e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007040:	4b7e      	ldr	r3, [pc, #504]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_RCC_OscConfig+0x2f8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	2b80      	cmp	r3, #128	@ 0x80
 8007052:	d001      	beq.n	8007058 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e2ac      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007058:	4b78      	ldr	r3, [pc, #480]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	061b      	lsls	r3, r3, #24
 8007066:	4975      	ldr	r1, [pc, #468]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8007068:	4313      	orrs	r3, r2
 800706a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800706c:	e040      	b.n	80070f0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d023      	beq.n	80070be <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007076:	4b71      	ldr	r3, [pc, #452]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a70      	ldr	r2, [pc, #448]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 800707c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007082:	f7fa fdcd 	bl	8001c20 <HAL_GetTick>
 8007086:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007088:	e008      	b.n	800709c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800708a:	f7fa fdc9 	bl	8001c20 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e28a      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800709c:	4b67      	ldr	r3, [pc, #412]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0f0      	beq.n	800708a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070a8:	4b64      	ldr	r3, [pc, #400]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	061b      	lsls	r3, r3, #24
 80070b6:	4961      	ldr	r1, [pc, #388]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60cb      	str	r3, [r1, #12]
 80070bc:	e018      	b.n	80070f0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80070be:	4b5f      	ldr	r3, [pc, #380]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a5e      	ldr	r2, [pc, #376]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 80070c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ca:	f7fa fda9 	bl	8001c20 <HAL_GetTick>
 80070ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070d0:	e008      	b.n	80070e4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80070d2:	f7fa fda5 	bl	8001c20 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e266      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070e4:	4b55      	ldr	r3, [pc, #340]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1f0      	bne.n	80070d2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d036      	beq.n	800716a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d019      	beq.n	8007138 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007104:	4b4d      	ldr	r3, [pc, #308]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8007106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007108:	4a4c      	ldr	r2, [pc, #304]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 800710a:	f043 0301 	orr.w	r3, r3, #1
 800710e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007110:	f7fa fd86 	bl	8001c20 <HAL_GetTick>
 8007114:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007118:	f7fa fd82 	bl	8001c20 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e243      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800712a:	4b44      	ldr	r3, [pc, #272]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 800712c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f0      	beq.n	8007118 <HAL_RCC_OscConfig+0x3b8>
 8007136:	e018      	b.n	800716a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007138:	4b40      	ldr	r3, [pc, #256]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 800713a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800713c:	4a3f      	ldr	r2, [pc, #252]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 800713e:	f023 0301 	bic.w	r3, r3, #1
 8007142:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007144:	f7fa fd6c 	bl	8001c20 <HAL_GetTick>
 8007148:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800714c:	f7fa fd68 	bl	8001c20 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e229      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800715e:	4b37      	ldr	r3, [pc, #220]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8007160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f0      	bne.n	800714c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d036      	beq.n	80071e4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d019      	beq.n	80071b2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800717e:	4b2f      	ldr	r3, [pc, #188]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a2e      	ldr	r2, [pc, #184]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8007184:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007188:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800718a:	f7fa fd49 	bl	8001c20 <HAL_GetTick>
 800718e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007190:	e008      	b.n	80071a4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007192:	f7fa fd45 	bl	8001c20 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e206      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071a4:	4b25      	ldr	r3, [pc, #148]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0f0      	beq.n	8007192 <HAL_RCC_OscConfig+0x432>
 80071b0:	e018      	b.n	80071e4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071b2:	4b22      	ldr	r3, [pc, #136]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a21      	ldr	r2, [pc, #132]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 80071b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071be:	f7fa fd2f 	bl	8001c20 <HAL_GetTick>
 80071c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071c4:	e008      	b.n	80071d8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071c6:	f7fa fd2b 	bl	8001c20 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e1ec      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071d8:	4b18      	ldr	r3, [pc, #96]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1f0      	bne.n	80071c6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80af 	beq.w	8007350 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071f2:	4b13      	ldr	r3, [pc, #76]	@ (8007240 <HAL_RCC_OscConfig+0x4e0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a12      	ldr	r2, [pc, #72]	@ (8007240 <HAL_RCC_OscConfig+0x4e0>)
 80071f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071fe:	f7fa fd0f 	bl	8001c20 <HAL_GetTick>
 8007202:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007204:	e008      	b.n	8007218 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007206:	f7fa fd0b 	bl	8001c20 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b64      	cmp	r3, #100	@ 0x64
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e1cc      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007218:	4b09      	ldr	r3, [pc, #36]	@ (8007240 <HAL_RCC_OscConfig+0x4e0>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0f0      	beq.n	8007206 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d10b      	bne.n	8007244 <HAL_RCC_OscConfig+0x4e4>
 800722c:	4b03      	ldr	r3, [pc, #12]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 800722e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007230:	4a02      	ldr	r2, [pc, #8]	@ (800723c <HAL_RCC_OscConfig+0x4dc>)
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	6713      	str	r3, [r2, #112]	@ 0x70
 8007238:	e05b      	b.n	80072f2 <HAL_RCC_OscConfig+0x592>
 800723a:	bf00      	nop
 800723c:	58024400 	.word	0x58024400
 8007240:	58024800 	.word	0x58024800
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d112      	bne.n	8007272 <HAL_RCC_OscConfig+0x512>
 800724c:	4b9d      	ldr	r3, [pc, #628]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800724e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007250:	4a9c      	ldr	r2, [pc, #624]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007252:	f023 0301 	bic.w	r3, r3, #1
 8007256:	6713      	str	r3, [r2, #112]	@ 0x70
 8007258:	4b9a      	ldr	r3, [pc, #616]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800725a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800725c:	4a99      	ldr	r2, [pc, #612]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800725e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007262:	6713      	str	r3, [r2, #112]	@ 0x70
 8007264:	4b97      	ldr	r3, [pc, #604]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007268:	4a96      	ldr	r2, [pc, #600]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800726a:	f023 0304 	bic.w	r3, r3, #4
 800726e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007270:	e03f      	b.n	80072f2 <HAL_RCC_OscConfig+0x592>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b05      	cmp	r3, #5
 8007278:	d112      	bne.n	80072a0 <HAL_RCC_OscConfig+0x540>
 800727a:	4b92      	ldr	r3, [pc, #584]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727e:	4a91      	ldr	r2, [pc, #580]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007280:	f043 0304 	orr.w	r3, r3, #4
 8007284:	6713      	str	r3, [r2, #112]	@ 0x70
 8007286:	4b8f      	ldr	r3, [pc, #572]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728a:	4a8e      	ldr	r2, [pc, #568]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800728c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007290:	6713      	str	r3, [r2, #112]	@ 0x70
 8007292:	4b8c      	ldr	r3, [pc, #560]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007296:	4a8b      	ldr	r2, [pc, #556]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007298:	f043 0301 	orr.w	r3, r3, #1
 800729c:	6713      	str	r3, [r2, #112]	@ 0x70
 800729e:	e028      	b.n	80072f2 <HAL_RCC_OscConfig+0x592>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	2b85      	cmp	r3, #133	@ 0x85
 80072a6:	d112      	bne.n	80072ce <HAL_RCC_OscConfig+0x56e>
 80072a8:	4b86      	ldr	r3, [pc, #536]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ac:	4a85      	ldr	r2, [pc, #532]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072ae:	f043 0304 	orr.w	r3, r3, #4
 80072b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80072b4:	4b83      	ldr	r3, [pc, #524]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b8:	4a82      	ldr	r2, [pc, #520]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072be:	6713      	str	r3, [r2, #112]	@ 0x70
 80072c0:	4b80      	ldr	r3, [pc, #512]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c4:	4a7f      	ldr	r2, [pc, #508]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072c6:	f043 0301 	orr.w	r3, r3, #1
 80072ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80072cc:	e011      	b.n	80072f2 <HAL_RCC_OscConfig+0x592>
 80072ce:	4b7d      	ldr	r3, [pc, #500]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d2:	4a7c      	ldr	r2, [pc, #496]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072d4:	f023 0301 	bic.w	r3, r3, #1
 80072d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80072da:	4b7a      	ldr	r3, [pc, #488]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072de:	4a79      	ldr	r2, [pc, #484]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072e0:	f023 0304 	bic.w	r3, r3, #4
 80072e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80072e6:	4b77      	ldr	r3, [pc, #476]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ea:	4a76      	ldr	r2, [pc, #472]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80072ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d015      	beq.n	8007326 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fa:	f7fa fc91 	bl	8001c20 <HAL_GetTick>
 80072fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007300:	e00a      	b.n	8007318 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007302:	f7fa fc8d 	bl	8001c20 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007310:	4293      	cmp	r3, r2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e14c      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007318:	4b6a      	ldr	r3, [pc, #424]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800731a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0ee      	beq.n	8007302 <HAL_RCC_OscConfig+0x5a2>
 8007324:	e014      	b.n	8007350 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007326:	f7fa fc7b 	bl	8001c20 <HAL_GetTick>
 800732a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800732c:	e00a      	b.n	8007344 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800732e:	f7fa fc77 	bl	8001c20 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800733c:	4293      	cmp	r3, r2
 800733e:	d901      	bls.n	8007344 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e136      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007344:	4b5f      	ldr	r3, [pc, #380]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1ee      	bne.n	800732e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 812b 	beq.w	80075b0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800735a:	4b5a      	ldr	r3, [pc, #360]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007362:	2b18      	cmp	r3, #24
 8007364:	f000 80bb 	beq.w	80074de <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	2b02      	cmp	r3, #2
 800736e:	f040 8095 	bne.w	800749c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007372:	4b54      	ldr	r3, [pc, #336]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a53      	ldr	r2, [pc, #332]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007378:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800737c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737e:	f7fa fc4f 	bl	8001c20 <HAL_GetTick>
 8007382:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007384:	e008      	b.n	8007398 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007386:	f7fa fc4b 	bl	8001c20 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d901      	bls.n	8007398 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e10c      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007398:	4b4a      	ldr	r3, [pc, #296]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f0      	bne.n	8007386 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073a4:	4b47      	ldr	r3, [pc, #284]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80073a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073a8:	4b47      	ldr	r3, [pc, #284]	@ (80074c8 <HAL_RCC_OscConfig+0x768>)
 80073aa:	4013      	ands	r3, r2
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073b4:	0112      	lsls	r2, r2, #4
 80073b6:	430a      	orrs	r2, r1
 80073b8:	4942      	ldr	r1, [pc, #264]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c2:	3b01      	subs	r3, #1
 80073c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073cc:	3b01      	subs	r3, #1
 80073ce:	025b      	lsls	r3, r3, #9
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d8:	3b01      	subs	r3, #1
 80073da:	041b      	lsls	r3, r3, #16
 80073dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e6:	3b01      	subs	r3, #1
 80073e8:	061b      	lsls	r3, r3, #24
 80073ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073ee:	4935      	ldr	r1, [pc, #212]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80073f4:	4b33      	ldr	r3, [pc, #204]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80073f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f8:	4a32      	ldr	r2, [pc, #200]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80073fa:	f023 0301 	bic.w	r3, r3, #1
 80073fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007400:	4b30      	ldr	r3, [pc, #192]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007404:	4b31      	ldr	r3, [pc, #196]	@ (80074cc <HAL_RCC_OscConfig+0x76c>)
 8007406:	4013      	ands	r3, r2
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800740c:	00d2      	lsls	r2, r2, #3
 800740e:	492d      	ldr	r1, [pc, #180]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007410:	4313      	orrs	r3, r2
 8007412:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007414:	4b2b      	ldr	r3, [pc, #172]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007418:	f023 020c 	bic.w	r2, r3, #12
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007420:	4928      	ldr	r1, [pc, #160]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007422:	4313      	orrs	r3, r2
 8007424:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007426:	4b27      	ldr	r3, [pc, #156]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742a:	f023 0202 	bic.w	r2, r3, #2
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007432:	4924      	ldr	r1, [pc, #144]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007434:	4313      	orrs	r3, r2
 8007436:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007438:	4b22      	ldr	r3, [pc, #136]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800743a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743c:	4a21      	ldr	r2, [pc, #132]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800743e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007444:	4b1f      	ldr	r3, [pc, #124]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007448:	4a1e      	ldr	r2, [pc, #120]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800744a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800744e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007450:	4b1c      	ldr	r3, [pc, #112]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007454:	4a1b      	ldr	r2, [pc, #108]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007456:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800745a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800745c:	4b19      	ldr	r3, [pc, #100]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	4a18      	ldr	r2, [pc, #96]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007468:	4b16      	ldr	r3, [pc, #88]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a15      	ldr	r2, [pc, #84]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800746e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007474:	f7fa fbd4 	bl	8001c20 <HAL_GetTick>
 8007478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747c:	f7fa fbd0 	bl	8001c20 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e091      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800748e:	4b0d      	ldr	r3, [pc, #52]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0f0      	beq.n	800747c <HAL_RCC_OscConfig+0x71c>
 800749a:	e089      	b.n	80075b0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749c:	4b09      	ldr	r3, [pc, #36]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a08      	ldr	r2, [pc, #32]	@ (80074c4 <HAL_RCC_OscConfig+0x764>)
 80074a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fa fbba 	bl	8001c20 <HAL_GetTick>
 80074ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074ae:	e00f      	b.n	80074d0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b0:	f7fa fbb6 	bl	8001c20 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d908      	bls.n	80074d0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e077      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
 80074c2:	bf00      	nop
 80074c4:	58024400 	.word	0x58024400
 80074c8:	fffffc0c 	.word	0xfffffc0c
 80074cc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074d0:	4b3a      	ldr	r3, [pc, #232]	@ (80075bc <HAL_RCC_OscConfig+0x85c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e9      	bne.n	80074b0 <HAL_RCC_OscConfig+0x750>
 80074dc:	e068      	b.n	80075b0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80074de:	4b37      	ldr	r3, [pc, #220]	@ (80075bc <HAL_RCC_OscConfig+0x85c>)
 80074e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074e4:	4b35      	ldr	r3, [pc, #212]	@ (80075bc <HAL_RCC_OscConfig+0x85c>)
 80074e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d031      	beq.n	8007556 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f003 0203 	and.w	r2, r3, #3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d12a      	bne.n	8007556 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	091b      	lsrs	r3, r3, #4
 8007504:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800750c:	429a      	cmp	r2, r3
 800750e:	d122      	bne.n	8007556 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800751c:	429a      	cmp	r2, r3
 800751e:	d11a      	bne.n	8007556 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	0a5b      	lsrs	r3, r3, #9
 8007524:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800752c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d111      	bne.n	8007556 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	0c1b      	lsrs	r3, r3, #16
 8007536:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007540:	429a      	cmp	r2, r3
 8007542:	d108      	bne.n	8007556 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	0e1b      	lsrs	r3, r3, #24
 8007548:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007552:	429a      	cmp	r2, r3
 8007554:	d001      	beq.n	800755a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e02b      	b.n	80075b2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800755a:	4b18      	ldr	r3, [pc, #96]	@ (80075bc <HAL_RCC_OscConfig+0x85c>)
 800755c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800755e:	08db      	lsrs	r3, r3, #3
 8007560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007564:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	429a      	cmp	r2, r3
 800756e:	d01f      	beq.n	80075b0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007570:	4b12      	ldr	r3, [pc, #72]	@ (80075bc <HAL_RCC_OscConfig+0x85c>)
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	4a11      	ldr	r2, [pc, #68]	@ (80075bc <HAL_RCC_OscConfig+0x85c>)
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800757c:	f7fa fb50 	bl	8001c20 <HAL_GetTick>
 8007580:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007582:	bf00      	nop
 8007584:	f7fa fb4c 	bl	8001c20 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	4293      	cmp	r3, r2
 800758e:	d0f9      	beq.n	8007584 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007590:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <HAL_RCC_OscConfig+0x85c>)
 8007592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007594:	4b0a      	ldr	r3, [pc, #40]	@ (80075c0 <HAL_RCC_OscConfig+0x860>)
 8007596:	4013      	ands	r3, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800759c:	00d2      	lsls	r2, r2, #3
 800759e:	4907      	ldr	r1, [pc, #28]	@ (80075bc <HAL_RCC_OscConfig+0x85c>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80075a4:	4b05      	ldr	r3, [pc, #20]	@ (80075bc <HAL_RCC_OscConfig+0x85c>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a8:	4a04      	ldr	r2, [pc, #16]	@ (80075bc <HAL_RCC_OscConfig+0x85c>)
 80075aa:	f043 0301 	orr.w	r3, r3, #1
 80075ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3730      	adds	r7, #48	@ 0x30
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	58024400 	.word	0x58024400
 80075c0:	ffff0007 	.word	0xffff0007

080075c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e19c      	b.n	8007912 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075d8:	4b8a      	ldr	r3, [pc, #552]	@ (8007804 <HAL_RCC_ClockConfig+0x240>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d910      	bls.n	8007608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075e6:	4b87      	ldr	r3, [pc, #540]	@ (8007804 <HAL_RCC_ClockConfig+0x240>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f023 020f 	bic.w	r2, r3, #15
 80075ee:	4985      	ldr	r1, [pc, #532]	@ (8007804 <HAL_RCC_ClockConfig+0x240>)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075f6:	4b83      	ldr	r3, [pc, #524]	@ (8007804 <HAL_RCC_ClockConfig+0x240>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 030f 	and.w	r3, r3, #15
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d001      	beq.n	8007608 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e184      	b.n	8007912 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d010      	beq.n	8007636 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	4b7b      	ldr	r3, [pc, #492]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007620:	429a      	cmp	r2, r3
 8007622:	d908      	bls.n	8007636 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007624:	4b78      	ldr	r3, [pc, #480]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	4975      	ldr	r1, [pc, #468]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007632:	4313      	orrs	r3, r2
 8007634:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0308 	and.w	r3, r3, #8
 800763e:	2b00      	cmp	r3, #0
 8007640:	d010      	beq.n	8007664 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695a      	ldr	r2, [r3, #20]
 8007646:	4b70      	ldr	r3, [pc, #448]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800764e:	429a      	cmp	r2, r3
 8007650:	d908      	bls.n	8007664 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007652:	4b6d      	ldr	r3, [pc, #436]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	496a      	ldr	r1, [pc, #424]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007660:	4313      	orrs	r3, r2
 8007662:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0310 	and.w	r3, r3, #16
 800766c:	2b00      	cmp	r3, #0
 800766e:	d010      	beq.n	8007692 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699a      	ldr	r2, [r3, #24]
 8007674:	4b64      	ldr	r3, [pc, #400]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800767c:	429a      	cmp	r2, r3
 800767e:	d908      	bls.n	8007692 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007680:	4b61      	ldr	r3, [pc, #388]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	495e      	ldr	r1, [pc, #376]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 800768e:	4313      	orrs	r3, r2
 8007690:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d010      	beq.n	80076c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	69da      	ldr	r2, [r3, #28]
 80076a2:	4b59      	ldr	r3, [pc, #356]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d908      	bls.n	80076c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076ae:	4b56      	ldr	r3, [pc, #344]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	4953      	ldr	r1, [pc, #332]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d010      	beq.n	80076ee <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	4b4d      	ldr	r3, [pc, #308]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	429a      	cmp	r2, r3
 80076da:	d908      	bls.n	80076ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076dc:	4b4a      	ldr	r3, [pc, #296]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	f023 020f 	bic.w	r2, r3, #15
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	4947      	ldr	r1, [pc, #284]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d055      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80076fa:	4b43      	ldr	r3, [pc, #268]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	4940      	ldr	r1, [pc, #256]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007708:	4313      	orrs	r3, r2
 800770a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d107      	bne.n	8007724 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007714:	4b3c      	ldr	r3, [pc, #240]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d121      	bne.n	8007764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e0f6      	b.n	8007912 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2b03      	cmp	r3, #3
 800772a:	d107      	bne.n	800773c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800772c:	4b36      	ldr	r3, [pc, #216]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d115      	bne.n	8007764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e0ea      	b.n	8007912 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d107      	bne.n	8007754 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007744:	4b30      	ldr	r3, [pc, #192]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774c:	2b00      	cmp	r3, #0
 800774e:	d109      	bne.n	8007764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e0de      	b.n	8007912 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007754:	4b2c      	ldr	r3, [pc, #176]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e0d6      	b.n	8007912 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007764:	4b28      	ldr	r3, [pc, #160]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f023 0207 	bic.w	r2, r3, #7
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	4925      	ldr	r1, [pc, #148]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007772:	4313      	orrs	r3, r2
 8007774:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007776:	f7fa fa53 	bl	8001c20 <HAL_GetTick>
 800777a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800777c:	e00a      	b.n	8007794 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800777e:	f7fa fa4f 	bl	8001c20 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800778c:	4293      	cmp	r3, r2
 800778e:	d901      	bls.n	8007794 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e0be      	b.n	8007912 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007794:	4b1c      	ldr	r3, [pc, #112]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d1eb      	bne.n	800777e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d010      	beq.n	80077d4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	4b14      	ldr	r3, [pc, #80]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	f003 030f 	and.w	r3, r3, #15
 80077be:	429a      	cmp	r2, r3
 80077c0:	d208      	bcs.n	80077d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077c2:	4b11      	ldr	r3, [pc, #68]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	f023 020f 	bic.w	r2, r3, #15
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	490e      	ldr	r1, [pc, #56]	@ (8007808 <HAL_RCC_ClockConfig+0x244>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007804 <HAL_RCC_ClockConfig+0x240>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d214      	bcs.n	800780c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e2:	4b08      	ldr	r3, [pc, #32]	@ (8007804 <HAL_RCC_ClockConfig+0x240>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 020f 	bic.w	r2, r3, #15
 80077ea:	4906      	ldr	r1, [pc, #24]	@ (8007804 <HAL_RCC_ClockConfig+0x240>)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077f2:	4b04      	ldr	r3, [pc, #16]	@ (8007804 <HAL_RCC_ClockConfig+0x240>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 030f 	and.w	r3, r3, #15
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d005      	beq.n	800780c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e086      	b.n	8007912 <HAL_RCC_ClockConfig+0x34e>
 8007804:	52002000 	.word	0x52002000
 8007808:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d010      	beq.n	800783a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	4b3f      	ldr	r3, [pc, #252]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007824:	429a      	cmp	r2, r3
 8007826:	d208      	bcs.n	800783a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007828:	4b3c      	ldr	r3, [pc, #240]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	4939      	ldr	r1, [pc, #228]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 8007836:	4313      	orrs	r3, r2
 8007838:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d010      	beq.n	8007868 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695a      	ldr	r2, [r3, #20]
 800784a:	4b34      	ldr	r3, [pc, #208]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007852:	429a      	cmp	r2, r3
 8007854:	d208      	bcs.n	8007868 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007856:	4b31      	ldr	r3, [pc, #196]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	492e      	ldr	r1, [pc, #184]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 8007864:	4313      	orrs	r3, r2
 8007866:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	2b00      	cmp	r3, #0
 8007872:	d010      	beq.n	8007896 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	699a      	ldr	r2, [r3, #24]
 8007878:	4b28      	ldr	r3, [pc, #160]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007880:	429a      	cmp	r2, r3
 8007882:	d208      	bcs.n	8007896 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007884:	4b25      	ldr	r3, [pc, #148]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	4922      	ldr	r1, [pc, #136]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 8007892:	4313      	orrs	r3, r2
 8007894:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d010      	beq.n	80078c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69da      	ldr	r2, [r3, #28]
 80078a6:	4b1d      	ldr	r3, [pc, #116]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d208      	bcs.n	80078c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078b2:	4b1a      	ldr	r3, [pc, #104]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	4917      	ldr	r1, [pc, #92]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80078c4:	f000 f834 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 80078c8:	4602      	mov	r2, r0
 80078ca:	4b14      	ldr	r3, [pc, #80]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	f003 030f 	and.w	r3, r3, #15
 80078d4:	4912      	ldr	r1, [pc, #72]	@ (8007920 <HAL_RCC_ClockConfig+0x35c>)
 80078d6:	5ccb      	ldrb	r3, [r1, r3]
 80078d8:	f003 031f 	and.w	r3, r3, #31
 80078dc:	fa22 f303 	lsr.w	r3, r2, r3
 80078e0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80078e2:	4b0e      	ldr	r3, [pc, #56]	@ (800791c <HAL_RCC_ClockConfig+0x358>)
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	4a0d      	ldr	r2, [pc, #52]	@ (8007920 <HAL_RCC_ClockConfig+0x35c>)
 80078ec:	5cd3      	ldrb	r3, [r2, r3]
 80078ee:	f003 031f 	and.w	r3, r3, #31
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	fa22 f303 	lsr.w	r3, r2, r3
 80078f8:	4a0a      	ldr	r2, [pc, #40]	@ (8007924 <HAL_RCC_ClockConfig+0x360>)
 80078fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007928 <HAL_RCC_ClockConfig+0x364>)
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007902:	4b0a      	ldr	r3, [pc, #40]	@ (800792c <HAL_RCC_ClockConfig+0x368>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f7fa f940 	bl	8001b8c <HAL_InitTick>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	58024400 	.word	0x58024400
 8007920:	0800ae8c 	.word	0x0800ae8c
 8007924:	24000004 	.word	0x24000004
 8007928:	24000000 	.word	0x24000000
 800792c:	24000008 	.word	0x24000008

08007930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007930:	b480      	push	{r7}
 8007932:	b089      	sub	sp, #36	@ 0x24
 8007934:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007936:	4bb3      	ldr	r3, [pc, #716]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800793e:	2b18      	cmp	r3, #24
 8007940:	f200 8155 	bhi.w	8007bee <HAL_RCC_GetSysClockFreq+0x2be>
 8007944:	a201      	add	r2, pc, #4	@ (adr r2, 800794c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794a:	bf00      	nop
 800794c:	080079b1 	.word	0x080079b1
 8007950:	08007bef 	.word	0x08007bef
 8007954:	08007bef 	.word	0x08007bef
 8007958:	08007bef 	.word	0x08007bef
 800795c:	08007bef 	.word	0x08007bef
 8007960:	08007bef 	.word	0x08007bef
 8007964:	08007bef 	.word	0x08007bef
 8007968:	08007bef 	.word	0x08007bef
 800796c:	080079d7 	.word	0x080079d7
 8007970:	08007bef 	.word	0x08007bef
 8007974:	08007bef 	.word	0x08007bef
 8007978:	08007bef 	.word	0x08007bef
 800797c:	08007bef 	.word	0x08007bef
 8007980:	08007bef 	.word	0x08007bef
 8007984:	08007bef 	.word	0x08007bef
 8007988:	08007bef 	.word	0x08007bef
 800798c:	080079dd 	.word	0x080079dd
 8007990:	08007bef 	.word	0x08007bef
 8007994:	08007bef 	.word	0x08007bef
 8007998:	08007bef 	.word	0x08007bef
 800799c:	08007bef 	.word	0x08007bef
 80079a0:	08007bef 	.word	0x08007bef
 80079a4:	08007bef 	.word	0x08007bef
 80079a8:	08007bef 	.word	0x08007bef
 80079ac:	080079e3 	.word	0x080079e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079b0:	4b94      	ldr	r3, [pc, #592]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d009      	beq.n	80079d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079bc:	4b91      	ldr	r3, [pc, #580]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	08db      	lsrs	r3, r3, #3
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	4a90      	ldr	r2, [pc, #576]	@ (8007c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079c8:	fa22 f303 	lsr.w	r3, r2, r3
 80079cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80079ce:	e111      	b.n	8007bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079d0:	4b8d      	ldr	r3, [pc, #564]	@ (8007c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079d2:	61bb      	str	r3, [r7, #24]
      break;
 80079d4:	e10e      	b.n	8007bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80079d6:	4b8d      	ldr	r3, [pc, #564]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079d8:	61bb      	str	r3, [r7, #24]
      break;
 80079da:	e10b      	b.n	8007bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80079dc:	4b8c      	ldr	r3, [pc, #560]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80079de:	61bb      	str	r3, [r7, #24]
      break;
 80079e0:	e108      	b.n	8007bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079e2:	4b88      	ldr	r3, [pc, #544]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80079ec:	4b85      	ldr	r3, [pc, #532]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f0:	091b      	lsrs	r3, r3, #4
 80079f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80079f8:	4b82      	ldr	r3, [pc, #520]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a02:	4b80      	ldr	r3, [pc, #512]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a06:	08db      	lsrs	r3, r3, #3
 8007a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	fb02 f303 	mul.w	r3, r2, r3
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80e1 	beq.w	8007be8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	f000 8083 	beq.w	8007b34 <HAL_RCC_GetSysClockFreq+0x204>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	f200 80a1 	bhi.w	8007b78 <HAL_RCC_GetSysClockFreq+0x248>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <HAL_RCC_GetSysClockFreq+0x114>
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d056      	beq.n	8007af0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a42:	e099      	b.n	8007b78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a44:	4b6f      	ldr	r3, [pc, #444]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d02d      	beq.n	8007aac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a50:	4b6c      	ldr	r3, [pc, #432]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	08db      	lsrs	r3, r3, #3
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	4a6b      	ldr	r2, [pc, #428]	@ (8007c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a60:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	ee07 3a90 	vmov	s15, r3
 8007a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7a:	4b62      	ldr	r3, [pc, #392]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a8e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007aaa:	e087      	b.n	8007bbc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007c18 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007abe:	4b51      	ldr	r3, [pc, #324]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ad2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007aee:	e065      	b.n	8007bbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b02:	4b40      	ldr	r3, [pc, #256]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b16:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b32:	e043      	b.n	8007bbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007c20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b46:	4b2f      	ldr	r3, [pc, #188]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b5a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b76:	e021      	b.n	8007bbc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b9e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007bbc:	4b11      	ldr	r3, [pc, #68]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc0:	0a5b      	lsrs	r3, r3, #9
 8007bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	ee07 3a90 	vmov	s15, r3
 8007bd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be0:	ee17 3a90 	vmov	r3, s15
 8007be4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007be6:	e005      	b.n	8007bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	61bb      	str	r3, [r7, #24]
      break;
 8007bec:	e002      	b.n	8007bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007bee:	4b07      	ldr	r3, [pc, #28]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bf0:	61bb      	str	r3, [r7, #24]
      break;
 8007bf2:	bf00      	nop
  }

  return sysclockfreq;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3724      	adds	r7, #36	@ 0x24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	58024400 	.word	0x58024400
 8007c08:	03d09000 	.word	0x03d09000
 8007c0c:	003d0900 	.word	0x003d0900
 8007c10:	016e3600 	.word	0x016e3600
 8007c14:	46000000 	.word	0x46000000
 8007c18:	4c742400 	.word	0x4c742400
 8007c1c:	4a742400 	.word	0x4a742400
 8007c20:	4bb71b00 	.word	0x4bb71b00

08007c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007c2a:	f7ff fe81 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	4b10      	ldr	r3, [pc, #64]	@ (8007c74 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	0a1b      	lsrs	r3, r3, #8
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	490f      	ldr	r1, [pc, #60]	@ (8007c78 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c3c:	5ccb      	ldrb	r3, [r1, r3]
 8007c3e:	f003 031f 	and.w	r3, r3, #31
 8007c42:	fa22 f303 	lsr.w	r3, r2, r3
 8007c46:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007c48:	4b0a      	ldr	r3, [pc, #40]	@ (8007c74 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	4a09      	ldr	r2, [pc, #36]	@ (8007c78 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c52:	5cd3      	ldrb	r3, [r2, r3]
 8007c54:	f003 031f 	and.w	r3, r3, #31
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c5e:	4a07      	ldr	r2, [pc, #28]	@ (8007c7c <HAL_RCC_GetHCLKFreq+0x58>)
 8007c60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c62:	4a07      	ldr	r2, [pc, #28]	@ (8007c80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c68:	4b04      	ldr	r3, [pc, #16]	@ (8007c7c <HAL_RCC_GetHCLKFreq+0x58>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	58024400 	.word	0x58024400
 8007c78:	0800ae8c 	.word	0x0800ae8c
 8007c7c:	24000004 	.word	0x24000004
 8007c80:	24000000 	.word	0x24000000

08007c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007c88:	f7ff ffcc 	bl	8007c24 <HAL_RCC_GetHCLKFreq>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	091b      	lsrs	r3, r3, #4
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	4904      	ldr	r1, [pc, #16]	@ (8007cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c9a:	5ccb      	ldrb	r3, [r1, r3]
 8007c9c:	f003 031f 	and.w	r3, r3, #31
 8007ca0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	0800ae8c 	.word	0x0800ae8c

08007cb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb4:	b0c8      	sub	sp, #288	@ 0x120
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007cd4:	2500      	movs	r5, #0
 8007cd6:	ea54 0305 	orrs.w	r3, r4, r5
 8007cda:	d049      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ce2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ce6:	d02f      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007ce8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cec:	d828      	bhi.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007cee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cf2:	d01a      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007cf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cf8:	d822      	bhi.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d02:	d007      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d04:	e01c      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d06:	4ba7      	ldr	r3, [pc, #668]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0a:	4aa6      	ldr	r2, [pc, #664]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d12:	e01a      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d18:	3308      	adds	r3, #8
 8007d1a:	2102      	movs	r1, #2
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f002 fa6d 	bl	800a1fc <RCCEx_PLL2_Config>
 8007d22:	4603      	mov	r3, r0
 8007d24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d28:	e00f      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d2e:	3328      	adds	r3, #40	@ 0x28
 8007d30:	2102      	movs	r1, #2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f002 fb14 	bl	800a360 <RCCEx_PLL3_Config>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d3e:	e004      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d46:	e000      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d52:	4b94      	ldr	r3, [pc, #592]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d60:	4a90      	ldr	r2, [pc, #576]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d62:	430b      	orrs	r3, r1
 8007d64:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d66:	e003      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007d7c:	f04f 0900 	mov.w	r9, #0
 8007d80:	ea58 0309 	orrs.w	r3, r8, r9
 8007d84:	d047      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d82a      	bhi.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007d90:	a201      	add	r2, pc, #4	@ (adr r2, 8007d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d96:	bf00      	nop
 8007d98:	08007dad 	.word	0x08007dad
 8007d9c:	08007dbb 	.word	0x08007dbb
 8007da0:	08007dd1 	.word	0x08007dd1
 8007da4:	08007def 	.word	0x08007def
 8007da8:	08007def 	.word	0x08007def
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dac:	4b7d      	ldr	r3, [pc, #500]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db0:	4a7c      	ldr	r2, [pc, #496]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007db8:	e01a      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f002 fa1a 	bl	800a1fc <RCCEx_PLL2_Config>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dce:	e00f      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd4:	3328      	adds	r3, #40	@ 0x28
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f002 fac1 	bl	800a360 <RCCEx_PLL3_Config>
 8007dde:	4603      	mov	r3, r0
 8007de0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007de4:	e004      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007dec:	e000      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007df0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10a      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007df8:	4b6a      	ldr	r3, [pc, #424]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dfc:	f023 0107 	bic.w	r1, r3, #7
 8007e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e06:	4a67      	ldr	r2, [pc, #412]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e0c:	e003      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007e22:	f04f 0b00 	mov.w	fp, #0
 8007e26:	ea5a 030b 	orrs.w	r3, sl, fp
 8007e2a:	d054      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e32:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007e36:	d036      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007e38:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007e3c:	d82f      	bhi.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e42:	d032      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e48:	d829      	bhi.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e4c:	d02f      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e50:	d825      	bhi.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e52:	2b80      	cmp	r3, #128	@ 0x80
 8007e54:	d018      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007e56:	2b80      	cmp	r3, #128	@ 0x80
 8007e58:	d821      	bhi.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007e5e:	2b40      	cmp	r3, #64	@ 0x40
 8007e60:	d007      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007e62:	e01c      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e64:	4b4f      	ldr	r3, [pc, #316]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e68:	4a4e      	ldr	r2, [pc, #312]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007e70:	e01e      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e76:	3308      	adds	r3, #8
 8007e78:	2100      	movs	r1, #0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f002 f9be 	bl	800a1fc <RCCEx_PLL2_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007e86:	e013      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e8c:	3328      	adds	r3, #40	@ 0x28
 8007e8e:	2100      	movs	r1, #0
 8007e90:	4618      	mov	r0, r3
 8007e92:	f002 fa65 	bl	800a360 <RCCEx_PLL3_Config>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007e9c:	e008      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ea4:	e004      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007ea6:	bf00      	nop
 8007ea8:	e002      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007eaa:	bf00      	nop
 8007eac:	e000      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ebc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ec6:	4a37      	ldr	r2, [pc, #220]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ecc:	e003      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ece:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ed2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007ee2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007eec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	d05c      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007efc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f00:	d03b      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f02:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f06:	d834      	bhi.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f0c:	d037      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007f0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f12:	d82e      	bhi.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f18:	d033      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007f1a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f1e:	d828      	bhi.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f24:	d01a      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f2a:	d822      	bhi.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f34:	d007      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007f36:	e01c      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f38:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3c:	4a19      	ldr	r2, [pc, #100]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007f44:	e01e      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f002 f954 	bl	800a1fc <RCCEx_PLL2_Config>
 8007f54:	4603      	mov	r3, r0
 8007f56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007f5a:	e013      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f60:	3328      	adds	r3, #40	@ 0x28
 8007f62:	2100      	movs	r1, #0
 8007f64:	4618      	mov	r0, r3
 8007f66:	f002 f9fb 	bl	800a360 <RCCEx_PLL3_Config>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007f70:	e008      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f78:	e004      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f7a:	bf00      	nop
 8007f7c:	e002      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f7e:	bf00      	nop
 8007f80:	e000      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10d      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007f8c:	4b05      	ldr	r3, [pc, #20]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f90:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f9a:	4a02      	ldr	r2, [pc, #8]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fa0:	e006      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007fa2:	bf00      	nop
 8007fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007fc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	d03a      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd6:	2b30      	cmp	r3, #48	@ 0x30
 8007fd8:	d01f      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007fda:	2b30      	cmp	r3, #48	@ 0x30
 8007fdc:	d819      	bhi.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d00c      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d815      	bhi.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d019      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007fea:	2b10      	cmp	r3, #16
 8007fec:	d111      	bne.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fee:	4bae      	ldr	r3, [pc, #696]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff2:	4aad      	ldr	r2, [pc, #692]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007ffa:	e011      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008000:	3308      	adds	r3, #8
 8008002:	2102      	movs	r1, #2
 8008004:	4618      	mov	r0, r3
 8008006:	f002 f8f9 	bl	800a1fc <RCCEx_PLL2_Config>
 800800a:	4603      	mov	r3, r0
 800800c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008010:	e006      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008018:	e002      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800801a:	bf00      	nop
 800801c:	e000      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800801e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008020:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008028:	4b9f      	ldr	r3, [pc, #636]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800802a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800802c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008036:	4a9c      	ldr	r2, [pc, #624]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008038:	430b      	orrs	r3, r1
 800803a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800803c:	e003      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800803e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008042:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008052:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008056:	2300      	movs	r3, #0
 8008058:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800805c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008060:	460b      	mov	r3, r1
 8008062:	4313      	orrs	r3, r2
 8008064:	d051      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800806a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800806c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008070:	d035      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008076:	d82e      	bhi.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008078:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800807c:	d031      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800807e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008082:	d828      	bhi.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008084:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008088:	d01a      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800808a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800808e:	d822      	bhi.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008098:	d007      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800809a:	e01c      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800809c:	4b82      	ldr	r3, [pc, #520]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800809e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a0:	4a81      	ldr	r2, [pc, #516]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080a8:	e01c      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ae:	3308      	adds	r3, #8
 80080b0:	2100      	movs	r1, #0
 80080b2:	4618      	mov	r0, r3
 80080b4:	f002 f8a2 	bl	800a1fc <RCCEx_PLL2_Config>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080be:	e011      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080c4:	3328      	adds	r3, #40	@ 0x28
 80080c6:	2100      	movs	r1, #0
 80080c8:	4618      	mov	r0, r3
 80080ca:	f002 f949 	bl	800a360 <RCCEx_PLL3_Config>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080d4:	e006      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080dc:	e002      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80080de:	bf00      	nop
 80080e0:	e000      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80080e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80080ec:	4b6e      	ldr	r3, [pc, #440]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80080f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080fa:	4a6b      	ldr	r2, [pc, #428]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080fc:	430b      	orrs	r3, r1
 80080fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8008100:	e003      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008102:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008106:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800810a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008116:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800811a:	2300      	movs	r3, #0
 800811c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008120:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008124:	460b      	mov	r3, r1
 8008126:	4313      	orrs	r3, r2
 8008128:	d053      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800812a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008134:	d033      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008136:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800813a:	d82c      	bhi.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800813c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008140:	d02f      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008142:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008146:	d826      	bhi.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008148:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800814c:	d02b      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800814e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008152:	d820      	bhi.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008154:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008158:	d012      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800815a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800815e:	d81a      	bhi.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d022      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008168:	d115      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800816a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800816e:	3308      	adds	r3, #8
 8008170:	2101      	movs	r1, #1
 8008172:	4618      	mov	r0, r3
 8008174:	f002 f842 	bl	800a1fc <RCCEx_PLL2_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800817e:	e015      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008184:	3328      	adds	r3, #40	@ 0x28
 8008186:	2101      	movs	r1, #1
 8008188:	4618      	mov	r0, r3
 800818a:	f002 f8e9 	bl	800a360 <RCCEx_PLL3_Config>
 800818e:	4603      	mov	r3, r0
 8008190:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008194:	e00a      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800819c:	e006      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800819e:	bf00      	nop
 80081a0:	e004      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80081a2:	bf00      	nop
 80081a4:	e002      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80081a6:	bf00      	nop
 80081a8:	e000      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80081aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10a      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081b4:	4b3c      	ldr	r3, [pc, #240]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80081bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081c2:	4a39      	ldr	r2, [pc, #228]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80081c8:	e003      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80081d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80081de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081e2:	2300      	movs	r3, #0
 80081e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4313      	orrs	r3, r2
 80081f0:	d060      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80081f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081fa:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80081fe:	d039      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008200:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008204:	d832      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800820a:	d035      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800820c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008210:	d82c      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008216:	d031      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800821c:	d826      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800821e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008222:	d02d      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008224:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008228:	d820      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800822a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800822e:	d012      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008234:	d81a      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d024      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800823a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800823e:	d115      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008244:	3308      	adds	r3, #8
 8008246:	2101      	movs	r1, #1
 8008248:	4618      	mov	r0, r3
 800824a:	f001 ffd7 	bl	800a1fc <RCCEx_PLL2_Config>
 800824e:	4603      	mov	r3, r0
 8008250:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008254:	e017      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800825a:	3328      	adds	r3, #40	@ 0x28
 800825c:	2101      	movs	r1, #1
 800825e:	4618      	mov	r0, r3
 8008260:	f002 f87e 	bl	800a360 <RCCEx_PLL3_Config>
 8008264:	4603      	mov	r3, r0
 8008266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800826a:	e00c      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008272:	e008      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008274:	bf00      	nop
 8008276:	e006      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008278:	bf00      	nop
 800827a:	e004      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800827c:	bf00      	nop
 800827e:	e002      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008280:	bf00      	nop
 8008282:	e000      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008286:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10e      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800828e:	4b06      	ldr	r3, [pc, #24]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008292:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800829a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800829e:	4a02      	ldr	r2, [pc, #8]	@ (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80082a4:	e006      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80082a6:	bf00      	nop
 80082a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80082c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082c4:	2300      	movs	r3, #0
 80082c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082ce:	460b      	mov	r3, r1
 80082d0:	4313      	orrs	r3, r2
 80082d2:	d037      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80082d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082de:	d00e      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80082e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082e4:	d816      	bhi.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d018      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80082ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082ee:	d111      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f0:	4bc4      	ldr	r3, [pc, #784]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f4:	4ac3      	ldr	r2, [pc, #780]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80082fc:	e00f      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008302:	3308      	adds	r3, #8
 8008304:	2101      	movs	r1, #1
 8008306:	4618      	mov	r0, r3
 8008308:	f001 ff78 	bl	800a1fc <RCCEx_PLL2_Config>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008312:	e004      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800831a:	e000      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800831c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800831e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10a      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008326:	4bb7      	ldr	r3, [pc, #732]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800832a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800832e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008332:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008334:	4ab3      	ldr	r2, [pc, #716]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008336:	430b      	orrs	r3, r1
 8008338:	6513      	str	r3, [r2, #80]	@ 0x50
 800833a:	e003      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800833c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008340:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008354:	2300      	movs	r3, #0
 8008356:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800835a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800835e:	460b      	mov	r3, r1
 8008360:	4313      	orrs	r3, r2
 8008362:	d039      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800836a:	2b03      	cmp	r3, #3
 800836c:	d81c      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800836e:	a201      	add	r2, pc, #4	@ (adr r2, 8008374 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008374:	080083b1 	.word	0x080083b1
 8008378:	08008385 	.word	0x08008385
 800837c:	08008393 	.word	0x08008393
 8008380:	080083b1 	.word	0x080083b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008384:	4b9f      	ldr	r3, [pc, #636]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008388:	4a9e      	ldr	r2, [pc, #632]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800838a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800838e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008390:	e00f      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008396:	3308      	adds	r3, #8
 8008398:	2102      	movs	r1, #2
 800839a:	4618      	mov	r0, r3
 800839c:	f001 ff2e 	bl	800a1fc <RCCEx_PLL2_Config>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083a6:	e004      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083ae:	e000      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80083b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80083ba:	4b92      	ldr	r3, [pc, #584]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083be:	f023 0103 	bic.w	r1, r3, #3
 80083c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083c8:	4a8e      	ldr	r2, [pc, #568]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083ca:	430b      	orrs	r3, r1
 80083cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083ce:	e003      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80083e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083e8:	2300      	movs	r3, #0
 80083ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80083f2:	460b      	mov	r3, r1
 80083f4:	4313      	orrs	r3, r2
 80083f6:	f000 8099 	beq.w	800852c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083fa:	4b83      	ldr	r3, [pc, #524]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a82      	ldr	r2, [pc, #520]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008404:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008406:	f7f9 fc0b 	bl	8001c20 <HAL_GetTick>
 800840a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800840e:	e00b      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008410:	f7f9 fc06 	bl	8001c20 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b64      	cmp	r3, #100	@ 0x64
 800841e:	d903      	bls.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008426:	e005      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008428:	4b77      	ldr	r3, [pc, #476]	@ (8008608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0ed      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008434:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008438:	2b00      	cmp	r3, #0
 800843a:	d173      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800843c:	4b71      	ldr	r3, [pc, #452]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800843e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008444:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008448:	4053      	eors	r3, r2
 800844a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800844e:	2b00      	cmp	r3, #0
 8008450:	d015      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008452:	4b6c      	ldr	r3, [pc, #432]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800845a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800845e:	4b69      	ldr	r3, [pc, #420]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008462:	4a68      	ldr	r2, [pc, #416]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008468:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800846a:	4b66      	ldr	r3, [pc, #408]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800846c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800846e:	4a65      	ldr	r2, [pc, #404]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008474:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008476:	4a63      	ldr	r2, [pc, #396]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800847e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008482:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800848a:	d118      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800848c:	f7f9 fbc8 	bl	8001c20 <HAL_GetTick>
 8008490:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008494:	e00d      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008496:	f7f9 fbc3 	bl	8001c20 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80084a0:	1ad2      	subs	r2, r2, r3
 80084a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d903      	bls.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80084b0:	e005      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084b2:	4b54      	ldr	r3, [pc, #336]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0eb      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80084be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d129      	bne.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084d6:	d10e      	bne.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80084d8:	4b4a      	ldr	r3, [pc, #296]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80084e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084e8:	091a      	lsrs	r2, r3, #4
 80084ea:	4b48      	ldr	r3, [pc, #288]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80084ec:	4013      	ands	r3, r2
 80084ee:	4a45      	ldr	r2, [pc, #276]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084f0:	430b      	orrs	r3, r1
 80084f2:	6113      	str	r3, [r2, #16]
 80084f4:	e005      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80084f6:	4b43      	ldr	r3, [pc, #268]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	4a42      	ldr	r2, [pc, #264]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008500:	6113      	str	r3, [r2, #16]
 8008502:	4b40      	ldr	r3, [pc, #256]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008504:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800850a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800850e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008512:	4a3c      	ldr	r2, [pc, #240]	@ (8008604 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008514:	430b      	orrs	r3, r1
 8008516:	6713      	str	r3, [r2, #112]	@ 0x70
 8008518:	e008      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800851a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800851e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008522:	e003      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008524:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008528:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800852c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f002 0301 	and.w	r3, r2, #1
 8008538:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800853c:	2300      	movs	r3, #0
 800853e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008542:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008546:	460b      	mov	r3, r1
 8008548:	4313      	orrs	r3, r2
 800854a:	f000 8090 	beq.w	800866e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800854e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008556:	2b28      	cmp	r3, #40	@ 0x28
 8008558:	d870      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800855a:	a201      	add	r2, pc, #4	@ (adr r2, 8008560 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	08008645 	.word	0x08008645
 8008564:	0800863d 	.word	0x0800863d
 8008568:	0800863d 	.word	0x0800863d
 800856c:	0800863d 	.word	0x0800863d
 8008570:	0800863d 	.word	0x0800863d
 8008574:	0800863d 	.word	0x0800863d
 8008578:	0800863d 	.word	0x0800863d
 800857c:	0800863d 	.word	0x0800863d
 8008580:	08008611 	.word	0x08008611
 8008584:	0800863d 	.word	0x0800863d
 8008588:	0800863d 	.word	0x0800863d
 800858c:	0800863d 	.word	0x0800863d
 8008590:	0800863d 	.word	0x0800863d
 8008594:	0800863d 	.word	0x0800863d
 8008598:	0800863d 	.word	0x0800863d
 800859c:	0800863d 	.word	0x0800863d
 80085a0:	08008627 	.word	0x08008627
 80085a4:	0800863d 	.word	0x0800863d
 80085a8:	0800863d 	.word	0x0800863d
 80085ac:	0800863d 	.word	0x0800863d
 80085b0:	0800863d 	.word	0x0800863d
 80085b4:	0800863d 	.word	0x0800863d
 80085b8:	0800863d 	.word	0x0800863d
 80085bc:	0800863d 	.word	0x0800863d
 80085c0:	08008645 	.word	0x08008645
 80085c4:	0800863d 	.word	0x0800863d
 80085c8:	0800863d 	.word	0x0800863d
 80085cc:	0800863d 	.word	0x0800863d
 80085d0:	0800863d 	.word	0x0800863d
 80085d4:	0800863d 	.word	0x0800863d
 80085d8:	0800863d 	.word	0x0800863d
 80085dc:	0800863d 	.word	0x0800863d
 80085e0:	08008645 	.word	0x08008645
 80085e4:	0800863d 	.word	0x0800863d
 80085e8:	0800863d 	.word	0x0800863d
 80085ec:	0800863d 	.word	0x0800863d
 80085f0:	0800863d 	.word	0x0800863d
 80085f4:	0800863d 	.word	0x0800863d
 80085f8:	0800863d 	.word	0x0800863d
 80085fc:	0800863d 	.word	0x0800863d
 8008600:	08008645 	.word	0x08008645
 8008604:	58024400 	.word	0x58024400
 8008608:	58024800 	.word	0x58024800
 800860c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008614:	3308      	adds	r3, #8
 8008616:	2101      	movs	r1, #1
 8008618:	4618      	mov	r0, r3
 800861a:	f001 fdef 	bl	800a1fc <RCCEx_PLL2_Config>
 800861e:	4603      	mov	r3, r0
 8008620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008624:	e00f      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800862a:	3328      	adds	r3, #40	@ 0x28
 800862c:	2101      	movs	r1, #1
 800862e:	4618      	mov	r0, r3
 8008630:	f001 fe96 	bl	800a360 <RCCEx_PLL3_Config>
 8008634:	4603      	mov	r3, r0
 8008636:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800863a:	e004      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008642:	e000      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008646:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10b      	bne.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800864e:	4bc0      	ldr	r3, [pc, #768]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008652:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800865a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800865e:	4abc      	ldr	r2, [pc, #752]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008660:	430b      	orrs	r3, r1
 8008662:	6553      	str	r3, [r2, #84]	@ 0x54
 8008664:	e003      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008666:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800866a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800866e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f002 0302 	and.w	r3, r2, #2
 800867a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800867e:	2300      	movs	r3, #0
 8008680:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008684:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008688:	460b      	mov	r3, r1
 800868a:	4313      	orrs	r3, r2
 800868c:	d043      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800868e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008696:	2b05      	cmp	r3, #5
 8008698:	d824      	bhi.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800869a:	a201      	add	r2, pc, #4	@ (adr r2, 80086a0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086ed 	.word	0x080086ed
 80086a4:	080086b9 	.word	0x080086b9
 80086a8:	080086cf 	.word	0x080086cf
 80086ac:	080086ed 	.word	0x080086ed
 80086b0:	080086ed 	.word	0x080086ed
 80086b4:	080086ed 	.word	0x080086ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086bc:	3308      	adds	r3, #8
 80086be:	2101      	movs	r1, #1
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 fd9b 	bl	800a1fc <RCCEx_PLL2_Config>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80086cc:	e00f      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086d2:	3328      	adds	r3, #40	@ 0x28
 80086d4:	2101      	movs	r1, #1
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 fe42 	bl	800a360 <RCCEx_PLL3_Config>
 80086dc:	4603      	mov	r3, r0
 80086de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80086e2:	e004      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80086ea:	e000      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80086ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80086f6:	4b96      	ldr	r3, [pc, #600]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80086f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fa:	f023 0107 	bic.w	r1, r3, #7
 80086fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008706:	4a92      	ldr	r2, [pc, #584]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008708:	430b      	orrs	r3, r1
 800870a:	6553      	str	r3, [r2, #84]	@ 0x54
 800870c:	e003      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008712:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f002 0304 	and.w	r3, r2, #4
 8008722:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008726:	2300      	movs	r3, #0
 8008728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800872c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008730:	460b      	mov	r3, r1
 8008732:	4313      	orrs	r3, r2
 8008734:	d043      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800873a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800873e:	2b05      	cmp	r3, #5
 8008740:	d824      	bhi.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008742:	a201      	add	r2, pc, #4	@ (adr r2, 8008748 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	08008795 	.word	0x08008795
 800874c:	08008761 	.word	0x08008761
 8008750:	08008777 	.word	0x08008777
 8008754:	08008795 	.word	0x08008795
 8008758:	08008795 	.word	0x08008795
 800875c:	08008795 	.word	0x08008795
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008764:	3308      	adds	r3, #8
 8008766:	2101      	movs	r1, #1
 8008768:	4618      	mov	r0, r3
 800876a:	f001 fd47 	bl	800a1fc <RCCEx_PLL2_Config>
 800876e:	4603      	mov	r3, r0
 8008770:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008774:	e00f      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800877a:	3328      	adds	r3, #40	@ 0x28
 800877c:	2101      	movs	r1, #1
 800877e:	4618      	mov	r0, r3
 8008780:	f001 fdee 	bl	800a360 <RCCEx_PLL3_Config>
 8008784:	4603      	mov	r3, r0
 8008786:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800878a:	e004      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008792:	e000      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008796:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10b      	bne.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800879e:	4b6c      	ldr	r3, [pc, #432]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087a2:	f023 0107 	bic.w	r1, r3, #7
 80087a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087ae:	4a68      	ldr	r2, [pc, #416]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087b0:	430b      	orrs	r3, r1
 80087b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80087b4:	e003      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	f002 0320 	and.w	r3, r2, #32
 80087ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80087ce:	2300      	movs	r3, #0
 80087d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80087d8:	460b      	mov	r3, r1
 80087da:	4313      	orrs	r3, r2
 80087dc:	d055      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80087de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087ea:	d033      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80087ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087f0:	d82c      	bhi.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80087f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087f6:	d02f      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80087f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087fc:	d826      	bhi.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80087fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008802:	d02b      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008804:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008808:	d820      	bhi.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800880a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800880e:	d012      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008814:	d81a      	bhi.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d022      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800881a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800881e:	d115      	bne.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008824:	3308      	adds	r3, #8
 8008826:	2100      	movs	r1, #0
 8008828:	4618      	mov	r0, r3
 800882a:	f001 fce7 	bl	800a1fc <RCCEx_PLL2_Config>
 800882e:	4603      	mov	r3, r0
 8008830:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008834:	e015      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800883a:	3328      	adds	r3, #40	@ 0x28
 800883c:	2102      	movs	r1, #2
 800883e:	4618      	mov	r0, r3
 8008840:	f001 fd8e 	bl	800a360 <RCCEx_PLL3_Config>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800884a:	e00a      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008852:	e006      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008854:	bf00      	nop
 8008856:	e004      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008858:	bf00      	nop
 800885a:	e002      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800885c:	bf00      	nop
 800885e:	e000      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008862:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10b      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800886a:	4b39      	ldr	r3, [pc, #228]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800886c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800886e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008876:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800887a:	4a35      	ldr	r2, [pc, #212]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800887c:	430b      	orrs	r3, r1
 800887e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008880:	e003      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008882:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008886:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800888a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008896:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800889a:	2300      	movs	r3, #0
 800889c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4313      	orrs	r3, r2
 80088a8:	d058      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80088aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088b6:	d033      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80088b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088bc:	d82c      	bhi.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088c2:	d02f      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80088c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088c8:	d826      	bhi.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088ce:	d02b      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80088d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088d4:	d820      	bhi.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088da:	d012      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80088dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088e0:	d81a      	bhi.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d022      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80088e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088ea:	d115      	bne.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088f0:	3308      	adds	r3, #8
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f001 fc81 	bl	800a1fc <RCCEx_PLL2_Config>
 80088fa:	4603      	mov	r3, r0
 80088fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008900:	e015      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008906:	3328      	adds	r3, #40	@ 0x28
 8008908:	2102      	movs	r1, #2
 800890a:	4618      	mov	r0, r3
 800890c:	f001 fd28 	bl	800a360 <RCCEx_PLL3_Config>
 8008910:	4603      	mov	r3, r0
 8008912:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008916:	e00a      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800891e:	e006      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008920:	bf00      	nop
 8008922:	e004      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008924:	bf00      	nop
 8008926:	e002      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008928:	bf00      	nop
 800892a:	e000      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800892c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800892e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10e      	bne.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008936:	4b06      	ldr	r3, [pc, #24]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800893a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800893e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008942:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008946:	4a02      	ldr	r2, [pc, #8]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008948:	430b      	orrs	r3, r1
 800894a:	6593      	str	r3, [r2, #88]	@ 0x58
 800894c:	e006      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800894e:	bf00      	nop
 8008950:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008954:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008958:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800895c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800896c:	2300      	movs	r3, #0
 800896e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008972:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008976:	460b      	mov	r3, r1
 8008978:	4313      	orrs	r3, r2
 800897a:	d055      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800897c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008980:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008984:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008988:	d033      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800898a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800898e:	d82c      	bhi.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008994:	d02f      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800899a:	d826      	bhi.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800899c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089a0:	d02b      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80089a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089a6:	d820      	bhi.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80089a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089ac:	d012      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80089ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089b2:	d81a      	bhi.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d022      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80089b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089bc:	d115      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c2:	3308      	adds	r3, #8
 80089c4:	2100      	movs	r1, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f001 fc18 	bl	800a1fc <RCCEx_PLL2_Config>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80089d2:	e015      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d8:	3328      	adds	r3, #40	@ 0x28
 80089da:	2102      	movs	r1, #2
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 fcbf 	bl	800a360 <RCCEx_PLL3_Config>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80089e8:	e00a      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089f0:	e006      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80089f2:	bf00      	nop
 80089f4:	e004      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80089f6:	bf00      	nop
 80089f8:	e002      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80089fa:	bf00      	nop
 80089fc:	e000      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80089fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10b      	bne.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a08:	4ba1      	ldr	r3, [pc, #644]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a0c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a18:	4a9d      	ldr	r2, [pc, #628]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a1e:	e003      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f002 0308 	and.w	r3, r2, #8
 8008a34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008a42:	460b      	mov	r3, r1
 8008a44:	4313      	orrs	r3, r2
 8008a46:	d01e      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a54:	d10c      	bne.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a5a:	3328      	adds	r3, #40	@ 0x28
 8008a5c:	2102      	movs	r1, #2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 fc7e 	bl	800a360 <RCCEx_PLL3_Config>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a70:	4b87      	ldr	r3, [pc, #540]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a80:	4a83      	ldr	r2, [pc, #524]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a82:	430b      	orrs	r3, r1
 8008a84:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f002 0310 	and.w	r3, r2, #16
 8008a92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a96:	2300      	movs	r3, #0
 8008a98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a9c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	d01e      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ab2:	d10c      	bne.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ab8:	3328      	adds	r3, #40	@ 0x28
 8008aba:	2102      	movs	r1, #2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f001 fc4f 	bl	800a360 <RCCEx_PLL3_Config>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ace:	4b70      	ldr	r3, [pc, #448]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ada:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ade:	4a6c      	ldr	r2, [pc, #432]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ae0:	430b      	orrs	r3, r1
 8008ae2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008af0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008af4:	2300      	movs	r3, #0
 8008af6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008afa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008afe:	460b      	mov	r3, r1
 8008b00:	4313      	orrs	r3, r2
 8008b02:	d03e      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b10:	d022      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008b12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b16:	d81b      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b20:	d00b      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008b22:	e015      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b28:	3308      	adds	r3, #8
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 fb65 	bl	800a1fc <RCCEx_PLL2_Config>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b38:	e00f      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b3e:	3328      	adds	r3, #40	@ 0x28
 8008b40:	2102      	movs	r1, #2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f001 fc0c 	bl	800a360 <RCCEx_PLL3_Config>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b4e:	e004      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b56:	e000      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10b      	bne.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b62:	4b4b      	ldr	r3, [pc, #300]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b66:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b72:	4a47      	ldr	r2, [pc, #284]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b74:	430b      	orrs	r3, r1
 8008b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b78:	e003      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b90:	2300      	movs	r3, #0
 8008b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b94:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	d03b      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ba6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008baa:	d01f      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008bac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bb0:	d818      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bb6:	d003      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008bb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bbc:	d007      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008bbe:	e011      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc0:	4b33      	ldr	r3, [pc, #204]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc4:	4a32      	ldr	r2, [pc, #200]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008bcc:	e00f      	b.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd2:	3328      	adds	r3, #40	@ 0x28
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 fbc2 	bl	800a360 <RCCEx_PLL3_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008be2:	e004      	b.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008bea:	e000      	b.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10b      	bne.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008bf6:	4b26      	ldr	r3, [pc, #152]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bfa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c06:	4a22      	ldr	r2, [pc, #136]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c0c:	e003      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008c22:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c24:	2300      	movs	r3, #0
 8008c26:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	d034      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c40:	d007      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008c42:	e011      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c44:	4b12      	ldr	r3, [pc, #72]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c48:	4a11      	ldr	r2, [pc, #68]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c50:	e00e      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c56:	3308      	adds	r3, #8
 8008c58:	2102      	movs	r1, #2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 face 	bl	800a1fc <RCCEx_PLL2_Config>
 8008c60:	4603      	mov	r3, r0
 8008c62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c66:	e003      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10d      	bne.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c78:	4b05      	ldr	r3, [pc, #20]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c7c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c86:	4a02      	ldr	r2, [pc, #8]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c8c:	e006      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008c8e:	bf00      	nop
 8008c90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008ca8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008caa:	2300      	movs	r3, #0
 8008cac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	d00c      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cbc:	3328      	adds	r3, #40	@ 0x28
 8008cbe:	2102      	movs	r1, #2
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f001 fb4d 	bl	800a360 <RCCEx_PLL3_Config>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008cde:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ce4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4313      	orrs	r3, r2
 8008cec:	d038      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cfa:	d018      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008cfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d00:	d811      	bhi.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d06:	d014      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d0c:	d80b      	bhi.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d011      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d16:	d106      	bne.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d18:	4bc3      	ldr	r3, [pc, #780]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1c:	4ac2      	ldr	r2, [pc, #776]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008d24:	e008      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d2c:	e004      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008d2e:	bf00      	nop
 8008d30:	e002      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008d32:	bf00      	nop
 8008d34:	e000      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10b      	bne.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d40:	4bb9      	ldr	r3, [pc, #740]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d50:	4ab5      	ldr	r2, [pc, #724]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d52:	430b      	orrs	r3, r1
 8008d54:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d56:	e003      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d6e:	2300      	movs	r3, #0
 8008d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008d76:	460b      	mov	r3, r1
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	d009      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d7c:	4baa      	ldr	r3, [pc, #680]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d8a:	4aa7      	ldr	r2, [pc, #668]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d98:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008d9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d9e:	2300      	movs	r3, #0
 8008da0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008da2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008da6:	460b      	mov	r3, r1
 8008da8:	4313      	orrs	r3, r2
 8008daa:	d009      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008dac:	4b9e      	ldr	r3, [pc, #632]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008db0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dba:	4a9b      	ldr	r2, [pc, #620]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dbc:	430b      	orrs	r3, r1
 8008dbe:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dce:	2300      	movs	r3, #0
 8008dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dd2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	d009      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008ddc:	4b92      	ldr	r3, [pc, #584]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dea:	4a8f      	ldr	r2, [pc, #572]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dec:	430b      	orrs	r3, r1
 8008dee:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008dfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dfe:	2300      	movs	r3, #0
 8008e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008e06:	460b      	mov	r3, r1
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	d00e      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e0c:	4b86      	ldr	r3, [pc, #536]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	4a85      	ldr	r2, [pc, #532]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e16:	6113      	str	r3, [r2, #16]
 8008e18:	4b83      	ldr	r3, [pc, #524]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e1a:	6919      	ldr	r1, [r3, #16]
 8008e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008e24:	4a80      	ldr	r2, [pc, #512]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e26:	430b      	orrs	r3, r1
 8008e28:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008e36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e38:	2300      	movs	r3, #0
 8008e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008e40:	460b      	mov	r3, r1
 8008e42:	4313      	orrs	r3, r2
 8008e44:	d009      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e46:	4b78      	ldr	r3, [pc, #480]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e54:	4a74      	ldr	r2, [pc, #464]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e56:	430b      	orrs	r3, r1
 8008e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008e66:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e68:	2300      	movs	r3, #0
 8008e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008e70:	460b      	mov	r3, r1
 8008e72:	4313      	orrs	r3, r2
 8008e74:	d00a      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e76:	4b6c      	ldr	r3, [pc, #432]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e7a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e86:	4a68      	ldr	r2, [pc, #416]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e88:	430b      	orrs	r3, r1
 8008e8a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	2100      	movs	r1, #0
 8008e96:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	d011      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eac:	3308      	adds	r3, #8
 8008eae:	2100      	movs	r1, #0
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 f9a3 	bl	800a1fc <RCCEx_PLL2_Config>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008ebc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ec8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	6239      	str	r1, [r7, #32]
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ede:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	d011      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eec:	3308      	adds	r3, #8
 8008eee:	2101      	movs	r1, #1
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f001 f983 	bl	800a1fc <RCCEx_PLL2_Config>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008efc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d003      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	2100      	movs	r1, #0
 8008f16:	61b9      	str	r1, [r7, #24]
 8008f18:	f003 0304 	and.w	r3, r3, #4
 8008f1c:	61fb      	str	r3, [r7, #28]
 8008f1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f22:	460b      	mov	r3, r1
 8008f24:	4313      	orrs	r3, r2
 8008f26:	d011      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	2102      	movs	r1, #2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 f963 	bl	800a1fc <RCCEx_PLL2_Config>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008f3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	2100      	movs	r1, #0
 8008f56:	6139      	str	r1, [r7, #16]
 8008f58:	f003 0308 	and.w	r3, r3, #8
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008f62:	460b      	mov	r3, r1
 8008f64:	4313      	orrs	r3, r2
 8008f66:	d011      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6c:	3328      	adds	r3, #40	@ 0x28
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f001 f9f5 	bl	800a360 <RCCEx_PLL3_Config>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008f7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f88:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	2100      	movs	r1, #0
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	f003 0310 	and.w	r3, r3, #16
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	d011      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fac:	3328      	adds	r3, #40	@ 0x28
 8008fae:	2101      	movs	r1, #1
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f001 f9d5 	bl	800a360 <RCCEx_PLL3_Config>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d003      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	6039      	str	r1, [r7, #0]
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	607b      	str	r3, [r7, #4]
 8008fde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	d011      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fec:	3328      	adds	r3, #40	@ 0x28
 8008fee:	2102      	movs	r1, #2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f001 f9b5 	bl	800a360 <RCCEx_PLL3_Config>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008ffc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009004:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009008:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800900c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	e000      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
}
 800901a:	4618      	mov	r0, r3
 800901c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009020:	46bd      	mov	sp, r7
 8009022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009026:	bf00      	nop
 8009028:	58024400 	.word	0x58024400

0800902c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b090      	sub	sp, #64	@ 0x40
 8009030:	af00      	add	r7, sp, #0
 8009032:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800903a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800903e:	430b      	orrs	r3, r1
 8009040:	f040 8094 	bne.w	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009044:	4b97      	ldr	r3, [pc, #604]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009048:	f003 0307 	and.w	r3, r3, #7
 800904c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800904e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009050:	2b04      	cmp	r3, #4
 8009052:	f200 8087 	bhi.w	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009056:	a201      	add	r2, pc, #4	@ (adr r2, 800905c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	08009071 	.word	0x08009071
 8009060:	08009099 	.word	0x08009099
 8009064:	080090c1 	.word	0x080090c1
 8009068:	0800915d 	.word	0x0800915d
 800906c:	080090e9 	.word	0x080090e9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009070:	4b8c      	ldr	r3, [pc, #560]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800907c:	d108      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800907e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009082:	4618      	mov	r0, r3
 8009084:	f000 ff68 	bl	8009f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800908c:	f000 bc97 	b.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009094:	f000 bc93 	b.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009098:	4b82      	ldr	r3, [pc, #520]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090a4:	d108      	bne.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a6:	f107 0318 	add.w	r3, r7, #24
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fcac 	bl	8009a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090b4:	f000 bc83 	b.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090bc:	f000 bc7f 	b.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090c0:	4b78      	ldr	r3, [pc, #480]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090cc:	d108      	bne.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ce:	f107 030c 	add.w	r3, r7, #12
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fdec 	bl	8009cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090dc:	f000 bc6f 	b.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090e4:	f000 bc6b 	b.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090e8:	4b6e      	ldr	r3, [pc, #440]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80090f0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090f2:	4b6c      	ldr	r3, [pc, #432]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0304 	and.w	r3, r3, #4
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	d10c      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80090fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009104:	4b67      	ldr	r3, [pc, #412]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	08db      	lsrs	r3, r3, #3
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	4a66      	ldr	r2, [pc, #408]	@ (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009110:	fa22 f303 	lsr.w	r3, r2, r3
 8009114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009116:	e01f      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009118:	4b62      	ldr	r3, [pc, #392]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009124:	d106      	bne.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800912c:	d102      	bne.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800912e:	4b5f      	ldr	r3, [pc, #380]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009132:	e011      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009134:	4b5b      	ldr	r3, [pc, #364]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800913c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009140:	d106      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009148:	d102      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800914a:	4b59      	ldr	r3, [pc, #356]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800914c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800914e:	e003      	b.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009154:	f000 bc33 	b.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009158:	f000 bc31 	b.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800915c:	4b55      	ldr	r3, [pc, #340]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800915e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009160:	f000 bc2d 	b.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009168:	f000 bc29 	b.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800916c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009170:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009174:	430b      	orrs	r3, r1
 8009176:	f040 809f 	bne.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800917a:	4b4a      	ldr	r3, [pc, #296]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800917c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800917e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009182:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800918a:	d04d      	beq.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009192:	f200 8084 	bhi.w	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009198:	2bc0      	cmp	r3, #192	@ 0xc0
 800919a:	d07d      	beq.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800919c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919e:	2bc0      	cmp	r3, #192	@ 0xc0
 80091a0:	d87d      	bhi.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	2b80      	cmp	r3, #128	@ 0x80
 80091a6:	d02d      	beq.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80091a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091aa:	2b80      	cmp	r3, #128	@ 0x80
 80091ac:	d877      	bhi.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80091ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80091b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b6:	2b40      	cmp	r3, #64	@ 0x40
 80091b8:	d012      	beq.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80091ba:	e070      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091bc:	4b39      	ldr	r3, [pc, #228]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091c8:	d107      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fec2 	bl	8009f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091d8:	e3f1      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091de:	e3ee      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091e0:	4b30      	ldr	r3, [pc, #192]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091ec:	d107      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ee:	f107 0318 	add.w	r3, r7, #24
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fc08 	bl	8009a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091fc:	e3df      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091fe:	2300      	movs	r3, #0
 8009200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009202:	e3dc      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009204:	4b27      	ldr	r3, [pc, #156]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800920c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009210:	d107      	bne.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009212:	f107 030c 	add.w	r3, r7, #12
 8009216:	4618      	mov	r0, r3
 8009218:	f000 fd4a 	bl	8009cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009220:	e3cd      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009226:	e3ca      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009228:	4b1e      	ldr	r3, [pc, #120]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800922a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800922c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009230:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009232:	4b1c      	ldr	r3, [pc, #112]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0304 	and.w	r3, r3, #4
 800923a:	2b04      	cmp	r3, #4
 800923c:	d10c      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800923e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009244:	4b17      	ldr	r3, [pc, #92]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	08db      	lsrs	r3, r3, #3
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	4a16      	ldr	r2, [pc, #88]	@ (80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009250:	fa22 f303 	lsr.w	r3, r2, r3
 8009254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009256:	e01e      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009258:	4b12      	ldr	r3, [pc, #72]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009264:	d106      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8009266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800926c:	d102      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800926e:	4b0f      	ldr	r3, [pc, #60]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009272:	e010      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009274:	4b0b      	ldr	r3, [pc, #44]	@ (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800927c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009280:	d106      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009288:	d102      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800928a:	4b09      	ldr	r3, [pc, #36]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800928c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800928e:	e002      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009294:	e393      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009296:	e392      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009298:	4b06      	ldr	r3, [pc, #24]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800929a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800929c:	e38f      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800929e:	2300      	movs	r3, #0
 80092a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a2:	e38c      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80092a4:	58024400 	.word	0x58024400
 80092a8:	03d09000 	.word	0x03d09000
 80092ac:	003d0900 	.word	0x003d0900
 80092b0:	016e3600 	.word	0x016e3600
 80092b4:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80092b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092bc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80092c0:	430b      	orrs	r3, r1
 80092c2:	f040 809c 	bne.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80092c6:	4b9e      	ldr	r3, [pc, #632]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80092c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092ca:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80092ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092d6:	d054      	beq.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092de:	f200 808b 	bhi.w	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80092e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80092e8:	f000 8083 	beq.w	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80092ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80092f2:	f200 8081 	bhi.w	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092fc:	d02f      	beq.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009304:	d878      	bhi.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	2b00      	cmp	r3, #0
 800930a:	d004      	beq.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800930c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009312:	d012      	beq.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8009314:	e070      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009316:	4b8a      	ldr	r3, [pc, #552]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800931e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009322:	d107      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fe15 	bl	8009f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800932e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009332:	e344      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009338:	e341      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800933a:	4b81      	ldr	r3, [pc, #516]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009342:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009346:	d107      	bne.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009348:	f107 0318 	add.w	r3, r7, #24
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fb5b 	bl	8009a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009356:	e332      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800935c:	e32f      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800935e:	4b78      	ldr	r3, [pc, #480]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800936a:	d107      	bne.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800936c:	f107 030c 	add.w	r3, r7, #12
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fc9d 	bl	8009cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800937a:	e320      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009380:	e31d      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009382:	4b6f      	ldr	r3, [pc, #444]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009386:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800938a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800938c:	4b6c      	ldr	r3, [pc, #432]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b04      	cmp	r3, #4
 8009396:	d10c      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800939a:	2b00      	cmp	r3, #0
 800939c:	d109      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800939e:	4b68      	ldr	r3, [pc, #416]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	08db      	lsrs	r3, r3, #3
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	4a66      	ldr	r2, [pc, #408]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80093aa:	fa22 f303 	lsr.w	r3, r2, r3
 80093ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093b0:	e01e      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093b2:	4b63      	ldr	r3, [pc, #396]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093be:	d106      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80093c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093c6:	d102      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093c8:	4b5f      	ldr	r3, [pc, #380]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80093ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093cc:	e010      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093ce:	4b5c      	ldr	r3, [pc, #368]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093da:	d106      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80093dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093e2:	d102      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093e4:	4b59      	ldr	r3, [pc, #356]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80093e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093e8:	e002      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80093ee:	e2e6      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80093f0:	e2e5      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093f2:	4b57      	ldr	r3, [pc, #348]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80093f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f6:	e2e2      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093fc:	e2df      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80093fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009402:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009406:	430b      	orrs	r3, r1
 8009408:	f040 80a7 	bne.w	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800940c:	4b4c      	ldr	r3, [pc, #304]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800940e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009410:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009414:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009418:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800941c:	d055      	beq.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800941e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009420:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009424:	f200 8096 	bhi.w	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800942e:	f000 8084 	beq.w	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8009432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009434:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009438:	f200 808c 	bhi.w	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800943c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009442:	d030      	beq.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8009444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800944a:	f200 8083 	bhi.w	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800944e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009450:	2b00      	cmp	r3, #0
 8009452:	d004      	beq.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800945a:	d012      	beq.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800945c:	e07a      	b.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800945e:	4b38      	ldr	r3, [pc, #224]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009466:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800946a:	d107      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800946c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009470:	4618      	mov	r0, r3
 8009472:	f000 fd71 	bl	8009f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800947a:	e2a0      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009480:	e29d      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009482:	4b2f      	ldr	r3, [pc, #188]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800948a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800948e:	d107      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009490:	f107 0318 	add.w	r3, r7, #24
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fab7 	bl	8009a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800949e:	e28e      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a4:	e28b      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094a6:	4b26      	ldr	r3, [pc, #152]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094b2:	d107      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094b4:	f107 030c 	add.w	r3, r7, #12
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 fbf9 	bl	8009cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094c2:	e27c      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c8:	e279      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b04      	cmp	r3, #4
 80094de:	d10c      	bne.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80094e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d109      	bne.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094e6:	4b16      	ldr	r3, [pc, #88]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	08db      	lsrs	r3, r3, #3
 80094ec:	f003 0303 	and.w	r3, r3, #3
 80094f0:	4a14      	ldr	r2, [pc, #80]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80094f2:	fa22 f303 	lsr.w	r3, r2, r3
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094f8:	e01e      	b.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094fa:	4b11      	ldr	r3, [pc, #68]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009506:	d106      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800950a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800950e:	d102      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009510:	4b0d      	ldr	r3, [pc, #52]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009514:	e010      	b.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009516:	4b0a      	ldr	r3, [pc, #40]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800951e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009522:	d106      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009526:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800952a:	d102      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800952c:	4b07      	ldr	r3, [pc, #28]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800952e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009530:	e002      	b.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009536:	e242      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009538:	e241      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800953a:	4b05      	ldr	r3, [pc, #20]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800953c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800953e:	e23e      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009540:	58024400 	.word	0x58024400
 8009544:	03d09000 	.word	0x03d09000
 8009548:	003d0900 	.word	0x003d0900
 800954c:	016e3600 	.word	0x016e3600
 8009550:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009558:	e231      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800955a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800955e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009562:	430b      	orrs	r3, r1
 8009564:	f040 8085 	bne.w	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009568:	4b9c      	ldr	r3, [pc, #624]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800956a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800956c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009570:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009578:	d06b      	beq.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800957a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009580:	d874      	bhi.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009584:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009588:	d056      	beq.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800958a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009590:	d86c      	bhi.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009598:	d03b      	beq.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800959a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095a0:	d864      	bhi.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80095a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095a8:	d021      	beq.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80095aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095b0:	d85c      	bhi.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80095b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80095b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095be:	d004      	beq.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80095c0:	e054      	b.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80095c2:	f7fe fb5f 	bl	8007c84 <HAL_RCC_GetPCLK1Freq>
 80095c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095c8:	e1f9      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095ca:	4b84      	ldr	r3, [pc, #528]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095d6:	d107      	bne.n	80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d8:	f107 0318 	add.w	r3, r7, #24
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fa13 	bl	8009a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095e6:	e1ea      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ec:	e1e7      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095ee:	4b7b      	ldr	r3, [pc, #492]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095fa:	d107      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095fc:	f107 030c 	add.w	r3, r7, #12
 8009600:	4618      	mov	r0, r3
 8009602:	f000 fb55 	bl	8009cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800960a:	e1d8      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009610:	e1d5      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009612:	4b72      	ldr	r3, [pc, #456]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0304 	and.w	r3, r3, #4
 800961a:	2b04      	cmp	r3, #4
 800961c:	d109      	bne.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800961e:	4b6f      	ldr	r3, [pc, #444]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	08db      	lsrs	r3, r3, #3
 8009624:	f003 0303 	and.w	r3, r3, #3
 8009628:	4a6d      	ldr	r2, [pc, #436]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800962a:	fa22 f303 	lsr.w	r3, r2, r3
 800962e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009630:	e1c5      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009636:	e1c2      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009638:	4b68      	ldr	r3, [pc, #416]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009644:	d102      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8009646:	4b67      	ldr	r3, [pc, #412]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800964a:	e1b8      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009650:	e1b5      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009652:	4b62      	ldr	r3, [pc, #392]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800965a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800965e:	d102      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8009660:	4b61      	ldr	r3, [pc, #388]	@ (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009664:	e1ab      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800966a:	e1a8      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009670:	e1a5      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009676:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800967a:	430b      	orrs	r3, r1
 800967c:	d173      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800967e:	4b57      	ldr	r3, [pc, #348]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009682:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009686:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800968e:	d02f      	beq.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009696:	d863      	bhi.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969a:	2b00      	cmp	r3, #0
 800969c:	d004      	beq.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800969e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096a4:	d012      	beq.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80096a6:	e05b      	b.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096a8:	4b4c      	ldr	r3, [pc, #304]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096b4:	d107      	bne.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096b6:	f107 0318 	add.w	r3, r7, #24
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 f9a4 	bl	8009a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096c4:	e17b      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ca:	e178      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096cc:	4b43      	ldr	r3, [pc, #268]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096d8:	d107      	bne.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096da:	f107 030c 	add.w	r3, r7, #12
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 fae6 	bl	8009cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096e8:	e169      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096ea:	2300      	movs	r3, #0
 80096ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ee:	e166      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096f0:	4b3a      	ldr	r3, [pc, #232]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80096f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096fa:	4b38      	ldr	r3, [pc, #224]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0304 	and.w	r3, r3, #4
 8009702:	2b04      	cmp	r3, #4
 8009704:	d10c      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8009706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009708:	2b00      	cmp	r3, #0
 800970a:	d109      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800970c:	4b33      	ldr	r3, [pc, #204]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	08db      	lsrs	r3, r3, #3
 8009712:	f003 0303 	and.w	r3, r3, #3
 8009716:	4a32      	ldr	r2, [pc, #200]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009718:	fa22 f303 	lsr.w	r3, r2, r3
 800971c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800971e:	e01e      	b.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009720:	4b2e      	ldr	r3, [pc, #184]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800972c:	d106      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800972e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009734:	d102      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009736:	4b2b      	ldr	r3, [pc, #172]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800973a:	e010      	b.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800973c:	4b27      	ldr	r3, [pc, #156]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009744:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009748:	d106      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800974a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800974c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009750:	d102      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009752:	4b25      	ldr	r3, [pc, #148]	@ (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009756:	e002      	b.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800975c:	e12f      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800975e:	e12e      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009764:	e12b      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800976a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800976e:	430b      	orrs	r3, r1
 8009770:	d13c      	bne.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009772:	4b1a      	ldr	r3, [pc, #104]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800977a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800977c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977e:	2b00      	cmp	r3, #0
 8009780:	d004      	beq.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8009782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009788:	d012      	beq.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800978a:	e023      	b.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800978c:	4b13      	ldr	r3, [pc, #76]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009798:	d107      	bne.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800979a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 fbda 	bl	8009f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a8:	e109      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ae:	e106      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097b0:	4b0a      	ldr	r3, [pc, #40]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097bc:	d107      	bne.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097be:	f107 0318 	add.w	r3, r7, #24
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 f920 	bl	8009a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097cc:	e0f7      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097d2:	e0f4      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097d8:	e0f1      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80097da:	bf00      	nop
 80097dc:	58024400 	.word	0x58024400
 80097e0:	03d09000 	.word	0x03d09000
 80097e4:	003d0900 	.word	0x003d0900
 80097e8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80097ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097f0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80097f4:	430b      	orrs	r3, r1
 80097f6:	f040 8091 	bne.w	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80097fa:	4b73      	ldr	r3, [pc, #460]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80097fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097fe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009802:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009806:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800980a:	f000 8081 	beq.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800980e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009810:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009814:	d87f      	bhi.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009818:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800981c:	d06b      	beq.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800981e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009820:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009824:	d877      	bhi.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800982c:	d056      	beq.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800982e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009834:	d86f      	bhi.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009838:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800983c:	d03b      	beq.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009840:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009844:	d867      	bhi.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800984c:	d021      	beq.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800984e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009854:	d85f      	bhi.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800985c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009862:	d004      	beq.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009864:	e057      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009866:	f000 f8b9 	bl	80099dc <HAL_RCCEx_GetD3PCLK1Freq>
 800986a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800986c:	e0a7      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800986e:	4b56      	ldr	r3, [pc, #344]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800987a:	d107      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800987c:	f107 0318 	add.w	r3, r7, #24
 8009880:	4618      	mov	r0, r3
 8009882:	f000 f8c1 	bl	8009a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800988a:	e098      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009890:	e095      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009892:	4b4d      	ldr	r3, [pc, #308]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800989a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800989e:	d107      	bne.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098a0:	f107 030c 	add.w	r3, r7, #12
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 fa03 	bl	8009cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ae:	e086      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098b4:	e083      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098b6:	4b44      	ldr	r3, [pc, #272]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d109      	bne.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098c2:	4b41      	ldr	r3, [pc, #260]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	08db      	lsrs	r3, r3, #3
 80098c8:	f003 0303 	and.w	r3, r3, #3
 80098cc:	4a3f      	ldr	r2, [pc, #252]	@ (80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80098ce:	fa22 f303 	lsr.w	r3, r2, r3
 80098d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d4:	e073      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098da:	e070      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098dc:	4b3a      	ldr	r3, [pc, #232]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098e8:	d102      	bne.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80098ea:	4b39      	ldr	r3, [pc, #228]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80098ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ee:	e066      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098f0:	2300      	movs	r3, #0
 80098f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f4:	e063      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098f6:	4b34      	ldr	r3, [pc, #208]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009902:	d102      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8009904:	4b33      	ldr	r3, [pc, #204]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009908:	e059      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800990e:	e056      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009910:	4b31      	ldr	r3, [pc, #196]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009914:	e053      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991a:	e050      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800991c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009920:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009924:	430b      	orrs	r3, r1
 8009926:	d148      	bne.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009928:	4b27      	ldr	r3, [pc, #156]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800992a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800992c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009930:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009938:	d02a      	beq.n	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800993a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009940:	d838      	bhi.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009944:	2b00      	cmp	r3, #0
 8009946:	d004      	beq.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800994e:	d00d      	beq.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009950:	e030      	b.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009952:	4b1d      	ldr	r3, [pc, #116]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800995a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800995e:	d102      	bne.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009960:	4b1c      	ldr	r3, [pc, #112]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009964:	e02b      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800996a:	e028      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800996c:	4b16      	ldr	r3, [pc, #88]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009974:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009978:	d107      	bne.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800997a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800997e:	4618      	mov	r0, r3
 8009980:	f000 faea 	bl	8009f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009988:	e019      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800998e:	e016      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009990:	4b0d      	ldr	r3, [pc, #52]	@ (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009998:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800999c:	d107      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800999e:	f107 0318 	add.w	r3, r7, #24
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 f830 	bl	8009a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ac:	e007      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099b2:	e004      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80099b4:	2300      	movs	r3, #0
 80099b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099b8:	e001      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80099ba:	2300      	movs	r3, #0
 80099bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80099be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3740      	adds	r7, #64	@ 0x40
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	58024400 	.word	0x58024400
 80099cc:	03d09000 	.word	0x03d09000
 80099d0:	003d0900 	.word	0x003d0900
 80099d4:	016e3600 	.word	0x016e3600
 80099d8:	00bb8000 	.word	0x00bb8000

080099dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80099e0:	f7fe f920 	bl	8007c24 <HAL_RCC_GetHCLKFreq>
 80099e4:	4602      	mov	r2, r0
 80099e6:	4b06      	ldr	r3, [pc, #24]	@ (8009a00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	091b      	lsrs	r3, r3, #4
 80099ec:	f003 0307 	and.w	r3, r3, #7
 80099f0:	4904      	ldr	r1, [pc, #16]	@ (8009a04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80099f2:	5ccb      	ldrb	r3, [r1, r3]
 80099f4:	f003 031f 	and.w	r3, r3, #31
 80099f8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	58024400 	.word	0x58024400
 8009a04:	0800ae8c 	.word	0x0800ae8c

08009a08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b089      	sub	sp, #36	@ 0x24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a10:	4ba1      	ldr	r3, [pc, #644]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a14:	f003 0303 	and.w	r3, r3, #3
 8009a18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009a1a:	4b9f      	ldr	r3, [pc, #636]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1e:	0b1b      	lsrs	r3, r3, #12
 8009a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a26:	4b9c      	ldr	r3, [pc, #624]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2a:	091b      	lsrs	r3, r3, #4
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009a32:	4b99      	ldr	r3, [pc, #612]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a36:	08db      	lsrs	r3, r3, #3
 8009a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	fb02 f303 	mul.w	r3, r2, r3
 8009a42:	ee07 3a90 	vmov	s15, r3
 8009a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 8111 	beq.w	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	f000 8083 	beq.w	8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	f200 80a1 	bhi.w	8009ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d003      	beq.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d056      	beq.n	8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a72:	e099      	b.n	8009ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a74:	4b88      	ldr	r3, [pc, #544]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0320 	and.w	r3, r3, #32
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d02d      	beq.n	8009adc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a80:	4b85      	ldr	r3, [pc, #532]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	08db      	lsrs	r3, r3, #3
 8009a86:	f003 0303 	and.w	r3, r3, #3
 8009a8a:	4a84      	ldr	r2, [pc, #528]	@ (8009c9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	ee07 3a90 	vmov	s15, r3
 8009a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	ee07 3a90 	vmov	s15, r3
 8009aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009abe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ada:	e087      	b.n	8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aee:	4b6a      	ldr	r3, [pc, #424]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af6:	ee07 3a90 	vmov	s15, r3
 8009afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b1e:	e065      	b.n	8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b32:	4b59      	ldr	r3, [pc, #356]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3a:	ee07 3a90 	vmov	s15, r3
 8009b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b62:	e043      	b.n	8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b76:	4b48      	ldr	r3, [pc, #288]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ba6:	e021      	b.n	8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bba:	4b37      	ldr	r3, [pc, #220]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009bec:	4b2a      	ldr	r3, [pc, #168]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf0:	0a5b      	lsrs	r3, r3, #9
 8009bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c12:	ee17 2a90 	vmov	r2, s15
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c1e:	0c1b      	lsrs	r3, r3, #16
 8009c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c24:	ee07 3a90 	vmov	s15, r3
 8009c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c40:	ee17 2a90 	vmov	r2, s15
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009c48:	4b13      	ldr	r3, [pc, #76]	@ (8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c4c:	0e1b      	lsrs	r3, r3, #24
 8009c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c52:	ee07 3a90 	vmov	s15, r3
 8009c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c6e:	ee17 2a90 	vmov	r2, s15
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c76:	e008      	b.n	8009c8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	609a      	str	r2, [r3, #8]
}
 8009c8a:	bf00      	nop
 8009c8c:	3724      	adds	r7, #36	@ 0x24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	58024400 	.word	0x58024400
 8009c9c:	03d09000 	.word	0x03d09000
 8009ca0:	46000000 	.word	0x46000000
 8009ca4:	4c742400 	.word	0x4c742400
 8009ca8:	4a742400 	.word	0x4a742400
 8009cac:	4bb71b00 	.word	0x4bb71b00

08009cb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b089      	sub	sp, #36	@ 0x24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cb8:	4ba1      	ldr	r3, [pc, #644]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbc:	f003 0303 	and.w	r3, r3, #3
 8009cc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009cc2:	4b9f      	ldr	r3, [pc, #636]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc6:	0d1b      	lsrs	r3, r3, #20
 8009cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ccc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009cce:	4b9c      	ldr	r3, [pc, #624]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd2:	0a1b      	lsrs	r3, r3, #8
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009cda:	4b99      	ldr	r3, [pc, #612]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cde:	08db      	lsrs	r3, r3, #3
 8009ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	fb02 f303 	mul.w	r3, r2, r3
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 8111 	beq.w	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	f000 8083 	beq.w	8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	f200 80a1 	bhi.w	8009e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d056      	beq.n	8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d1a:	e099      	b.n	8009e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d1c:	4b88      	ldr	r3, [pc, #544]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0320 	and.w	r3, r3, #32
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d02d      	beq.n	8009d84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d28:	4b85      	ldr	r3, [pc, #532]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	08db      	lsrs	r3, r3, #3
 8009d2e:	f003 0303 	and.w	r3, r3, #3
 8009d32:	4a84      	ldr	r2, [pc, #528]	@ (8009f44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d34:	fa22 f303 	lsr.w	r3, r2, r3
 8009d38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	ee07 3a90 	vmov	s15, r3
 8009d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d52:	4b7b      	ldr	r3, [pc, #492]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d5a:	ee07 3a90 	vmov	s15, r3
 8009d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d82:	e087      	b.n	8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d96:	4b6a      	ldr	r3, [pc, #424]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9e:	ee07 3a90 	vmov	s15, r3
 8009da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009daa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dc6:	e065      	b.n	8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dda:	4b59      	ldr	r3, [pc, #356]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de2:	ee07 3a90 	vmov	s15, r3
 8009de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e0a:	e043      	b.n	8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1e:	4b48      	ldr	r3, [pc, #288]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e4e:	e021      	b.n	8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e62:	4b37      	ldr	r3, [pc, #220]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009e94:	4b2a      	ldr	r3, [pc, #168]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e98:	0a5b      	lsrs	r3, r3, #9
 8009e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eba:	ee17 2a90 	vmov	r2, s15
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec6:	0c1b      	lsrs	r3, r3, #16
 8009ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ecc:	ee07 3a90 	vmov	s15, r3
 8009ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ee8:	ee17 2a90 	vmov	r2, s15
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009ef0:	4b13      	ldr	r3, [pc, #76]	@ (8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef4:	0e1b      	lsrs	r3, r3, #24
 8009ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009efa:	ee07 3a90 	vmov	s15, r3
 8009efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f16:	ee17 2a90 	vmov	r2, s15
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f1e:	e008      	b.n	8009f32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	609a      	str	r2, [r3, #8]
}
 8009f32:	bf00      	nop
 8009f34:	3724      	adds	r7, #36	@ 0x24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	58024400 	.word	0x58024400
 8009f44:	03d09000 	.word	0x03d09000
 8009f48:	46000000 	.word	0x46000000
 8009f4c:	4c742400 	.word	0x4c742400
 8009f50:	4a742400 	.word	0x4a742400
 8009f54:	4bb71b00 	.word	0x4bb71b00

08009f58 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b089      	sub	sp, #36	@ 0x24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f60:	4ba0      	ldr	r3, [pc, #640]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f64:	f003 0303 	and.w	r3, r3, #3
 8009f68:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009f6a:	4b9e      	ldr	r3, [pc, #632]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6e:	091b      	lsrs	r3, r3, #4
 8009f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f74:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f76:	4b9b      	ldr	r3, [pc, #620]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f80:	4b98      	ldr	r3, [pc, #608]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f84:	08db      	lsrs	r3, r3, #3
 8009f86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	fb02 f303 	mul.w	r3, r2, r3
 8009f90:	ee07 3a90 	vmov	s15, r3
 8009f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f98:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 8111 	beq.w	800a1c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	f000 8083 	beq.w	800a0b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	f200 80a1 	bhi.w	800a0f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d056      	beq.n	800a06e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009fc0:	e099      	b.n	800a0f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fc2:	4b88      	ldr	r3, [pc, #544]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0320 	and.w	r3, r3, #32
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d02d      	beq.n	800a02a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fce:	4b85      	ldr	r3, [pc, #532]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	08db      	lsrs	r3, r3, #3
 8009fd4:	f003 0303 	and.w	r3, r3, #3
 8009fd8:	4a83      	ldr	r2, [pc, #524]	@ (800a1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009fda:	fa22 f303 	lsr.w	r3, r2, r3
 8009fde:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	ee07 3a90 	vmov	s15, r3
 8009ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff8:	4b7a      	ldr	r3, [pc, #488]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a000:	ee07 3a90 	vmov	s15, r3
 800a004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a008:	ed97 6a03 	vldr	s12, [r7, #12]
 800a00c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a018:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a01c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a020:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a024:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a028:	e087      	b.n	800a13a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	ee07 3a90 	vmov	s15, r3
 800a030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a034:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a03c:	4b69      	ldr	r3, [pc, #420]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a03e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a044:	ee07 3a90 	vmov	s15, r3
 800a048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a050:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a05c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a064:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a068:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a06c:	e065      	b.n	800a13a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	ee07 3a90 	vmov	s15, r3
 800a074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a078:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a07c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a080:	4b58      	ldr	r3, [pc, #352]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a088:	ee07 3a90 	vmov	s15, r3
 800a08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a090:	ed97 6a03 	vldr	s12, [r7, #12]
 800a094:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a09c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0b0:	e043      	b.n	800a13a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	ee07 3a90 	vmov	s15, r3
 800a0b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0bc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a0c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0c4:	4b47      	ldr	r3, [pc, #284]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0cc:	ee07 3a90 	vmov	s15, r3
 800a0d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0d8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0f4:	e021      	b.n	800a13a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	ee07 3a90 	vmov	s15, r3
 800a0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a100:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a108:	4b36      	ldr	r3, [pc, #216]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a10a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a110:	ee07 3a90 	vmov	s15, r3
 800a114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a118:	ed97 6a03 	vldr	s12, [r7, #12]
 800a11c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a124:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a128:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a12c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a130:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a134:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a138:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a13a:	4b2a      	ldr	r3, [pc, #168]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a13c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a13e:	0a5b      	lsrs	r3, r3, #9
 800a140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a144:	ee07 3a90 	vmov	s15, r3
 800a148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a150:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a154:	edd7 6a07 	vldr	s13, [r7, #28]
 800a158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a15c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a160:	ee17 2a90 	vmov	r2, s15
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a168:	4b1e      	ldr	r3, [pc, #120]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a16a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a16c:	0c1b      	lsrs	r3, r3, #16
 800a16e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a17e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a182:	edd7 6a07 	vldr	s13, [r7, #28]
 800a186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a18a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a18e:	ee17 2a90 	vmov	r2, s15
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a196:	4b13      	ldr	r3, [pc, #76]	@ (800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a19a:	0e1b      	lsrs	r3, r3, #24
 800a19c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1a0:	ee07 3a90 	vmov	s15, r3
 800a1a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1bc:	ee17 2a90 	vmov	r2, s15
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a1c4:	e008      	b.n	800a1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	609a      	str	r2, [r3, #8]
}
 800a1d8:	bf00      	nop
 800a1da:	3724      	adds	r7, #36	@ 0x24
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	58024400 	.word	0x58024400
 800a1e8:	03d09000 	.word	0x03d09000
 800a1ec:	46000000 	.word	0x46000000
 800a1f0:	4c742400 	.word	0x4c742400
 800a1f4:	4a742400 	.word	0x4a742400
 800a1f8:	4bb71b00 	.word	0x4bb71b00

0800a1fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a20a:	4b53      	ldr	r3, [pc, #332]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20e:	f003 0303 	and.w	r3, r3, #3
 800a212:	2b03      	cmp	r3, #3
 800a214:	d101      	bne.n	800a21a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e099      	b.n	800a34e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a21a:	4b4f      	ldr	r3, [pc, #316]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a4e      	ldr	r2, [pc, #312]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a220:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a226:	f7f7 fcfb 	bl	8001c20 <HAL_GetTick>
 800a22a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a22c:	e008      	b.n	800a240 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a22e:	f7f7 fcf7 	bl	8001c20 <HAL_GetTick>
 800a232:	4602      	mov	r2, r0
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d901      	bls.n	800a240 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a23c:	2303      	movs	r3, #3
 800a23e:	e086      	b.n	800a34e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a240:	4b45      	ldr	r3, [pc, #276]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1f0      	bne.n	800a22e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a24c:	4b42      	ldr	r3, [pc, #264]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a24e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a250:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	031b      	lsls	r3, r3, #12
 800a25a:	493f      	ldr	r1, [pc, #252]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a25c:	4313      	orrs	r3, r2
 800a25e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	3b01      	subs	r3, #1
 800a266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	3b01      	subs	r3, #1
 800a270:	025b      	lsls	r3, r3, #9
 800a272:	b29b      	uxth	r3, r3
 800a274:	431a      	orrs	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	041b      	lsls	r3, r3, #16
 800a27e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a282:	431a      	orrs	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	3b01      	subs	r3, #1
 800a28a:	061b      	lsls	r3, r3, #24
 800a28c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a290:	4931      	ldr	r1, [pc, #196]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a292:	4313      	orrs	r3, r2
 800a294:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a296:	4b30      	ldr	r3, [pc, #192]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	492d      	ldr	r1, [pc, #180]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a2a8:	4b2b      	ldr	r3, [pc, #172]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ac:	f023 0220 	bic.w	r2, r3, #32
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	4928      	ldr	r1, [pc, #160]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a2ba:	4b27      	ldr	r3, [pc, #156]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2be:	4a26      	ldr	r2, [pc, #152]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a2c0:	f023 0310 	bic.w	r3, r3, #16
 800a2c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a2c6:	4b24      	ldr	r3, [pc, #144]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a2c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2ca:	4b24      	ldr	r3, [pc, #144]	@ (800a35c <RCCEx_PLL2_Config+0x160>)
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	69d2      	ldr	r2, [r2, #28]
 800a2d2:	00d2      	lsls	r2, r2, #3
 800a2d4:	4920      	ldr	r1, [pc, #128]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a2da:	4b1f      	ldr	r3, [pc, #124]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2de:	4a1e      	ldr	r2, [pc, #120]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a2e0:	f043 0310 	orr.w	r3, r3, #16
 800a2e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d106      	bne.n	800a2fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a2ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f0:	4a19      	ldr	r2, [pc, #100]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a2f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2f8:	e00f      	b.n	800a31a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d106      	bne.n	800a30e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a300:	4b15      	ldr	r3, [pc, #84]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a304:	4a14      	ldr	r2, [pc, #80]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a30a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a30c:	e005      	b.n	800a31a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a30e:	4b12      	ldr	r3, [pc, #72]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a312:	4a11      	ldr	r2, [pc, #68]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a314:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a318:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a31a:	4b0f      	ldr	r3, [pc, #60]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a0e      	ldr	r2, [pc, #56]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a320:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a326:	f7f7 fc7b 	bl	8001c20 <HAL_GetTick>
 800a32a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a32c:	e008      	b.n	800a340 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a32e:	f7f7 fc77 	bl	8001c20 <HAL_GetTick>
 800a332:	4602      	mov	r2, r0
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d901      	bls.n	800a340 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e006      	b.n	800a34e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a340:	4b05      	ldr	r3, [pc, #20]	@ (800a358 <RCCEx_PLL2_Config+0x15c>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0f0      	beq.n	800a32e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	58024400 	.word	0x58024400
 800a35c:	ffff0007 	.word	0xffff0007

0800a360 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a36e:	4b53      	ldr	r3, [pc, #332]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	2b03      	cmp	r3, #3
 800a378:	d101      	bne.n	800a37e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e099      	b.n	800a4b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a37e:	4b4f      	ldr	r3, [pc, #316]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a4e      	ldr	r2, [pc, #312]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a38a:	f7f7 fc49 	bl	8001c20 <HAL_GetTick>
 800a38e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a390:	e008      	b.n	800a3a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a392:	f7f7 fc45 	bl	8001c20 <HAL_GetTick>
 800a396:	4602      	mov	r2, r0
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d901      	bls.n	800a3a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e086      	b.n	800a4b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3a4:	4b45      	ldr	r3, [pc, #276]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1f0      	bne.n	800a392 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a3b0:	4b42      	ldr	r3, [pc, #264]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	051b      	lsls	r3, r3, #20
 800a3be:	493f      	ldr	r1, [pc, #252]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	628b      	str	r3, [r1, #40]	@ 0x28
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	025b      	lsls	r3, r3, #9
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	431a      	orrs	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	041b      	lsls	r3, r3, #16
 800a3e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a3e6:	431a      	orrs	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	061b      	lsls	r3, r3, #24
 800a3f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a3f4:	4931      	ldr	r1, [pc, #196]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a3fa:	4b30      	ldr	r3, [pc, #192]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	492d      	ldr	r1, [pc, #180]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a408:	4313      	orrs	r3, r2
 800a40a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a40c:	4b2b      	ldr	r3, [pc, #172]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a410:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	4928      	ldr	r1, [pc, #160]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a41e:	4b27      	ldr	r3, [pc, #156]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a422:	4a26      	ldr	r2, [pc, #152]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a428:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a42a:	4b24      	ldr	r3, [pc, #144]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a42c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a42e:	4b24      	ldr	r3, [pc, #144]	@ (800a4c0 <RCCEx_PLL3_Config+0x160>)
 800a430:	4013      	ands	r3, r2
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	69d2      	ldr	r2, [r2, #28]
 800a436:	00d2      	lsls	r2, r2, #3
 800a438:	4920      	ldr	r1, [pc, #128]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a43e:	4b1f      	ldr	r3, [pc, #124]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a442:	4a1e      	ldr	r2, [pc, #120]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a448:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d106      	bne.n	800a45e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a450:	4b1a      	ldr	r3, [pc, #104]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a454:	4a19      	ldr	r2, [pc, #100]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a456:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a45a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a45c:	e00f      	b.n	800a47e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d106      	bne.n	800a472 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a464:	4b15      	ldr	r3, [pc, #84]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a468:	4a14      	ldr	r2, [pc, #80]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a46a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a46e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a470:	e005      	b.n	800a47e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a472:	4b12      	ldr	r3, [pc, #72]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a476:	4a11      	ldr	r2, [pc, #68]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a478:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a47c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a47e:	4b0f      	ldr	r3, [pc, #60]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a0e      	ldr	r2, [pc, #56]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a48a:	f7f7 fbc9 	bl	8001c20 <HAL_GetTick>
 800a48e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a490:	e008      	b.n	800a4a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a492:	f7f7 fbc5 	bl	8001c20 <HAL_GetTick>
 800a496:	4602      	mov	r2, r0
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d901      	bls.n	800a4a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	e006      	b.n	800a4b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4a4:	4b05      	ldr	r3, [pc, #20]	@ (800a4bc <RCCEx_PLL3_Config+0x15c>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0f0      	beq.n	800a492 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	58024400 	.word	0x58024400
 800a4c0:	ffff0007 	.word	0xffff0007

0800a4c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d101      	bne.n	800a4d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e049      	b.n	800a56a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d106      	bne.n	800a4f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7f7 f86c 	bl	80015c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	3304      	adds	r3, #4
 800a500:	4619      	mov	r1, r3
 800a502:	4610      	mov	r0, r2
 800a504:	f000 fa66 	bl	800a9d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f003 0302 	and.w	r3, r3, #2
 800a590:	2b00      	cmp	r3, #0
 800a592:	d020      	beq.n	800a5d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f003 0302 	and.w	r3, r3, #2
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d01b      	beq.n	800a5d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f06f 0202 	mvn.w	r2, #2
 800a5a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	f003 0303 	and.w	r3, r3, #3
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d003      	beq.n	800a5c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f9eb 	bl	800a998 <HAL_TIM_IC_CaptureCallback>
 800a5c2:	e005      	b.n	800a5d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f9dd 	bl	800a984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f9ee 	bl	800a9ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	f003 0304 	and.w	r3, r3, #4
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d020      	beq.n	800a622 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f003 0304 	and.w	r3, r3, #4
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d01b      	beq.n	800a622 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f06f 0204 	mvn.w	r2, #4
 800a5f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 f9c5 	bl	800a998 <HAL_TIM_IC_CaptureCallback>
 800a60e:	e005      	b.n	800a61c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f9b7 	bl	800a984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f9c8 	bl	800a9ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f003 0308 	and.w	r3, r3, #8
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d020      	beq.n	800a66e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f003 0308 	and.w	r3, r3, #8
 800a632:	2b00      	cmp	r3, #0
 800a634:	d01b      	beq.n	800a66e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f06f 0208 	mvn.w	r2, #8
 800a63e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2204      	movs	r2, #4
 800a644:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	69db      	ldr	r3, [r3, #28]
 800a64c:	f003 0303 	and.w	r3, r3, #3
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f99f 	bl	800a998 <HAL_TIM_IC_CaptureCallback>
 800a65a:	e005      	b.n	800a668 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f991 	bl	800a984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f9a2 	bl	800a9ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f003 0310 	and.w	r3, r3, #16
 800a674:	2b00      	cmp	r3, #0
 800a676:	d020      	beq.n	800a6ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f003 0310 	and.w	r3, r3, #16
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d01b      	beq.n	800a6ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f06f 0210 	mvn.w	r2, #16
 800a68a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2208      	movs	r2, #8
 800a690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	69db      	ldr	r3, [r3, #28]
 800a698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d003      	beq.n	800a6a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f979 	bl	800a998 <HAL_TIM_IC_CaptureCallback>
 800a6a6:	e005      	b.n	800a6b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f96b 	bl	800a984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f97c 	bl	800a9ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f003 0301 	and.w	r3, r3, #1
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00c      	beq.n	800a6de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d007      	beq.n	800a6de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f06f 0201 	mvn.w	r2, #1
 800a6d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 f949 	bl	800a970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d104      	bne.n	800a6f2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00c      	beq.n	800a70c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d007      	beq.n	800a70c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 fb40 	bl	800ad8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00c      	beq.n	800a730 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d007      	beq.n	800a730 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fb38 	bl	800ada0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00c      	beq.n	800a754 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	d007      	beq.n	800a754 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a74c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f936 	bl	800a9c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f003 0320 	and.w	r3, r3, #32
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00c      	beq.n	800a778 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f003 0320 	and.w	r3, r3, #32
 800a764:	2b00      	cmp	r3, #0
 800a766:	d007      	beq.n	800a778 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f06f 0220 	mvn.w	r2, #32
 800a770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fb00 	bl	800ad78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a778:	bf00      	nop
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a794:	2b01      	cmp	r3, #1
 800a796:	d101      	bne.n	800a79c <HAL_TIM_ConfigClockSource+0x1c>
 800a798:	2302      	movs	r3, #2
 800a79a:	e0dc      	b.n	800a956 <HAL_TIM_ConfigClockSource+0x1d6>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	4b6a      	ldr	r3, [pc, #424]	@ (800a960 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a64      	ldr	r2, [pc, #400]	@ (800a964 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	f000 80a9 	beq.w	800a92a <HAL_TIM_ConfigClockSource+0x1aa>
 800a7d8:	4a62      	ldr	r2, [pc, #392]	@ (800a964 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	f200 80ae 	bhi.w	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a7e0:	4a61      	ldr	r2, [pc, #388]	@ (800a968 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	f000 80a1 	beq.w	800a92a <HAL_TIM_ConfigClockSource+0x1aa>
 800a7e8:	4a5f      	ldr	r2, [pc, #380]	@ (800a968 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	f200 80a6 	bhi.w	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a7f0:	4a5e      	ldr	r2, [pc, #376]	@ (800a96c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	f000 8099 	beq.w	800a92a <HAL_TIM_ConfigClockSource+0x1aa>
 800a7f8:	4a5c      	ldr	r2, [pc, #368]	@ (800a96c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	f200 809e 	bhi.w	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a800:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a804:	f000 8091 	beq.w	800a92a <HAL_TIM_ConfigClockSource+0x1aa>
 800a808:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a80c:	f200 8096 	bhi.w	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a810:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a814:	f000 8089 	beq.w	800a92a <HAL_TIM_ConfigClockSource+0x1aa>
 800a818:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a81c:	f200 808e 	bhi.w	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a824:	d03e      	beq.n	800a8a4 <HAL_TIM_ConfigClockSource+0x124>
 800a826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a82a:	f200 8087 	bhi.w	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a82e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a832:	f000 8086 	beq.w	800a942 <HAL_TIM_ConfigClockSource+0x1c2>
 800a836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a83a:	d87f      	bhi.n	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a83c:	2b70      	cmp	r3, #112	@ 0x70
 800a83e:	d01a      	beq.n	800a876 <HAL_TIM_ConfigClockSource+0xf6>
 800a840:	2b70      	cmp	r3, #112	@ 0x70
 800a842:	d87b      	bhi.n	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a844:	2b60      	cmp	r3, #96	@ 0x60
 800a846:	d050      	beq.n	800a8ea <HAL_TIM_ConfigClockSource+0x16a>
 800a848:	2b60      	cmp	r3, #96	@ 0x60
 800a84a:	d877      	bhi.n	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a84c:	2b50      	cmp	r3, #80	@ 0x50
 800a84e:	d03c      	beq.n	800a8ca <HAL_TIM_ConfigClockSource+0x14a>
 800a850:	2b50      	cmp	r3, #80	@ 0x50
 800a852:	d873      	bhi.n	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a854:	2b40      	cmp	r3, #64	@ 0x40
 800a856:	d058      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x18a>
 800a858:	2b40      	cmp	r3, #64	@ 0x40
 800a85a:	d86f      	bhi.n	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a85c:	2b30      	cmp	r3, #48	@ 0x30
 800a85e:	d064      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x1aa>
 800a860:	2b30      	cmp	r3, #48	@ 0x30
 800a862:	d86b      	bhi.n	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a864:	2b20      	cmp	r3, #32
 800a866:	d060      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x1aa>
 800a868:	2b20      	cmp	r3, #32
 800a86a:	d867      	bhi.n	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d05c      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x1aa>
 800a870:	2b10      	cmp	r3, #16
 800a872:	d05a      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x1aa>
 800a874:	e062      	b.n	800a93c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a886:	f000 f9c9 	bl	800ac1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	609a      	str	r2, [r3, #8]
      break;
 800a8a2:	e04f      	b.n	800a944 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8b4:	f000 f9b2 	bl	800ac1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689a      	ldr	r2, [r3, #8]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a8c6:	609a      	str	r2, [r3, #8]
      break;
 800a8c8:	e03c      	b.n	800a944 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	f000 f922 	bl	800ab20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2150      	movs	r1, #80	@ 0x50
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 f97c 	bl	800abe0 <TIM_ITRx_SetConfig>
      break;
 800a8e8:	e02c      	b.n	800a944 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f000 f941 	bl	800ab7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2160      	movs	r1, #96	@ 0x60
 800a902:	4618      	mov	r0, r3
 800a904:	f000 f96c 	bl	800abe0 <TIM_ITRx_SetConfig>
      break;
 800a908:	e01c      	b.n	800a944 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a916:	461a      	mov	r2, r3
 800a918:	f000 f902 	bl	800ab20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2140      	movs	r1, #64	@ 0x40
 800a922:	4618      	mov	r0, r3
 800a924:	f000 f95c 	bl	800abe0 <TIM_ITRx_SetConfig>
      break;
 800a928:	e00c      	b.n	800a944 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4619      	mov	r1, r3
 800a934:	4610      	mov	r0, r2
 800a936:	f000 f953 	bl	800abe0 <TIM_ITRx_SetConfig>
      break;
 800a93a:	e003      	b.n	800a944 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	73fb      	strb	r3, [r7, #15]
      break;
 800a940:	e000      	b.n	800a944 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a954:	7bfb      	ldrb	r3, [r7, #15]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	ffceff88 	.word	0xffceff88
 800a964:	00100040 	.word	0x00100040
 800a968:	00100030 	.word	0x00100030
 800a96c:	00100020 	.word	0x00100020

0800a970 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a46      	ldr	r2, [pc, #280]	@ (800ab00 <TIM_Base_SetConfig+0x12c>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d013      	beq.n	800aa14 <TIM_Base_SetConfig+0x40>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9f2:	d00f      	beq.n	800aa14 <TIM_Base_SetConfig+0x40>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a43      	ldr	r2, [pc, #268]	@ (800ab04 <TIM_Base_SetConfig+0x130>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d00b      	beq.n	800aa14 <TIM_Base_SetConfig+0x40>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a42      	ldr	r2, [pc, #264]	@ (800ab08 <TIM_Base_SetConfig+0x134>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d007      	beq.n	800aa14 <TIM_Base_SetConfig+0x40>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a41      	ldr	r2, [pc, #260]	@ (800ab0c <TIM_Base_SetConfig+0x138>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d003      	beq.n	800aa14 <TIM_Base_SetConfig+0x40>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a40      	ldr	r2, [pc, #256]	@ (800ab10 <TIM_Base_SetConfig+0x13c>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d108      	bne.n	800aa26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a35      	ldr	r2, [pc, #212]	@ (800ab00 <TIM_Base_SetConfig+0x12c>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d01f      	beq.n	800aa6e <TIM_Base_SetConfig+0x9a>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa34:	d01b      	beq.n	800aa6e <TIM_Base_SetConfig+0x9a>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a32      	ldr	r2, [pc, #200]	@ (800ab04 <TIM_Base_SetConfig+0x130>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d017      	beq.n	800aa6e <TIM_Base_SetConfig+0x9a>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a31      	ldr	r2, [pc, #196]	@ (800ab08 <TIM_Base_SetConfig+0x134>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d013      	beq.n	800aa6e <TIM_Base_SetConfig+0x9a>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a30      	ldr	r2, [pc, #192]	@ (800ab0c <TIM_Base_SetConfig+0x138>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d00f      	beq.n	800aa6e <TIM_Base_SetConfig+0x9a>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a2f      	ldr	r2, [pc, #188]	@ (800ab10 <TIM_Base_SetConfig+0x13c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00b      	beq.n	800aa6e <TIM_Base_SetConfig+0x9a>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a2e      	ldr	r2, [pc, #184]	@ (800ab14 <TIM_Base_SetConfig+0x140>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d007      	beq.n	800aa6e <TIM_Base_SetConfig+0x9a>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a2d      	ldr	r2, [pc, #180]	@ (800ab18 <TIM_Base_SetConfig+0x144>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d003      	beq.n	800aa6e <TIM_Base_SetConfig+0x9a>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a2c      	ldr	r2, [pc, #176]	@ (800ab1c <TIM_Base_SetConfig+0x148>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d108      	bne.n	800aa80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	689a      	ldr	r2, [r3, #8]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a16      	ldr	r2, [pc, #88]	@ (800ab00 <TIM_Base_SetConfig+0x12c>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d00f      	beq.n	800aacc <TIM_Base_SetConfig+0xf8>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a18      	ldr	r2, [pc, #96]	@ (800ab10 <TIM_Base_SetConfig+0x13c>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d00b      	beq.n	800aacc <TIM_Base_SetConfig+0xf8>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a17      	ldr	r2, [pc, #92]	@ (800ab14 <TIM_Base_SetConfig+0x140>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d007      	beq.n	800aacc <TIM_Base_SetConfig+0xf8>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a16      	ldr	r2, [pc, #88]	@ (800ab18 <TIM_Base_SetConfig+0x144>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d003      	beq.n	800aacc <TIM_Base_SetConfig+0xf8>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a15      	ldr	r2, [pc, #84]	@ (800ab1c <TIM_Base_SetConfig+0x148>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d103      	bne.n	800aad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	691a      	ldr	r2, [r3, #16]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	f003 0301 	and.w	r3, r3, #1
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d105      	bne.n	800aaf2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	f023 0201 	bic.w	r2, r3, #1
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	611a      	str	r2, [r3, #16]
  }
}
 800aaf2:	bf00      	nop
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	40010000 	.word	0x40010000
 800ab04:	40000400 	.word	0x40000400
 800ab08:	40000800 	.word	0x40000800
 800ab0c:	40000c00 	.word	0x40000c00
 800ab10:	40010400 	.word	0x40010400
 800ab14:	40014000 	.word	0x40014000
 800ab18:	40014400 	.word	0x40014400
 800ab1c:	40014800 	.word	0x40014800

0800ab20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6a1b      	ldr	r3, [r3, #32]
 800ab30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	f023 0201 	bic.w	r2, r3, #1
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	011b      	lsls	r3, r3, #4
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f023 030a 	bic.w	r3, r3, #10
 800ab5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	621a      	str	r2, [r3, #32]
}
 800ab72:	bf00      	nop
 800ab74:	371c      	adds	r7, #28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b087      	sub	sp, #28
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60f8      	str	r0, [r7, #12]
 800ab86:	60b9      	str	r1, [r7, #8]
 800ab88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6a1b      	ldr	r3, [r3, #32]
 800ab94:	f023 0210 	bic.w	r2, r3, #16
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	031b      	lsls	r3, r3, #12
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800abba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	011b      	lsls	r3, r3, #4
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	621a      	str	r2, [r3, #32]
}
 800abd2:	bf00      	nop
 800abd4:	371c      	adds	r7, #28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
	...

0800abe0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4b09      	ldr	r3, [pc, #36]	@ (800ac18 <TIM_ITRx_SetConfig+0x38>)
 800abf4:	4013      	ands	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	f043 0307 	orr.w	r3, r3, #7
 800ac02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	609a      	str	r2, [r3, #8]
}
 800ac0a:	bf00      	nop
 800ac0c:	3714      	adds	r7, #20
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	ffcfff8f 	.word	0xffcfff8f

0800ac1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	021a      	lsls	r2, r3, #8
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	431a      	orrs	r2, r3
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	697a      	ldr	r2, [r7, #20]
 800ac4e:	609a      	str	r2, [r3, #8]
}
 800ac50:	bf00      	nop
 800ac52:	371c      	adds	r7, #28
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d101      	bne.n	800ac74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac70:	2302      	movs	r3, #2
 800ac72:	e06d      	b.n	800ad50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2202      	movs	r2, #2
 800ac80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a30      	ldr	r2, [pc, #192]	@ (800ad5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d004      	beq.n	800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a2f      	ldr	r2, [pc, #188]	@ (800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d108      	bne.n	800acba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800acae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	4313      	orrs	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a20      	ldr	r2, [pc, #128]	@ (800ad5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d022      	beq.n	800ad24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ace6:	d01d      	beq.n	800ad24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1d      	ldr	r2, [pc, #116]	@ (800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d018      	beq.n	800ad24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a1c      	ldr	r2, [pc, #112]	@ (800ad68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d013      	beq.n	800ad24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a1a      	ldr	r2, [pc, #104]	@ (800ad6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d00e      	beq.n	800ad24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a15      	ldr	r2, [pc, #84]	@ (800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d009      	beq.n	800ad24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a16      	ldr	r2, [pc, #88]	@ (800ad70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d004      	beq.n	800ad24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a15      	ldr	r2, [pc, #84]	@ (800ad74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d10c      	bne.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	40010000 	.word	0x40010000
 800ad60:	40010400 	.word	0x40010400
 800ad64:	40000400 	.word	0x40000400
 800ad68:	40000800 	.word	0x40000800
 800ad6c:	40000c00 	.word	0x40000c00
 800ad70:	40001800 	.word	0x40001800
 800ad74:	40014000 	.word	0x40014000

0800ad78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <memset>:
 800adb4:	4402      	add	r2, r0
 800adb6:	4603      	mov	r3, r0
 800adb8:	4293      	cmp	r3, r2
 800adba:	d100      	bne.n	800adbe <memset+0xa>
 800adbc:	4770      	bx	lr
 800adbe:	f803 1b01 	strb.w	r1, [r3], #1
 800adc2:	e7f9      	b.n	800adb8 <memset+0x4>

0800adc4 <__libc_init_array>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	4d0d      	ldr	r5, [pc, #52]	@ (800adfc <__libc_init_array+0x38>)
 800adc8:	4c0d      	ldr	r4, [pc, #52]	@ (800ae00 <__libc_init_array+0x3c>)
 800adca:	1b64      	subs	r4, r4, r5
 800adcc:	10a4      	asrs	r4, r4, #2
 800adce:	2600      	movs	r6, #0
 800add0:	42a6      	cmp	r6, r4
 800add2:	d109      	bne.n	800ade8 <__libc_init_array+0x24>
 800add4:	4d0b      	ldr	r5, [pc, #44]	@ (800ae04 <__libc_init_array+0x40>)
 800add6:	4c0c      	ldr	r4, [pc, #48]	@ (800ae08 <__libc_init_array+0x44>)
 800add8:	f000 f826 	bl	800ae28 <_init>
 800addc:	1b64      	subs	r4, r4, r5
 800adde:	10a4      	asrs	r4, r4, #2
 800ade0:	2600      	movs	r6, #0
 800ade2:	42a6      	cmp	r6, r4
 800ade4:	d105      	bne.n	800adf2 <__libc_init_array+0x2e>
 800ade6:	bd70      	pop	{r4, r5, r6, pc}
 800ade8:	f855 3b04 	ldr.w	r3, [r5], #4
 800adec:	4798      	blx	r3
 800adee:	3601      	adds	r6, #1
 800adf0:	e7ee      	b.n	800add0 <__libc_init_array+0xc>
 800adf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800adf6:	4798      	blx	r3
 800adf8:	3601      	adds	r6, #1
 800adfa:	e7f2      	b.n	800ade2 <__libc_init_array+0x1e>
 800adfc:	0800aeb4 	.word	0x0800aeb4
 800ae00:	0800aeb4 	.word	0x0800aeb4
 800ae04:	0800aeb4 	.word	0x0800aeb4
 800ae08:	0800aeb8 	.word	0x0800aeb8

0800ae0c <memcpy>:
 800ae0c:	440a      	add	r2, r1
 800ae0e:	4291      	cmp	r1, r2
 800ae10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae14:	d100      	bne.n	800ae18 <memcpy+0xc>
 800ae16:	4770      	bx	lr
 800ae18:	b510      	push	{r4, lr}
 800ae1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae22:	4291      	cmp	r1, r2
 800ae24:	d1f9      	bne.n	800ae1a <memcpy+0xe>
 800ae26:	bd10      	pop	{r4, pc}

0800ae28 <_init>:
 800ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2a:	bf00      	nop
 800ae2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae2e:	bc08      	pop	{r3}
 800ae30:	469e      	mov	lr, r3
 800ae32:	4770      	bx	lr

0800ae34 <_fini>:
 800ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae36:	bf00      	nop
 800ae38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3a:	bc08      	pop	{r3}
 800ae3c:	469e      	mov	lr, r3
 800ae3e:	4770      	bx	lr

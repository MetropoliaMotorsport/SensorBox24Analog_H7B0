
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000926c  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800951c  0800951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009584  08009584  00019584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08009588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000bc0  24000010  08009598  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000bd0  08009598  00020bd0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015765  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000286f  00000000  00000000  000357e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012d8  00000000  00000000  00038055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e88  00000000  00000000  0003932d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000325c9  00000000  00000000  0003a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018324  00000000  00000000  0006c77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d723  00000000  00000000  00084aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005228  00000000  00000000  001d21c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009504 	.word	0x08009504

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	08009504 	.word	0x08009504

080002f0 <Config_Setup>:
 *      Author: csort
 */

#include "config.h"

void Config_Setup(void){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

#if ID == 1
	Config_1();
 80002f4:	f000 f802 	bl	80002fc <Config_1>
#elif ID == 2
	Config_2();
#elif ID == 3
	Config_3();
#endif
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <Config_1>:

void Config_1(){
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0

	transfer_functions[0] = WATER_LVL;		// PA6
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <Config_1+0x70>)
 8000302:	220a      	movs	r2, #10
 8000304:	801a      	strh	r2, [r3, #0]
	transfer_functions[1] = FRONT_HEAVE;	// PC4
 8000306:	4b19      	ldr	r3, [pc, #100]	; (800036c <Config_1+0x70>)
 8000308:	2204      	movs	r2, #4
 800030a:	805a      	strh	r2, [r3, #2]
	transfer_functions[2] = FRONT_ROLL;		//PB1
 800030c:	4b17      	ldr	r3, [pc, #92]	; (800036c <Config_1+0x70>)
 800030e:	2205      	movs	r2, #5
 8000310:	809a      	strh	r2, [r3, #4]
	transfer_functions[3] = REAR_HEAVE;		//PA7
 8000312:	4b16      	ldr	r3, [pc, #88]	; (800036c <Config_1+0x70>)
 8000314:	2206      	movs	r2, #6
 8000316:	80da      	strh	r2, [r3, #6]
	transfer_functions[4] = REAR_ROLL;		//PC5
 8000318:	4b14      	ldr	r3, [pc, #80]	; (800036c <Config_1+0x70>)
 800031a:	2207      	movs	r2, #7
 800031c:	811a      	strh	r2, [r3, #8]
	transfer_functions[5] = APPS;			//PB0
 800031e:	4b13      	ldr	r3, [pc, #76]	; (800036c <Config_1+0x70>)
 8000320:	2203      	movs	r2, #3
 8000322:	815a      	strh	r2, [r3, #10]
	transfer_functions[6] = BPPS;			//PC0
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <Config_1+0x70>)
 8000326:	2202      	movs	r2, #2
 8000328:	819a      	strh	r2, [r3, #12]
	transfer_functions[7] = BPPS;			//PC1
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <Config_1+0x70>)
 800032c:	2202      	movs	r2, #2
 800032e:	81da      	strh	r2, [r3, #14]
	transfer_functions[8] = TYRE_TEMP;		//PC2
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <Config_1+0x70>)
 8000332:	2208      	movs	r2, #8
 8000334:	821a      	strh	r2, [r3, #16]
	transfer_functions[9] = ANGLE_GEAR;		//PC3
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <Config_1+0x70>)
 8000338:	2209      	movs	r2, #9
 800033a:	825a      	strh	r2, [r3, #18]
	transfer_functions[10] = VOLTAGE_3V3;	//PA2
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <Config_1+0x70>)
 800033e:	2200      	movs	r2, #0
 8000340:	829a      	strh	r2, [r3, #20]
	transfer_functions[11] = VOLTAGE_5V;	//PA3
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <Config_1+0x70>)
 8000344:	2201      	movs	r2, #1
 8000346:	82da      	strh	r2, [r3, #22]
	transfer_functions[12] = VOLTAGE_5V;	//PA0
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <Config_1+0x70>)
 800034a:	2201      	movs	r2, #1
 800034c:	831a      	strh	r2, [r3, #24]
	transfer_functions[13] = VOLTAGE_5V;	//PA1
 800034e:	4b07      	ldr	r3, [pc, #28]	; (800036c <Config_1+0x70>)
 8000350:	2201      	movs	r2, #1
 8000352:	835a      	strh	r2, [r3, #26]
	transfer_functions[14] = VOLTAGE_5V;	//PA4
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <Config_1+0x70>)
 8000356:	2201      	movs	r2, #1
 8000358:	839a      	strh	r2, [r3, #28]
	transfer_functions[15] = VOLTAGE_5V;	//PA5
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <Config_1+0x70>)
 800035c:	2201      	movs	r2, #1
 800035e:	83da      	strh	r2, [r3, #30]

}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	24000ba8 	.word	0x24000ba8

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000374:	f001 f994 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000378:	f000 f828 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037c:	f000 fbba 	bl	8000af4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000380:	f000 fb98 	bl	8000ab4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000384:	f000 fa0e 	bl	80007a4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000388:	f000 fa70 	bl	800086c <MX_FDCAN2_Init>
  MX_I2C1_Init();
 800038c:	f000 fad2 	bl	8000934 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000390:	f000 fb10 	bl	80009b4 <MX_I2C3_Init>
  MX_ADC1_Init();
 8000394:	f000 f890 	bl	80004b8 <MX_ADC1_Init>
  MX_I2C4_Init();
 8000398:	f000 fb4c 	bl	8000a34 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <main+0x54>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4909      	ldr	r1, [pc, #36]	; (80003c8 <main+0x58>)
 80003a4:	4807      	ldr	r0, [pc, #28]	; (80003c4 <main+0x54>)
 80003a6:	f001 fd73 	bl	8001e90 <HAL_ADC_Start_DMA>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <main+0x44>
 80003b0:	f000 fc7c 	bl	8000cac <Error_Handler>

  Config_Setup();
 80003b4:	f7ff ff9c 	bl	80002f0 <Config_Setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 80003b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003bc:	f001 fa02 	bl	80017c4 <HAL_Delay>
 80003c0:	e7fa      	b.n	80003b8 <main+0x48>
 80003c2:	bf00      	nop
 80003c4:	2400002c 	.word	0x2400002c
 80003c8:	24000344 	.word	0x24000344

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b09c      	sub	sp, #112	; 0x70
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003d6:	224c      	movs	r2, #76	; 0x4c
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f009 f858 	bl	8009490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2220      	movs	r2, #32
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f009 f852 	bl	8009490 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80003ec:	4b30      	ldr	r3, [pc, #192]	; (80004b0 <SystemClock_Config+0xe4>)
 80003ee:	f04f 32ff 	mov.w	r2, #4294967295
 80003f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003f6:	2002      	movs	r0, #2
 80003f8:	f005 fc5e 	bl	8005cb8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003fc:	2300      	movs	r3, #0
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <SystemClock_Config+0xe8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a2b      	ldr	r2, [pc, #172]	; (80004b4 <SystemClock_Config+0xe8>)
 8000406:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <SystemClock_Config+0xe8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000418:	bf00      	nop
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <SystemClock_Config+0xe8>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000426:	d1f8      	bne.n	800041a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000428:	2302      	movs	r3, #2
 800042a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800042c:	2301      	movs	r3, #1
 800042e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000430:	2340      	movs	r3, #64	; 0x40
 8000432:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2302      	movs	r3, #2
 8000436:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000438:	2300      	movs	r3, #0
 800043a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800043c:	2304      	movs	r3, #4
 800043e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000440:	2308      	movs	r3, #8
 8000442:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000444:	2302      	movs	r3, #2
 8000446:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000448:	2303      	movs	r3, #3
 800044a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800044c:	2302      	movs	r3, #2
 800044e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000450:	230c      	movs	r3, #12
 8000452:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000454:	2300      	movs	r3, #0
 8000456:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000460:	4618      	mov	r0, r3
 8000462:	f005 fc63 	bl	8005d2c <HAL_RCC_OscConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800046c:	f000 fc1e 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000470:	233f      	movs	r3, #63	; 0x3f
 8000472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000480:	2340      	movs	r3, #64	; 0x40
 8000482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000484:	2340      	movs	r3, #64	; 0x40
 8000486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800048e:	2340      	movs	r3, #64	; 0x40
 8000490:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2102      	movs	r1, #2
 8000496:	4618      	mov	r0, r3
 8000498:	f006 f87a 	bl	8006590 <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80004a2:	f000 fc03 	bl	8000cac <Error_Handler>
  }
}
 80004a6:	bf00      	nop
 80004a8:	3770      	adds	r7, #112	; 0x70
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	58024400 	.word	0x58024400
 80004b4:	58024800 	.word	0x58024800

080004b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	; 0x28
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]
 80004da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004dc:	4b9f      	ldr	r3, [pc, #636]	; (800075c <MX_ADC1_Init+0x2a4>)
 80004de:	4aa0      	ldr	r2, [pc, #640]	; (8000760 <MX_ADC1_Init+0x2a8>)
 80004e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80004e2:	4b9e      	ldr	r3, [pc, #632]	; (800075c <MX_ADC1_Init+0x2a4>)
 80004e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ea:	4b9c      	ldr	r3, [pc, #624]	; (800075c <MX_ADC1_Init+0x2a4>)
 80004ec:	2208      	movs	r2, #8
 80004ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004f0:	4b9a      	ldr	r3, [pc, #616]	; (800075c <MX_ADC1_Init+0x2a4>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f6:	4b99      	ldr	r3, [pc, #612]	; (800075c <MX_ADC1_Init+0x2a4>)
 80004f8:	2204      	movs	r2, #4
 80004fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004fc:	4b97      	ldr	r3, [pc, #604]	; (800075c <MX_ADC1_Init+0x2a4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000502:	4b96      	ldr	r3, [pc, #600]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000504:	2201      	movs	r2, #1
 8000506:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 8000508:	4b94      	ldr	r3, [pc, #592]	; (800075c <MX_ADC1_Init+0x2a4>)
 800050a:	2210      	movs	r2, #16
 800050c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050e:	4b93      	ldr	r3, [pc, #588]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000510:	2200      	movs	r2, #0
 8000512:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000514:	4b91      	ldr	r3, [pc, #580]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051a:	4b90      	ldr	r3, [pc, #576]	; (800075c <MX_ADC1_Init+0x2a4>)
 800051c:	2200      	movs	r2, #0
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000520:	4b8e      	ldr	r3, [pc, #568]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000522:	2203      	movs	r2, #3
 8000524:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000526:	4b8d      	ldr	r3, [pc, #564]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000528:	2200      	movs	r2, #0
 800052a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800052c:	4b8b      	ldr	r3, [pc, #556]	; (800075c <MX_ADC1_Init+0x2a4>)
 800052e:	2200      	movs	r2, #0
 8000530:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000532:	4b8a      	ldr	r3, [pc, #552]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053a:	4888      	ldr	r0, [pc, #544]	; (800075c <MX_ADC1_Init+0x2a4>)
 800053c:	f001 fb4e 	bl	8001bdc <HAL_ADC_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000546:	f000 fbb1 	bl	8000cac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	4619      	mov	r1, r3
 8000554:	4881      	ldr	r0, [pc, #516]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000556:	f002 fa4d 	bl	80029f4 <HAL_ADCEx_MultiModeConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000560:	f000 fba4 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000564:	4b7f      	ldr	r3, [pc, #508]	; (8000764 <MX_ADC1_Init+0x2ac>)
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000568:	2306      	movs	r3, #6
 800056a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800056c:	2306      	movs	r3, #6
 800056e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000570:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000574:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000576:	2304      	movs	r3, #4
 8000578:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000582:	463b      	mov	r3, r7
 8000584:	4619      	mov	r1, r3
 8000586:	4875      	ldr	r0, [pc, #468]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000588:	f001 fd4a 	bl	8002020 <HAL_ADC_ConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000592:	f000 fb8b 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000596:	4b74      	ldr	r3, [pc, #464]	; (8000768 <MX_ADC1_Init+0x2b0>)
 8000598:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800059a:	230c      	movs	r3, #12
 800059c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	4619      	mov	r1, r3
 80005a2:	486e      	ldr	r0, [pc, #440]	; (800075c <MX_ADC1_Init+0x2a4>)
 80005a4:	f001 fd3c 	bl	8002020 <HAL_ADC_ConfigChannel>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80005ae:	f000 fb7d 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005b2:	4b6e      	ldr	r3, [pc, #440]	; (800076c <MX_ADC1_Init+0x2b4>)
 80005b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005b6:	2312      	movs	r3, #18
 80005b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ba:	463b      	mov	r3, r7
 80005bc:	4619      	mov	r1, r3
 80005be:	4867      	ldr	r0, [pc, #412]	; (800075c <MX_ADC1_Init+0x2a4>)
 80005c0:	f001 fd2e 	bl	8002020 <HAL_ADC_ConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80005ca:	f000 fb6f 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005ce:	4b68      	ldr	r3, [pc, #416]	; (8000770 <MX_ADC1_Init+0x2b8>)
 80005d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005d2:	2318      	movs	r3, #24
 80005d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	4619      	mov	r1, r3
 80005da:	4860      	ldr	r0, [pc, #384]	; (800075c <MX_ADC1_Init+0x2a4>)
 80005dc:	f001 fd20 	bl	8002020 <HAL_ADC_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80005e6:	f000 fb61 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005ea:	4b62      	ldr	r3, [pc, #392]	; (8000774 <MX_ADC1_Init+0x2bc>)
 80005ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	4858      	ldr	r0, [pc, #352]	; (800075c <MX_ADC1_Init+0x2a4>)
 80005fa:	f001 fd11 	bl	8002020 <HAL_ADC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000604:	f000 fb52 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000608:	4b5b      	ldr	r3, [pc, #364]	; (8000778 <MX_ADC1_Init+0x2c0>)
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800060c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000610:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	4851      	ldr	r0, [pc, #324]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000618:	f001 fd02 	bl	8002020 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000622:	f000 fb43 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000626:	4b55      	ldr	r3, [pc, #340]	; (800077c <MX_ADC1_Init+0x2c4>)
 8000628:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800062a:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4849      	ldr	r0, [pc, #292]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000636:	f001 fcf3 	bl	8002020 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000640:	f000 fb34 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000644:	4b4e      	ldr	r3, [pc, #312]	; (8000780 <MX_ADC1_Init+0x2c8>)
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000648:	f44f 7389 	mov.w	r3, #274	; 0x112
 800064c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	4619      	mov	r1, r3
 8000652:	4842      	ldr	r0, [pc, #264]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000654:	f001 fce4 	bl	8002020 <HAL_ADC_ConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 800065e:	f000 fb25 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000662:	4b48      	ldr	r3, [pc, #288]	; (8000784 <MX_ADC1_Init+0x2cc>)
 8000664:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000666:	f44f 738c 	mov.w	r3, #280	; 0x118
 800066a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	483a      	ldr	r0, [pc, #232]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000672:	f001 fcd5 	bl	8002020 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 800067c:	f000 fb16 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000680:	4b41      	ldr	r3, [pc, #260]	; (8000788 <MX_ADC1_Init+0x2d0>)
 8000682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000688:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	4619      	mov	r1, r3
 800068e:	4833      	ldr	r0, [pc, #204]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000690:	f001 fcc6 	bl	8002020 <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 800069a:	f000 fb07 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800069e:	4b3b      	ldr	r3, [pc, #236]	; (800078c <MX_ADC1_Init+0x2d4>)
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80006a2:	f240 2306 	movw	r3, #518	; 0x206
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	482b      	ldr	r0, [pc, #172]	; (800075c <MX_ADC1_Init+0x2a4>)
 80006ae:	f001 fcb7 	bl	8002020 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 80006b8:	f000 faf8 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <MX_ADC1_Init+0x2d8>)
 80006be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80006c0:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80006c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	4824      	ldr	r0, [pc, #144]	; (800075c <MX_ADC1_Init+0x2a4>)
 80006cc:	f001 fca8 	bl	8002020 <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 80006d6:	f000 fae9 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80006da:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <MX_ADC1_Init+0x2dc>)
 80006dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80006de:	f240 2312 	movw	r3, #530	; 0x212
 80006e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	481c      	ldr	r0, [pc, #112]	; (800075c <MX_ADC1_Init+0x2a4>)
 80006ea:	f001 fc99 	bl	8002020 <HAL_ADC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 80006f4:	f000 fada 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <MX_ADC1_Init+0x2e0>)
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80006fc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8000700:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	4619      	mov	r1, r3
 8000706:	4815      	ldr	r0, [pc, #84]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000708:	f001 fc8a 	bl	8002020 <HAL_ADC_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 8000712:	f000 facb 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC1_Init+0x2e4>)
 8000718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800071a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800071e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000726:	f001 fc7b 	bl	8002020 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 8000730:	f000 fabc 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_ADC1_Init+0x2e8>)
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000738:	f240 3306 	movw	r3, #774	; 0x306
 800073c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <MX_ADC1_Init+0x2a4>)
 8000744:	f001 fc6c 	bl	8002020 <HAL_ADC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 800074e:	f000 faad 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	; 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2400002c 	.word	0x2400002c
 8000760:	40022000 	.word	0x40022000
 8000764:	0c900008 	.word	0x0c900008
 8000768:	10c00010 	.word	0x10c00010
 800076c:	14f00020 	.word	0x14f00020
 8000770:	1d500080 	.word	0x1d500080
 8000774:	21800100 	.word	0x21800100
 8000778:	25b00200 	.word	0x25b00200
 800077c:	2a000400 	.word	0x2a000400
 8000780:	2e300800 	.word	0x2e300800
 8000784:	32601000 	.word	0x32601000
 8000788:	36902000 	.word	0x36902000
 800078c:	3ac04000 	.word	0x3ac04000
 8000790:	3ef08000 	.word	0x3ef08000
 8000794:	43210000 	.word	0x43210000
 8000798:	47520000 	.word	0x47520000
 800079c:	4b840000 	.word	0x4b840000
 80007a0:	4fb80000 	.word	0x4fb80000

080007a4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007aa:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <MX_FDCAN1_Init+0xc4>)
 80007ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007ae:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007b4:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007ce:	2210      	movs	r2, #16
 80007d0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007da:	2202      	movs	r2, #2
 80007dc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 8000804:	2200      	movs	r2, #0
 8000806:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 800080a:	2200      	movs	r2, #0
 800080c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 8000810:	2200      	movs	r2, #0
 8000812:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 8000816:	2204      	movs	r2, #4
 8000818:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 800081c:	2200      	movs	r2, #0
 800081e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 8000822:	2204      	movs	r2, #4
 8000824:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 800082e:	2204      	movs	r2, #4
 8000830:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 8000834:	2200      	movs	r2, #0
 8000836:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 800083a:	2200      	movs	r2, #0
 800083c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 8000840:	2200      	movs	r2, #0
 8000842:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 8000846:	2200      	movs	r2, #0
 8000848:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 800084c:	2204      	movs	r2, #4
 800084e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_FDCAN1_Init+0xc0>)
 8000852:	f004 fbf5 	bl	8005040 <HAL_FDCAN_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800085c:	f000 fa26 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	24000108 	.word	0x24000108
 8000868:	4000a000 	.word	0x4000a000

0800086c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000870:	4b2e      	ldr	r3, [pc, #184]	; (800092c <MX_FDCAN2_Init+0xc0>)
 8000872:	4a2f      	ldr	r2, [pc, #188]	; (8000930 <MX_FDCAN2_Init+0xc4>)
 8000874:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_FDCAN2_Init+0xc0>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_FDCAN2_Init+0xc0>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_FDCAN2_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_FDCAN2_Init+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_FDCAN2_Init+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_FDCAN2_Init+0xc0>)
 8000896:	2210      	movs	r2, #16
 8000898:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_FDCAN2_Init+0xc0>)
 800089c:	2201      	movs	r2, #1
 800089e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80008c4:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008de:	2204      	movs	r2, #4
 80008e0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_FDCAN2_Init+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_FDCAN2_Init+0xc0>)
 8000902:	2200      	movs	r2, #0
 8000904:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_FDCAN2_Init+0xc0>)
 8000908:	2200      	movs	r2, #0
 800090a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_FDCAN2_Init+0xc0>)
 800090e:	2200      	movs	r2, #0
 8000910:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_FDCAN2_Init+0xc0>)
 8000914:	2204      	movs	r2, #4
 8000916:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_FDCAN2_Init+0xc0>)
 800091a:	f004 fb91 	bl	8005040 <HAL_FDCAN_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000924:	f000 f9c2 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	240001a8 	.word	0x240001a8
 8000930:	4000a400 	.word	0x4000a400

08000934 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_I2C1_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <MX_I2C1_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000940:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <MX_I2C1_Init+0x7c>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_I2C1_Init+0x74>)
 800094c:	2201      	movs	r2, #1
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000970:	f005 f87a 	bl	8005a68 <HAL_I2C_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800097a:	f000 f997 	bl	8000cac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000982:	f005 f901 	bl	8005b88 <HAL_I2CEx_ConfigAnalogFilter>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800098c:	f000 f98e 	bl	8000cac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000994:	f005 f943 	bl	8005c1e <HAL_I2CEx_ConfigDigitalFilter>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800099e:	f000 f985 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000248 	.word	0x24000248
 80009ac:	40005400 	.word	0x40005400
 80009b0:	00707cbb 	.word	0x00707cbb

080009b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_I2C3_Init+0x74>)
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <MX_I2C3_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_I2C3_Init+0x74>)
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <MX_I2C3_Init+0x7c>)
 80009c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_I2C3_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_I2C3_Init+0x74>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_I2C3_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_I2C3_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_I2C3_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_I2C3_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_I2C3_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009ee:	480e      	ldr	r0, [pc, #56]	; (8000a28 <MX_I2C3_Init+0x74>)
 80009f0:	f005 f83a 	bl	8005a68 <HAL_I2C_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009fa:	f000 f957 	bl	8000cac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <MX_I2C3_Init+0x74>)
 8000a02:	f005 f8c1 	bl	8005b88 <HAL_I2CEx_ConfigAnalogFilter>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a0c:	f000 f94e 	bl	8000cac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_I2C3_Init+0x74>)
 8000a14:	f005 f903 	bl	8005c1e <HAL_I2CEx_ConfigDigitalFilter>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a1e:	f000 f945 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2400029c 	.word	0x2400029c
 8000a2c:	40005c00 	.word	0x40005c00
 8000a30:	00707cbb 	.word	0x00707cbb

08000a34 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_I2C4_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <MX_I2C4_Init+0x7c>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a6e:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a70:	f004 fffa 	bl	8005a68 <HAL_I2C_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a7a:	f000 f917 	bl	8000cac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a82:	f005 f881 	bl	8005b88 <HAL_I2CEx_ConfigAnalogFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a8c:	f000 f90e 	bl	8000cac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_I2C4_Init+0x74>)
 8000a94:	f005 f8c3 	bl	8005c1e <HAL_I2CEx_ConfigDigitalFilter>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 f905 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	240002f0 	.word	0x240002f0
 8000aac:	58001c00 	.word	0x58001c00
 8000ab0:	00707cbb 	.word	0x00707cbb

08000ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <MX_DMA_Init+0x3c>)
 8000abc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ac0:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <MX_DMA_Init+0x3c>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_DMA_Init+0x3c>)
 8000acc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	200b      	movs	r0, #11
 8000ade:	f002 f900 	bl	8002ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ae2:	200b      	movs	r0, #11
 8000ae4:	f002 f917 	bl	8002d16 <HAL_NVIC_EnableIRQ>

}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	58024400 	.word	0x58024400

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b00:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000b0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1e:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000b2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000b38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3c:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000b48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000b56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5a:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_GPIO_Init+0x8c>)
 8000b66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	58024400 	.word	0x58024400

08000b84 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a30      	ldr	r2, [pc, #192]	; (8000c54 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d15a      	bne.n	8000c4c <HAL_ADC_ConvCpltCallback+0xc8>
		if(AVE_POS < ROLLING_AVE){
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b9c:	d806      	bhi.n	8000bac <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	e036      	b.n	8000c1a <HAL_ADC_ConvCpltCallback+0x96>
		}
		else{
			AVE_POS = 0;
 8000bac:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
			print();
 8000bb2:	f000 f859 	bl	8000c68 <print>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	e029      	b.n	8000c10 <HAL_ADC_ConvCpltCallback+0x8c>
				averages[i] = 0;
 8000bbc:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <HAL_ADC_ConvCpltCallback+0xd8>)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int z = 0; z < ROLLING_AVE;z++){
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	e012      	b.n	8000bf2 <HAL_ADC_ConvCpltCallback+0x6e>
					averages[i]+=all_raw_data[i][z];
 8000bcc:	4a23      	ldr	r2, [pc, #140]	; (8000c5c <HAL_ADC_ConvCpltCallback+0xd8>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd4:	4822      	ldr	r0, [pc, #136]	; (8000c60 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	0191      	lsls	r1, r2, #6
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	440a      	add	r2, r1
 8000bde:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8000be2:	441a      	add	r2, r3
 8000be4:	491d      	ldr	r1, [pc, #116]	; (8000c5c <HAL_ADC_ConvCpltCallback+0xd8>)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int z = 0; z < ROLLING_AVE;z++){
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	2b3f      	cmp	r3, #63	; 0x3f
 8000bf6:	dde9      	ble.n	8000bcc <HAL_ADC_ConvCpltCallback+0x48>
				}
				averages[i] = averages[i] / ROLLING_AVE;
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <HAL_ADC_ConvCpltCallback+0xd8>)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	099a      	lsrs	r2, r3, #6
 8000c02:	4916      	ldr	r1, [pc, #88]	; (8000c5c <HAL_ADC_ConvCpltCallback+0xd8>)
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	699a      	ldr	r2, [r3, #24]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d8d0      	bhi.n	8000bbc <HAL_ADC_ConvCpltCallback+0x38>
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	e010      	b.n	8000c42 <HAL_ADC_ConvCpltCallback+0xbe>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	490f      	ldr	r1, [pc, #60]	; (8000c64 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8000c2e:	490c      	ldr	r1, [pc, #48]	; (8000c60 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	0192      	lsls	r2, r2, #6
 8000c34:	4413      	add	r3, r2
 8000c36:	4602      	mov	r2, r0
 8000c38:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	699a      	ldr	r2, [r3, #24]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8e9      	bhi.n	8000c20 <HAL_ADC_ConvCpltCallback+0x9c>
		}
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40022000 	.word	0x40022000
 8000c58:	24000ba4 	.word	0x24000ba4
 8000c5c:	24000b64 	.word	0x24000b64
 8000c60:	24000364 	.word	0x24000364
 8000c64:	24000344 	.word	0x24000344

08000c68 <print>:

void print(){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++){
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	e00f      	b.n	8000c94 <print+0x2c>
		TF_Select(1,averages[i],transfer_functions[i]);
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <print+0x3c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <print+0x40>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f000 fbc3 	bl	8001414 <TF_Select>
	for(int i = 0; i < 16; i++){
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3301      	adds	r3, #1
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	ddec      	ble.n	8000c74 <print+0xc>
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24000b64 	.word	0x24000b64
 8000ca8:	24000ba8 	.word	0x24000ba8

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <Error_Handler+0x8>
	...

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_MspInit+0x30>)
 8000cc0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cc4:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x30>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x30>)
 8000cd0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	58024400 	.word	0x58024400

08000cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0bc      	sub	sp, #240	; 0xf0
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	22c0      	movs	r2, #192	; 0xc0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f008 fbbf 	bl	8009490 <memset>
  if(hadc->Instance==ADC1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a62      	ldr	r2, [pc, #392]	; (8000ea0 <HAL_ADC_MspInit+0x1b4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	f040 80bc 	bne.w	8000e96 <HAL_ADC_MspInit+0x1aa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d22:	f04f 0300 	mov.w	r3, #0
 8000d26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000d2e:	2308      	movs	r3, #8
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 32;
 8000d32:	2320      	movs	r3, #32
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d3e:	23c0      	movs	r3, #192	; 0xc0
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 ff91 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000d60:	f7ff ffa4 	bl	8000cac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d64:	4b4f      	ldr	r3, [pc, #316]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000d66:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000d6c:	f043 0320 	orr.w	r3, r3, #32
 8000d70:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d74:	4b4b      	ldr	r3, [pc, #300]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000d76:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d7a:	f003 0320 	and.w	r3, r3, #32
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b48      	ldr	r3, [pc, #288]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000d84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d88:	4a46      	ldr	r2, [pc, #280]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d92:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000d94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000da2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da6:	4a3f      	ldr	r2, [pc, #252]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000db0:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000db2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000dc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dc4:	4a37      	ldr	r2, [pc, #220]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dce:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <HAL_ADC_MspInit+0x1b8>)
 8000dd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ddc:	233f      	movs	r3, #63	; 0x3f
 8000dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000df2:	4619      	mov	r1, r3
 8000df4:	482c      	ldr	r0, [pc, #176]	; (8000ea8 <HAL_ADC_MspInit+0x1bc>)
 8000df6:	f004 fc87 	bl	8005708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dfa:	23ff      	movs	r3, #255	; 0xff
 8000dfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e00:	2303      	movs	r3, #3
 8000e02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e10:	4619      	mov	r1, r3
 8000e12:	4826      	ldr	r0, [pc, #152]	; (8000eac <HAL_ADC_MspInit+0x1c0>)
 8000e14:	f004 fc78 	bl	8005708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <HAL_ADC_MspInit+0x1c4>)
 8000e32:	f004 fc69 	bl	8005708 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e38:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_ADC_MspInit+0x1cc>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e3e:	2209      	movs	r2, #9
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e7a:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e7c:	f001 ff66 	bl	8002d4c <HAL_DMA_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 8000e86:	f7ff ff11 	bl	8000cac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e90:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_ADC_MspInit+0x1c8>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	37f0      	adds	r7, #240	; 0xf0
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40022000 	.word	0x40022000
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020800 	.word	0x58020800
 8000eac:	58020000 	.word	0x58020000
 8000eb0:	58020400 	.word	0x58020400
 8000eb4:	24000090 	.word	0x24000090
 8000eb8:	40020010 	.word	0x40020010

08000ebc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0bc      	sub	sp, #240	; 0xf0
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	22c0      	movs	r2, #192	; 0xc0
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f008 fad7 	bl	8009490 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a57      	ldr	r2, [pc, #348]	; (8001044 <HAL_FDCAN_MspInit+0x188>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d151      	bne.n	8000f90 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000eec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ef8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000efc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f00:	f107 0318 	add.w	r3, r7, #24
 8000f04:	4618      	mov	r0, r3
 8000f06:	f005 feb9 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000f10:	f7ff fecc 	bl	8000cac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f14:	4b4c      	ldr	r3, [pc, #304]	; (8001048 <HAL_FDCAN_MspInit+0x18c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	4a4b      	ldr	r2, [pc, #300]	; (8001048 <HAL_FDCAN_MspInit+0x18c>)
 8000f1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f1e:	4b4a      	ldr	r3, [pc, #296]	; (8001048 <HAL_FDCAN_MspInit+0x18c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d10e      	bne.n	8000f44 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f26:	4b49      	ldr	r3, [pc, #292]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8000f28:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000f2c:	4a47      	ldr	r2, [pc, #284]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000f36:	4b45      	ldr	r3, [pc, #276]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8000f38:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b41      	ldr	r3, [pc, #260]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8000f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f4a:	4a40      	ldr	r2, [pc, #256]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f54:	4b3d      	ldr	r3, [pc, #244]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8000f56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f7c:	2309      	movs	r3, #9
 8000f7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f86:	4619      	mov	r1, r3
 8000f88:	4831      	ldr	r0, [pc, #196]	; (8001050 <HAL_FDCAN_MspInit+0x194>)
 8000f8a:	f004 fbbd 	bl	8005708 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000f8e:	e055      	b.n	800103c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a2f      	ldr	r2, [pc, #188]	; (8001054 <HAL_FDCAN_MspInit+0x198>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d150      	bne.n	800103c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000fa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f005 fe62 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8000fbe:	f7ff fe75 	bl	8000cac <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <HAL_FDCAN_MspInit+0x18c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <HAL_FDCAN_MspInit+0x18c>)
 8000fca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_FDCAN_MspInit+0x18c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d10e      	bne.n	8000ff2 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8000fd6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8000fe6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8000ff4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_FDCAN_MspInit+0x190>)
 8001004:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001010:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001014:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800102a:	2309      	movs	r3, #9
 800102c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001034:	4619      	mov	r1, r3
 8001036:	4808      	ldr	r0, [pc, #32]	; (8001058 <HAL_FDCAN_MspInit+0x19c>)
 8001038:	f004 fb66 	bl	8005708 <HAL_GPIO_Init>
}
 800103c:	bf00      	nop
 800103e:	37f0      	adds	r7, #240	; 0xf0
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	4000a000 	.word	0x4000a000
 8001048:	24000bc8 	.word	0x24000bc8
 800104c:	58024400 	.word	0x58024400
 8001050:	58020000 	.word	0x58020000
 8001054:	4000a400 	.word	0x4000a400
 8001058:	58020400 	.word	0x58020400

0800105c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0c0      	sub	sp, #256	; 0x100
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001078:	22c0      	movs	r2, #192	; 0xc0
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f008 fa07 	bl	8009490 <memset>
  if(hi2c->Instance==I2C1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a86      	ldr	r2, [pc, #536]	; (80012a0 <HAL_I2C_MspInit+0x244>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d146      	bne.n	800111a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800108c:	f04f 0208 	mov.w	r2, #8
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a2:	4618      	mov	r0, r3
 80010a4:	f005 fdea 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010ae:	f7ff fdfd 	bl	8000cac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b7c      	ldr	r3, [pc, #496]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 80010b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010b8:	4a7a      	ldr	r2, [pc, #488]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010c2:	4b78      	ldr	r3, [pc, #480]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 80010c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d0:	23c0      	movs	r3, #192	; 0xc0
 80010d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d6:	2312      	movs	r3, #18
 80010d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e8:	2304      	movs	r3, #4
 80010ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80010f2:	4619      	mov	r1, r3
 80010f4:	486c      	ldr	r0, [pc, #432]	; (80012a8 <HAL_I2C_MspInit+0x24c>)
 80010f6:	f004 fb07 	bl	8005708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fa:	4b6a      	ldr	r3, [pc, #424]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 80010fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001100:	4a68      	ldr	r2, [pc, #416]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 8001102:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001106:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800110a:	4b66      	ldr	r3, [pc, #408]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 800110c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001114:	623b      	str	r3, [r7, #32]
 8001116:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001118:	e0bd      	b.n	8001296 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a63      	ldr	r2, [pc, #396]	; (80012ac <HAL_I2C_MspInit+0x250>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d16c      	bne.n	80011fe <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001124:	f04f 0208 	mov.w	r2, #8
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800113a:	4618      	mov	r0, r3
 800113c:	f005 fd9e 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001146:	f7ff fdb1 	bl	8000cac <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 800114c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001150:	4a54      	ldr	r2, [pc, #336]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800115a:	4b52      	ldr	r3, [pc, #328]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 800115c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 800116a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800116e:	4a4d      	ldr	r2, [pc, #308]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001178:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 800117a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800118a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118e:	2312      	movs	r3, #18
 8001190:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011a0:	2304      	movs	r3, #4
 80011a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011aa:	4619      	mov	r1, r3
 80011ac:	4840      	ldr	r0, [pc, #256]	; (80012b0 <HAL_I2C_MspInit+0x254>)
 80011ae:	f004 faab 	bl	8005708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ba:	2312      	movs	r3, #18
 80011bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011cc:	2304      	movs	r3, #4
 80011ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011d6:	4619      	mov	r1, r3
 80011d8:	4836      	ldr	r0, [pc, #216]	; (80012b4 <HAL_I2C_MspInit+0x258>)
 80011da:	f004 fa95 	bl	8005708 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 80011e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011e4:	4a2f      	ldr	r2, [pc, #188]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 80011e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011ea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 80011f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697b      	ldr	r3, [r7, #20]
}
 80011fc:	e04b      	b.n	8001296 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <HAL_I2C_MspInit+0x25c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d146      	bne.n	8001296 <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001208:	f04f 0210 	mov.w	r2, #16
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	4618      	mov	r0, r3
 8001220:	f005 fd2c 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 800122a:	f7ff fd3f 	bl	8000cac <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 8001230:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001234:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 8001240:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800124c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001250:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001254:	2312      	movs	r3, #18
 8001256:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001266:	2306      	movs	r3, #6
 8001268:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001270:	4619      	mov	r1, r3
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <HAL_I2C_MspInit+0x24c>)
 8001274:	f004 fa48 	bl	8005708 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 800127a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001284:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_I2C_MspInit+0x248>)
 800128a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
}
 8001296:	bf00      	nop
 8001298:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40005400 	.word	0x40005400
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020400 	.word	0x58020400
 80012ac:	40005c00 	.word	0x40005c00
 80012b0:	58020800 	.word	0x58020800
 80012b4:	58020000 	.word	0x58020000
 80012b8:	58001c00 	.word	0x58001c00

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <NMI_Handler+0x4>

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f000 fa3c 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <DMA1_Stream0_IRQHandler+0x10>)
 8001316:	f002 fb11 	bl	800393c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	24000090 	.word	0x24000090

08001324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001328:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <SystemInit+0xd0>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132e:	4a31      	ldr	r2, [pc, #196]	; (80013f4 <SystemInit+0xd0>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <SystemInit+0xd4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	2b02      	cmp	r3, #2
 8001342:	d807      	bhi.n	8001354 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <SystemInit+0xd4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 030f 	bic.w	r3, r3, #15
 800134c:	4a2a      	ldr	r2, [pc, #168]	; (80013f8 <SystemInit+0xd4>)
 800134e:	f043 0303 	orr.w	r3, r3, #3
 8001352:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001354:	4b29      	ldr	r3, [pc, #164]	; (80013fc <SystemInit+0xd8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a28      	ldr	r2, [pc, #160]	; (80013fc <SystemInit+0xd8>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001360:	4b26      	ldr	r3, [pc, #152]	; (80013fc <SystemInit+0xd8>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <SystemInit+0xd8>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4924      	ldr	r1, [pc, #144]	; (80013fc <SystemInit+0xd8>)
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <SystemInit+0xdc>)
 800136e:	4013      	ands	r3, r2
 8001370:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <SystemInit+0xd4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <SystemInit+0xd4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 030f 	bic.w	r3, r3, #15
 8001386:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <SystemInit+0xd4>)
 8001388:	f043 0303 	orr.w	r3, r3, #3
 800138c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <SystemInit+0xd8>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <SystemInit+0xd8>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <SystemInit+0xd8>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <SystemInit+0xd8>)
 80013a2:	4a18      	ldr	r2, [pc, #96]	; (8001404 <SystemInit+0xe0>)
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <SystemInit+0xd8>)
 80013a8:	4a17      	ldr	r2, [pc, #92]	; (8001408 <SystemInit+0xe4>)
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <SystemInit+0xd8>)
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <SystemInit+0xe8>)
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <SystemInit+0xd8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <SystemInit+0xd8>)
 80013ba:	4a14      	ldr	r2, [pc, #80]	; (800140c <SystemInit+0xe8>)
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <SystemInit+0xd8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <SystemInit+0xd8>)
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <SystemInit+0xe8>)
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <SystemInit+0xd8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <SystemInit+0xd8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a09      	ldr	r2, [pc, #36]	; (80013fc <SystemInit+0xd8>)
 80013d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <SystemInit+0xd8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <SystemInit+0xec>)
 80013e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00
 80013f8:	52002000 	.word	0x52002000
 80013fc:	58024400 	.word	0x58024400
 8001400:	eaf6ed7f 	.word	0xeaf6ed7f
 8001404:	02020200 	.word	0x02020200
 8001408:	01ff0000 	.word	0x01ff0000
 800140c:	01010280 	.word	0x01010280
 8001410:	52004000 	.word	0x52004000

08001414 <TF_Select>:
 */

#include "transfer_functions.h"
#include "main.h"

uint32_t TF_Select(uint8_t bytes, uint32_t raw, uint8_t sensor){
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
 8001420:	4613      	mov	r3, r2
 8001422:	71bb      	strb	r3, [r7, #6]

	uint32_t transmit = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]

	switch(sensor){
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	2b0a      	cmp	r3, #10
 800142c:	d865      	bhi.n	80014fa <TF_Select+0xe6>
 800142e:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <TF_Select+0x20>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	08001461 	.word	0x08001461
 8001438:	0800146f 	.word	0x0800146f
 800143c:	0800147d 	.word	0x0800147d
 8001440:	0800148b 	.word	0x0800148b
 8001444:	08001499 	.word	0x08001499
 8001448:	080014b5 	.word	0x080014b5
 800144c:	080014a7 	.word	0x080014a7
 8001450:	080014c3 	.word	0x080014c3
 8001454:	080014d1 	.word	0x080014d1
 8001458:	080014df 	.word	0x080014df
 800145c:	080014ed 	.word	0x080014ed
	case VOLTAGE_3V3:
		transmit = TF_3V3(bytes, raw);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	6839      	ldr	r1, [r7, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f84f 	bl	8001508 <TF_3V3>
 800146a:	60f8      	str	r0, [r7, #12]
		break;
 800146c:	e046      	b.n	80014fc <TF_Select+0xe8>
	case VOLTAGE_5V:
		transmit = TF_5V(bytes, raw);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	6839      	ldr	r1, [r7, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f868 	bl	8001548 <TF_5V>
 8001478:	60f8      	str	r0, [r7, #12]
		break;
 800147a:	e03f      	b.n	80014fc <TF_Select+0xe8>
	case BPPS:
		transmit = TF_BPPS(bytes, raw);
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f86e 	bl	8001562 <TF_BPPS>
 8001486:	60f8      	str	r0, [r7, #12]
		break;
 8001488:	e038      	b.n	80014fc <TF_Select+0xe8>
	case APPS:
		transmit = TF_APPS(bytes, raw);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	6839      	ldr	r1, [r7, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f874 	bl	800157c <TF_APPS>
 8001494:	60f8      	str	r0, [r7, #12]
		break;
 8001496:	e031      	b.n	80014fc <TF_Select+0xe8>
	case FRONT_HEAVE:
		transmit = TF_FRONT_HEAVE(bytes, raw);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f87a 	bl	8001596 <TF_FRONT_HEAVE>
 80014a2:	60f8      	str	r0, [r7, #12]
		break;
 80014a4:	e02a      	b.n	80014fc <TF_Select+0xe8>
	case REAR_HEAVE:
		transmit = TF_REAR_HEAVE(bytes, raw);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	6839      	ldr	r1, [r7, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f880 	bl	80015b0 <TF_REAR_HEAVE>
 80014b0:	60f8      	str	r0, [r7, #12]
		break;
 80014b2:	e023      	b.n	80014fc <TF_Select+0xe8>
	case FRONT_ROLL:
		transmit = TF_FRONT_ROLL(bytes, raw);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	6839      	ldr	r1, [r7, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f886 	bl	80015ca <TF_FRONT_ROLL>
 80014be:	60f8      	str	r0, [r7, #12]
		break;
 80014c0:	e01c      	b.n	80014fc <TF_Select+0xe8>
	case REAR_ROLL:
		transmit = TF_REAR_ROLL(bytes, raw);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	6839      	ldr	r1, [r7, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f88c 	bl	80015e4 <TF_REAR_ROLL>
 80014cc:	60f8      	str	r0, [r7, #12]
		break;
 80014ce:	e015      	b.n	80014fc <TF_Select+0xe8>
	case TYRE_TEMP:
		transmit = TF_TYRE_TEMP(bytes, raw);
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	6839      	ldr	r1, [r7, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f892 	bl	80015fe <TF_TYRE_TEMP>
 80014da:	60f8      	str	r0, [r7, #12]
		break;
 80014dc:	e00e      	b.n	80014fc <TF_Select+0xe8>
	case ANGLE_GEAR:
		transmit = TF_ANGLE_GEAR(bytes, raw);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f898 	bl	8001618 <TF_ANGLE_GEAR>
 80014e8:	60f8      	str	r0, [r7, #12]
		break;
 80014ea:	e007      	b.n	80014fc <TF_Select+0xe8>
	case WATER_LVL:
		transmit = TF_WATER_LVL(bytes, raw);
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f89e 	bl	8001632 <TF_WATER_LVL>
 80014f6:	60f8      	str	r0, [r7, #12]
		break;
 80014f8:	e000      	b.n	80014fc <TF_Select+0xe8>
	default:
		//TODO implement error here
		break;
 80014fa:	bf00      	nop
	}

	return transmit;
 80014fc:	68fb      	ldr	r3, [r7, #12]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop

08001508 <TF_3V3>:

uint32_t TF_3V3(uint8_t bytes, uint32_t raw){
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
	//2,11V
	uint32_t voltage = (2.11 / 4095) * 1000 * raw;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800151e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001540 <TF_3V3+0x38>
 8001522:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001526:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800152a:	ee17 3a90 	vmov	r3, s15
 800152e:	60fb      	str	r3, [r7, #12]
	return voltage;
 8001530:	68fb      	ldr	r3, [r7, #12]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	d07d07d0 	.word	0xd07d07d0
 8001544:	3fe07d07 	.word	0x3fe07d07

08001548 <TF_5V>:

uint32_t TF_5V(uint8_t bytes, uint32_t raw){
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]

}
 8001554:	bf00      	nop
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <TF_BPPS>:
uint32_t TF_BPPS(uint8_t bytes, uint32_t raw){
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	6039      	str	r1, [r7, #0]
 800156c:	71fb      	strb	r3, [r7, #7]

}
 800156e:	bf00      	nop
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <TF_APPS>:
uint32_t TF_APPS(uint8_t bytes, uint32_t raw){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]

}
 8001588:	bf00      	nop
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <TF_FRONT_HEAVE>:
uint32_t TF_FRONT_HEAVE(uint8_t bytes, uint32_t raw){
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	6039      	str	r1, [r7, #0]
 80015a0:	71fb      	strb	r3, [r7, #7]

}
 80015a2:	bf00      	nop
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <TF_REAR_HEAVE>:
uint32_t TF_REAR_HEAVE(uint8_t bytes, uint32_t raw){
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]

}
 80015bc:	bf00      	nop
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <TF_FRONT_ROLL>:
uint32_t TF_FRONT_ROLL(uint8_t bytes, uint32_t raw){
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	6039      	str	r1, [r7, #0]
 80015d4:	71fb      	strb	r3, [r7, #7]

}
 80015d6:	bf00      	nop
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <TF_REAR_ROLL>:
uint32_t TF_REAR_ROLL(uint8_t bytes, uint32_t raw){
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]

}
 80015f0:	bf00      	nop
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <TF_TYRE_TEMP>:
uint32_t TF_TYRE_TEMP(uint8_t bytes, uint32_t raw){
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	6039      	str	r1, [r7, #0]
 8001608:	71fb      	strb	r3, [r7, #7]

}
 800160a:	bf00      	nop
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <TF_ANGLE_GEAR>:
uint32_t TF_ANGLE_GEAR(uint8_t bytes, uint32_t raw){
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]

}
 8001624:	bf00      	nop
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <TF_WATER_LVL>:
uint32_t TF_WATER_LVL(uint8_t bytes, uint32_t raw){
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	6039      	str	r1, [r7, #0]
 800163c:	71fb      	strb	r3, [r7, #7]

}
 800163e:	bf00      	nop
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <Reset_Handler>:
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001684 <LoopFillZerobss+0xe>
 8001650:	f7ff fe68 	bl	8001324 <SystemInit>
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <LoopFillZerobss+0x12>)
 8001656:	490d      	ldr	r1, [pc, #52]	; (800168c <LoopFillZerobss+0x16>)
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <LoopFillZerobss+0x1a>)
 800165a:	2300      	movs	r3, #0
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:
 800165e:	58d4      	ldr	r4, [r2, r3]
 8001660:	50c4      	str	r4, [r0, r3]
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:
 8001664:	18c4      	adds	r4, r0, r3
 8001666:	428c      	cmp	r4, r1
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <LoopFillZerobss+0x1e>)
 800166c:	4c0a      	ldr	r4, [pc, #40]	; (8001698 <LoopFillZerobss+0x22>)
 800166e:	2300      	movs	r3, #0
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:
 8001676:	42a2      	cmp	r2, r4
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>
 800167a:	f007 ff11 	bl	80094a0 <__libc_init_array>
 800167e:	f7fe fe77 	bl	8000370 <main>
 8001682:	4770      	bx	lr
 8001684:	24100000 	.word	0x24100000
 8001688:	24000000 	.word	0x24000000
 800168c:	24000010 	.word	0x24000010
 8001690:	08009588 	.word	0x08009588
 8001694:	24000010 	.word	0x24000010
 8001698:	24000bd0 	.word	0x24000bd0

0800169c <ADC_IRQHandler>:
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a6:	2003      	movs	r0, #3
 80016a8:	f001 fb10 	bl	8002ccc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80016ac:	f005 f926 	bl	80068fc <HAL_RCC_GetSysClockFreq>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_Init+0x68>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	4913      	ldr	r1, [pc, #76]	; (800170c <HAL_Init+0x6c>)
 80016be:	5ccb      	ldrb	r3, [r1, r3]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_Init+0x68>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_Init+0x6c>)
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_Init+0x70>)
 80016e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <HAL_Init+0x74>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ea:	200f      	movs	r0, #15
 80016ec:	f000 f814 	bl	8001718 <HAL_InitTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e002      	b.n	8001700 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016fa:	f7ff fadd 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	58024400 	.word	0x58024400
 800170c:	08009568 	.word	0x08009568
 8001710:	24000004 	.word	0x24000004
 8001714:	24000000 	.word	0x24000000

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_InitTick+0x60>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e021      	b.n	8001770 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_InitTick+0x64>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_InitTick+0x60>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f001 faf5 	bl	8002d32 <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f001 fabf 	bl	8002ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x68>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2400000c 	.word	0x2400000c
 800177c:	24000000 	.word	0x24000000
 8001780:	24000008 	.word	0x24000008

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2400000c 	.word	0x2400000c
 80017a8:	24000bcc 	.word	0x24000bcc

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	24000bcc 	.word	0x24000bcc

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2400000c 	.word	0x2400000c

0800180c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	609a      	str	r2, [r3, #8]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3360      	adds	r3, #96	; 0x60
 8001886:	461a      	mov	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	431a      	orrs	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	611a      	str	r2, [r3, #16]
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b087      	sub	sp, #28
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3360      	adds	r3, #96	; 0x60
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	431a      	orrs	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	601a      	str	r2, [r3, #0]
  }
}
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001942:	b480      	push	{r7}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3330      	adds	r3, #48	; 0x30
 8001952:	461a      	mov	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	4413      	add	r3, r2
 8001960:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	211f      	movs	r1, #31
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	401a      	ands	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0e9b      	lsrs	r3, r3, #26
 800197a:	f003 011f 	and.w	r1, r3, #31
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	431a      	orrs	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800198e:	bf00      	nop
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f023 0203 	bic.w	r2, r3, #3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	60da      	str	r2, [r3, #12]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3314      	adds	r3, #20
 80019d0:	461a      	mov	r2, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	0e5b      	lsrs	r3, r3, #25
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	4413      	add	r3, r2
 80019de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	0d1b      	lsrs	r3, r3, #20
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	2107      	movs	r1, #7
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	401a      	ands	r2, r3
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	0d1b      	lsrs	r3, r3, #20
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	431a      	orrs	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a30:	43db      	mvns	r3, r3
 8001a32:	401a      	ands	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0318 	and.w	r3, r3, #24
 8001a3a:	4908      	ldr	r1, [pc, #32]	; (8001a5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a3c:	40d9      	lsrs	r1, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	400b      	ands	r3, r1
 8001a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a46:	431a      	orrs	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	000fffff 	.word	0x000fffff

08001a60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6093      	str	r3, [r2, #8]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	5fffffc0 	.word	0x5fffffc0

08001aa0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ab4:	d101      	bne.n	8001aba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <LL_ADC_EnableInternalRegulator+0x24>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	6fffffc0 	.word	0x6fffffc0

08001af0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b04:	d101      	bne.n	8001b0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <LL_ADC_Enable+0x24>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	7fffffc0 	.word	0x7fffffc0

08001b40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <LL_ADC_IsEnabled+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_ADC_IsEnabled+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <LL_ADC_REG_StartConversion+0x24>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	f043 0204 	orr.w	r2, r3, #4
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	7fffffc0 	.word	0x7fffffc0

08001b90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d101      	bne.n	8001ba8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d101      	bne.n	8001bce <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e138      	b.n	8001e68 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff f871 	bl	8000cec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff3f 	bl	8001aa0 <LL_ADC_IsDeepPowerDownEnabled>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff25 	bl	8001a7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff5a 	bl	8001af0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d114      	bne.n	8001c6c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff3e 	bl	8001ac8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c4c:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_ADC_Init+0x294>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	4a88      	ldr	r2, [pc, #544]	; (8001e74 <HAL_ADC_Init+0x298>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	099b      	lsrs	r3, r3, #6
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c5e:	e002      	b.n	8001c66 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f9      	bne.n	8001c60 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff3d 	bl	8001af0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10d      	bne.n	8001c98 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	f043 0210 	orr.w	r2, r3, #16
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff77 	bl	8001b90 <LL_ADC_REG_IsConversionOngoing>
 8001ca2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f040 80d2 	bne.w	8001e56 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f040 80ce 	bne.w	8001e56 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cc2:	f043 0202 	orr.w	r2, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff36 	bl	8001b40 <LL_ADC_IsEnabled>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d110      	bne.n	8001cfc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cda:	4867      	ldr	r0, [pc, #412]	; (8001e78 <HAL_ADC_Init+0x29c>)
 8001cdc:	f7ff ff30 	bl	8001b40 <LL_ADC_IsEnabled>
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	4866      	ldr	r0, [pc, #408]	; (8001e7c <HAL_ADC_Init+0x2a0>)
 8001ce4:	f7ff ff2c 	bl	8001b40 <LL_ADC_IsEnabled>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4323      	orrs	r3, r4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4862      	ldr	r0, [pc, #392]	; (8001e80 <HAL_ADC_Init+0x2a4>)
 8001cf8:	f7ff fd88 	bl	800180c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7d5b      	ldrb	r3, [r3, #21]
 8001d00:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d06:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001d0c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7f1b      	ldrb	r3, [r3, #28]
 8001d12:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7f1b      	ldrb	r3, [r3, #28]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d106      	bne.n	8001d2e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	045b      	lsls	r3, r3, #17
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_ADC_Init+0x2a8>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	69b9      	ldr	r1, [r7, #24]
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff14 	bl	8001b90 <LL_ADC_REG_IsConversionOngoing>
 8001d68:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff21 	bl	8001bb6 <LL_ADC_INJ_IsConversionOngoing>
 8001d74:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d14a      	bne.n	8001e12 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d147      	bne.n	8001e12 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7d1b      	ldrb	r3, [r3, #20]
 8001d86:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <HAL_ADC_Init+0x2ac>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	69b9      	ldr	r1, [r7, #24]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d11b      	bne.n	8001de6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_ADC_Init+0x2b0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dc2:	3a01      	subs	r2, #1
 8001dc4:	0411      	lsls	r1, r2, #16
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	e007      	b.n	8001df6 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fcfd 	bl	800280c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10c      	bne.n	8001e34 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	f023 010f 	bic.w	r1, r3, #15
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	1e5a      	subs	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
 8001e32:	e007      	b.n	8001e44 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 020f 	bic.w	r2, r2, #15
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f023 0303 	bic.w	r3, r3, #3
 8001e4c:	f043 0201 	orr.w	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54
 8001e54:	e007      	b.n	8001e66 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	f043 0210 	orr.w	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e66:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3724      	adds	r7, #36	; 0x24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}
 8001e70:	24000000 	.word	0x24000000
 8001e74:	053e2d63 	.word	0x053e2d63
 8001e78:	40022000 	.word	0x40022000
 8001e7c:	40022100 	.word	0x40022100
 8001e80:	40022300 	.word	0x40022300
 8001e84:	fff0c003 	.word	0xfff0c003
 8001e88:	ffffbffc 	.word	0xffffbffc
 8001e8c:	fc00f81e 	.word	0xfc00f81e

08001e90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e9c:	484f      	ldr	r0, [pc, #316]	; (8001fdc <HAL_ADC_Start_DMA+0x14c>)
 8001e9e:	f7ff fddf 	bl	8001a60 <LL_ADC_GetMultimode>
 8001ea2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fe71 	bl	8001b90 <LL_ADC_REG_IsConversionOngoing>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 808c 	bne.w	8001fce <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_Start_DMA+0x34>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e087      	b.n	8001fd4 <HAL_ADC_Start_DMA+0x144>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d002      	beq.n	8001ede <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b09      	cmp	r3, #9
 8001edc:	d170      	bne.n	8001fc0 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fb84 	bl	80025ec <ADC_Enable>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d163      	bne.n	8001fb6 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_ADC_Start_DMA+0x150>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <HAL_ADC_Start_DMA+0x154>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d002      	beq.n	8001f0e <HAL_ADC_Start_DMA+0x7e>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	e000      	b.n	8001f10 <HAL_ADC_Start_DMA+0x80>
 8001f0e:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <HAL_ADC_Start_DMA+0x158>)
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d002      	beq.n	8001f1e <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d105      	bne.n	8001f2a <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f023 0206 	bic.w	r2, r3, #6
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	659a      	str	r2, [r3, #88]	; 0x58
 8001f42:	e002      	b.n	8001f4a <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	4a27      	ldr	r2, [pc, #156]	; (8001fec <HAL_ADC_Start_DMA+0x15c>)
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <HAL_ADC_Start_DMA+0x160>)
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <HAL_ADC_Start_DMA+0x164>)
 8001f60:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	221c      	movs	r2, #28
 8001f68:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0210 	orr.w	r2, r2, #16
 8001f80:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f7ff fd04 	bl	800199a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3340      	adds	r3, #64	; 0x40
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f001 fa61 	bl	8003468 <HAL_DMA_Start_IT>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fdda 	bl	8001b68 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001fb4:	e00d      	b.n	8001fd2 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001fbe:	e008      	b.n	8001fd2 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001fcc:	e001      	b.n	8001fd2 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40022300 	.word	0x40022300
 8001fe0:	fffff0fe 	.word	0xfffff0fe
 8001fe4:	40022100 	.word	0x40022100
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	080026e5 	.word	0x080026e5
 8001ff0:	080027bd 	.word	0x080027bd
 8001ff4:	080027d9 	.word	0x080027d9

08001ff8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b0a1      	sub	sp, #132	; 0x84
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a9a      	ldr	r2, [pc, #616]	; (80022a4 <HAL_ADC_ConfigChannel+0x284>)
 800203a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x2a>
 8002046:	2302      	movs	r3, #2
 8002048:	e2bc      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x5a4>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fd9a 	bl	8001b90 <LL_ADC_REG_IsConversionOngoing>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 82a1 	bne.w	80025a6 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800206c:	2b00      	cmp	r3, #0
 800206e:	d108      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x62>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2201      	movs	r2, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	e016      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x90>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002092:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800209a:	2320      	movs	r3, #32
 800209c:	e003      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800209e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2201      	movs	r2, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	69d1      	ldr	r1, [r2, #28]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	430b      	orrs	r3, r1
 80020bc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f7ff fc39 	bl	8001942 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fd5b 	bl	8001b90 <LL_ADC_REG_IsConversionOngoing>
 80020da:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fd68 	bl	8001bb6 <LL_ADC_INJ_IsConversionOngoing>
 80020e6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 80a0 	bne.w	8002230 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 809c 	bne.w	8002230 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	461a      	mov	r2, r3
 8002106:	f7ff fc5b 	bl	80019c0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10b      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x110>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	e00a      	b.n	8002146 <HAL_ADC_ConfigChannel+0x126>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d027      	beq.n	80021a0 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6919      	ldr	r1, [r3, #16]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800215e:	f7ff fb89 	bl	8001874 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6919      	ldr	r1, [r3, #16]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	7e5b      	ldrb	r3, [r3, #25]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x158>
 8002172:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002176:	e000      	b.n	800217a <HAL_ADC_ConfigChannel+0x15a>
 8002178:	2300      	movs	r3, #0
 800217a:	461a      	mov	r2, r3
 800217c:	f7ff fbb3 	bl	80018e6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6919      	ldr	r1, [r3, #16]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	7e1b      	ldrb	r3, [r3, #24]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d102      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x176>
 8002190:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002194:	e000      	b.n	8002198 <HAL_ADC_ConfigChannel+0x178>
 8002196:	2300      	movs	r3, #0
 8002198:	461a      	mov	r2, r3
 800219a:	f7ff fb8b 	bl	80018b4 <LL_ADC_SetDataRightShift>
 800219e:	e047      	b.n	8002230 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	069b      	lsls	r3, r3, #26
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d107      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021c2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	069b      	lsls	r3, r3, #26
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d107      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021e6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	069b      	lsls	r3, r3, #26
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d107      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800220a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	069b      	lsls	r3, r3, #26
 800221c:	429a      	cmp	r2, r3
 800221e:	d107      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800222e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fc83 	bl	8001b40 <LL_ADC_IsEnabled>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 81bb 	bne.w	80025b8 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6819      	ldr	r1, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	461a      	mov	r2, r3
 8002250:	f7ff fbe2 	bl	8001a18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_ADC_ConfigChannel+0x284>)
 800225a:	4293      	cmp	r3, r2
 800225c:	f040 8130 	bne.w	80024c0 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x268>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	3301      	adds	r3, #1
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2b09      	cmp	r3, #9
 800227e:	bf94      	ite	ls
 8002280:	2301      	movls	r3, #1
 8002282:	2300      	movhi	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e01b      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x2a0>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002298:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800229a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80022a0:	2320      	movs	r3, #32
 80022a2:	e005      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x290>
 80022a4:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80022a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	3301      	adds	r3, #1
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	2b09      	cmp	r3, #9
 80022b8:	bf94      	ite	ls
 80022ba:	2301      	movls	r3, #1
 80022bc:	2300      	movhi	r3, #0
 80022be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d079      	beq.n	80023b8 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x2c0>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0e9b      	lsrs	r3, r3, #26
 80022d6:	3301      	adds	r3, #1
 80022d8:	069b      	lsls	r3, r3, #26
 80022da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022de:	e015      	b.n	800230c <HAL_ADC_ConfigChannel+0x2ec>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80022ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80022f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e003      	b.n	8002304 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80022fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	069b      	lsls	r3, r3, #26
 8002308:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_ADC_ConfigChannel+0x30c>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	3301      	adds	r3, #1
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	2101      	movs	r1, #1
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	e017      	b.n	800235c <HAL_ADC_ConfigChannel+0x33c>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800233a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800233c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800233e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002344:	2320      	movs	r3, #32
 8002346:	e003      	b.n	8002350 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3301      	adds	r3, #1
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	ea42 0103 	orr.w	r1, r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x362>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0e9b      	lsrs	r3, r3, #26
 8002372:	3301      	adds	r3, #1
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	051b      	lsls	r3, r3, #20
 8002380:	e018      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x394>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800239a:	2320      	movs	r3, #32
 800239c:	e003      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b4:	430b      	orrs	r3, r1
 80023b6:	e07e      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x3b4>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0e9b      	lsrs	r3, r3, #26
 80023ca:	3301      	adds	r3, #1
 80023cc:	069b      	lsls	r3, r3, #26
 80023ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023d2:	e015      	b.n	8002400 <HAL_ADC_ConfigChannel+0x3e0>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023ec:	2320      	movs	r3, #32
 80023ee:	e003      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	3301      	adds	r3, #1
 80023fa:	069b      	lsls	r3, r3, #26
 80023fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002408:	2b00      	cmp	r3, #0
 800240a:	d109      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x400>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0e9b      	lsrs	r3, r3, #26
 8002412:	3301      	adds	r3, #1
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	2101      	movs	r1, #1
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	e017      	b.n	8002450 <HAL_ADC_ConfigChannel+0x430>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	61bb      	str	r3, [r7, #24]
  return result;
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002438:	2320      	movs	r3, #32
 800243a:	e003      	b.n	8002444 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	3301      	adds	r3, #1
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	ea42 0103 	orr.w	r1, r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10d      	bne.n	800247c <HAL_ADC_ConfigChannel+0x45c>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	3301      	adds	r3, #1
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	3b1e      	subs	r3, #30
 8002474:	051b      	lsls	r3, r3, #20
 8002476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800247a:	e01b      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x494>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	60fb      	str	r3, [r7, #12]
  return result;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002494:	2320      	movs	r3, #32
 8002496:	e003      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	f003 021f 	and.w	r2, r3, #31
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	3b1e      	subs	r3, #30
 80024ae:	051b      	lsls	r3, r3, #20
 80024b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b4:	430b      	orrs	r3, r1
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	6892      	ldr	r2, [r2, #8]
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7ff fa80 	bl	80019c0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	da77      	bge.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c8:	4840      	ldr	r0, [pc, #256]	; (80025cc <HAL_ADC_ConfigChannel+0x5ac>)
 80024ca:	f7ff f9c5 	bl	8001858 <LL_ADC_GetCommonPathInternalCh>
 80024ce:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d0:	483f      	ldr	r0, [pc, #252]	; (80025d0 <HAL_ADC_ConfigChannel+0x5b0>)
 80024d2:	f7ff fb35 	bl	8001b40 <LL_ADC_IsEnabled>
 80024d6:	4604      	mov	r4, r0
 80024d8:	483e      	ldr	r0, [pc, #248]	; (80025d4 <HAL_ADC_ConfigChannel+0x5b4>)
 80024da:	f7ff fb31 	bl	8001b40 <LL_ADC_IsEnabled>
 80024de:	4603      	mov	r3, r0
 80024e0:	4323      	orrs	r3, r4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d155      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a3b      	ldr	r2, [pc, #236]	; (80025d8 <HAL_ADC_ConfigChannel+0x5b8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d122      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x516>
 80024f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d11d      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a35      	ldr	r2, [pc, #212]	; (80025d4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d159      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002506:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800250a:	4619      	mov	r1, r3
 800250c:	482f      	ldr	r0, [pc, #188]	; (80025cc <HAL_ADC_ConfigChannel+0x5ac>)
 800250e:	f7ff f990 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002512:	4b32      	ldr	r3, [pc, #200]	; (80025dc <HAL_ADC_ConfigChannel+0x5bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	4a31      	ldr	r2, [pc, #196]	; (80025e0 <HAL_ADC_ConfigChannel+0x5c0>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	3301      	adds	r3, #1
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002526:	e002      	b.n	800252e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3b01      	subs	r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f9      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002534:	e040      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a2a      	ldr	r2, [pc, #168]	; (80025e4 <HAL_ADC_ConfigChannel+0x5c4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d111      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x544>
 8002540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10c      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a21      	ldr	r2, [pc, #132]	; (80025d4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d131      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800255a:	4619      	mov	r1, r3
 800255c:	481b      	ldr	r0, [pc, #108]	; (80025cc <HAL_ADC_ConfigChannel+0x5ac>)
 800255e:	f7ff f968 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002562:	e029      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_ADC_ConfigChannel+0x5c8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d124      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
 800256e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d11f      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <HAL_ADC_ConfigChannel+0x5b4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d11a      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002584:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002588:	4619      	mov	r1, r3
 800258a:	4810      	ldr	r0, [pc, #64]	; (80025cc <HAL_ADC_ConfigChannel+0x5ac>)
 800258c:	f7ff f951 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
 8002590:	e012      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	f043 0220 	orr.w	r2, r3, #32
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025a4:	e008      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3784      	adds	r7, #132	; 0x84
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}
 80025cc:	40022300 	.word	0x40022300
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40022100 	.word	0x40022100
 80025d8:	cb840000 	.word	0xcb840000
 80025dc:	24000000 	.word	0x24000000
 80025e0:	053e2d63 	.word	0x053e2d63
 80025e4:	bac04000 	.word	0xbac04000
 80025e8:	cfb80000 	.word	0xcfb80000

080025ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff faa1 	bl	8001b40 <LL_ADC_IsEnabled>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d161      	bne.n	80026c8 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	4b32      	ldr	r3, [pc, #200]	; (80026d4 <ADC_Enable+0xe8>)
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00d      	beq.n	800262e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	f043 0210 	orr.w	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e04d      	b.n	80026ca <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fa70 	bl	8001b18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002638:	f7ff f8b8 	bl	80017ac <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800263e:	4826      	ldr	r0, [pc, #152]	; (80026d8 <ADC_Enable+0xec>)
 8002640:	f7ff fa0e 	bl	8001a60 <LL_ADC_GetMultimode>
 8002644:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a24      	ldr	r2, [pc, #144]	; (80026dc <ADC_Enable+0xf0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d002      	beq.n	8002656 <ADC_Enable+0x6a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	e000      	b.n	8002658 <ADC_Enable+0x6c>
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <ADC_Enable+0xf4>)
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	4293      	cmp	r3, r2
 800265e:	d02c      	beq.n	80026ba <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d130      	bne.n	80026c8 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002666:	e028      	b.n	80026ba <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fa67 	bl	8001b40 <LL_ADC_IsEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d104      	bne.n	8002682 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fa4b 	bl	8001b18 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002682:	f7ff f893 	bl	80017ac <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d914      	bls.n	80026ba <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d00d      	beq.n	80026ba <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	f043 0210 	orr.w	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e007      	b.n	80026ca <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d1cf      	bne.n	8002668 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	8000003f 	.word	0x8000003f
 80026d8:	40022300 	.word	0x40022300
 80026dc:	40022100 	.word	0x40022100
 80026e0:	40022000 	.word	0x40022000

080026e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d14b      	bne.n	8002796 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d021      	beq.n	800275c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff f8fd 	bl	800191c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d032      	beq.n	800278e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d12b      	bne.n	800278e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11f      	bne.n	800278e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	f043 0201 	orr.w	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
 800275a:	e018      	b.n	800278e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d111      	bne.n	800278e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7fe f9f8 	bl	8000b84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002794:	e00e      	b.n	80027b4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff fc32 	bl	800200c <HAL_ADC_ErrorCallback>
}
 80027a8:	e004      	b.n	80027b4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f7ff fc14 	bl	8001ff8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	f043 0204 	orr.w	r2, r3, #4
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff fc04 	bl	800200c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002814:	4b60      	ldr	r3, [pc, #384]	; (8002998 <ADC_ConfigureBoostMode+0x18c>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01c      	beq.n	800285a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002820:	f004 f9e6 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 8002824:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800282e:	d010      	beq.n	8002852 <ADC_ConfigureBoostMode+0x46>
 8002830:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002834:	d873      	bhi.n	800291e <ADC_ConfigureBoostMode+0x112>
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283a:	d002      	beq.n	8002842 <ADC_ConfigureBoostMode+0x36>
 800283c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002840:	d16d      	bne.n	800291e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0c1b      	lsrs	r3, r3, #16
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	60fb      	str	r3, [r7, #12]
        break;
 8002850:	e068      	b.n	8002924 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	60fb      	str	r3, [r7, #12]
        break;
 8002858:	e064      	b.n	8002924 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800285a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	f005 fbc9 	bl	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002866:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002870:	d051      	beq.n	8002916 <ADC_ConfigureBoostMode+0x10a>
 8002872:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002876:	d854      	bhi.n	8002922 <ADC_ConfigureBoostMode+0x116>
 8002878:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800287c:	d047      	beq.n	800290e <ADC_ConfigureBoostMode+0x102>
 800287e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002882:	d84e      	bhi.n	8002922 <ADC_ConfigureBoostMode+0x116>
 8002884:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002888:	d03d      	beq.n	8002906 <ADC_ConfigureBoostMode+0xfa>
 800288a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800288e:	d848      	bhi.n	8002922 <ADC_ConfigureBoostMode+0x116>
 8002890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002894:	d033      	beq.n	80028fe <ADC_ConfigureBoostMode+0xf2>
 8002896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800289a:	d842      	bhi.n	8002922 <ADC_ConfigureBoostMode+0x116>
 800289c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028a0:	d029      	beq.n	80028f6 <ADC_ConfigureBoostMode+0xea>
 80028a2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028a6:	d83c      	bhi.n	8002922 <ADC_ConfigureBoostMode+0x116>
 80028a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028ac:	d01a      	beq.n	80028e4 <ADC_ConfigureBoostMode+0xd8>
 80028ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028b2:	d836      	bhi.n	8002922 <ADC_ConfigureBoostMode+0x116>
 80028b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80028b8:	d014      	beq.n	80028e4 <ADC_ConfigureBoostMode+0xd8>
 80028ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80028be:	d830      	bhi.n	8002922 <ADC_ConfigureBoostMode+0x116>
 80028c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c4:	d00e      	beq.n	80028e4 <ADC_ConfigureBoostMode+0xd8>
 80028c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ca:	d82a      	bhi.n	8002922 <ADC_ConfigureBoostMode+0x116>
 80028cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028d0:	d008      	beq.n	80028e4 <ADC_ConfigureBoostMode+0xd8>
 80028d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028d6:	d824      	bhi.n	8002922 <ADC_ConfigureBoostMode+0x116>
 80028d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028dc:	d002      	beq.n	80028e4 <ADC_ConfigureBoostMode+0xd8>
 80028de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028e2:	d11e      	bne.n	8002922 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	0c9b      	lsrs	r3, r3, #18
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f2:	60fb      	str	r3, [r7, #12]
        break;
 80028f4:	e016      	b.n	8002924 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
        break;
 80028fc:	e012      	b.n	8002924 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	60fb      	str	r3, [r7, #12]
        break;
 8002904:	e00e      	b.n	8002924 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	60fb      	str	r3, [r7, #12]
        break;
 800290c:	e00a      	b.n	8002924 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	09db      	lsrs	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]
        break;
 8002914:	e006      	b.n	8002924 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	60fb      	str	r3, [r7, #12]
        break;
 800291c:	e002      	b.n	8002924 <ADC_ConfigureBoostMode+0x118>
        break;
 800291e:	bf00      	nop
 8002920:	e000      	b.n	8002924 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002922:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4a1b      	ldr	r2, [pc, #108]	; (800299c <ADC_ConfigureBoostMode+0x190>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d808      	bhi.n	8002944 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002940:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002942:	e025      	b.n	8002990 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <ADC_ConfigureBoostMode+0x194>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d80a      	bhi.n	8002962 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	e016      	b.n	8002990 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <ADC_ConfigureBoostMode+0x198>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d80a      	bhi.n	8002980 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297c:	609a      	str	r2, [r3, #8]
}
 800297e:	e007      	b.n	8002990 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800298e:	609a      	str	r2, [r3, #8]
}
 8002990:	bf00      	nop
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40022300 	.word	0x40022300
 800299c:	005f5e10 	.word	0x005f5e10
 80029a0:	00bebc20 	.word	0x00bebc20
 80029a4:	017d7840 	.word	0x017d7840

080029a8 <LL_ADC_IsEnabled>:
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <LL_ADC_IsEnabled+0x18>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <LL_ADC_IsEnabled+0x1a>
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_ADC_REG_IsConversionOngoing>:
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d101      	bne.n	80029e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b09f      	sub	sp, #124	; 0x7c
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e080      	b.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a3d      	ldr	r2, [pc, #244]	; (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d102      	bne.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a2c:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	e001      	b.n	8002a36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e05f      	b.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ffb9 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002a5c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ffb3 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d141      	bne.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d13e      	bne.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002a76:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a90:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a92:	4822      	ldr	r0, [pc, #136]	; (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a94:	f7ff ff88 	bl	80029a8 <LL_ADC_IsEnabled>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	4821      	ldr	r0, [pc, #132]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a9c:	f7ff ff84 	bl	80029a8 <LL_ADC_IsEnabled>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4323      	orrs	r3, r4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d12e      	bne.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	6811      	ldr	r1, [r2, #0]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	6892      	ldr	r2, [r2, #8]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	431a      	orrs	r2, r3
 8002abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac0:	e021      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002acc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ace:	4813      	ldr	r0, [pc, #76]	; (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ad0:	f7ff ff6a 	bl	80029a8 <LL_ADC_IsEnabled>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	4812      	ldr	r0, [pc, #72]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002ad8:	f7ff ff66 	bl	80029a8 <LL_ADC_IsEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4323      	orrs	r3, r4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d110      	bne.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002aee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002af0:	e009      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f043 0220 	orr.w	r2, r3, #32
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b04:	e000      	b.n	8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b06:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b10:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	377c      	adds	r7, #124	; 0x7c
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd90      	pop	{r4, r7, pc}
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40022100 	.word	0x40022100
 8002b24:	40022300 	.word	0x40022300
 8002b28:	fffff0e0 	.word	0xfffff0e0

08002b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <__NVIC_SetPriorityGrouping+0x40>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5a:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <__NVIC_SetPriorityGrouping+0x40>)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	60d3      	str	r3, [r2, #12]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00
 8002b70:	05fa0000 	.word	0x05fa0000

08002b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <__NVIC_GetPriorityGrouping+0x18>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0307 	and.w	r3, r3, #7
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db0b      	blt.n	8002bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <__NVIC_EnableIRQ+0x38>)
 8002baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000e100 	.word	0xe000e100

08002bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	db0a      	blt.n	8002bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	490c      	ldr	r1, [pc, #48]	; (8002c18 <__NVIC_SetPriority+0x4c>)
 8002be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf4:	e00a      	b.n	8002c0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4908      	ldr	r1, [pc, #32]	; (8002c1c <__NVIC_SetPriority+0x50>)
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	3b04      	subs	r3, #4
 8002c04:	0112      	lsls	r2, r2, #4
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	440b      	add	r3, r1
 8002c0a:	761a      	strb	r2, [r3, #24]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000e100 	.word	0xe000e100
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f1c3 0307 	rsb	r3, r3, #7
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	bf28      	it	cs
 8002c3e:	2304      	movcs	r3, #4
 8002c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d902      	bls.n	8002c50 <NVIC_EncodePriority+0x30>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3b03      	subs	r3, #3
 8002c4e:	e000      	b.n	8002c52 <NVIC_EncodePriority+0x32>
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	401a      	ands	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c68:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43d9      	mvns	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	4313      	orrs	r3, r2
         );
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3724      	adds	r7, #36	; 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c98:	d301      	bcc.n	8002c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00f      	b.n	8002cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <SysTick_Config+0x40>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca6:	210f      	movs	r1, #15
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	f7ff ff8e 	bl	8002bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb8:	2207      	movs	r2, #7
 8002cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	e000e010 	.word	0xe000e010

08002ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ff29 	bl	8002b2c <__NVIC_SetPriorityGrouping>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf0:	f7ff ff40 	bl	8002b74 <__NVIC_GetPriorityGrouping>
 8002cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	6978      	ldr	r0, [r7, #20]
 8002cfc:	f7ff ff90 	bl	8002c20 <NVIC_EncodePriority>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff5f 	bl	8002bcc <__NVIC_SetPriority>
}
 8002d0e:	bf00      	nop
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff33 	bl	8002b90 <__NVIC_EnableIRQ>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ffa4 	bl	8002c88 <SysTick_Config>
 8002d40:	4603      	mov	r3, r0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d54:	f7fe fd2a 	bl	80017ac <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e37d      	b.n	8003460 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a66      	ldr	r2, [pc, #408]	; (8002f04 <HAL_DMA_Init+0x1b8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d04a      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a65      	ldr	r2, [pc, #404]	; (8002f08 <HAL_DMA_Init+0x1bc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d045      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a63      	ldr	r2, [pc, #396]	; (8002f0c <HAL_DMA_Init+0x1c0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d040      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a62      	ldr	r2, [pc, #392]	; (8002f10 <HAL_DMA_Init+0x1c4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d03b      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a60      	ldr	r2, [pc, #384]	; (8002f14 <HAL_DMA_Init+0x1c8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d036      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <HAL_DMA_Init+0x1cc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d031      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a5d      	ldr	r2, [pc, #372]	; (8002f1c <HAL_DMA_Init+0x1d0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d02c      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5c      	ldr	r2, [pc, #368]	; (8002f20 <HAL_DMA_Init+0x1d4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d027      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5a      	ldr	r2, [pc, #360]	; (8002f24 <HAL_DMA_Init+0x1d8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a59      	ldr	r2, [pc, #356]	; (8002f28 <HAL_DMA_Init+0x1dc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01d      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a57      	ldr	r2, [pc, #348]	; (8002f2c <HAL_DMA_Init+0x1e0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d018      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a56      	ldr	r2, [pc, #344]	; (8002f30 <HAL_DMA_Init+0x1e4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a54      	ldr	r2, [pc, #336]	; (8002f34 <HAL_DMA_Init+0x1e8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00e      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a53      	ldr	r2, [pc, #332]	; (8002f38 <HAL_DMA_Init+0x1ec>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a51      	ldr	r2, [pc, #324]	; (8002f3c <HAL_DMA_Init+0x1f0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_DMA_Init+0xb8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a50      	ldr	r2, [pc, #320]	; (8002f40 <HAL_DMA_Init+0x1f4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d101      	bne.n	8002e08 <HAL_DMA_Init+0xbc>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_DMA_Init+0xbe>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 813c 	beq.w	8003088 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a37      	ldr	r2, [pc, #220]	; (8002f04 <HAL_DMA_Init+0x1b8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d04a      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a36      	ldr	r2, [pc, #216]	; (8002f08 <HAL_DMA_Init+0x1bc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d045      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <HAL_DMA_Init+0x1c0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d040      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a33      	ldr	r2, [pc, #204]	; (8002f10 <HAL_DMA_Init+0x1c4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d03b      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <HAL_DMA_Init+0x1c8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d036      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <HAL_DMA_Init+0x1cc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d031      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2e      	ldr	r2, [pc, #184]	; (8002f1c <HAL_DMA_Init+0x1d0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d02c      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2d      	ldr	r2, [pc, #180]	; (8002f20 <HAL_DMA_Init+0x1d4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d027      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2b      	ldr	r2, [pc, #172]	; (8002f24 <HAL_DMA_Init+0x1d8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d022      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2a      	ldr	r2, [pc, #168]	; (8002f28 <HAL_DMA_Init+0x1dc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d01d      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a28      	ldr	r2, [pc, #160]	; (8002f2c <HAL_DMA_Init+0x1e0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d018      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a27      	ldr	r2, [pc, #156]	; (8002f30 <HAL_DMA_Init+0x1e4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a25      	ldr	r2, [pc, #148]	; (8002f34 <HAL_DMA_Init+0x1e8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00e      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_DMA_Init+0x1ec>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <HAL_DMA_Init+0x1f0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_DMA_Init+0x174>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a21      	ldr	r2, [pc, #132]	; (8002f40 <HAL_DMA_Init+0x1f4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d108      	bne.n	8002ed2 <HAL_DMA_Init+0x186>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e007      	b.n	8002ee2 <HAL_DMA_Init+0x196>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ee2:	e02f      	b.n	8002f44 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee4:	f7fe fc62 	bl	80017ac <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d928      	bls.n	8002f44 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2203      	movs	r2, #3
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e2ad      	b.n	8003460 <HAL_DMA_Init+0x714>
 8002f04:	40020010 	.word	0x40020010
 8002f08:	40020028 	.word	0x40020028
 8002f0c:	40020040 	.word	0x40020040
 8002f10:	40020058 	.word	0x40020058
 8002f14:	40020070 	.word	0x40020070
 8002f18:	40020088 	.word	0x40020088
 8002f1c:	400200a0 	.word	0x400200a0
 8002f20:	400200b8 	.word	0x400200b8
 8002f24:	40020410 	.word	0x40020410
 8002f28:	40020428 	.word	0x40020428
 8002f2c:	40020440 	.word	0x40020440
 8002f30:	40020458 	.word	0x40020458
 8002f34:	40020470 	.word	0x40020470
 8002f38:	40020488 	.word	0x40020488
 8002f3c:	400204a0 	.word	0x400204a0
 8002f40:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1c8      	bne.n	8002ee4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_DMA_Init+0x3e0>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f76:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f82:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d107      	bne.n	8002fa8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b28      	cmp	r3, #40	; 0x28
 8002fae:	d903      	bls.n	8002fb8 <HAL_DMA_Init+0x26c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8002fb6:	d91f      	bls.n	8002ff8 <HAL_DMA_Init+0x2ac>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b3e      	cmp	r3, #62	; 0x3e
 8002fbe:	d903      	bls.n	8002fc8 <HAL_DMA_Init+0x27c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b42      	cmp	r3, #66	; 0x42
 8002fc6:	d917      	bls.n	8002ff8 <HAL_DMA_Init+0x2ac>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b46      	cmp	r3, #70	; 0x46
 8002fce:	d903      	bls.n	8002fd8 <HAL_DMA_Init+0x28c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b48      	cmp	r3, #72	; 0x48
 8002fd6:	d90f      	bls.n	8002ff8 <HAL_DMA_Init+0x2ac>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b4e      	cmp	r3, #78	; 0x4e
 8002fde:	d903      	bls.n	8002fe8 <HAL_DMA_Init+0x29c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b52      	cmp	r3, #82	; 0x52
 8002fe6:	d907      	bls.n	8002ff8 <HAL_DMA_Init+0x2ac>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b73      	cmp	r3, #115	; 0x73
 8002fee:	d905      	bls.n	8002ffc <HAL_DMA_Init+0x2b0>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b77      	cmp	r3, #119	; 0x77
 8002ff6:	d801      	bhi.n	8002ffc <HAL_DMA_Init+0x2b0>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_DMA_Init+0x2b2>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003008:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 0307 	bic.w	r3, r3, #7
 8003020:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2b04      	cmp	r3, #4
 8003032:	d117      	bne.n	8003064 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00e      	beq.n	8003064 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f001 fe70 	bl	8004d2c <DMA_CheckFifoParam>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2240      	movs	r2, #64	; 0x40
 8003056:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e1fd      	b.n	8003460 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f001 fdab 	bl	8004bc8 <DMA_CalcBaseAndBitshift>
 8003072:	4603      	mov	r3, r0
 8003074:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	223f      	movs	r2, #63	; 0x3f
 8003080:	409a      	lsls	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	e0fd      	b.n	8003284 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a28      	ldr	r2, [pc, #160]	; (8003130 <HAL_DMA_Init+0x3e4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d04a      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a27      	ldr	r2, [pc, #156]	; (8003134 <HAL_DMA_Init+0x3e8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d045      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a25      	ldr	r2, [pc, #148]	; (8003138 <HAL_DMA_Init+0x3ec>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d040      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a24      	ldr	r2, [pc, #144]	; (800313c <HAL_DMA_Init+0x3f0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d03b      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a22      	ldr	r2, [pc, #136]	; (8003140 <HAL_DMA_Init+0x3f4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d036      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a21      	ldr	r2, [pc, #132]	; (8003144 <HAL_DMA_Init+0x3f8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d031      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <HAL_DMA_Init+0x3fc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d02c      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1e      	ldr	r2, [pc, #120]	; (800314c <HAL_DMA_Init+0x400>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d027      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_DMA_Init+0x404>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d022      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <HAL_DMA_Init+0x408>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d01d      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a19      	ldr	r2, [pc, #100]	; (8003158 <HAL_DMA_Init+0x40c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d018      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a18      	ldr	r2, [pc, #96]	; (800315c <HAL_DMA_Init+0x410>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a16      	ldr	r2, [pc, #88]	; (8003160 <HAL_DMA_Init+0x414>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00e      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a15      	ldr	r2, [pc, #84]	; (8003164 <HAL_DMA_Init+0x418>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d009      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a13      	ldr	r2, [pc, #76]	; (8003168 <HAL_DMA_Init+0x41c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_DMA_Init+0x3dc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <HAL_DMA_Init+0x420>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d123      	bne.n	8003170 <HAL_DMA_Init+0x424>
 8003128:	2301      	movs	r3, #1
 800312a:	e022      	b.n	8003172 <HAL_DMA_Init+0x426>
 800312c:	fe10803f 	.word	0xfe10803f
 8003130:	48022c08 	.word	0x48022c08
 8003134:	48022c1c 	.word	0x48022c1c
 8003138:	48022c30 	.word	0x48022c30
 800313c:	48022c44 	.word	0x48022c44
 8003140:	48022c58 	.word	0x48022c58
 8003144:	48022c6c 	.word	0x48022c6c
 8003148:	48022c80 	.word	0x48022c80
 800314c:	48022c94 	.word	0x48022c94
 8003150:	58025408 	.word	0x58025408
 8003154:	5802541c 	.word	0x5802541c
 8003158:	58025430 	.word	0x58025430
 800315c:	58025444 	.word	0x58025444
 8003160:	58025458 	.word	0x58025458
 8003164:	5802546c 	.word	0x5802546c
 8003168:	58025480 	.word	0x58025480
 800316c:	58025494 	.word	0x58025494
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d07d      	beq.n	8003272 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a7f      	ldr	r2, [pc, #508]	; (8003378 <HAL_DMA_Init+0x62c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d021      	beq.n	80031c4 <HAL_DMA_Init+0x478>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a7d      	ldr	r2, [pc, #500]	; (800337c <HAL_DMA_Init+0x630>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01c      	beq.n	80031c4 <HAL_DMA_Init+0x478>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7c      	ldr	r2, [pc, #496]	; (8003380 <HAL_DMA_Init+0x634>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d017      	beq.n	80031c4 <HAL_DMA_Init+0x478>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7a      	ldr	r2, [pc, #488]	; (8003384 <HAL_DMA_Init+0x638>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d012      	beq.n	80031c4 <HAL_DMA_Init+0x478>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a79      	ldr	r2, [pc, #484]	; (8003388 <HAL_DMA_Init+0x63c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00d      	beq.n	80031c4 <HAL_DMA_Init+0x478>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a77      	ldr	r2, [pc, #476]	; (800338c <HAL_DMA_Init+0x640>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d008      	beq.n	80031c4 <HAL_DMA_Init+0x478>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a76      	ldr	r2, [pc, #472]	; (8003390 <HAL_DMA_Init+0x644>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d003      	beq.n	80031c4 <HAL_DMA_Init+0x478>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a74      	ldr	r2, [pc, #464]	; (8003394 <HAL_DMA_Init+0x648>)
 80031c2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4b6e      	ldr	r3, [pc, #440]	; (8003398 <HAL_DMA_Init+0x64c>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d008      	beq.n	80031fe <HAL_DMA_Init+0x4b2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b80      	cmp	r3, #128	; 0x80
 80031f2:	d102      	bne.n	80031fa <HAL_DMA_Init+0x4ae>
 80031f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031f8:	e002      	b.n	8003200 <HAL_DMA_Init+0x4b4>
 80031fa:	2300      	movs	r3, #0
 80031fc:	e000      	b.n	8003200 <HAL_DMA_Init+0x4b4>
 80031fe:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68d2      	ldr	r2, [r2, #12]
 8003204:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003206:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800320e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003216:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800321e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003226:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800322e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	4b55      	ldr	r3, [pc, #340]	; (800339c <HAL_DMA_Init+0x650>)
 8003246:	4413      	add	r3, r2
 8003248:	4a55      	ldr	r2, [pc, #340]	; (80033a0 <HAL_DMA_Init+0x654>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	009a      	lsls	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f001 fcb6 	bl	8004bc8 <DMA_CalcBaseAndBitshift>
 800325c:	4603      	mov	r3, r0
 800325e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2201      	movs	r2, #1
 800326a:	409a      	lsls	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	e008      	b.n	8003284 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2240      	movs	r2, #64	; 0x40
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2203      	movs	r2, #3
 800327c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0ed      	b.n	8003460 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a46      	ldr	r2, [pc, #280]	; (80033a4 <HAL_DMA_Init+0x658>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d072      	beq.n	8003374 <HAL_DMA_Init+0x628>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a45      	ldr	r2, [pc, #276]	; (80033a8 <HAL_DMA_Init+0x65c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d06d      	beq.n	8003374 <HAL_DMA_Init+0x628>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a43      	ldr	r2, [pc, #268]	; (80033ac <HAL_DMA_Init+0x660>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d068      	beq.n	8003374 <HAL_DMA_Init+0x628>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a42      	ldr	r2, [pc, #264]	; (80033b0 <HAL_DMA_Init+0x664>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d063      	beq.n	8003374 <HAL_DMA_Init+0x628>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <HAL_DMA_Init+0x668>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d05e      	beq.n	8003374 <HAL_DMA_Init+0x628>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a3f      	ldr	r2, [pc, #252]	; (80033b8 <HAL_DMA_Init+0x66c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d059      	beq.n	8003374 <HAL_DMA_Init+0x628>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a3d      	ldr	r2, [pc, #244]	; (80033bc <HAL_DMA_Init+0x670>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d054      	beq.n	8003374 <HAL_DMA_Init+0x628>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a3c      	ldr	r2, [pc, #240]	; (80033c0 <HAL_DMA_Init+0x674>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d04f      	beq.n	8003374 <HAL_DMA_Init+0x628>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a3a      	ldr	r2, [pc, #232]	; (80033c4 <HAL_DMA_Init+0x678>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04a      	beq.n	8003374 <HAL_DMA_Init+0x628>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a39      	ldr	r2, [pc, #228]	; (80033c8 <HAL_DMA_Init+0x67c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d045      	beq.n	8003374 <HAL_DMA_Init+0x628>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a37      	ldr	r2, [pc, #220]	; (80033cc <HAL_DMA_Init+0x680>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d040      	beq.n	8003374 <HAL_DMA_Init+0x628>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a36      	ldr	r2, [pc, #216]	; (80033d0 <HAL_DMA_Init+0x684>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d03b      	beq.n	8003374 <HAL_DMA_Init+0x628>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a34      	ldr	r2, [pc, #208]	; (80033d4 <HAL_DMA_Init+0x688>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d036      	beq.n	8003374 <HAL_DMA_Init+0x628>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <HAL_DMA_Init+0x68c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d031      	beq.n	8003374 <HAL_DMA_Init+0x628>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a31      	ldr	r2, [pc, #196]	; (80033dc <HAL_DMA_Init+0x690>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02c      	beq.n	8003374 <HAL_DMA_Init+0x628>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a30      	ldr	r2, [pc, #192]	; (80033e0 <HAL_DMA_Init+0x694>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d027      	beq.n	8003374 <HAL_DMA_Init+0x628>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a13      	ldr	r2, [pc, #76]	; (8003378 <HAL_DMA_Init+0x62c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_DMA_Init+0x628>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <HAL_DMA_Init+0x630>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d01d      	beq.n	8003374 <HAL_DMA_Init+0x628>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a10      	ldr	r2, [pc, #64]	; (8003380 <HAL_DMA_Init+0x634>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_DMA_Init+0x628>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a0f      	ldr	r2, [pc, #60]	; (8003384 <HAL_DMA_Init+0x638>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_DMA_Init+0x628>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <HAL_DMA_Init+0x63c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_DMA_Init+0x628>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a0c      	ldr	r2, [pc, #48]	; (800338c <HAL_DMA_Init+0x640>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_DMA_Init+0x628>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_DMA_Init+0x644>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_DMA_Init+0x628>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_DMA_Init+0x648>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d137      	bne.n	80033e4 <HAL_DMA_Init+0x698>
 8003374:	2301      	movs	r3, #1
 8003376:	e036      	b.n	80033e6 <HAL_DMA_Init+0x69a>
 8003378:	58025408 	.word	0x58025408
 800337c:	5802541c 	.word	0x5802541c
 8003380:	58025430 	.word	0x58025430
 8003384:	58025444 	.word	0x58025444
 8003388:	58025458 	.word	0x58025458
 800338c:	5802546c 	.word	0x5802546c
 8003390:	58025480 	.word	0x58025480
 8003394:	58025494 	.word	0x58025494
 8003398:	fffe000f 	.word	0xfffe000f
 800339c:	a7fdabf8 	.word	0xa7fdabf8
 80033a0:	cccccccd 	.word	0xcccccccd
 80033a4:	40020010 	.word	0x40020010
 80033a8:	40020028 	.word	0x40020028
 80033ac:	40020040 	.word	0x40020040
 80033b0:	40020058 	.word	0x40020058
 80033b4:	40020070 	.word	0x40020070
 80033b8:	40020088 	.word	0x40020088
 80033bc:	400200a0 	.word	0x400200a0
 80033c0:	400200b8 	.word	0x400200b8
 80033c4:	40020410 	.word	0x40020410
 80033c8:	40020428 	.word	0x40020428
 80033cc:	40020440 	.word	0x40020440
 80033d0:	40020458 	.word	0x40020458
 80033d4:	40020470 	.word	0x40020470
 80033d8:	40020488 	.word	0x40020488
 80033dc:	400204a0 	.word	0x400204a0
 80033e0:	400204b8 	.word	0x400204b8
 80033e4:	2300      	movs	r3, #0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d032      	beq.n	8003450 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f001 fd1a 	bl	8004e24 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d102      	bne.n	80033fe <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003412:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d010      	beq.n	800343e <HAL_DMA_Init+0x6f2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b08      	cmp	r3, #8
 8003422:	d80c      	bhi.n	800343e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f001 fd97 	bl	8004f58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	e008      	b.n	8003450 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e226      	b.n	80038d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_DMA_Start_IT+0x2a>
 800348e:	2302      	movs	r3, #2
 8003490:	e21f      	b.n	80038d2 <HAL_DMA_Start_IT+0x46a>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	f040 820a 	bne.w	80038bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a68      	ldr	r2, [pc, #416]	; (800365c <HAL_DMA_Start_IT+0x1f4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d04a      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a66      	ldr	r2, [pc, #408]	; (8003660 <HAL_DMA_Start_IT+0x1f8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d045      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a65      	ldr	r2, [pc, #404]	; (8003664 <HAL_DMA_Start_IT+0x1fc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d040      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a63      	ldr	r2, [pc, #396]	; (8003668 <HAL_DMA_Start_IT+0x200>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d03b      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a62      	ldr	r2, [pc, #392]	; (800366c <HAL_DMA_Start_IT+0x204>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d036      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a60      	ldr	r2, [pc, #384]	; (8003670 <HAL_DMA_Start_IT+0x208>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d031      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a5f      	ldr	r2, [pc, #380]	; (8003674 <HAL_DMA_Start_IT+0x20c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d02c      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a5d      	ldr	r2, [pc, #372]	; (8003678 <HAL_DMA_Start_IT+0x210>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d027      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a5c      	ldr	r2, [pc, #368]	; (800367c <HAL_DMA_Start_IT+0x214>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d022      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a5a      	ldr	r2, [pc, #360]	; (8003680 <HAL_DMA_Start_IT+0x218>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01d      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a59      	ldr	r2, [pc, #356]	; (8003684 <HAL_DMA_Start_IT+0x21c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d018      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a57      	ldr	r2, [pc, #348]	; (8003688 <HAL_DMA_Start_IT+0x220>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a56      	ldr	r2, [pc, #344]	; (800368c <HAL_DMA_Start_IT+0x224>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00e      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a54      	ldr	r2, [pc, #336]	; (8003690 <HAL_DMA_Start_IT+0x228>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a53      	ldr	r2, [pc, #332]	; (8003694 <HAL_DMA_Start_IT+0x22c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_DMA_Start_IT+0xee>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a51      	ldr	r2, [pc, #324]	; (8003698 <HAL_DMA_Start_IT+0x230>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d108      	bne.n	8003568 <HAL_DMA_Start_IT+0x100>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e007      	b.n	8003578 <HAL_DMA_Start_IT+0x110>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f001 f93e 	bl	8004800 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a34      	ldr	r2, [pc, #208]	; (800365c <HAL_DMA_Start_IT+0x1f4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04a      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a33      	ldr	r2, [pc, #204]	; (8003660 <HAL_DMA_Start_IT+0x1f8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d045      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a31      	ldr	r2, [pc, #196]	; (8003664 <HAL_DMA_Start_IT+0x1fc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d040      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a30      	ldr	r2, [pc, #192]	; (8003668 <HAL_DMA_Start_IT+0x200>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d03b      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2e      	ldr	r2, [pc, #184]	; (800366c <HAL_DMA_Start_IT+0x204>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d036      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <HAL_DMA_Start_IT+0x208>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d031      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2b      	ldr	r2, [pc, #172]	; (8003674 <HAL_DMA_Start_IT+0x20c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02c      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2a      	ldr	r2, [pc, #168]	; (8003678 <HAL_DMA_Start_IT+0x210>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d027      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a28      	ldr	r2, [pc, #160]	; (800367c <HAL_DMA_Start_IT+0x214>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a27      	ldr	r2, [pc, #156]	; (8003680 <HAL_DMA_Start_IT+0x218>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01d      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a25      	ldr	r2, [pc, #148]	; (8003684 <HAL_DMA_Start_IT+0x21c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d018      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a24      	ldr	r2, [pc, #144]	; (8003688 <HAL_DMA_Start_IT+0x220>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a22      	ldr	r2, [pc, #136]	; (800368c <HAL_DMA_Start_IT+0x224>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a21      	ldr	r2, [pc, #132]	; (8003690 <HAL_DMA_Start_IT+0x228>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <HAL_DMA_Start_IT+0x22c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_DMA_Start_IT+0x1bc>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <HAL_DMA_Start_IT+0x230>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d101      	bne.n	8003628 <HAL_DMA_Start_IT+0x1c0>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_DMA_Start_IT+0x1c2>
 8003628:	2300      	movs	r3, #0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d036      	beq.n	800369c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 021e 	bic.w	r2, r3, #30
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0216 	orr.w	r2, r2, #22
 8003640:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d03e      	beq.n	80036c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0208 	orr.w	r2, r2, #8
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e035      	b.n	80036c8 <HAL_DMA_Start_IT+0x260>
 800365c:	40020010 	.word	0x40020010
 8003660:	40020028 	.word	0x40020028
 8003664:	40020040 	.word	0x40020040
 8003668:	40020058 	.word	0x40020058
 800366c:	40020070 	.word	0x40020070
 8003670:	40020088 	.word	0x40020088
 8003674:	400200a0 	.word	0x400200a0
 8003678:	400200b8 	.word	0x400200b8
 800367c:	40020410 	.word	0x40020410
 8003680:	40020428 	.word	0x40020428
 8003684:	40020440 	.word	0x40020440
 8003688:	40020458 	.word	0x40020458
 800368c:	40020470 	.word	0x40020470
 8003690:	40020488 	.word	0x40020488
 8003694:	400204a0 	.word	0x400204a0
 8003698:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 020e 	bic.w	r2, r3, #14
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 020a 	orr.w	r2, r2, #10
 80036ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d007      	beq.n	80036c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0204 	orr.w	r2, r2, #4
 80036c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a83      	ldr	r2, [pc, #524]	; (80038dc <HAL_DMA_Start_IT+0x474>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d072      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a82      	ldr	r2, [pc, #520]	; (80038e0 <HAL_DMA_Start_IT+0x478>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d06d      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a80      	ldr	r2, [pc, #512]	; (80038e4 <HAL_DMA_Start_IT+0x47c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d068      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a7f      	ldr	r2, [pc, #508]	; (80038e8 <HAL_DMA_Start_IT+0x480>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d063      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a7d      	ldr	r2, [pc, #500]	; (80038ec <HAL_DMA_Start_IT+0x484>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d05e      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a7c      	ldr	r2, [pc, #496]	; (80038f0 <HAL_DMA_Start_IT+0x488>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d059      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a7a      	ldr	r2, [pc, #488]	; (80038f4 <HAL_DMA_Start_IT+0x48c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d054      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a79      	ldr	r2, [pc, #484]	; (80038f8 <HAL_DMA_Start_IT+0x490>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d04f      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a77      	ldr	r2, [pc, #476]	; (80038fc <HAL_DMA_Start_IT+0x494>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d04a      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a76      	ldr	r2, [pc, #472]	; (8003900 <HAL_DMA_Start_IT+0x498>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d045      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a74      	ldr	r2, [pc, #464]	; (8003904 <HAL_DMA_Start_IT+0x49c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d040      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a73      	ldr	r2, [pc, #460]	; (8003908 <HAL_DMA_Start_IT+0x4a0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d03b      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a71      	ldr	r2, [pc, #452]	; (800390c <HAL_DMA_Start_IT+0x4a4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d036      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a70      	ldr	r2, [pc, #448]	; (8003910 <HAL_DMA_Start_IT+0x4a8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d031      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a6e      	ldr	r2, [pc, #440]	; (8003914 <HAL_DMA_Start_IT+0x4ac>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d02c      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a6d      	ldr	r2, [pc, #436]	; (8003918 <HAL_DMA_Start_IT+0x4b0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d027      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6b      	ldr	r2, [pc, #428]	; (800391c <HAL_DMA_Start_IT+0x4b4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d022      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6a      	ldr	r2, [pc, #424]	; (8003920 <HAL_DMA_Start_IT+0x4b8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d01d      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a68      	ldr	r2, [pc, #416]	; (8003924 <HAL_DMA_Start_IT+0x4bc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d018      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a67      	ldr	r2, [pc, #412]	; (8003928 <HAL_DMA_Start_IT+0x4c0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a65      	ldr	r2, [pc, #404]	; (800392c <HAL_DMA_Start_IT+0x4c4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a64      	ldr	r2, [pc, #400]	; (8003930 <HAL_DMA_Start_IT+0x4c8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d009      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a62      	ldr	r2, [pc, #392]	; (8003934 <HAL_DMA_Start_IT+0x4cc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_DMA_Start_IT+0x350>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a61      	ldr	r2, [pc, #388]	; (8003938 <HAL_DMA_Start_IT+0x4d0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_DMA_Start_IT+0x354>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_DMA_Start_IT+0x356>
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01a      	beq.n	80037f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a37      	ldr	r2, [pc, #220]	; (80038dc <HAL_DMA_Start_IT+0x474>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d04a      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a36      	ldr	r2, [pc, #216]	; (80038e0 <HAL_DMA_Start_IT+0x478>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d045      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a34      	ldr	r2, [pc, #208]	; (80038e4 <HAL_DMA_Start_IT+0x47c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d040      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a33      	ldr	r2, [pc, #204]	; (80038e8 <HAL_DMA_Start_IT+0x480>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d03b      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a31      	ldr	r2, [pc, #196]	; (80038ec <HAL_DMA_Start_IT+0x484>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d036      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a30      	ldr	r2, [pc, #192]	; (80038f0 <HAL_DMA_Start_IT+0x488>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d031      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2e      	ldr	r2, [pc, #184]	; (80038f4 <HAL_DMA_Start_IT+0x48c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d02c      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <HAL_DMA_Start_IT+0x490>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d027      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a2b      	ldr	r2, [pc, #172]	; (80038fc <HAL_DMA_Start_IT+0x494>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d022      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a2a      	ldr	r2, [pc, #168]	; (8003900 <HAL_DMA_Start_IT+0x498>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d01d      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a28      	ldr	r2, [pc, #160]	; (8003904 <HAL_DMA_Start_IT+0x49c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d018      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a27      	ldr	r2, [pc, #156]	; (8003908 <HAL_DMA_Start_IT+0x4a0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d013      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a25      	ldr	r2, [pc, #148]	; (800390c <HAL_DMA_Start_IT+0x4a4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00e      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a24      	ldr	r2, [pc, #144]	; (8003910 <HAL_DMA_Start_IT+0x4a8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d009      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_DMA_Start_IT+0x4ac>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <HAL_DMA_Start_IT+0x430>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a21      	ldr	r2, [pc, #132]	; (8003918 <HAL_DMA_Start_IT+0x4b0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d108      	bne.n	80038aa <HAL_DMA_Start_IT+0x442>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e012      	b.n	80038d0 <HAL_DMA_Start_IT+0x468>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e009      	b.n	80038d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40020010 	.word	0x40020010
 80038e0:	40020028 	.word	0x40020028
 80038e4:	40020040 	.word	0x40020040
 80038e8:	40020058 	.word	0x40020058
 80038ec:	40020070 	.word	0x40020070
 80038f0:	40020088 	.word	0x40020088
 80038f4:	400200a0 	.word	0x400200a0
 80038f8:	400200b8 	.word	0x400200b8
 80038fc:	40020410 	.word	0x40020410
 8003900:	40020428 	.word	0x40020428
 8003904:	40020440 	.word	0x40020440
 8003908:	40020458 	.word	0x40020458
 800390c:	40020470 	.word	0x40020470
 8003910:	40020488 	.word	0x40020488
 8003914:	400204a0 	.word	0x400204a0
 8003918:	400204b8 	.word	0x400204b8
 800391c:	58025408 	.word	0x58025408
 8003920:	5802541c 	.word	0x5802541c
 8003924:	58025430 	.word	0x58025430
 8003928:	58025444 	.word	0x58025444
 800392c:	58025458 	.word	0x58025458
 8003930:	5802546c 	.word	0x5802546c
 8003934:	58025480 	.word	0x58025480
 8003938:	58025494 	.word	0x58025494

0800393c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003948:	4b67      	ldr	r3, [pc, #412]	; (8003ae8 <HAL_DMA_IRQHandler+0x1ac>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a67      	ldr	r2, [pc, #412]	; (8003aec <HAL_DMA_IRQHandler+0x1b0>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	0a9b      	lsrs	r3, r3, #10
 8003954:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a5f      	ldr	r2, [pc, #380]	; (8003af0 <HAL_DMA_IRQHandler+0x1b4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d04a      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a5d      	ldr	r2, [pc, #372]	; (8003af4 <HAL_DMA_IRQHandler+0x1b8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d045      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a5c      	ldr	r2, [pc, #368]	; (8003af8 <HAL_DMA_IRQHandler+0x1bc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d040      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a5a      	ldr	r2, [pc, #360]	; (8003afc <HAL_DMA_IRQHandler+0x1c0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d03b      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a59      	ldr	r2, [pc, #356]	; (8003b00 <HAL_DMA_IRQHandler+0x1c4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d036      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a57      	ldr	r2, [pc, #348]	; (8003b04 <HAL_DMA_IRQHandler+0x1c8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d031      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a56      	ldr	r2, [pc, #344]	; (8003b08 <HAL_DMA_IRQHandler+0x1cc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d02c      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a54      	ldr	r2, [pc, #336]	; (8003b0c <HAL_DMA_IRQHandler+0x1d0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d027      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a53      	ldr	r2, [pc, #332]	; (8003b10 <HAL_DMA_IRQHandler+0x1d4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a51      	ldr	r2, [pc, #324]	; (8003b14 <HAL_DMA_IRQHandler+0x1d8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01d      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a50      	ldr	r2, [pc, #320]	; (8003b18 <HAL_DMA_IRQHandler+0x1dc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d018      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a4e      	ldr	r2, [pc, #312]	; (8003b1c <HAL_DMA_IRQHandler+0x1e0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a4d      	ldr	r2, [pc, #308]	; (8003b20 <HAL_DMA_IRQHandler+0x1e4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a4b      	ldr	r2, [pc, #300]	; (8003b24 <HAL_DMA_IRQHandler+0x1e8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a4a      	ldr	r2, [pc, #296]	; (8003b28 <HAL_DMA_IRQHandler+0x1ec>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xd2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a48      	ldr	r2, [pc, #288]	; (8003b2c <HAL_DMA_IRQHandler+0x1f0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_DMA_IRQHandler+0xd6>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_DMA_IRQHandler+0xd8>
 8003a12:	2300      	movs	r3, #0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 842b 	beq.w	8004270 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	2208      	movs	r2, #8
 8003a24:	409a      	lsls	r2, r3
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80a2 	beq.w	8003b74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a2e      	ldr	r2, [pc, #184]	; (8003af0 <HAL_DMA_IRQHandler+0x1b4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d04a      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2d      	ldr	r2, [pc, #180]	; (8003af4 <HAL_DMA_IRQHandler+0x1b8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d045      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2b      	ldr	r2, [pc, #172]	; (8003af8 <HAL_DMA_IRQHandler+0x1bc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d040      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2a      	ldr	r2, [pc, #168]	; (8003afc <HAL_DMA_IRQHandler+0x1c0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d03b      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <HAL_DMA_IRQHandler+0x1c4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d036      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a27      	ldr	r2, [pc, #156]	; (8003b04 <HAL_DMA_IRQHandler+0x1c8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d031      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a25      	ldr	r2, [pc, #148]	; (8003b08 <HAL_DMA_IRQHandler+0x1cc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d02c      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a24      	ldr	r2, [pc, #144]	; (8003b0c <HAL_DMA_IRQHandler+0x1d0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d027      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a22      	ldr	r2, [pc, #136]	; (8003b10 <HAL_DMA_IRQHandler+0x1d4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d022      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a21      	ldr	r2, [pc, #132]	; (8003b14 <HAL_DMA_IRQHandler+0x1d8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d01d      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1f      	ldr	r2, [pc, #124]	; (8003b18 <HAL_DMA_IRQHandler+0x1dc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d018      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <HAL_DMA_IRQHandler+0x1e0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d013      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <HAL_DMA_IRQHandler+0x1e4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00e      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <HAL_DMA_IRQHandler+0x1e8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d009      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <HAL_DMA_IRQHandler+0x1ec>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x194>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <HAL_DMA_IRQHandler+0x1f0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d12f      	bne.n	8003b30 <HAL_DMA_IRQHandler+0x1f4>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	e02e      	b.n	8003b44 <HAL_DMA_IRQHandler+0x208>
 8003ae6:	bf00      	nop
 8003ae8:	24000000 	.word	0x24000000
 8003aec:	1b4e81b5 	.word	0x1b4e81b5
 8003af0:	40020010 	.word	0x40020010
 8003af4:	40020028 	.word	0x40020028
 8003af8:	40020040 	.word	0x40020040
 8003afc:	40020058 	.word	0x40020058
 8003b00:	40020070 	.word	0x40020070
 8003b04:	40020088 	.word	0x40020088
 8003b08:	400200a0 	.word	0x400200a0
 8003b0c:	400200b8 	.word	0x400200b8
 8003b10:	40020410 	.word	0x40020410
 8003b14:	40020428 	.word	0x40020428
 8003b18:	40020440 	.word	0x40020440
 8003b1c:	40020458 	.word	0x40020458
 8003b20:	40020470 	.word	0x40020470
 8003b24:	40020488 	.word	0x40020488
 8003b28:	400204a0 	.word	0x400204a0
 8003b2c:	400204b8 	.word	0x400204b8
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bf14      	ite	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	2300      	moveq	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d015      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0204 	bic.w	r2, r2, #4
 8003b56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2208      	movs	r2, #8
 8003b62:	409a      	lsls	r2, r3
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d06e      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a69      	ldr	r2, [pc, #420]	; (8003d34 <HAL_DMA_IRQHandler+0x3f8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d04a      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a67      	ldr	r2, [pc, #412]	; (8003d38 <HAL_DMA_IRQHandler+0x3fc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d045      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a66      	ldr	r2, [pc, #408]	; (8003d3c <HAL_DMA_IRQHandler+0x400>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d040      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a64      	ldr	r2, [pc, #400]	; (8003d40 <HAL_DMA_IRQHandler+0x404>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d03b      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a63      	ldr	r2, [pc, #396]	; (8003d44 <HAL_DMA_IRQHandler+0x408>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d036      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a61      	ldr	r2, [pc, #388]	; (8003d48 <HAL_DMA_IRQHandler+0x40c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d031      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a60      	ldr	r2, [pc, #384]	; (8003d4c <HAL_DMA_IRQHandler+0x410>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d02c      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a5e      	ldr	r2, [pc, #376]	; (8003d50 <HAL_DMA_IRQHandler+0x414>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d027      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a5d      	ldr	r2, [pc, #372]	; (8003d54 <HAL_DMA_IRQHandler+0x418>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d022      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a5b      	ldr	r2, [pc, #364]	; (8003d58 <HAL_DMA_IRQHandler+0x41c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d01d      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a5a      	ldr	r2, [pc, #360]	; (8003d5c <HAL_DMA_IRQHandler+0x420>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d018      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a58      	ldr	r2, [pc, #352]	; (8003d60 <HAL_DMA_IRQHandler+0x424>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a57      	ldr	r2, [pc, #348]	; (8003d64 <HAL_DMA_IRQHandler+0x428>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00e      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a55      	ldr	r2, [pc, #340]	; (8003d68 <HAL_DMA_IRQHandler+0x42c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d009      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a54      	ldr	r2, [pc, #336]	; (8003d6c <HAL_DMA_IRQHandler+0x430>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d004      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x2ee>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_DMA_IRQHandler+0x434>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10a      	bne.n	8003c40 <HAL_DMA_IRQHandler+0x304>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf14      	ite	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	2300      	moveq	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e003      	b.n	8003c48 <HAL_DMA_IRQHandler+0x30c>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2300      	movs	r3, #0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00d      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	2201      	movs	r2, #1
 8003c56:	409a      	lsls	r2, r3
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f043 0202 	orr.w	r2, r3, #2
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	2204      	movs	r2, #4
 8003c72:	409a      	lsls	r2, r3
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 808f 	beq.w	8003d9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2c      	ldr	r2, [pc, #176]	; (8003d34 <HAL_DMA_IRQHandler+0x3f8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d04a      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2a      	ldr	r2, [pc, #168]	; (8003d38 <HAL_DMA_IRQHandler+0x3fc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d045      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <HAL_DMA_IRQHandler+0x400>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d040      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a27      	ldr	r2, [pc, #156]	; (8003d40 <HAL_DMA_IRQHandler+0x404>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d03b      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <HAL_DMA_IRQHandler+0x408>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d036      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a24      	ldr	r2, [pc, #144]	; (8003d48 <HAL_DMA_IRQHandler+0x40c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d031      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a23      	ldr	r2, [pc, #140]	; (8003d4c <HAL_DMA_IRQHandler+0x410>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d02c      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a21      	ldr	r2, [pc, #132]	; (8003d50 <HAL_DMA_IRQHandler+0x414>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d027      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <HAL_DMA_IRQHandler+0x418>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d022      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1e      	ldr	r2, [pc, #120]	; (8003d58 <HAL_DMA_IRQHandler+0x41c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01d      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <HAL_DMA_IRQHandler+0x420>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d018      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1b      	ldr	r2, [pc, #108]	; (8003d60 <HAL_DMA_IRQHandler+0x424>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <HAL_DMA_IRQHandler+0x428>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <HAL_DMA_IRQHandler+0x42c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d009      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <HAL_DMA_IRQHandler+0x430>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x3e2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a15      	ldr	r2, [pc, #84]	; (8003d70 <HAL_DMA_IRQHandler+0x434>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d12a      	bne.n	8003d74 <HAL_DMA_IRQHandler+0x438>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e023      	b.n	8003d7c <HAL_DMA_IRQHandler+0x440>
 8003d34:	40020010 	.word	0x40020010
 8003d38:	40020028 	.word	0x40020028
 8003d3c:	40020040 	.word	0x40020040
 8003d40:	40020058 	.word	0x40020058
 8003d44:	40020070 	.word	0x40020070
 8003d48:	40020088 	.word	0x40020088
 8003d4c:	400200a0 	.word	0x400200a0
 8003d50:	400200b8 	.word	0x400200b8
 8003d54:	40020410 	.word	0x40020410
 8003d58:	40020428 	.word	0x40020428
 8003d5c:	40020440 	.word	0x40020440
 8003d60:	40020458 	.word	0x40020458
 8003d64:	40020470 	.word	0x40020470
 8003d68:	40020488 	.word	0x40020488
 8003d6c:	400204a0 	.word	0x400204a0
 8003d70:	400204b8 	.word	0x400204b8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00d      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	2204      	movs	r2, #4
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	f043 0204 	orr.w	r2, r3, #4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	2210      	movs	r2, #16
 8003da6:	409a      	lsls	r2, r3
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80a6 	beq.w	8003efe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a85      	ldr	r2, [pc, #532]	; (8003fcc <HAL_DMA_IRQHandler+0x690>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d04a      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a83      	ldr	r2, [pc, #524]	; (8003fd0 <HAL_DMA_IRQHandler+0x694>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d045      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a82      	ldr	r2, [pc, #520]	; (8003fd4 <HAL_DMA_IRQHandler+0x698>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d040      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a80      	ldr	r2, [pc, #512]	; (8003fd8 <HAL_DMA_IRQHandler+0x69c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d03b      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a7f      	ldr	r2, [pc, #508]	; (8003fdc <HAL_DMA_IRQHandler+0x6a0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d036      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a7d      	ldr	r2, [pc, #500]	; (8003fe0 <HAL_DMA_IRQHandler+0x6a4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d031      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7c      	ldr	r2, [pc, #496]	; (8003fe4 <HAL_DMA_IRQHandler+0x6a8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d02c      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a7a      	ldr	r2, [pc, #488]	; (8003fe8 <HAL_DMA_IRQHandler+0x6ac>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d027      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a79      	ldr	r2, [pc, #484]	; (8003fec <HAL_DMA_IRQHandler+0x6b0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d022      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a77      	ldr	r2, [pc, #476]	; (8003ff0 <HAL_DMA_IRQHandler+0x6b4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d01d      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a76      	ldr	r2, [pc, #472]	; (8003ff4 <HAL_DMA_IRQHandler+0x6b8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d018      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a74      	ldr	r2, [pc, #464]	; (8003ff8 <HAL_DMA_IRQHandler+0x6bc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a73      	ldr	r2, [pc, #460]	; (8003ffc <HAL_DMA_IRQHandler+0x6c0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00e      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a71      	ldr	r2, [pc, #452]	; (8004000 <HAL_DMA_IRQHandler+0x6c4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d009      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a70      	ldr	r2, [pc, #448]	; (8004004 <HAL_DMA_IRQHandler+0x6c8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x516>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a6e      	ldr	r2, [pc, #440]	; (8004008 <HAL_DMA_IRQHandler+0x6cc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10a      	bne.n	8003e68 <HAL_DMA_IRQHandler+0x52c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e009      	b.n	8003e7c <HAL_DMA_IRQHandler+0x540>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bf14      	ite	ne
 8003e76:	2301      	movne	r3, #1
 8003e78:	2300      	moveq	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d03e      	beq.n	8003efe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	2210      	movs	r2, #16
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d018      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d108      	bne.n	8003ebe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d024      	beq.n	8003efe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	e01f      	b.n	8003efe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01b      	beq.n	8003efe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
 8003ece:	e016      	b.n	8003efe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d107      	bne.n	8003eee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0208 	bic.w	r2, r2, #8
 8003eec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	f003 031f 	and.w	r3, r3, #31
 8003f06:	2220      	movs	r2, #32
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8110 	beq.w	8004134 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a2c      	ldr	r2, [pc, #176]	; (8003fcc <HAL_DMA_IRQHandler+0x690>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d04a      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <HAL_DMA_IRQHandler+0x694>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d045      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <HAL_DMA_IRQHandler+0x698>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d040      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a28      	ldr	r2, [pc, #160]	; (8003fd8 <HAL_DMA_IRQHandler+0x69c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d03b      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <HAL_DMA_IRQHandler+0x6a0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d036      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a25      	ldr	r2, [pc, #148]	; (8003fe0 <HAL_DMA_IRQHandler+0x6a4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d031      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a23      	ldr	r2, [pc, #140]	; (8003fe4 <HAL_DMA_IRQHandler+0x6a8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d02c      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a22      	ldr	r2, [pc, #136]	; (8003fe8 <HAL_DMA_IRQHandler+0x6ac>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d027      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a20      	ldr	r2, [pc, #128]	; (8003fec <HAL_DMA_IRQHandler+0x6b0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d022      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <HAL_DMA_IRQHandler+0x6b4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d01d      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <HAL_DMA_IRQHandler+0x6b8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d018      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1c      	ldr	r2, [pc, #112]	; (8003ff8 <HAL_DMA_IRQHandler+0x6bc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <HAL_DMA_IRQHandler+0x6c0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00e      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a19      	ldr	r2, [pc, #100]	; (8004000 <HAL_DMA_IRQHandler+0x6c4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	; (8004004 <HAL_DMA_IRQHandler+0x6c8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x678>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a16      	ldr	r2, [pc, #88]	; (8004008 <HAL_DMA_IRQHandler+0x6cc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d12b      	bne.n	800400c <HAL_DMA_IRQHandler+0x6d0>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e02a      	b.n	8004020 <HAL_DMA_IRQHandler+0x6e4>
 8003fca:	bf00      	nop
 8003fcc:	40020010 	.word	0x40020010
 8003fd0:	40020028 	.word	0x40020028
 8003fd4:	40020040 	.word	0x40020040
 8003fd8:	40020058 	.word	0x40020058
 8003fdc:	40020070 	.word	0x40020070
 8003fe0:	40020088 	.word	0x40020088
 8003fe4:	400200a0 	.word	0x400200a0
 8003fe8:	400200b8 	.word	0x400200b8
 8003fec:	40020410 	.word	0x40020410
 8003ff0:	40020428 	.word	0x40020428
 8003ff4:	40020440 	.word	0x40020440
 8003ff8:	40020458 	.word	0x40020458
 8003ffc:	40020470 	.word	0x40020470
 8004000:	40020488 	.word	0x40020488
 8004004:	400204a0 	.word	0x400204a0
 8004008:	400204b8 	.word	0x400204b8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf14      	ite	ne
 800401a:	2301      	movne	r3, #1
 800401c:	2300      	moveq	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8087 	beq.w	8004134 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	2220      	movs	r2, #32
 8004030:	409a      	lsls	r2, r3
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b04      	cmp	r3, #4
 8004040:	d139      	bne.n	80040b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0216 	bic.w	r2, r2, #22
 8004050:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004060:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <HAL_DMA_IRQHandler+0x736>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0208 	bic.w	r2, r2, #8
 8004080:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	223f      	movs	r2, #63	; 0x3f
 800408c:	409a      	lsls	r2, r3
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8382 	beq.w	80047b0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
          }
          return;
 80040b4:	e37c      	b.n	80047b0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d018      	beq.n	80040f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d108      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d02c      	beq.n	8004134 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
 80040e2:	e027      	b.n	8004134 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d023      	beq.n	8004134 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
 80040f4:	e01e      	b.n	8004134 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10f      	bne.n	8004124 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0210 	bic.w	r2, r2, #16
 8004112:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 833e 	beq.w	80047ba <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8088 	beq.w	800425c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2204      	movs	r2, #4
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a89      	ldr	r2, [pc, #548]	; (8004380 <HAL_DMA_IRQHandler+0xa44>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d04a      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a88      	ldr	r2, [pc, #544]	; (8004384 <HAL_DMA_IRQHandler+0xa48>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d045      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a86      	ldr	r2, [pc, #536]	; (8004388 <HAL_DMA_IRQHandler+0xa4c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d040      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a85      	ldr	r2, [pc, #532]	; (800438c <HAL_DMA_IRQHandler+0xa50>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d03b      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a83      	ldr	r2, [pc, #524]	; (8004390 <HAL_DMA_IRQHandler+0xa54>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d036      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a82      	ldr	r2, [pc, #520]	; (8004394 <HAL_DMA_IRQHandler+0xa58>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d031      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a80      	ldr	r2, [pc, #512]	; (8004398 <HAL_DMA_IRQHandler+0xa5c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d02c      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7f      	ldr	r2, [pc, #508]	; (800439c <HAL_DMA_IRQHandler+0xa60>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d027      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a7d      	ldr	r2, [pc, #500]	; (80043a0 <HAL_DMA_IRQHandler+0xa64>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d022      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7c      	ldr	r2, [pc, #496]	; (80043a4 <HAL_DMA_IRQHandler+0xa68>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d01d      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a7a      	ldr	r2, [pc, #488]	; (80043a8 <HAL_DMA_IRQHandler+0xa6c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d018      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a79      	ldr	r2, [pc, #484]	; (80043ac <HAL_DMA_IRQHandler+0xa70>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a77      	ldr	r2, [pc, #476]	; (80043b0 <HAL_DMA_IRQHandler+0xa74>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00e      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a76      	ldr	r2, [pc, #472]	; (80043b4 <HAL_DMA_IRQHandler+0xa78>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d009      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a74      	ldr	r2, [pc, #464]	; (80043b8 <HAL_DMA_IRQHandler+0xa7c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d004      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x8b8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a73      	ldr	r2, [pc, #460]	; (80043bc <HAL_DMA_IRQHandler+0xa80>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d108      	bne.n	8004206 <HAL_DMA_IRQHandler+0x8ca>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0201 	bic.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e007      	b.n	8004216 <HAL_DMA_IRQHandler+0x8da>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3301      	adds	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421e:	429a      	cmp	r2, r3
 8004220:	d307      	bcc.n	8004232 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f2      	bne.n	8004216 <HAL_DMA_IRQHandler+0x8da>
 8004230:	e000      	b.n	8004234 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004232:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d004      	beq.n	800424c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2203      	movs	r2, #3
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800424a:	e003      	b.n	8004254 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 82aa 	beq.w	80047ba <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	4798      	blx	r3
 800426e:	e2a4      	b.n	80047ba <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a52      	ldr	r2, [pc, #328]	; (80043c0 <HAL_DMA_IRQHandler+0xa84>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d04a      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a51      	ldr	r2, [pc, #324]	; (80043c4 <HAL_DMA_IRQHandler+0xa88>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d045      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a4f      	ldr	r2, [pc, #316]	; (80043c8 <HAL_DMA_IRQHandler+0xa8c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d040      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a4e      	ldr	r2, [pc, #312]	; (80043cc <HAL_DMA_IRQHandler+0xa90>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d03b      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a4c      	ldr	r2, [pc, #304]	; (80043d0 <HAL_DMA_IRQHandler+0xa94>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d036      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a4b      	ldr	r2, [pc, #300]	; (80043d4 <HAL_DMA_IRQHandler+0xa98>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d031      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a49      	ldr	r2, [pc, #292]	; (80043d8 <HAL_DMA_IRQHandler+0xa9c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d02c      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a48      	ldr	r2, [pc, #288]	; (80043dc <HAL_DMA_IRQHandler+0xaa0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d027      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a46      	ldr	r2, [pc, #280]	; (80043e0 <HAL_DMA_IRQHandler+0xaa4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d022      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a45      	ldr	r2, [pc, #276]	; (80043e4 <HAL_DMA_IRQHandler+0xaa8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d01d      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a43      	ldr	r2, [pc, #268]	; (80043e8 <HAL_DMA_IRQHandler+0xaac>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a42      	ldr	r2, [pc, #264]	; (80043ec <HAL_DMA_IRQHandler+0xab0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a40      	ldr	r2, [pc, #256]	; (80043f0 <HAL_DMA_IRQHandler+0xab4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3f      	ldr	r2, [pc, #252]	; (80043f4 <HAL_DMA_IRQHandler+0xab8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3d      	ldr	r2, [pc, #244]	; (80043f8 <HAL_DMA_IRQHandler+0xabc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_DMA_IRQHandler+0x9d4>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a3c      	ldr	r2, [pc, #240]	; (80043fc <HAL_DMA_IRQHandler+0xac0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <HAL_DMA_IRQHandler+0x9d8>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <HAL_DMA_IRQHandler+0x9da>
 8004314:	2300      	movs	r3, #0
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 824f 	beq.w	80047ba <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2204      	movs	r2, #4
 800432e:	409a      	lsls	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80dd 	beq.w	80044f4 <HAL_DMA_IRQHandler+0xbb8>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80d7 	beq.w	80044f4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	2204      	movs	r2, #4
 8004350:	409a      	lsls	r2, r3
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d059      	beq.n	8004414 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d14a      	bne.n	8004400 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 8220 	beq.w	80047b4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800437c:	e21a      	b.n	80047b4 <HAL_DMA_IRQHandler+0xe78>
 800437e:	bf00      	nop
 8004380:	40020010 	.word	0x40020010
 8004384:	40020028 	.word	0x40020028
 8004388:	40020040 	.word	0x40020040
 800438c:	40020058 	.word	0x40020058
 8004390:	40020070 	.word	0x40020070
 8004394:	40020088 	.word	0x40020088
 8004398:	400200a0 	.word	0x400200a0
 800439c:	400200b8 	.word	0x400200b8
 80043a0:	40020410 	.word	0x40020410
 80043a4:	40020428 	.word	0x40020428
 80043a8:	40020440 	.word	0x40020440
 80043ac:	40020458 	.word	0x40020458
 80043b0:	40020470 	.word	0x40020470
 80043b4:	40020488 	.word	0x40020488
 80043b8:	400204a0 	.word	0x400204a0
 80043bc:	400204b8 	.word	0x400204b8
 80043c0:	48022c08 	.word	0x48022c08
 80043c4:	48022c1c 	.word	0x48022c1c
 80043c8:	48022c30 	.word	0x48022c30
 80043cc:	48022c44 	.word	0x48022c44
 80043d0:	48022c58 	.word	0x48022c58
 80043d4:	48022c6c 	.word	0x48022c6c
 80043d8:	48022c80 	.word	0x48022c80
 80043dc:	48022c94 	.word	0x48022c94
 80043e0:	58025408 	.word	0x58025408
 80043e4:	5802541c 	.word	0x5802541c
 80043e8:	58025430 	.word	0x58025430
 80043ec:	58025444 	.word	0x58025444
 80043f0:	58025458 	.word	0x58025458
 80043f4:	5802546c 	.word	0x5802546c
 80043f8:	58025480 	.word	0x58025480
 80043fc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 81d5 	beq.w	80047b4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004412:	e1cf      	b.n	80047b4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d160      	bne.n	80044e0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a7f      	ldr	r2, [pc, #508]	; (8004620 <HAL_DMA_IRQHandler+0xce4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d04a      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a7d      	ldr	r2, [pc, #500]	; (8004624 <HAL_DMA_IRQHandler+0xce8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d045      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a7c      	ldr	r2, [pc, #496]	; (8004628 <HAL_DMA_IRQHandler+0xcec>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d040      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a7a      	ldr	r2, [pc, #488]	; (800462c <HAL_DMA_IRQHandler+0xcf0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d03b      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a79      	ldr	r2, [pc, #484]	; (8004630 <HAL_DMA_IRQHandler+0xcf4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d036      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a77      	ldr	r2, [pc, #476]	; (8004634 <HAL_DMA_IRQHandler+0xcf8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d031      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a76      	ldr	r2, [pc, #472]	; (8004638 <HAL_DMA_IRQHandler+0xcfc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d02c      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a74      	ldr	r2, [pc, #464]	; (800463c <HAL_DMA_IRQHandler+0xd00>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d027      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a73      	ldr	r2, [pc, #460]	; (8004640 <HAL_DMA_IRQHandler+0xd04>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d022      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a71      	ldr	r2, [pc, #452]	; (8004644 <HAL_DMA_IRQHandler+0xd08>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d01d      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a70      	ldr	r2, [pc, #448]	; (8004648 <HAL_DMA_IRQHandler+0xd0c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d018      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a6e      	ldr	r2, [pc, #440]	; (800464c <HAL_DMA_IRQHandler+0xd10>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a6d      	ldr	r2, [pc, #436]	; (8004650 <HAL_DMA_IRQHandler+0xd14>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00e      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a6b      	ldr	r2, [pc, #428]	; (8004654 <HAL_DMA_IRQHandler+0xd18>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a6a      	ldr	r2, [pc, #424]	; (8004658 <HAL_DMA_IRQHandler+0xd1c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_DMA_IRQHandler+0xb82>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a68      	ldr	r2, [pc, #416]	; (800465c <HAL_DMA_IRQHandler+0xd20>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d108      	bne.n	80044d0 <HAL_DMA_IRQHandler+0xb94>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0208 	bic.w	r2, r2, #8
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	e007      	b.n	80044e0 <HAL_DMA_IRQHandler+0xba4>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0204 	bic.w	r2, r2, #4
 80044de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8165 	beq.w	80047b4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f2:	e15f      	b.n	80047b4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2202      	movs	r2, #2
 80044fe:	409a      	lsls	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80c5 	beq.w	8004694 <HAL_DMA_IRQHandler+0xd58>
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80bf 	beq.w	8004694 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2202      	movs	r2, #2
 8004520:	409a      	lsls	r2, r3
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d018      	beq.n	8004562 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 813a 	beq.w	80047b8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800454c:	e134      	b.n	80047b8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8130 	beq.w	80047b8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004560:	e12a      	b.n	80047b8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	f040 8089 	bne.w	8004680 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2b      	ldr	r2, [pc, #172]	; (8004620 <HAL_DMA_IRQHandler+0xce4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d04a      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a29      	ldr	r2, [pc, #164]	; (8004624 <HAL_DMA_IRQHandler+0xce8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d045      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a28      	ldr	r2, [pc, #160]	; (8004628 <HAL_DMA_IRQHandler+0xcec>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d040      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a26      	ldr	r2, [pc, #152]	; (800462c <HAL_DMA_IRQHandler+0xcf0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d03b      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a25      	ldr	r2, [pc, #148]	; (8004630 <HAL_DMA_IRQHandler+0xcf4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d036      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a23      	ldr	r2, [pc, #140]	; (8004634 <HAL_DMA_IRQHandler+0xcf8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d031      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a22      	ldr	r2, [pc, #136]	; (8004638 <HAL_DMA_IRQHandler+0xcfc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d02c      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a20      	ldr	r2, [pc, #128]	; (800463c <HAL_DMA_IRQHandler+0xd00>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d027      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <HAL_DMA_IRQHandler+0xd04>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d022      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <HAL_DMA_IRQHandler+0xd08>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01d      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <HAL_DMA_IRQHandler+0xd0c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d018      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1a      	ldr	r2, [pc, #104]	; (800464c <HAL_DMA_IRQHandler+0xd10>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d013      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_DMA_IRQHandler+0xd14>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a17      	ldr	r2, [pc, #92]	; (8004654 <HAL_DMA_IRQHandler+0xd18>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d009      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a16      	ldr	r2, [pc, #88]	; (8004658 <HAL_DMA_IRQHandler+0xd1c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_DMA_IRQHandler+0xcd2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a14      	ldr	r2, [pc, #80]	; (800465c <HAL_DMA_IRQHandler+0xd20>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d128      	bne.n	8004660 <HAL_DMA_IRQHandler+0xd24>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0214 	bic.w	r2, r2, #20
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	e027      	b.n	8004670 <HAL_DMA_IRQHandler+0xd34>
 8004620:	40020010 	.word	0x40020010
 8004624:	40020028 	.word	0x40020028
 8004628:	40020040 	.word	0x40020040
 800462c:	40020058 	.word	0x40020058
 8004630:	40020070 	.word	0x40020070
 8004634:	40020088 	.word	0x40020088
 8004638:	400200a0 	.word	0x400200a0
 800463c:	400200b8 	.word	0x400200b8
 8004640:	40020410 	.word	0x40020410
 8004644:	40020428 	.word	0x40020428
 8004648:	40020440 	.word	0x40020440
 800464c:	40020458 	.word	0x40020458
 8004650:	40020470 	.word	0x40020470
 8004654:	40020488 	.word	0x40020488
 8004658:	400204a0 	.word	0x400204a0
 800465c:	400204b8 	.word	0x400204b8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 020a 	bic.w	r2, r2, #10
 800466e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8097 	beq.w	80047b8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004692:	e091      	b.n	80047b8 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	2208      	movs	r2, #8
 800469e:	409a      	lsls	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8088 	beq.w	80047ba <HAL_DMA_IRQHandler+0xe7e>
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8082 	beq.w	80047ba <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a41      	ldr	r2, [pc, #260]	; (80047c0 <HAL_DMA_IRQHandler+0xe84>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d04a      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a3f      	ldr	r2, [pc, #252]	; (80047c4 <HAL_DMA_IRQHandler+0xe88>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d045      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3e      	ldr	r2, [pc, #248]	; (80047c8 <HAL_DMA_IRQHandler+0xe8c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d040      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a3c      	ldr	r2, [pc, #240]	; (80047cc <HAL_DMA_IRQHandler+0xe90>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d03b      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3b      	ldr	r2, [pc, #236]	; (80047d0 <HAL_DMA_IRQHandler+0xe94>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d036      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a39      	ldr	r2, [pc, #228]	; (80047d4 <HAL_DMA_IRQHandler+0xe98>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d031      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a38      	ldr	r2, [pc, #224]	; (80047d8 <HAL_DMA_IRQHandler+0xe9c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d02c      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a36      	ldr	r2, [pc, #216]	; (80047dc <HAL_DMA_IRQHandler+0xea0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d027      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a35      	ldr	r2, [pc, #212]	; (80047e0 <HAL_DMA_IRQHandler+0xea4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d022      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a33      	ldr	r2, [pc, #204]	; (80047e4 <HAL_DMA_IRQHandler+0xea8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01d      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a32      	ldr	r2, [pc, #200]	; (80047e8 <HAL_DMA_IRQHandler+0xeac>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d018      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a30      	ldr	r2, [pc, #192]	; (80047ec <HAL_DMA_IRQHandler+0xeb0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a2f      	ldr	r2, [pc, #188]	; (80047f0 <HAL_DMA_IRQHandler+0xeb4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2d      	ldr	r2, [pc, #180]	; (80047f4 <HAL_DMA_IRQHandler+0xeb8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2c      	ldr	r2, [pc, #176]	; (80047f8 <HAL_DMA_IRQHandler+0xebc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_DMA_IRQHandler+0xe1a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <HAL_DMA_IRQHandler+0xec0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d108      	bne.n	8004768 <HAL_DMA_IRQHandler+0xe2c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 021c 	bic.w	r2, r2, #28
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e007      	b.n	8004778 <HAL_DMA_IRQHandler+0xe3c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 020e 	bic.w	r2, r2, #14
 8004776:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	2201      	movs	r2, #1
 8004782:	409a      	lsls	r2, r3
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d009      	beq.n	80047ba <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	4798      	blx	r3
 80047ae:	e004      	b.n	80047ba <HAL_DMA_IRQHandler+0xe7e>
          return;
 80047b0:	bf00      	nop
 80047b2:	e002      	b.n	80047ba <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047b4:	bf00      	nop
 80047b6:	e000      	b.n	80047ba <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047ba:	3728      	adds	r7, #40	; 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40020010 	.word	0x40020010
 80047c4:	40020028 	.word	0x40020028
 80047c8:	40020040 	.word	0x40020040
 80047cc:	40020058 	.word	0x40020058
 80047d0:	40020070 	.word	0x40020070
 80047d4:	40020088 	.word	0x40020088
 80047d8:	400200a0 	.word	0x400200a0
 80047dc:	400200b8 	.word	0x400200b8
 80047e0:	40020410 	.word	0x40020410
 80047e4:	40020428 	.word	0x40020428
 80047e8:	40020440 	.word	0x40020440
 80047ec:	40020458 	.word	0x40020458
 80047f0:	40020470 	.word	0x40020470
 80047f4:	40020488 	.word	0x40020488
 80047f8:	400204a0 	.word	0x400204a0
 80047fc:	400204b8 	.word	0x400204b8

08004800 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004812:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7f      	ldr	r2, [pc, #508]	; (8004a1c <DMA_SetConfig+0x21c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d072      	beq.n	800490a <DMA_SetConfig+0x10a>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a7d      	ldr	r2, [pc, #500]	; (8004a20 <DMA_SetConfig+0x220>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d06d      	beq.n	800490a <DMA_SetConfig+0x10a>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7c      	ldr	r2, [pc, #496]	; (8004a24 <DMA_SetConfig+0x224>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d068      	beq.n	800490a <DMA_SetConfig+0x10a>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a7a      	ldr	r2, [pc, #488]	; (8004a28 <DMA_SetConfig+0x228>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d063      	beq.n	800490a <DMA_SetConfig+0x10a>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a79      	ldr	r2, [pc, #484]	; (8004a2c <DMA_SetConfig+0x22c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d05e      	beq.n	800490a <DMA_SetConfig+0x10a>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a77      	ldr	r2, [pc, #476]	; (8004a30 <DMA_SetConfig+0x230>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d059      	beq.n	800490a <DMA_SetConfig+0x10a>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a76      	ldr	r2, [pc, #472]	; (8004a34 <DMA_SetConfig+0x234>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d054      	beq.n	800490a <DMA_SetConfig+0x10a>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a74      	ldr	r2, [pc, #464]	; (8004a38 <DMA_SetConfig+0x238>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d04f      	beq.n	800490a <DMA_SetConfig+0x10a>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a73      	ldr	r2, [pc, #460]	; (8004a3c <DMA_SetConfig+0x23c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d04a      	beq.n	800490a <DMA_SetConfig+0x10a>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a71      	ldr	r2, [pc, #452]	; (8004a40 <DMA_SetConfig+0x240>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d045      	beq.n	800490a <DMA_SetConfig+0x10a>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a70      	ldr	r2, [pc, #448]	; (8004a44 <DMA_SetConfig+0x244>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d040      	beq.n	800490a <DMA_SetConfig+0x10a>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a6e      	ldr	r2, [pc, #440]	; (8004a48 <DMA_SetConfig+0x248>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d03b      	beq.n	800490a <DMA_SetConfig+0x10a>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a6d      	ldr	r2, [pc, #436]	; (8004a4c <DMA_SetConfig+0x24c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d036      	beq.n	800490a <DMA_SetConfig+0x10a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a6b      	ldr	r2, [pc, #428]	; (8004a50 <DMA_SetConfig+0x250>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d031      	beq.n	800490a <DMA_SetConfig+0x10a>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a6a      	ldr	r2, [pc, #424]	; (8004a54 <DMA_SetConfig+0x254>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d02c      	beq.n	800490a <DMA_SetConfig+0x10a>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a68      	ldr	r2, [pc, #416]	; (8004a58 <DMA_SetConfig+0x258>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d027      	beq.n	800490a <DMA_SetConfig+0x10a>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a67      	ldr	r2, [pc, #412]	; (8004a5c <DMA_SetConfig+0x25c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d022      	beq.n	800490a <DMA_SetConfig+0x10a>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a65      	ldr	r2, [pc, #404]	; (8004a60 <DMA_SetConfig+0x260>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d01d      	beq.n	800490a <DMA_SetConfig+0x10a>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a64      	ldr	r2, [pc, #400]	; (8004a64 <DMA_SetConfig+0x264>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <DMA_SetConfig+0x10a>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a62      	ldr	r2, [pc, #392]	; (8004a68 <DMA_SetConfig+0x268>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d013      	beq.n	800490a <DMA_SetConfig+0x10a>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a61      	ldr	r2, [pc, #388]	; (8004a6c <DMA_SetConfig+0x26c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <DMA_SetConfig+0x10a>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a5f      	ldr	r2, [pc, #380]	; (8004a70 <DMA_SetConfig+0x270>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <DMA_SetConfig+0x10a>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a5e      	ldr	r2, [pc, #376]	; (8004a74 <DMA_SetConfig+0x274>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <DMA_SetConfig+0x10a>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a5c      	ldr	r2, [pc, #368]	; (8004a78 <DMA_SetConfig+0x278>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <DMA_SetConfig+0x10e>
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <DMA_SetConfig+0x110>
 800490e:	2300      	movs	r3, #0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00d      	beq.n	8004930 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800491c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d004      	beq.n	8004930 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800492e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a39      	ldr	r2, [pc, #228]	; (8004a1c <DMA_SetConfig+0x21c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d04a      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a38      	ldr	r2, [pc, #224]	; (8004a20 <DMA_SetConfig+0x220>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d045      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a36      	ldr	r2, [pc, #216]	; (8004a24 <DMA_SetConfig+0x224>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d040      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a35      	ldr	r2, [pc, #212]	; (8004a28 <DMA_SetConfig+0x228>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d03b      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a33      	ldr	r2, [pc, #204]	; (8004a2c <DMA_SetConfig+0x22c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d036      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a32      	ldr	r2, [pc, #200]	; (8004a30 <DMA_SetConfig+0x230>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d031      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a30      	ldr	r2, [pc, #192]	; (8004a34 <DMA_SetConfig+0x234>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02c      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2f      	ldr	r2, [pc, #188]	; (8004a38 <DMA_SetConfig+0x238>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d027      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a2d      	ldr	r2, [pc, #180]	; (8004a3c <DMA_SetConfig+0x23c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a2c      	ldr	r2, [pc, #176]	; (8004a40 <DMA_SetConfig+0x240>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d01d      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a2a      	ldr	r2, [pc, #168]	; (8004a44 <DMA_SetConfig+0x244>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a29      	ldr	r2, [pc, #164]	; (8004a48 <DMA_SetConfig+0x248>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a27      	ldr	r2, [pc, #156]	; (8004a4c <DMA_SetConfig+0x24c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a26      	ldr	r2, [pc, #152]	; (8004a50 <DMA_SetConfig+0x250>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a24      	ldr	r2, [pc, #144]	; (8004a54 <DMA_SetConfig+0x254>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <DMA_SetConfig+0x1d0>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a23      	ldr	r2, [pc, #140]	; (8004a58 <DMA_SetConfig+0x258>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d101      	bne.n	80049d4 <DMA_SetConfig+0x1d4>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <DMA_SetConfig+0x1d6>
 80049d4:	2300      	movs	r3, #0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d059      	beq.n	8004a8e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	223f      	movs	r2, #63	; 0x3f
 80049e4:	409a      	lsls	r2, r3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d138      	bne.n	8004a7c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a1a:	e0ae      	b.n	8004b7a <DMA_SetConfig+0x37a>
 8004a1c:	40020010 	.word	0x40020010
 8004a20:	40020028 	.word	0x40020028
 8004a24:	40020040 	.word	0x40020040
 8004a28:	40020058 	.word	0x40020058
 8004a2c:	40020070 	.word	0x40020070
 8004a30:	40020088 	.word	0x40020088
 8004a34:	400200a0 	.word	0x400200a0
 8004a38:	400200b8 	.word	0x400200b8
 8004a3c:	40020410 	.word	0x40020410
 8004a40:	40020428 	.word	0x40020428
 8004a44:	40020440 	.word	0x40020440
 8004a48:	40020458 	.word	0x40020458
 8004a4c:	40020470 	.word	0x40020470
 8004a50:	40020488 	.word	0x40020488
 8004a54:	400204a0 	.word	0x400204a0
 8004a58:	400204b8 	.word	0x400204b8
 8004a5c:	58025408 	.word	0x58025408
 8004a60:	5802541c 	.word	0x5802541c
 8004a64:	58025430 	.word	0x58025430
 8004a68:	58025444 	.word	0x58025444
 8004a6c:	58025458 	.word	0x58025458
 8004a70:	5802546c 	.word	0x5802546c
 8004a74:	58025480 	.word	0x58025480
 8004a78:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	60da      	str	r2, [r3, #12]
}
 8004a8c:	e075      	b.n	8004b7a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a3d      	ldr	r2, [pc, #244]	; (8004b88 <DMA_SetConfig+0x388>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d04a      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a3b      	ldr	r2, [pc, #236]	; (8004b8c <DMA_SetConfig+0x38c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d045      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a3a      	ldr	r2, [pc, #232]	; (8004b90 <DMA_SetConfig+0x390>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d040      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a38      	ldr	r2, [pc, #224]	; (8004b94 <DMA_SetConfig+0x394>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d03b      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a37      	ldr	r2, [pc, #220]	; (8004b98 <DMA_SetConfig+0x398>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d036      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a35      	ldr	r2, [pc, #212]	; (8004b9c <DMA_SetConfig+0x39c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d031      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a34      	ldr	r2, [pc, #208]	; (8004ba0 <DMA_SetConfig+0x3a0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d02c      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a32      	ldr	r2, [pc, #200]	; (8004ba4 <DMA_SetConfig+0x3a4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d027      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a31      	ldr	r2, [pc, #196]	; (8004ba8 <DMA_SetConfig+0x3a8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d022      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2f      	ldr	r2, [pc, #188]	; (8004bac <DMA_SetConfig+0x3ac>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d01d      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2e      	ldr	r2, [pc, #184]	; (8004bb0 <DMA_SetConfig+0x3b0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d018      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a2c      	ldr	r2, [pc, #176]	; (8004bb4 <DMA_SetConfig+0x3b4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a2b      	ldr	r2, [pc, #172]	; (8004bb8 <DMA_SetConfig+0x3b8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00e      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <DMA_SetConfig+0x3bc>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d009      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a28      	ldr	r2, [pc, #160]	; (8004bc0 <DMA_SetConfig+0x3c0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <DMA_SetConfig+0x32e>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <DMA_SetConfig+0x3c4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d101      	bne.n	8004b32 <DMA_SetConfig+0x332>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <DMA_SetConfig+0x334>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	2201      	movs	r2, #1
 8004b42:	409a      	lsls	r2, r3
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d108      	bne.n	8004b6a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	60da      	str	r2, [r3, #12]
}
 8004b68:	e007      	b.n	8004b7a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	60da      	str	r2, [r3, #12]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	48022c08 	.word	0x48022c08
 8004b8c:	48022c1c 	.word	0x48022c1c
 8004b90:	48022c30 	.word	0x48022c30
 8004b94:	48022c44 	.word	0x48022c44
 8004b98:	48022c58 	.word	0x48022c58
 8004b9c:	48022c6c 	.word	0x48022c6c
 8004ba0:	48022c80 	.word	0x48022c80
 8004ba4:	48022c94 	.word	0x48022c94
 8004ba8:	58025408 	.word	0x58025408
 8004bac:	5802541c 	.word	0x5802541c
 8004bb0:	58025430 	.word	0x58025430
 8004bb4:	58025444 	.word	0x58025444
 8004bb8:	58025458 	.word	0x58025458
 8004bbc:	5802546c 	.word	0x5802546c
 8004bc0:	58025480 	.word	0x58025480
 8004bc4:	58025494 	.word	0x58025494

08004bc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a42      	ldr	r2, [pc, #264]	; (8004ce0 <DMA_CalcBaseAndBitshift+0x118>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d04a      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a41      	ldr	r2, [pc, #260]	; (8004ce4 <DMA_CalcBaseAndBitshift+0x11c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d045      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a3f      	ldr	r2, [pc, #252]	; (8004ce8 <DMA_CalcBaseAndBitshift+0x120>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d040      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a3e      	ldr	r2, [pc, #248]	; (8004cec <DMA_CalcBaseAndBitshift+0x124>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d03b      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a3c      	ldr	r2, [pc, #240]	; (8004cf0 <DMA_CalcBaseAndBitshift+0x128>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d036      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a3b      	ldr	r2, [pc, #236]	; (8004cf4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d031      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a39      	ldr	r2, [pc, #228]	; (8004cf8 <DMA_CalcBaseAndBitshift+0x130>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d02c      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a38      	ldr	r2, [pc, #224]	; (8004cfc <DMA_CalcBaseAndBitshift+0x134>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d027      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a36      	ldr	r2, [pc, #216]	; (8004d00 <DMA_CalcBaseAndBitshift+0x138>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d022      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a35      	ldr	r2, [pc, #212]	; (8004d04 <DMA_CalcBaseAndBitshift+0x13c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d01d      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a33      	ldr	r2, [pc, #204]	; (8004d08 <DMA_CalcBaseAndBitshift+0x140>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a32      	ldr	r2, [pc, #200]	; (8004d0c <DMA_CalcBaseAndBitshift+0x144>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a30      	ldr	r2, [pc, #192]	; (8004d10 <DMA_CalcBaseAndBitshift+0x148>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2f      	ldr	r2, [pc, #188]	; (8004d14 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2d      	ldr	r2, [pc, #180]	; (8004d18 <DMA_CalcBaseAndBitshift+0x150>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2c      	ldr	r2, [pc, #176]	; (8004d1c <DMA_CalcBaseAndBitshift+0x154>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d101      	bne.n	8004c74 <DMA_CalcBaseAndBitshift+0xac>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <DMA_CalcBaseAndBitshift+0xae>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d024      	beq.n	8004cc4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	3b10      	subs	r3, #16
 8004c82:	4a27      	ldr	r2, [pc, #156]	; (8004d20 <DMA_CalcBaseAndBitshift+0x158>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <DMA_CalcBaseAndBitshift+0x15c>)
 8004c94:	5cd3      	ldrb	r3, [r2, r3]
 8004c96:	461a      	mov	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d908      	bls.n	8004cb4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4b1f      	ldr	r3, [pc, #124]	; (8004d28 <DMA_CalcBaseAndBitshift+0x160>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	1d1a      	adds	r2, r3, #4
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	659a      	str	r2, [r3, #88]	; 0x58
 8004cb2:	e00d      	b.n	8004cd0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <DMA_CalcBaseAndBitshift+0x160>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc2:	e005      	b.n	8004cd0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	40020010 	.word	0x40020010
 8004ce4:	40020028 	.word	0x40020028
 8004ce8:	40020040 	.word	0x40020040
 8004cec:	40020058 	.word	0x40020058
 8004cf0:	40020070 	.word	0x40020070
 8004cf4:	40020088 	.word	0x40020088
 8004cf8:	400200a0 	.word	0x400200a0
 8004cfc:	400200b8 	.word	0x400200b8
 8004d00:	40020410 	.word	0x40020410
 8004d04:	40020428 	.word	0x40020428
 8004d08:	40020440 	.word	0x40020440
 8004d0c:	40020458 	.word	0x40020458
 8004d10:	40020470 	.word	0x40020470
 8004d14:	40020488 	.word	0x40020488
 8004d18:	400204a0 	.word	0x400204a0
 8004d1c:	400204b8 	.word	0x400204b8
 8004d20:	aaaaaaab 	.word	0xaaaaaaab
 8004d24:	08009578 	.word	0x08009578
 8004d28:	fffffc00 	.word	0xfffffc00

08004d2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d120      	bne.n	8004d82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d858      	bhi.n	8004dfa <DMA_CheckFifoParam+0xce>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <DMA_CheckFifoParam+0x24>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d61 	.word	0x08004d61
 8004d54:	08004d73 	.word	0x08004d73
 8004d58:	08004d61 	.word	0x08004d61
 8004d5c:	08004dfb 	.word	0x08004dfb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d048      	beq.n	8004dfe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d70:	e045      	b.n	8004dfe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d7a:	d142      	bne.n	8004e02 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d80:	e03f      	b.n	8004e02 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8a:	d123      	bne.n	8004dd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d838      	bhi.n	8004e06 <DMA_CheckFifoParam+0xda>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <DMA_CheckFifoParam+0x70>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004db3 	.word	0x08004db3
 8004da4:	08004dad 	.word	0x08004dad
 8004da8:	08004dc5 	.word	0x08004dc5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
        break;
 8004db0:	e030      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d025      	beq.n	8004e0a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dc2:	e022      	b.n	8004e0a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dcc:	d11f      	bne.n	8004e0e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dd2:	e01c      	b.n	8004e0e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d902      	bls.n	8004de2 <DMA_CheckFifoParam+0xb6>
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d003      	beq.n	8004de8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004de0:	e018      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
        break;
 8004de6:	e015      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00e      	beq.n	8004e12 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
    break;
 8004df8:	e00b      	b.n	8004e12 <DMA_CheckFifoParam+0xe6>
        break;
 8004dfa:	bf00      	nop
 8004dfc:	e00a      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        break;
 8004dfe:	bf00      	nop
 8004e00:	e008      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        break;
 8004e02:	bf00      	nop
 8004e04:	e006      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        break;
 8004e06:	bf00      	nop
 8004e08:	e004      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        break;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
    break;
 8004e12:	bf00      	nop
    }
  }

  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop

08004e24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a38      	ldr	r2, [pc, #224]	; (8004f18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d022      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a36      	ldr	r2, [pc, #216]	; (8004f1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01d      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a35      	ldr	r2, [pc, #212]	; (8004f20 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d018      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a33      	ldr	r2, [pc, #204]	; (8004f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a32      	ldr	r2, [pc, #200]	; (8004f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a30      	ldr	r2, [pc, #192]	; (8004f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2f      	ldr	r2, [pc, #188]	; (8004f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d101      	bne.n	8004e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01a      	beq.n	8004ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	3b08      	subs	r3, #8
 8004e94:	4a28      	ldr	r2, [pc, #160]	; (8004f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4b26      	ldr	r3, [pc, #152]	; (8004f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a24      	ldr	r2, [pc, #144]	; (8004f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004eb0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	2201      	movs	r2, #1
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004ec0:	e024      	b.n	8004f0c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	3b10      	subs	r3, #16
 8004eca:	4a1e      	ldr	r2, [pc, #120]	; (8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d806      	bhi.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a1b      	ldr	r2, [pc, #108]	; (8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d902      	bls.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a16      	ldr	r2, [pc, #88]	; (8004f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004efc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	2201      	movs	r2, #1
 8004f06:	409a      	lsls	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	58025408 	.word	0x58025408
 8004f1c:	5802541c 	.word	0x5802541c
 8004f20:	58025430 	.word	0x58025430
 8004f24:	58025444 	.word	0x58025444
 8004f28:	58025458 	.word	0x58025458
 8004f2c:	5802546c 	.word	0x5802546c
 8004f30:	58025480 	.word	0x58025480
 8004f34:	58025494 	.word	0x58025494
 8004f38:	cccccccd 	.word	0xcccccccd
 8004f3c:	16009600 	.word	0x16009600
 8004f40:	58025880 	.word	0x58025880
 8004f44:	aaaaaaab 	.word	0xaaaaaaab
 8004f48:	400204b8 	.word	0x400204b8
 8004f4c:	4002040f 	.word	0x4002040f
 8004f50:	10008200 	.word	0x10008200
 8004f54:	40020880 	.word	0x40020880

08004f58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d04a      	beq.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d847      	bhi.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a25      	ldr	r2, [pc, #148]	; (8005010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d022      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a24      	ldr	r2, [pc, #144]	; (8005014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d01d      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a22      	ldr	r2, [pc, #136]	; (8005018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d018      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a21      	ldr	r2, [pc, #132]	; (800501c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1f      	ldr	r2, [pc, #124]	; (8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00e      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1b      	ldr	r2, [pc, #108]	; (800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d101      	bne.n	8004fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4b17      	ldr	r3, [pc, #92]	; (8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a15      	ldr	r2, [pc, #84]	; (8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004fe0:	671a      	str	r2, [r3, #112]	; 0x70
 8004fe2:	e009      	b.n	8004ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4b14      	ldr	r3, [pc, #80]	; (8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	461a      	mov	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a11      	ldr	r2, [pc, #68]	; (800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ff6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	409a      	lsls	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	58025408 	.word	0x58025408
 8005014:	5802541c 	.word	0x5802541c
 8005018:	58025430 	.word	0x58025430
 800501c:	58025444 	.word	0x58025444
 8005020:	58025458 	.word	0x58025458
 8005024:	5802546c 	.word	0x5802546c
 8005028:	58025480 	.word	0x58025480
 800502c:	58025494 	.word	0x58025494
 8005030:	1600963f 	.word	0x1600963f
 8005034:	58025940 	.word	0x58025940
 8005038:	1000823f 	.word	0x1000823f
 800503c:	40020940 	.word	0x40020940

08005040 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b098      	sub	sp, #96	; 0x60
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005048:	4a84      	ldr	r2, [pc, #528]	; (800525c <HAL_FDCAN_Init+0x21c>)
 800504a:	f107 030c 	add.w	r3, r7, #12
 800504e:	4611      	mov	r1, r2
 8005050:	224c      	movs	r2, #76	; 0x4c
 8005052:	4618      	mov	r0, r3
 8005054:	f004 fa48 	bl	80094e8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e1c6      	b.n	80053f0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a7e      	ldr	r2, [pc, #504]	; (8005260 <HAL_FDCAN_Init+0x220>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d106      	bne.n	800507a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005074:	461a      	mov	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fb ff14 	bl	8000ebc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0210 	bic.w	r2, r2, #16
 80050a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050a4:	f7fc fb82 	bl	80017ac <HAL_GetTick>
 80050a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80050aa:	e014      	b.n	80050d6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80050ac:	f7fc fb7e 	bl	80017ac <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b0a      	cmp	r3, #10
 80050b8:	d90d      	bls.n	80050d6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050c0:	f043 0201 	orr.w	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2203      	movs	r2, #3
 80050ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e18c      	b.n	80053f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d0e3      	beq.n	80050ac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050f4:	f7fc fb5a 	bl	80017ac <HAL_GetTick>
 80050f8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80050fa:	e014      	b.n	8005126 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80050fc:	f7fc fb56 	bl	80017ac <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b0a      	cmp	r3, #10
 8005108:	d90d      	bls.n	8005126 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005110:	f043 0201 	orr.w	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2203      	movs	r2, #3
 800511e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e164      	b.n	80053f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0e3      	beq.n	80050fc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0202 	orr.w	r2, r2, #2
 8005142:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	7c1b      	ldrb	r3, [r3, #16]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d108      	bne.n	800515e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515a:	619a      	str	r2, [r3, #24]
 800515c:	e007      	b.n	800516e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800516c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	7c5b      	ldrb	r3, [r3, #17]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d108      	bne.n	8005188 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005184:	619a      	str	r2, [r3, #24]
 8005186:	e007      	b.n	8005198 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005196:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	7c9b      	ldrb	r3, [r3, #18]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d108      	bne.n	80051b2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051ae:	619a      	str	r2, [r3, #24]
 80051b0:	e007      	b.n	80051c2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051c0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80051e6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0210 	bic.w	r2, r2, #16
 80051f6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d108      	bne.n	8005212 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0204 	orr.w	r2, r2, #4
 800520e:	619a      	str	r2, [r3, #24]
 8005210:	e030      	b.n	8005274 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d02c      	beq.n	8005274 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d020      	beq.n	8005264 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005230:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0210 	orr.w	r2, r2, #16
 8005240:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d114      	bne.n	8005274 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0220 	orr.w	r2, r2, #32
 8005258:	619a      	str	r2, [r3, #24]
 800525a:	e00b      	b.n	8005274 <HAL_FDCAN_Init+0x234>
 800525c:	0800951c 	.word	0x0800951c
 8005260:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0220 	orr.w	r2, r2, #32
 8005272:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	3b01      	subs	r3, #1
 800527a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	3b01      	subs	r3, #1
 8005282:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005284:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800528c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	3b01      	subs	r3, #1
 8005296:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800529c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800529e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a8:	d115      	bne.n	80052d6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	3b01      	subs	r3, #1
 80052b6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80052b8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	3b01      	subs	r3, #1
 80052c0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80052c2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	3b01      	subs	r3, #1
 80052cc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80052d2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80052d4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fc:	4413      	add	r3, r2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d011      	beq.n	8005326 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800530a:	f023 0107 	bic.w	r1, r3, #7
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	3360      	adds	r3, #96	; 0x60
 8005316:	443b      	add	r3, r7
 8005318:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d011      	beq.n	8005352 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005336:	f023 0107 	bic.w	r1, r3, #7
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	3360      	adds	r3, #96	; 0x60
 8005342:	443b      	add	r3, r7
 8005344:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005356:	2b00      	cmp	r3, #0
 8005358:	d012      	beq.n	8005380 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005362:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	3360      	adds	r3, #96	; 0x60
 800536e:	443b      	add	r3, r7
 8005370:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005374:	011a      	lsls	r2, r3, #4
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005384:	2b00      	cmp	r3, #0
 8005386:	d012      	beq.n	80053ae <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005390:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	3360      	adds	r3, #96	; 0x60
 800539c:	443b      	add	r3, r7
 800539e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80053a2:	021a      	lsls	r2, r3, #8
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <HAL_FDCAN_Init+0x3b8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d107      	bne.n	80053c8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f022 0203 	bic.w	r2, r2, #3
 80053c6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f80b 	bl	80053fc <FDCAN_CalcultateRamBlockAddresses>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80053ec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3760      	adds	r7, #96	; 0x60
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	4000a000 	.word	0x4000a000

080053fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005408:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005412:	4ba7      	ldr	r3, [pc, #668]	; (80056b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005414:	4013      	ands	r3, r2
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	0091      	lsls	r1, r2, #2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	430b      	orrs	r3, r1
 8005420:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	041a      	lsls	r2, r3, #16
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	4413      	add	r3, r2
 8005448:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005452:	4b97      	ldr	r3, [pc, #604]	; (80056b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005454:	4013      	ands	r3, r2
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	0091      	lsls	r1, r2, #2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	430b      	orrs	r3, r1
 8005460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005474:	041a      	lsls	r2, r3, #16
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	4413      	add	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005494:	4b86      	ldr	r3, [pc, #536]	; (80056b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005496:	4013      	ands	r3, r2
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	0091      	lsls	r1, r2, #2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	430b      	orrs	r3, r1
 80054a2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	041a      	lsls	r2, r3, #16
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80054ca:	fb02 f303 	mul.w	r3, r2, r3
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80054dc:	4b74      	ldr	r3, [pc, #464]	; (80056b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80054de:	4013      	ands	r3, r2
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	0091      	lsls	r1, r2, #2
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	430b      	orrs	r3, r1
 80054ea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054f6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fe:	041a      	lsls	r2, r3, #16
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	4413      	add	r3, r2
 800551a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005524:	4b62      	ldr	r3, [pc, #392]	; (80056b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005526:	4013      	ands	r3, r2
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	0091      	lsls	r1, r2, #2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	430b      	orrs	r3, r1
 8005532:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	4413      	add	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005550:	4b57      	ldr	r3, [pc, #348]	; (80056b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005552:	4013      	ands	r3, r2
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	0091      	lsls	r1, r2, #2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	430b      	orrs	r3, r1
 800555e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800556a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005572:	041a      	lsls	r2, r3, #16
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	4413      	add	r3, r2
 8005588:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005592:	4b47      	ldr	r3, [pc, #284]	; (80056b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005594:	4013      	ands	r3, r2
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	0091      	lsls	r1, r2, #2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6812      	ldr	r2, [r2, #0]
 800559e:	430b      	orrs	r3, r1
 80055a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055ac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b4:	041a      	lsls	r2, r3, #16
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055c8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d0:	061a      	lsls	r2, r3, #24
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e0:	4b34      	ldr	r3, [pc, #208]	; (80056b4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80055e2:	4413      	add	r3, r2
 80055e4:	009a      	lsls	r2, r3, #2
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	441a      	add	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800562e:	fb01 f303 	mul.w	r3, r1, r3
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005646:	fb01 f303 	mul.w	r3, r1, r3
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	441a      	add	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	441a      	add	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a6:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d915      	bls.n	80056d8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80056ac:	e006      	b.n	80056bc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80056ae:	bf00      	nop
 80056b0:	ffff0003 	.word	0xffff0003
 80056b4:	10002b00 	.word	0x10002b00
 80056b8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2203      	movs	r2, #3
 80056d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e010      	b.n	80056fa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	e005      	b.n	80056ec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3304      	adds	r3, #4
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d3f3      	bcc.n	80056e0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop

08005708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005708:	b480      	push	{r7}
 800570a:	b089      	sub	sp, #36	; 0x24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005716:	4b89      	ldr	r3, [pc, #548]	; (800593c <HAL_GPIO_Init+0x234>)
 8005718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800571a:	e194      	b.n	8005a46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	2101      	movs	r1, #1
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	fa01 f303 	lsl.w	r3, r1, r3
 8005728:	4013      	ands	r3, r2
 800572a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 8186 	beq.w	8005a40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d005      	beq.n	800574c <HAL_GPIO_Init+0x44>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d130      	bne.n	80057ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	2203      	movs	r2, #3
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4313      	orrs	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005782:	2201      	movs	r2, #1
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43db      	mvns	r3, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4013      	ands	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	091b      	lsrs	r3, r3, #4
 8005798:	f003 0201 	and.w	r2, r3, #1
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d017      	beq.n	80057ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	2203      	movs	r2, #3
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	43db      	mvns	r3, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4013      	ands	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d123      	bne.n	800583e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	08da      	lsrs	r2, r3, #3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3208      	adds	r2, #8
 80057fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	220f      	movs	r2, #15
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	43db      	mvns	r3, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4013      	ands	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	08da      	lsrs	r2, r3, #3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3208      	adds	r2, #8
 8005838:	69b9      	ldr	r1, [r7, #24]
 800583a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	2203      	movs	r2, #3
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	43db      	mvns	r3, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4013      	ands	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f003 0203 	and.w	r2, r3, #3
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4313      	orrs	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 80e0 	beq.w	8005a40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005880:	4b2f      	ldr	r3, [pc, #188]	; (8005940 <HAL_GPIO_Init+0x238>)
 8005882:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005886:	4a2e      	ldr	r2, [pc, #184]	; (8005940 <HAL_GPIO_Init+0x238>)
 8005888:	f043 0302 	orr.w	r3, r3, #2
 800588c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005890:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <HAL_GPIO_Init+0x238>)
 8005892:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800589e:	4a29      	ldr	r2, [pc, #164]	; (8005944 <HAL_GPIO_Init+0x23c>)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	3302      	adds	r3, #2
 80058a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	220f      	movs	r2, #15
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a20      	ldr	r2, [pc, #128]	; (8005948 <HAL_GPIO_Init+0x240>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d052      	beq.n	8005970 <HAL_GPIO_Init+0x268>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1f      	ldr	r2, [pc, #124]	; (800594c <HAL_GPIO_Init+0x244>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d031      	beq.n	8005936 <HAL_GPIO_Init+0x22e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1e      	ldr	r2, [pc, #120]	; (8005950 <HAL_GPIO_Init+0x248>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d02b      	beq.n	8005932 <HAL_GPIO_Init+0x22a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1d      	ldr	r2, [pc, #116]	; (8005954 <HAL_GPIO_Init+0x24c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d025      	beq.n	800592e <HAL_GPIO_Init+0x226>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <HAL_GPIO_Init+0x250>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01f      	beq.n	800592a <HAL_GPIO_Init+0x222>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1b      	ldr	r2, [pc, #108]	; (800595c <HAL_GPIO_Init+0x254>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d019      	beq.n	8005926 <HAL_GPIO_Init+0x21e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a1a      	ldr	r2, [pc, #104]	; (8005960 <HAL_GPIO_Init+0x258>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d013      	beq.n	8005922 <HAL_GPIO_Init+0x21a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a19      	ldr	r2, [pc, #100]	; (8005964 <HAL_GPIO_Init+0x25c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00d      	beq.n	800591e <HAL_GPIO_Init+0x216>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a18      	ldr	r2, [pc, #96]	; (8005968 <HAL_GPIO_Init+0x260>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <HAL_GPIO_Init+0x212>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a17      	ldr	r2, [pc, #92]	; (800596c <HAL_GPIO_Init+0x264>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d101      	bne.n	8005916 <HAL_GPIO_Init+0x20e>
 8005912:	2309      	movs	r3, #9
 8005914:	e02d      	b.n	8005972 <HAL_GPIO_Init+0x26a>
 8005916:	230a      	movs	r3, #10
 8005918:	e02b      	b.n	8005972 <HAL_GPIO_Init+0x26a>
 800591a:	2308      	movs	r3, #8
 800591c:	e029      	b.n	8005972 <HAL_GPIO_Init+0x26a>
 800591e:	2307      	movs	r3, #7
 8005920:	e027      	b.n	8005972 <HAL_GPIO_Init+0x26a>
 8005922:	2306      	movs	r3, #6
 8005924:	e025      	b.n	8005972 <HAL_GPIO_Init+0x26a>
 8005926:	2305      	movs	r3, #5
 8005928:	e023      	b.n	8005972 <HAL_GPIO_Init+0x26a>
 800592a:	2304      	movs	r3, #4
 800592c:	e021      	b.n	8005972 <HAL_GPIO_Init+0x26a>
 800592e:	2303      	movs	r3, #3
 8005930:	e01f      	b.n	8005972 <HAL_GPIO_Init+0x26a>
 8005932:	2302      	movs	r3, #2
 8005934:	e01d      	b.n	8005972 <HAL_GPIO_Init+0x26a>
 8005936:	2301      	movs	r3, #1
 8005938:	e01b      	b.n	8005972 <HAL_GPIO_Init+0x26a>
 800593a:	bf00      	nop
 800593c:	58000080 	.word	0x58000080
 8005940:	58024400 	.word	0x58024400
 8005944:	58000400 	.word	0x58000400
 8005948:	58020000 	.word	0x58020000
 800594c:	58020400 	.word	0x58020400
 8005950:	58020800 	.word	0x58020800
 8005954:	58020c00 	.word	0x58020c00
 8005958:	58021000 	.word	0x58021000
 800595c:	58021400 	.word	0x58021400
 8005960:	58021800 	.word	0x58021800
 8005964:	58021c00 	.word	0x58021c00
 8005968:	58022000 	.word	0x58022000
 800596c:	58022400 	.word	0x58022400
 8005970:	2300      	movs	r3, #0
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	f002 0203 	and.w	r2, r2, #3
 8005978:	0092      	lsls	r2, r2, #2
 800597a:	4093      	lsls	r3, r2
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4313      	orrs	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005982:	4938      	ldr	r1, [pc, #224]	; (8005a64 <HAL_GPIO_Init+0x35c>)
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	089b      	lsrs	r3, r3, #2
 8005988:	3302      	adds	r3, #2
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	4013      	ands	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3301      	adds	r3, #1
 8005a44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f47f ae63 	bne.w	800571c <HAL_GPIO_Init+0x14>
  }
}
 8005a56:	bf00      	nop
 8005a58:	bf00      	nop
 8005a5a:	3724      	adds	r7, #36	; 0x24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	58000400 	.word	0x58000400

08005a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e07f      	b.n	8005b7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fb fae4 	bl	800105c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2224      	movs	r2, #36	; 0x24
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ab8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ac8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d107      	bne.n	8005ae2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ade:	609a      	str	r2, [r3, #8]
 8005ae0:	e006      	b.n	8005af0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d104      	bne.n	8005b02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6859      	ldr	r1, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <HAL_I2C_Init+0x11c>)
 8005b0e:	430b      	orrs	r3, r1
 8005b10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	69d9      	ldr	r1, [r3, #28]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1a      	ldr	r2, [r3, #32]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	02008000 	.word	0x02008000

08005b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d138      	bne.n	8005c10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e032      	b.n	8005c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2224      	movs	r2, #36	; 0x24
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0201 	bic.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6819      	ldr	r1, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e000      	b.n	8005c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d139      	bne.n	8005ca8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e033      	b.n	8005caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2224      	movs	r2, #36	; 0x24
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0201 	bic.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e000      	b.n	8005caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005cc0:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <HAL_PWREx_ConfigSupply+0x70>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d00a      	beq.n	8005ce2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ccc:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <HAL_PWREx_ConfigSupply+0x70>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d001      	beq.n	8005cde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e01f      	b.n	8005d1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e01d      	b.n	8005d1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ce2:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <HAL_PWREx_ConfigSupply+0x70>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f023 0207 	bic.w	r2, r3, #7
 8005cea:	490f      	ldr	r1, [pc, #60]	; (8005d28 <HAL_PWREx_ConfigSupply+0x70>)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cf2:	f7fb fd5b 	bl	80017ac <HAL_GetTick>
 8005cf6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cf8:	e009      	b.n	8005d0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cfa:	f7fb fd57 	bl	80017ac <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d08:	d901      	bls.n	8005d0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e007      	b.n	8005d1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <HAL_PWREx_ConfigSupply+0x70>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d1a:	d1ee      	bne.n	8005cfa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	58024800 	.word	0x58024800

08005d2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	; 0x30
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d102      	bne.n	8005d40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f000 bc1f 	b.w	800657e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 80b3 	beq.w	8005eb4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d4e:	4b95      	ldr	r3, [pc, #596]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d58:	4b92      	ldr	r3, [pc, #584]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	2b10      	cmp	r3, #16
 8005d62:	d007      	beq.n	8005d74 <HAL_RCC_OscConfig+0x48>
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	2b18      	cmp	r3, #24
 8005d68:	d112      	bne.n	8005d90 <HAL_RCC_OscConfig+0x64>
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d10d      	bne.n	8005d90 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d74:	4b8b      	ldr	r3, [pc, #556]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8098 	beq.w	8005eb2 <HAL_RCC_OscConfig+0x186>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f040 8093 	bne.w	8005eb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e3f6      	b.n	800657e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d98:	d106      	bne.n	8005da8 <HAL_RCC_OscConfig+0x7c>
 8005d9a:	4b82      	ldr	r3, [pc, #520]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a81      	ldr	r2, [pc, #516]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	e058      	b.n	8005e5a <HAL_RCC_OscConfig+0x12e>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d112      	bne.n	8005dd6 <HAL_RCC_OscConfig+0xaa>
 8005db0:	4b7c      	ldr	r3, [pc, #496]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a7b      	ldr	r2, [pc, #492]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	4b79      	ldr	r3, [pc, #484]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a78      	ldr	r2, [pc, #480]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005dc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	4b76      	ldr	r3, [pc, #472]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a75      	ldr	r2, [pc, #468]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	e041      	b.n	8005e5a <HAL_RCC_OscConfig+0x12e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dde:	d112      	bne.n	8005e06 <HAL_RCC_OscConfig+0xda>
 8005de0:	4b70      	ldr	r3, [pc, #448]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a6f      	ldr	r2, [pc, #444]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	4b6d      	ldr	r3, [pc, #436]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a6c      	ldr	r2, [pc, #432]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005df2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	4b6a      	ldr	r3, [pc, #424]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a69      	ldr	r2, [pc, #420]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	e029      	b.n	8005e5a <HAL_RCC_OscConfig+0x12e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005e0e:	d112      	bne.n	8005e36 <HAL_RCC_OscConfig+0x10a>
 8005e10:	4b64      	ldr	r3, [pc, #400]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a63      	ldr	r2, [pc, #396]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	4b61      	ldr	r3, [pc, #388]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a60      	ldr	r2, [pc, #384]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	4b5e      	ldr	r3, [pc, #376]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a5d      	ldr	r2, [pc, #372]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	e011      	b.n	8005e5a <HAL_RCC_OscConfig+0x12e>
 8005e36:	4b5b      	ldr	r3, [pc, #364]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a5a      	ldr	r2, [pc, #360]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	4b58      	ldr	r3, [pc, #352]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a57      	ldr	r2, [pc, #348]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4b55      	ldr	r3, [pc, #340]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a54      	ldr	r2, [pc, #336]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d013      	beq.n	8005e8a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f7fb fca3 	bl	80017ac <HAL_GetTick>
 8005e66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e6a:	f7fb fc9f 	bl	80017ac <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b64      	cmp	r3, #100	; 0x64
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e380      	b.n	800657e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e7c:	4b49      	ldr	r3, [pc, #292]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCC_OscConfig+0x13e>
 8005e88:	e014      	b.n	8005eb4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8a:	f7fb fc8f 	bl	80017ac <HAL_GetTick>
 8005e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e92:	f7fb fc8b 	bl	80017ac <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b64      	cmp	r3, #100	; 0x64
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e36c      	b.n	800657e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ea4:	4b3f      	ldr	r3, [pc, #252]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f0      	bne.n	8005e92 <HAL_RCC_OscConfig+0x166>
 8005eb0:	e000      	b.n	8005eb4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 808c 	beq.w	8005fda <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ec2:	4b38      	ldr	r3, [pc, #224]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ecc:	4b35      	ldr	r3, [pc, #212]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x1bc>
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	2b18      	cmp	r3, #24
 8005edc:	d137      	bne.n	8005f4e <HAL_RCC_OscConfig+0x222>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d132      	bne.n	8005f4e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ee8:	4b2e      	ldr	r3, [pc, #184]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCC_OscConfig+0x1d4>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e33e      	b.n	800657e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f00:	4b28      	ldr	r3, [pc, #160]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f023 0219 	bic.w	r2, r3, #25
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4925      	ldr	r1, [pc, #148]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f12:	f7fb fc4b 	bl	80017ac <HAL_GetTick>
 8005f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f1a:	f7fb fc47 	bl	80017ac <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e328      	b.n	800657e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f2c:	4b1d      	ldr	r3, [pc, #116]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f0      	beq.n	8005f1a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f38:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	061b      	lsls	r3, r3, #24
 8005f46:	4917      	ldr	r1, [pc, #92]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f4c:	e045      	b.n	8005fda <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d028      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f56:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 0219 	bic.w	r2, r3, #25
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	4910      	ldr	r1, [pc, #64]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f68:	f7fb fc20 	bl	80017ac <HAL_GetTick>
 8005f6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f70:	f7fb fc1c 	bl	80017ac <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e2fd      	b.n	800657e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	061b      	lsls	r3, r3, #24
 8005f9c:	4901      	ldr	r1, [pc, #4]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	604b      	str	r3, [r1, #4]
 8005fa2:	e01a      	b.n	8005fda <HAL_RCC_OscConfig+0x2ae>
 8005fa4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa8:	4b97      	ldr	r3, [pc, #604]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a96      	ldr	r2, [pc, #600]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8005fae:	f023 0301 	bic.w	r3, r3, #1
 8005fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb4:	f7fb fbfa 	bl	80017ac <HAL_GetTick>
 8005fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fbc:	f7fb fbf6 	bl	80017ac <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e2d7      	b.n	800657e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fce:	4b8e      	ldr	r3, [pc, #568]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d06a      	beq.n	80060bc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fe6:	4b88      	ldr	r3, [pc, #544]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ff0:	4b85      	ldr	r3, [pc, #532]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d007      	beq.n	800600c <HAL_RCC_OscConfig+0x2e0>
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b18      	cmp	r3, #24
 8006000:	d11b      	bne.n	800603a <HAL_RCC_OscConfig+0x30e>
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d116      	bne.n	800603a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800600c:	4b7e      	ldr	r3, [pc, #504]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <HAL_RCC_OscConfig+0x2f8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	2b80      	cmp	r3, #128	; 0x80
 800601e:	d001      	beq.n	8006024 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e2ac      	b.n	800657e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006024:	4b78      	ldr	r3, [pc, #480]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	061b      	lsls	r3, r3, #24
 8006032:	4975      	ldr	r1, [pc, #468]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006034:	4313      	orrs	r3, r2
 8006036:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006038:	e040      	b.n	80060bc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d023      	beq.n	800608a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006042:	4b71      	ldr	r3, [pc, #452]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a70      	ldr	r2, [pc, #448]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604e:	f7fb fbad 	bl	80017ac <HAL_GetTick>
 8006052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006054:	e008      	b.n	8006068 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006056:	f7fb fba9 	bl	80017ac <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e28a      	b.n	800657e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006068:	4b67      	ldr	r3, [pc, #412]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f0      	beq.n	8006056 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006074:	4b64      	ldr	r3, [pc, #400]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	061b      	lsls	r3, r3, #24
 8006082:	4961      	ldr	r1, [pc, #388]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006084:	4313      	orrs	r3, r2
 8006086:	60cb      	str	r3, [r1, #12]
 8006088:	e018      	b.n	80060bc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800608a:	4b5f      	ldr	r3, [pc, #380]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a5e      	ldr	r2, [pc, #376]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006096:	f7fb fb89 	bl	80017ac <HAL_GetTick>
 800609a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800609e:	f7fb fb85 	bl	80017ac <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e266      	b.n	800657e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060b0:	4b55      	ldr	r3, [pc, #340]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f0      	bne.n	800609e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d036      	beq.n	8006136 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d019      	beq.n	8006104 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060d0:	4b4d      	ldr	r3, [pc, #308]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 80060d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d4:	4a4c      	ldr	r2, [pc, #304]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 80060d6:	f043 0301 	orr.w	r3, r3, #1
 80060da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060dc:	f7fb fb66 	bl	80017ac <HAL_GetTick>
 80060e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e4:	f7fb fb62 	bl	80017ac <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e243      	b.n	800657e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060f6:	4b44      	ldr	r3, [pc, #272]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 80060f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x3b8>
 8006102:	e018      	b.n	8006136 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006104:	4b40      	ldr	r3, [pc, #256]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006108:	4a3f      	ldr	r2, [pc, #252]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 800610a:	f023 0301 	bic.w	r3, r3, #1
 800610e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006110:	f7fb fb4c 	bl	80017ac <HAL_GetTick>
 8006114:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006118:	f7fb fb48 	bl	80017ac <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e229      	b.n	800657e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800612a:	4b37      	ldr	r3, [pc, #220]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 800612c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f0      	bne.n	8006118 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d036      	beq.n	80061b0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d019      	beq.n	800617e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800614a:	4b2f      	ldr	r3, [pc, #188]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a2e      	ldr	r2, [pc, #184]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006150:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006154:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006156:	f7fb fb29 	bl	80017ac <HAL_GetTick>
 800615a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800615e:	f7fb fb25 	bl	80017ac <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e206      	b.n	800657e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006170:	4b25      	ldr	r3, [pc, #148]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0f0      	beq.n	800615e <HAL_RCC_OscConfig+0x432>
 800617c:	e018      	b.n	80061b0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800617e:	4b22      	ldr	r3, [pc, #136]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a21      	ldr	r2, [pc, #132]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 8006184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006188:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800618a:	f7fb fb0f 	bl	80017ac <HAL_GetTick>
 800618e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006192:	f7fb fb0b 	bl	80017ac <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e1ec      	b.n	800657e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061a4:	4b18      	ldr	r3, [pc, #96]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1f0      	bne.n	8006192 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80af 	beq.w	800631c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <HAL_RCC_OscConfig+0x4e0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a12      	ldr	r2, [pc, #72]	; (800620c <HAL_RCC_OscConfig+0x4e0>)
 80061c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061ca:	f7fb faef 	bl	80017ac <HAL_GetTick>
 80061ce:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d2:	f7fb faeb 	bl	80017ac <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b64      	cmp	r3, #100	; 0x64
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e1cc      	b.n	800657e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061e4:	4b09      	ldr	r3, [pc, #36]	; (800620c <HAL_RCC_OscConfig+0x4e0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0f0      	beq.n	80061d2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d10b      	bne.n	8006210 <HAL_RCC_OscConfig+0x4e4>
 80061f8:	4b03      	ldr	r3, [pc, #12]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 80061fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fc:	4a02      	ldr	r2, [pc, #8]	; (8006208 <HAL_RCC_OscConfig+0x4dc>)
 80061fe:	f043 0301 	orr.w	r3, r3, #1
 8006202:	6713      	str	r3, [r2, #112]	; 0x70
 8006204:	e05b      	b.n	80062be <HAL_RCC_OscConfig+0x592>
 8006206:	bf00      	nop
 8006208:	58024400 	.word	0x58024400
 800620c:	58024800 	.word	0x58024800
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d112      	bne.n	800623e <HAL_RCC_OscConfig+0x512>
 8006218:	4b9d      	ldr	r3, [pc, #628]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800621a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621c:	4a9c      	ldr	r2, [pc, #624]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	6713      	str	r3, [r2, #112]	; 0x70
 8006224:	4b9a      	ldr	r3, [pc, #616]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006228:	4a99      	ldr	r2, [pc, #612]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800622a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622e:	6713      	str	r3, [r2, #112]	; 0x70
 8006230:	4b97      	ldr	r3, [pc, #604]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006234:	4a96      	ldr	r2, [pc, #600]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006236:	f023 0304 	bic.w	r3, r3, #4
 800623a:	6713      	str	r3, [r2, #112]	; 0x70
 800623c:	e03f      	b.n	80062be <HAL_RCC_OscConfig+0x592>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b05      	cmp	r3, #5
 8006244:	d112      	bne.n	800626c <HAL_RCC_OscConfig+0x540>
 8006246:	4b92      	ldr	r3, [pc, #584]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	4a91      	ldr	r2, [pc, #580]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800624c:	f043 0304 	orr.w	r3, r3, #4
 8006250:	6713      	str	r3, [r2, #112]	; 0x70
 8006252:	4b8f      	ldr	r3, [pc, #572]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	4a8e      	ldr	r2, [pc, #568]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800625c:	6713      	str	r3, [r2, #112]	; 0x70
 800625e:	4b8c      	ldr	r3, [pc, #560]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006262:	4a8b      	ldr	r2, [pc, #556]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006264:	f043 0301 	orr.w	r3, r3, #1
 8006268:	6713      	str	r3, [r2, #112]	; 0x70
 800626a:	e028      	b.n	80062be <HAL_RCC_OscConfig+0x592>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b85      	cmp	r3, #133	; 0x85
 8006272:	d112      	bne.n	800629a <HAL_RCC_OscConfig+0x56e>
 8006274:	4b86      	ldr	r3, [pc, #536]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006278:	4a85      	ldr	r2, [pc, #532]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800627a:	f043 0304 	orr.w	r3, r3, #4
 800627e:	6713      	str	r3, [r2, #112]	; 0x70
 8006280:	4b83      	ldr	r3, [pc, #524]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	4a82      	ldr	r2, [pc, #520]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628a:	6713      	str	r3, [r2, #112]	; 0x70
 800628c:	4b80      	ldr	r3, [pc, #512]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800628e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006290:	4a7f      	ldr	r2, [pc, #508]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	6713      	str	r3, [r2, #112]	; 0x70
 8006298:	e011      	b.n	80062be <HAL_RCC_OscConfig+0x592>
 800629a:	4b7d      	ldr	r3, [pc, #500]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	4a7c      	ldr	r2, [pc, #496]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	6713      	str	r3, [r2, #112]	; 0x70
 80062a6:	4b7a      	ldr	r3, [pc, #488]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	4a79      	ldr	r2, [pc, #484]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80062ac:	f023 0304 	bic.w	r3, r3, #4
 80062b0:	6713      	str	r3, [r2, #112]	; 0x70
 80062b2:	4b77      	ldr	r3, [pc, #476]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	4a76      	ldr	r2, [pc, #472]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80062b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d015      	beq.n	80062f2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c6:	f7fb fa71 	bl	80017ac <HAL_GetTick>
 80062ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062cc:	e00a      	b.n	80062e4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ce:	f7fb fa6d 	bl	80017ac <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062dc:	4293      	cmp	r3, r2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e14c      	b.n	800657e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062e4:	4b6a      	ldr	r3, [pc, #424]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80062e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0ee      	beq.n	80062ce <HAL_RCC_OscConfig+0x5a2>
 80062f0:	e014      	b.n	800631c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f2:	f7fb fa5b 	bl	80017ac <HAL_GetTick>
 80062f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062f8:	e00a      	b.n	8006310 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062fa:	f7fb fa57 	bl	80017ac <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	f241 3288 	movw	r2, #5000	; 0x1388
 8006308:	4293      	cmp	r3, r2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e136      	b.n	800657e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006310:	4b5f      	ldr	r3, [pc, #380]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1ee      	bne.n	80062fa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 812b 	beq.w	800657c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006326:	4b5a      	ldr	r3, [pc, #360]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800632e:	2b18      	cmp	r3, #24
 8006330:	f000 80bb 	beq.w	80064aa <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	2b02      	cmp	r3, #2
 800633a:	f040 8095 	bne.w	8006468 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800633e:	4b54      	ldr	r3, [pc, #336]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a53      	ldr	r2, [pc, #332]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634a:	f7fb fa2f 	bl	80017ac <HAL_GetTick>
 800634e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006352:	f7fb fa2b 	bl	80017ac <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e10c      	b.n	800657e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006364:	4b4a      	ldr	r3, [pc, #296]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f0      	bne.n	8006352 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006370:	4b47      	ldr	r3, [pc, #284]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006374:	4b47      	ldr	r3, [pc, #284]	; (8006494 <HAL_RCC_OscConfig+0x768>)
 8006376:	4013      	ands	r3, r2
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006380:	0112      	lsls	r2, r2, #4
 8006382:	430a      	orrs	r2, r1
 8006384:	4942      	ldr	r1, [pc, #264]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006386:	4313      	orrs	r3, r2
 8006388:	628b      	str	r3, [r1, #40]	; 0x28
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	3b01      	subs	r3, #1
 8006390:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006398:	3b01      	subs	r3, #1
 800639a:	025b      	lsls	r3, r3, #9
 800639c:	b29b      	uxth	r3, r3
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	3b01      	subs	r3, #1
 80063a6:	041b      	lsls	r3, r3, #16
 80063a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	3b01      	subs	r3, #1
 80063b4:	061b      	lsls	r3, r3, #24
 80063b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063ba:	4935      	ldr	r1, [pc, #212]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80063c0:	4b33      	ldr	r3, [pc, #204]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	4a32      	ldr	r2, [pc, #200]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80063c6:	f023 0301 	bic.w	r3, r3, #1
 80063ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063cc:	4b30      	ldr	r3, [pc, #192]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80063ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d0:	4b31      	ldr	r3, [pc, #196]	; (8006498 <HAL_RCC_OscConfig+0x76c>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063d8:	00d2      	lsls	r2, r2, #3
 80063da:	492d      	ldr	r1, [pc, #180]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063e0:	4b2b      	ldr	r3, [pc, #172]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	f023 020c 	bic.w	r2, r3, #12
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	4928      	ldr	r1, [pc, #160]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063f2:	4b27      	ldr	r3, [pc, #156]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	f023 0202 	bic.w	r2, r3, #2
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fe:	4924      	ldr	r1, [pc, #144]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006400:	4313      	orrs	r3, r2
 8006402:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006404:	4b22      	ldr	r3, [pc, #136]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4a21      	ldr	r2, [pc, #132]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800640a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006410:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800641a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800641c:	4b1c      	ldr	r3, [pc, #112]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	4a1b      	ldr	r2, [pc, #108]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006422:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006426:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006428:	4b19      	ldr	r3, [pc, #100]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	4a18      	ldr	r2, [pc, #96]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006434:	4b16      	ldr	r3, [pc, #88]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a15      	ldr	r2, [pc, #84]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800643a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800643e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006440:	f7fb f9b4 	bl	80017ac <HAL_GetTick>
 8006444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006448:	f7fb f9b0 	bl	80017ac <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e091      	b.n	800657e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800645a:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f0      	beq.n	8006448 <HAL_RCC_OscConfig+0x71c>
 8006466:	e089      	b.n	800657c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006468:	4b09      	ldr	r3, [pc, #36]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a08      	ldr	r2, [pc, #32]	; (8006490 <HAL_RCC_OscConfig+0x764>)
 800646e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006474:	f7fb f99a 	bl	80017ac <HAL_GetTick>
 8006478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800647a:	e00f      	b.n	800649c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800647c:	f7fb f996 	bl	80017ac <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d908      	bls.n	800649c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e077      	b.n	800657e <HAL_RCC_OscConfig+0x852>
 800648e:	bf00      	nop
 8006490:	58024400 	.word	0x58024400
 8006494:	fffffc0c 	.word	0xfffffc0c
 8006498:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800649c:	4b3a      	ldr	r3, [pc, #232]	; (8006588 <HAL_RCC_OscConfig+0x85c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e9      	bne.n	800647c <HAL_RCC_OscConfig+0x750>
 80064a8:	e068      	b.n	800657c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064aa:	4b37      	ldr	r3, [pc, #220]	; (8006588 <HAL_RCC_OscConfig+0x85c>)
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064b0:	4b35      	ldr	r3, [pc, #212]	; (8006588 <HAL_RCC_OscConfig+0x85c>)
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d031      	beq.n	8006522 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f003 0203 	and.w	r2, r3, #3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d12a      	bne.n	8006522 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	091b      	lsrs	r3, r3, #4
 80064d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d8:	429a      	cmp	r2, r3
 80064da:	d122      	bne.n	8006522 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d11a      	bne.n	8006522 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	0a5b      	lsrs	r3, r3, #9
 80064f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d111      	bne.n	8006522 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800650c:	429a      	cmp	r2, r3
 800650e:	d108      	bne.n	8006522 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	0e1b      	lsrs	r3, r3, #24
 8006514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800651e:	429a      	cmp	r2, r3
 8006520:	d001      	beq.n	8006526 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e02b      	b.n	800657e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006526:	4b18      	ldr	r3, [pc, #96]	; (8006588 <HAL_RCC_OscConfig+0x85c>)
 8006528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652a:	08db      	lsrs	r3, r3, #3
 800652c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006530:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	429a      	cmp	r2, r3
 800653a:	d01f      	beq.n	800657c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800653c:	4b12      	ldr	r3, [pc, #72]	; (8006588 <HAL_RCC_OscConfig+0x85c>)
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	4a11      	ldr	r2, [pc, #68]	; (8006588 <HAL_RCC_OscConfig+0x85c>)
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006548:	f7fb f930 	bl	80017ac <HAL_GetTick>
 800654c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800654e:	bf00      	nop
 8006550:	f7fb f92c 	bl	80017ac <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	4293      	cmp	r3, r2
 800655a:	d0f9      	beq.n	8006550 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <HAL_RCC_OscConfig+0x85c>)
 800655e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006560:	4b0a      	ldr	r3, [pc, #40]	; (800658c <HAL_RCC_OscConfig+0x860>)
 8006562:	4013      	ands	r3, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006568:	00d2      	lsls	r2, r2, #3
 800656a:	4907      	ldr	r1, [pc, #28]	; (8006588 <HAL_RCC_OscConfig+0x85c>)
 800656c:	4313      	orrs	r3, r2
 800656e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <HAL_RCC_OscConfig+0x85c>)
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	4a04      	ldr	r2, [pc, #16]	; (8006588 <HAL_RCC_OscConfig+0x85c>)
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3730      	adds	r7, #48	; 0x30
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	58024400 	.word	0x58024400
 800658c:	ffff0007 	.word	0xffff0007

08006590 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e19c      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065a4:	4b8a      	ldr	r3, [pc, #552]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d910      	bls.n	80065d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b2:	4b87      	ldr	r3, [pc, #540]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f023 020f 	bic.w	r2, r3, #15
 80065ba:	4985      	ldr	r1, [pc, #532]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	4313      	orrs	r3, r2
 80065c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c2:	4b83      	ldr	r3, [pc, #524]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e184      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d010      	beq.n	8006602 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	4b7b      	ldr	r3, [pc, #492]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d908      	bls.n	8006602 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065f0:	4b78      	ldr	r3, [pc, #480]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	4975      	ldr	r1, [pc, #468]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d010      	beq.n	8006630 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	695a      	ldr	r2, [r3, #20]
 8006612:	4b70      	ldr	r3, [pc, #448]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800661a:	429a      	cmp	r2, r3
 800661c:	d908      	bls.n	8006630 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800661e:	4b6d      	ldr	r3, [pc, #436]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	496a      	ldr	r1, [pc, #424]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800662c:	4313      	orrs	r3, r2
 800662e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d010      	beq.n	800665e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699a      	ldr	r2, [r3, #24]
 8006640:	4b64      	ldr	r3, [pc, #400]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006648:	429a      	cmp	r2, r3
 800664a:	d908      	bls.n	800665e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800664c:	4b61      	ldr	r3, [pc, #388]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	495e      	ldr	r1, [pc, #376]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800665a:	4313      	orrs	r3, r2
 800665c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d010      	beq.n	800668c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	4b59      	ldr	r3, [pc, #356]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006676:	429a      	cmp	r2, r3
 8006678:	d908      	bls.n	800668c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800667a:	4b56      	ldr	r3, [pc, #344]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	4953      	ldr	r1, [pc, #332]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006688:	4313      	orrs	r3, r2
 800668a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d010      	beq.n	80066ba <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	4b4d      	ldr	r3, [pc, #308]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d908      	bls.n	80066ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066a8:	4b4a      	ldr	r3, [pc, #296]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f023 020f 	bic.w	r2, r3, #15
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4947      	ldr	r1, [pc, #284]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d055      	beq.n	8006772 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80066c6:	4b43      	ldr	r3, [pc, #268]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	4940      	ldr	r1, [pc, #256]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d107      	bne.n	80066f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066e0:	4b3c      	ldr	r3, [pc, #240]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d121      	bne.n	8006730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0f6      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d107      	bne.n	8006708 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066f8:	4b36      	ldr	r3, [pc, #216]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d115      	bne.n	8006730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0ea      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d107      	bne.n	8006720 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006710:	4b30      	ldr	r3, [pc, #192]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0de      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006720:	4b2c      	ldr	r3, [pc, #176]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0d6      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006730:	4b28      	ldr	r3, [pc, #160]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f023 0207 	bic.w	r2, r3, #7
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4925      	ldr	r1, [pc, #148]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800673e:	4313      	orrs	r3, r2
 8006740:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006742:	f7fb f833 	bl	80017ac <HAL_GetTick>
 8006746:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006748:	e00a      	b.n	8006760 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800674a:	f7fb f82f 	bl	80017ac <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	f241 3288 	movw	r2, #5000	; 0x1388
 8006758:	4293      	cmp	r3, r2
 800675a:	d901      	bls.n	8006760 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e0be      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006760:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	429a      	cmp	r2, r3
 8006770:	d1eb      	bne.n	800674a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	429a      	cmp	r2, r3
 800678c:	d208      	bcs.n	80067a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800678e:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	f023 020f 	bic.w	r2, r3, #15
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	490e      	ldr	r1, [pc, #56]	; (80067d4 <HAL_RCC_ClockConfig+0x244>)
 800679c:	4313      	orrs	r3, r2
 800679e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d214      	bcs.n	80067d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ae:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f023 020f 	bic.w	r2, r3, #15
 80067b6:	4906      	ldr	r1, [pc, #24]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067be:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <HAL_RCC_ClockConfig+0x240>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d005      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e086      	b.n	80068de <HAL_RCC_ClockConfig+0x34e>
 80067d0:	52002000 	.word	0x52002000
 80067d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d010      	beq.n	8006806 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691a      	ldr	r2, [r3, #16]
 80067e8:	4b3f      	ldr	r3, [pc, #252]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d208      	bcs.n	8006806 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067f4:	4b3c      	ldr	r3, [pc, #240]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	4939      	ldr	r1, [pc, #228]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006802:	4313      	orrs	r3, r2
 8006804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d010      	beq.n	8006834 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	4b34      	ldr	r3, [pc, #208]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800681e:	429a      	cmp	r2, r3
 8006820:	d208      	bcs.n	8006834 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006822:	4b31      	ldr	r3, [pc, #196]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	492e      	ldr	r1, [pc, #184]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006830:	4313      	orrs	r3, r2
 8006832:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	2b00      	cmp	r3, #0
 800683e:	d010      	beq.n	8006862 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699a      	ldr	r2, [r3, #24]
 8006844:	4b28      	ldr	r3, [pc, #160]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800684c:	429a      	cmp	r2, r3
 800684e:	d208      	bcs.n	8006862 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006850:	4b25      	ldr	r3, [pc, #148]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	4922      	ldr	r1, [pc, #136]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 800685e:	4313      	orrs	r3, r2
 8006860:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d010      	beq.n	8006890 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69da      	ldr	r2, [r3, #28]
 8006872:	4b1d      	ldr	r3, [pc, #116]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800687a:	429a      	cmp	r2, r3
 800687c:	d208      	bcs.n	8006890 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800687e:	4b1a      	ldr	r3, [pc, #104]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	4917      	ldr	r1, [pc, #92]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 800688c:	4313      	orrs	r3, r2
 800688e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006890:	f000 f834 	bl	80068fc <HAL_RCC_GetSysClockFreq>
 8006894:	4602      	mov	r2, r0
 8006896:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	0a1b      	lsrs	r3, r3, #8
 800689c:	f003 030f 	and.w	r3, r3, #15
 80068a0:	4912      	ldr	r1, [pc, #72]	; (80068ec <HAL_RCC_ClockConfig+0x35c>)
 80068a2:	5ccb      	ldrb	r3, [r1, r3]
 80068a4:	f003 031f 	and.w	r3, r3, #31
 80068a8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ac:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80068ae:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <HAL_RCC_ClockConfig+0x358>)
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	4a0d      	ldr	r2, [pc, #52]	; (80068ec <HAL_RCC_ClockConfig+0x35c>)
 80068b8:	5cd3      	ldrb	r3, [r2, r3]
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	fa22 f303 	lsr.w	r3, r2, r3
 80068c4:	4a0a      	ldr	r2, [pc, #40]	; (80068f0 <HAL_RCC_ClockConfig+0x360>)
 80068c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068c8:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <HAL_RCC_ClockConfig+0x364>)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80068ce:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <HAL_RCC_ClockConfig+0x368>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fa ff20 	bl	8001718 <HAL_InitTick>
 80068d8:	4603      	mov	r3, r0
 80068da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	58024400 	.word	0x58024400
 80068ec:	08009568 	.word	0x08009568
 80068f0:	24000004 	.word	0x24000004
 80068f4:	24000000 	.word	0x24000000
 80068f8:	24000008 	.word	0x24000008

080068fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b089      	sub	sp, #36	; 0x24
 8006900:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006902:	4bb3      	ldr	r3, [pc, #716]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800690a:	2b18      	cmp	r3, #24
 800690c:	f200 8155 	bhi.w	8006bba <HAL_RCC_GetSysClockFreq+0x2be>
 8006910:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	0800697d 	.word	0x0800697d
 800691c:	08006bbb 	.word	0x08006bbb
 8006920:	08006bbb 	.word	0x08006bbb
 8006924:	08006bbb 	.word	0x08006bbb
 8006928:	08006bbb 	.word	0x08006bbb
 800692c:	08006bbb 	.word	0x08006bbb
 8006930:	08006bbb 	.word	0x08006bbb
 8006934:	08006bbb 	.word	0x08006bbb
 8006938:	080069a3 	.word	0x080069a3
 800693c:	08006bbb 	.word	0x08006bbb
 8006940:	08006bbb 	.word	0x08006bbb
 8006944:	08006bbb 	.word	0x08006bbb
 8006948:	08006bbb 	.word	0x08006bbb
 800694c:	08006bbb 	.word	0x08006bbb
 8006950:	08006bbb 	.word	0x08006bbb
 8006954:	08006bbb 	.word	0x08006bbb
 8006958:	080069a9 	.word	0x080069a9
 800695c:	08006bbb 	.word	0x08006bbb
 8006960:	08006bbb 	.word	0x08006bbb
 8006964:	08006bbb 	.word	0x08006bbb
 8006968:	08006bbb 	.word	0x08006bbb
 800696c:	08006bbb 	.word	0x08006bbb
 8006970:	08006bbb 	.word	0x08006bbb
 8006974:	08006bbb 	.word	0x08006bbb
 8006978:	080069af 	.word	0x080069af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800697c:	4b94      	ldr	r3, [pc, #592]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d009      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006988:	4b91      	ldr	r3, [pc, #580]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	4a90      	ldr	r2, [pc, #576]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800699a:	e111      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800699c:	4b8d      	ldr	r3, [pc, #564]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800699e:	61bb      	str	r3, [r7, #24]
      break;
 80069a0:	e10e      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80069a2:	4b8d      	ldr	r3, [pc, #564]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069a4:	61bb      	str	r3, [r7, #24]
      break;
 80069a6:	e10b      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80069a8:	4b8c      	ldr	r3, [pc, #560]	; (8006bdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069aa:	61bb      	str	r3, [r7, #24]
      break;
 80069ac:	e108      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069ae:	4b88      	ldr	r3, [pc, #544]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80069b8:	4b85      	ldr	r3, [pc, #532]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	091b      	lsrs	r3, r3, #4
 80069be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069c4:	4b82      	ldr	r3, [pc, #520]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80069ce:	4b80      	ldr	r3, [pc, #512]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d2:	08db      	lsrs	r3, r3, #3
 80069d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	fb02 f303 	mul.w	r3, r2, r3
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80e1 	beq.w	8006bb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	f000 8083 	beq.w	8006b00 <HAL_RCC_GetSysClockFreq+0x204>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	f200 80a1 	bhi.w	8006b44 <HAL_RCC_GetSysClockFreq+0x248>
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_RCC_GetSysClockFreq+0x114>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d056      	beq.n	8006abc <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a0e:	e099      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a10:	4b6f      	ldr	r3, [pc, #444]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d02d      	beq.n	8006a78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a1c:	4b6c      	ldr	r3, [pc, #432]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	08db      	lsrs	r3, r3, #3
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	4a6b      	ldr	r2, [pc, #428]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	ee07 3a90 	vmov	s15, r3
 8006a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a46:	4b62      	ldr	r3, [pc, #392]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a5a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006a76:	e087      	b.n	8006b88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a82:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006be4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8a:	4b51      	ldr	r3, [pc, #324]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a9e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006aba:	e065      	b.n	8006b88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006be8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ace:	4b40      	ldr	r3, [pc, #256]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ae2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006afe:	e043      	b.n	8006b88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006bec <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b12:	4b2f      	ldr	r3, [pc, #188]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b42:	e021      	b.n	8006b88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006be8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b56:	4b1e      	ldr	r3, [pc, #120]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006b88:	4b11      	ldr	r3, [pc, #68]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8c:	0a5b      	lsrs	r3, r3, #9
 8006b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b92:	3301      	adds	r3, #1
 8006b94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	ee07 3a90 	vmov	s15, r3
 8006b9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bac:	ee17 3a90 	vmov	r3, s15
 8006bb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006bb2:	e005      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61bb      	str	r3, [r7, #24]
      break;
 8006bb8:	e002      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006bba:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006bbc:	61bb      	str	r3, [r7, #24]
      break;
 8006bbe:	bf00      	nop
  }

  return sysclockfreq;
 8006bc0:	69bb      	ldr	r3, [r7, #24]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3724      	adds	r7, #36	; 0x24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	58024400 	.word	0x58024400
 8006bd4:	03d09000 	.word	0x03d09000
 8006bd8:	003d0900 	.word	0x003d0900
 8006bdc:	016e3600 	.word	0x016e3600
 8006be0:	46000000 	.word	0x46000000
 8006be4:	4c742400 	.word	0x4c742400
 8006be8:	4a742400 	.word	0x4a742400
 8006bec:	4bb71b00 	.word	0x4bb71b00

08006bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006bf6:	f7ff fe81 	bl	80068fc <HAL_RCC_GetSysClockFreq>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <HAL_RCC_GetHCLKFreq+0x50>)
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	490f      	ldr	r1, [pc, #60]	; (8006c44 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c08:	5ccb      	ldrb	r3, [r1, r3]
 8006c0a:	f003 031f 	and.w	r3, r3, #31
 8006c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c12:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006c14:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	4a09      	ldr	r2, [pc, #36]	; (8006c44 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c1e:	5cd3      	ldrb	r3, [r2, r3]
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2a:	4a07      	ldr	r2, [pc, #28]	; (8006c48 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c2e:	4a07      	ldr	r2, [pc, #28]	; (8006c4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c34:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c36:	681b      	ldr	r3, [r3, #0]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	58024400 	.word	0x58024400
 8006c44:	08009568 	.word	0x08009568
 8006c48:	24000004 	.word	0x24000004
 8006c4c:	24000000 	.word	0x24000000

08006c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006c54:	f7ff ffcc 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	091b      	lsrs	r3, r3, #4
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	4904      	ldr	r1, [pc, #16]	; (8006c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c66:	5ccb      	ldrb	r3, [r1, r3]
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	58024400 	.word	0x58024400
 8006c78:	08009568 	.word	0x08009568

08006c7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c80:	b0c8      	sub	sp, #288	; 0x120
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006ca0:	2500      	movs	r5, #0
 8006ca2:	ea54 0305 	orrs.w	r3, r4, r5
 8006ca6:	d049      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cb2:	d02f      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006cb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cb8:	d828      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cbe:	d01a      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cc4:	d822      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cce:	d007      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006cd0:	e01c      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cd2:	4ba7      	ldr	r3, [pc, #668]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	4aa6      	ldr	r2, [pc, #664]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006cde:	e01a      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	2102      	movs	r1, #2
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f002 fa6d 	bl	80091c8 <RCCEx_PLL2_Config>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006cf4:	e00f      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cfa:	3328      	adds	r3, #40	; 0x28
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f002 fb14 	bl	800932c <RCCEx_PLL3_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d0a:	e004      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006d12:	e000      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d1e:	4b94      	ldr	r3, [pc, #592]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2c:	4a90      	ldr	r2, [pc, #576]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d2e:	430b      	orrs	r3, r1
 8006d30:	6513      	str	r3, [r2, #80]	; 0x50
 8006d32:	e003      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006d48:	f04f 0900 	mov.w	r9, #0
 8006d4c:	ea58 0309 	orrs.w	r3, r8, r9
 8006d50:	d047      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d82a      	bhi.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006d5c:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006d79 	.word	0x08006d79
 8006d68:	08006d87 	.word	0x08006d87
 8006d6c:	08006d9d 	.word	0x08006d9d
 8006d70:	08006dbb 	.word	0x08006dbb
 8006d74:	08006dbb 	.word	0x08006dbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d78:	4b7d      	ldr	r3, [pc, #500]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	4a7c      	ldr	r2, [pc, #496]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d84:	e01a      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f002 fa1a 	bl	80091c8 <RCCEx_PLL2_Config>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d9a:	e00f      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006da0:	3328      	adds	r3, #40	; 0x28
 8006da2:	2100      	movs	r1, #0
 8006da4:	4618      	mov	r0, r3
 8006da6:	f002 fac1 	bl	800932c <RCCEx_PLL3_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006db0:	e004      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006db8:	e000      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006dc4:	4b6a      	ldr	r3, [pc, #424]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc8:	f023 0107 	bic.w	r1, r3, #7
 8006dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd2:	4a67      	ldr	r2, [pc, #412]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dd4:	430b      	orrs	r3, r1
 8006dd6:	6513      	str	r3, [r2, #80]	; 0x50
 8006dd8:	e003      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006dee:	f04f 0b00 	mov.w	fp, #0
 8006df2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006df6:	d054      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006e02:	d036      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006e04:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006e08:	d82f      	bhi.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0e:	d032      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e14:	d829      	bhi.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e16:	2bc0      	cmp	r3, #192	; 0xc0
 8006e18:	d02f      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e1c:	d825      	bhi.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e1e:	2b80      	cmp	r3, #128	; 0x80
 8006e20:	d018      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006e22:	2b80      	cmp	r3, #128	; 0x80
 8006e24:	d821      	bhi.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d007      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006e2e:	e01c      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e30:	4b4f      	ldr	r3, [pc, #316]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	4a4e      	ldr	r2, [pc, #312]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006e3c:	e01e      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e42:	3308      	adds	r3, #8
 8006e44:	2100      	movs	r1, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f002 f9be 	bl	80091c8 <RCCEx_PLL2_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006e52:	e013      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e58:	3328      	adds	r3, #40	; 0x28
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f002 fa65 	bl	800932c <RCCEx_PLL3_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006e68:	e008      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006e70:	e004      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006e72:	bf00      	nop
 8006e74:	e002      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006e76:	bf00      	nop
 8006e78:	e000      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006e84:	4b3a      	ldr	r3, [pc, #232]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e88:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e92:	4a37      	ldr	r2, [pc, #220]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6513      	str	r3, [r2, #80]	; 0x50
 8006e98:	e003      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006eae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006eb8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	d05c      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006ecc:	d03b      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ece:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006ed2:	d834      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed8:	d037      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ede:	d82e      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006ee0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ee4:	d033      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ee6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006eea:	d828      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef0:	d01a      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef6:	d822      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f00:	d007      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006f02:	e01c      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	4a19      	ldr	r2, [pc, #100]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006f10:	e01e      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f16:	3308      	adds	r3, #8
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f002 f954 	bl	80091c8 <RCCEx_PLL2_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006f26:	e013      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f2c:	3328      	adds	r3, #40	; 0x28
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f002 f9fb 	bl	800932c <RCCEx_PLL3_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006f3c:	e008      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f44:	e004      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006f46:	bf00      	nop
 8006f48:	e002      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006f4a:	bf00      	nop
 8006f4c:	e000      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10d      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f66:	4a02      	ldr	r2, [pc, #8]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	6513      	str	r3, [r2, #80]	; 0x50
 8006f6c:	e006      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006f6e:	bf00      	nop
 8006f70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006f88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006f96:	460b      	mov	r3, r1
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	d03a      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa2:	2b30      	cmp	r3, #48	; 0x30
 8006fa4:	d01f      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006fa6:	2b30      	cmp	r3, #48	; 0x30
 8006fa8:	d819      	bhi.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d00c      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d815      	bhi.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d019      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006fb6:	2b10      	cmp	r3, #16
 8006fb8:	d111      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fba:	4bae      	ldr	r3, [pc, #696]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	4aad      	ldr	r2, [pc, #692]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006fc6:	e011      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fcc:	3308      	adds	r3, #8
 8006fce:	2102      	movs	r1, #2
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f002 f8f9 	bl	80091c8 <RCCEx_PLL2_Config>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006fdc:	e006      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006fe4:	e002      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006ff4:	4b9f      	ldr	r3, [pc, #636]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007002:	4a9c      	ldr	r2, [pc, #624]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007004:	430b      	orrs	r3, r1
 8007006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007008:	e003      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800700e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800701e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007022:	2300      	movs	r3, #0
 8007024:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007028:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800702c:	460b      	mov	r3, r1
 800702e:	4313      	orrs	r3, r2
 8007030:	d051      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800703c:	d035      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800703e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007042:	d82e      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007044:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007048:	d031      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x432>
 800704a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800704e:	d828      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007054:	d01a      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800705a:	d822      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007064:	d007      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8007066:	e01c      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007068:	4b82      	ldr	r3, [pc, #520]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	4a81      	ldr	r2, [pc, #516]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800706e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007072:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007074:	e01c      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800707a:	3308      	adds	r3, #8
 800707c:	2100      	movs	r1, #0
 800707e:	4618      	mov	r0, r3
 8007080:	f002 f8a2 	bl	80091c8 <RCCEx_PLL2_Config>
 8007084:	4603      	mov	r3, r0
 8007086:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800708a:	e011      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800708c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007090:	3328      	adds	r3, #40	; 0x28
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f002 f949 	bl	800932c <RCCEx_PLL3_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070a0:	e006      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80070a8:	e002      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80070ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80070b8:	4b6e      	ldr	r3, [pc, #440]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80070c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070c6:	4a6b      	ldr	r2, [pc, #428]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6513      	str	r3, [r2, #80]	; 0x50
 80070cc:	e003      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80070d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80070e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070e6:	2300      	movs	r3, #0
 80070e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80070f0:	460b      	mov	r3, r1
 80070f2:	4313      	orrs	r3, r2
 80070f4:	d053      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80070f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007100:	d033      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007106:	d82c      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007108:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800710c:	d02f      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800710e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007112:	d826      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007118:	d02b      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800711a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800711e:	d820      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007124:	d012      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800712a:	d81a      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800712c:	2b00      	cmp	r3, #0
 800712e:	d022      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007134:	d115      	bne.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800713a:	3308      	adds	r3, #8
 800713c:	2101      	movs	r1, #1
 800713e:	4618      	mov	r0, r3
 8007140:	f002 f842 	bl	80091c8 <RCCEx_PLL2_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800714a:	e015      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800714c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007150:	3328      	adds	r3, #40	; 0x28
 8007152:	2101      	movs	r1, #1
 8007154:	4618      	mov	r0, r3
 8007156:	f002 f8e9 	bl	800932c <RCCEx_PLL3_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007160:	e00a      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007168:	e006      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800716a:	bf00      	nop
 800716c:	e004      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800716e:	bf00      	nop
 8007170:	e002      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007178:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007180:	4b3c      	ldr	r3, [pc, #240]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007184:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800718c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800718e:	4a39      	ldr	r2, [pc, #228]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007190:	430b      	orrs	r3, r1
 8007192:	6513      	str	r3, [r2, #80]	; 0x50
 8007194:	e003      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007196:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800719a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800719e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80071aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071ae:	2300      	movs	r3, #0
 80071b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4313      	orrs	r3, r2
 80071bc:	d060      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80071be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071c6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80071ca:	d039      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80071cc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80071d0:	d832      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80071d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071d6:	d035      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80071d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071dc:	d82c      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80071de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e2:	d031      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80071e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e8:	d826      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80071ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071ee:	d02d      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80071f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071f4:	d820      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80071f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071fa:	d012      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80071fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007200:	d81a      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d024      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800720a:	d115      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800720c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007210:	3308      	adds	r3, #8
 8007212:	2101      	movs	r1, #1
 8007214:	4618      	mov	r0, r3
 8007216:	f001 ffd7 	bl	80091c8 <RCCEx_PLL2_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007220:	e017      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007226:	3328      	adds	r3, #40	; 0x28
 8007228:	2101      	movs	r1, #1
 800722a:	4618      	mov	r0, r3
 800722c:	f002 f87e 	bl	800932c <RCCEx_PLL3_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007236:	e00c      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800723e:	e008      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007240:	bf00      	nop
 8007242:	e006      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007244:	bf00      	nop
 8007246:	e004      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007248:	bf00      	nop
 800724a:	e002      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800724c:	bf00      	nop
 800724e:	e000      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007252:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10e      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800725a:	4b06      	ldr	r3, [pc, #24]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800725c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800726a:	4a02      	ldr	r2, [pc, #8]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800726c:	430b      	orrs	r3, r1
 800726e:	6593      	str	r3, [r2, #88]	; 0x58
 8007270:	e006      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007272:	bf00      	nop
 8007274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007278:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800727c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800728c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007290:	2300      	movs	r3, #0
 8007292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800729a:	460b      	mov	r3, r1
 800729c:	4313      	orrs	r3, r2
 800729e:	d037      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80072a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072aa:	d00e      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80072ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b0:	d816      	bhi.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d018      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80072b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ba:	d111      	bne.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072bc:	4bc4      	ldr	r3, [pc, #784]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	4ac3      	ldr	r2, [pc, #780]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80072c8:	e00f      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ce:	3308      	adds	r3, #8
 80072d0:	2101      	movs	r1, #1
 80072d2:	4618      	mov	r0, r3
 80072d4:	f001 ff78 	bl	80091c8 <RCCEx_PLL2_Config>
 80072d8:	4603      	mov	r3, r0
 80072da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80072de:	e004      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80072e6:	e000      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80072e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072f2:	4bb7      	ldr	r3, [pc, #732]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80072fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007300:	4ab3      	ldr	r2, [pc, #716]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007302:	430b      	orrs	r3, r1
 8007304:	6513      	str	r3, [r2, #80]	; 0x50
 8007306:	e003      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007308:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800730c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800731c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007320:	2300      	movs	r3, #0
 8007322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007326:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800732a:	460b      	mov	r3, r1
 800732c:	4313      	orrs	r3, r2
 800732e:	d039      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007336:	2b03      	cmp	r3, #3
 8007338:	d81c      	bhi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	0800737d 	.word	0x0800737d
 8007344:	08007351 	.word	0x08007351
 8007348:	0800735f 	.word	0x0800735f
 800734c:	0800737d 	.word	0x0800737d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007350:	4b9f      	ldr	r3, [pc, #636]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	4a9e      	ldr	r2, [pc, #632]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800735a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800735c:	e00f      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800735e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007362:	3308      	adds	r3, #8
 8007364:	2102      	movs	r1, #2
 8007366:	4618      	mov	r0, r3
 8007368:	f001 ff2e 	bl	80091c8 <RCCEx_PLL2_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007372:	e004      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800737a:	e000      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800737c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800737e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007386:	4b92      	ldr	r3, [pc, #584]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738a:	f023 0103 	bic.w	r1, r3, #3
 800738e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007394:	4a8e      	ldr	r2, [pc, #568]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007396:	430b      	orrs	r3, r1
 8007398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800739a:	e003      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80073b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073b4:	2300      	movs	r3, #0
 80073b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80073be:	460b      	mov	r3, r1
 80073c0:	4313      	orrs	r3, r2
 80073c2:	f000 8099 	beq.w	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073c6:	4b83      	ldr	r3, [pc, #524]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a82      	ldr	r2, [pc, #520]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80073cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073d2:	f7fa f9eb 	bl	80017ac <HAL_GetTick>
 80073d6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073da:	e00b      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073dc:	f7fa f9e6 	bl	80017ac <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b64      	cmp	r3, #100	; 0x64
 80073ea:	d903      	bls.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80073f2:	e005      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073f4:	4b77      	ldr	r3, [pc, #476]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0ed      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007400:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007404:	2b00      	cmp	r3, #0
 8007406:	d173      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007408:	4b71      	ldr	r3, [pc, #452]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800740a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800740c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007410:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007414:	4053      	eors	r3, r2
 8007416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800741a:	2b00      	cmp	r3, #0
 800741c:	d015      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800741e:	4b6c      	ldr	r3, [pc, #432]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007426:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800742a:	4b69      	ldr	r3, [pc, #420]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800742c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742e:	4a68      	ldr	r2, [pc, #416]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007434:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007436:	4b66      	ldr	r3, [pc, #408]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743a:	4a65      	ldr	r2, [pc, #404]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800743c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007440:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007442:	4a63      	ldr	r2, [pc, #396]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007448:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800744a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800744e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007456:	d118      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007458:	f7fa f9a8 	bl	80017ac <HAL_GetTick>
 800745c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007460:	e00d      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007462:	f7fa f9a3 	bl	80017ac <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800746c:	1ad2      	subs	r2, r2, r3
 800746e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007472:	429a      	cmp	r2, r3
 8007474:	d903      	bls.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800747c:	e005      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800747e:	4b54      	ldr	r3, [pc, #336]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0eb      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800748a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800748e:	2b00      	cmp	r3, #0
 8007490:	d129      	bne.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800749a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074a2:	d10e      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80074a4:	4b4a      	ldr	r3, [pc, #296]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80074ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074b4:	091a      	lsrs	r2, r3, #4
 80074b6:	4b48      	ldr	r3, [pc, #288]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	4a45      	ldr	r2, [pc, #276]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074bc:	430b      	orrs	r3, r1
 80074be:	6113      	str	r3, [r2, #16]
 80074c0:	e005      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 80074c2:	4b43      	ldr	r3, [pc, #268]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	4a42      	ldr	r2, [pc, #264]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80074cc:	6113      	str	r3, [r2, #16]
 80074ce:	4b40      	ldr	r3, [pc, #256]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80074d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074de:	4a3c      	ldr	r2, [pc, #240]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074e0:	430b      	orrs	r3, r1
 80074e2:	6713      	str	r3, [r2, #112]	; 0x70
 80074e4:	e008      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80074ee:	e003      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80074f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	f002 0301 	and.w	r3, r2, #1
 8007504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007508:	2300      	movs	r3, #0
 800750a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800750e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007512:	460b      	mov	r3, r1
 8007514:	4313      	orrs	r3, r2
 8007516:	f000 8090 	beq.w	800763a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800751a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800751e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007522:	2b28      	cmp	r3, #40	; 0x28
 8007524:	d870      	bhi.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007611 	.word	0x08007611
 8007530:	08007609 	.word	0x08007609
 8007534:	08007609 	.word	0x08007609
 8007538:	08007609 	.word	0x08007609
 800753c:	08007609 	.word	0x08007609
 8007540:	08007609 	.word	0x08007609
 8007544:	08007609 	.word	0x08007609
 8007548:	08007609 	.word	0x08007609
 800754c:	080075dd 	.word	0x080075dd
 8007550:	08007609 	.word	0x08007609
 8007554:	08007609 	.word	0x08007609
 8007558:	08007609 	.word	0x08007609
 800755c:	08007609 	.word	0x08007609
 8007560:	08007609 	.word	0x08007609
 8007564:	08007609 	.word	0x08007609
 8007568:	08007609 	.word	0x08007609
 800756c:	080075f3 	.word	0x080075f3
 8007570:	08007609 	.word	0x08007609
 8007574:	08007609 	.word	0x08007609
 8007578:	08007609 	.word	0x08007609
 800757c:	08007609 	.word	0x08007609
 8007580:	08007609 	.word	0x08007609
 8007584:	08007609 	.word	0x08007609
 8007588:	08007609 	.word	0x08007609
 800758c:	08007611 	.word	0x08007611
 8007590:	08007609 	.word	0x08007609
 8007594:	08007609 	.word	0x08007609
 8007598:	08007609 	.word	0x08007609
 800759c:	08007609 	.word	0x08007609
 80075a0:	08007609 	.word	0x08007609
 80075a4:	08007609 	.word	0x08007609
 80075a8:	08007609 	.word	0x08007609
 80075ac:	08007611 	.word	0x08007611
 80075b0:	08007609 	.word	0x08007609
 80075b4:	08007609 	.word	0x08007609
 80075b8:	08007609 	.word	0x08007609
 80075bc:	08007609 	.word	0x08007609
 80075c0:	08007609 	.word	0x08007609
 80075c4:	08007609 	.word	0x08007609
 80075c8:	08007609 	.word	0x08007609
 80075cc:	08007611 	.word	0x08007611
 80075d0:	58024400 	.word	0x58024400
 80075d4:	58024800 	.word	0x58024800
 80075d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075e0:	3308      	adds	r3, #8
 80075e2:	2101      	movs	r1, #1
 80075e4:	4618      	mov	r0, r3
 80075e6:	f001 fdef 	bl	80091c8 <RCCEx_PLL2_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80075f0:	e00f      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075f6:	3328      	adds	r3, #40	; 0x28
 80075f8:	2101      	movs	r1, #1
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 fe96 	bl	800932c <RCCEx_PLL3_Config>
 8007600:	4603      	mov	r3, r0
 8007602:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007606:	e004      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800760e:	e000      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007612:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10b      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800761a:	4bc0      	ldr	r3, [pc, #768]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800761c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800762a:	4abc      	ldr	r2, [pc, #752]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800762c:	430b      	orrs	r3, r1
 800762e:	6553      	str	r3, [r2, #84]	; 0x54
 8007630:	e003      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007632:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007636:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800763a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f002 0302 	and.w	r3, r2, #2
 8007646:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800764a:	2300      	movs	r3, #0
 800764c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007650:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007654:	460b      	mov	r3, r1
 8007656:	4313      	orrs	r3, r2
 8007658:	d043      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800765a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800765e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007662:	2b05      	cmp	r3, #5
 8007664:	d824      	bhi.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007666:	a201      	add	r2, pc, #4	; (adr r2, 800766c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	080076b9 	.word	0x080076b9
 8007670:	08007685 	.word	0x08007685
 8007674:	0800769b 	.word	0x0800769b
 8007678:	080076b9 	.word	0x080076b9
 800767c:	080076b9 	.word	0x080076b9
 8007680:	080076b9 	.word	0x080076b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007688:	3308      	adds	r3, #8
 800768a:	2101      	movs	r1, #1
 800768c:	4618      	mov	r0, r3
 800768e:	f001 fd9b 	bl	80091c8 <RCCEx_PLL2_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007698:	e00f      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800769a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800769e:	3328      	adds	r3, #40	; 0x28
 80076a0:	2101      	movs	r1, #1
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 fe42 	bl	800932c <RCCEx_PLL3_Config>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80076ae:	e004      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80076b6:	e000      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80076b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10b      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80076c2:	4b96      	ldr	r3, [pc, #600]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c6:	f023 0107 	bic.w	r1, r3, #7
 80076ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d2:	4a92      	ldr	r2, [pc, #584]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6553      	str	r3, [r2, #84]	; 0x54
 80076d8:	e003      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f002 0304 	and.w	r3, r2, #4
 80076ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076f2:	2300      	movs	r3, #0
 80076f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076f8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4313      	orrs	r3, r2
 8007700:	d043      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800770a:	2b05      	cmp	r3, #5
 800770c:	d824      	bhi.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800770e:	a201      	add	r2, pc, #4	; (adr r2, 8007714 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007714:	08007761 	.word	0x08007761
 8007718:	0800772d 	.word	0x0800772d
 800771c:	08007743 	.word	0x08007743
 8007720:	08007761 	.word	0x08007761
 8007724:	08007761 	.word	0x08007761
 8007728:	08007761 	.word	0x08007761
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800772c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007730:	3308      	adds	r3, #8
 8007732:	2101      	movs	r1, #1
 8007734:	4618      	mov	r0, r3
 8007736:	f001 fd47 	bl	80091c8 <RCCEx_PLL2_Config>
 800773a:	4603      	mov	r3, r0
 800773c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007740:	e00f      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007746:	3328      	adds	r3, #40	; 0x28
 8007748:	2101      	movs	r1, #1
 800774a:	4618      	mov	r0, r3
 800774c:	f001 fdee 	bl	800932c <RCCEx_PLL3_Config>
 8007750:	4603      	mov	r3, r0
 8007752:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007756:	e004      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800775e:	e000      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007762:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800776a:	4b6c      	ldr	r3, [pc, #432]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800776c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776e:	f023 0107 	bic.w	r1, r3, #7
 8007772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800777a:	4a68      	ldr	r2, [pc, #416]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800777c:	430b      	orrs	r3, r1
 800777e:	6593      	str	r3, [r2, #88]	; 0x58
 8007780:	e003      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007782:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007786:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800778a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f002 0320 	and.w	r3, r2, #32
 8007796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800779a:	2300      	movs	r3, #0
 800779c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80077a4:	460b      	mov	r3, r1
 80077a6:	4313      	orrs	r3, r2
 80077a8:	d055      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80077aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077b6:	d033      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80077b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077bc:	d82c      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80077be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c2:	d02f      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80077c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c8:	d826      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80077ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077ce:	d02b      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80077d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077d4:	d820      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80077d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077da:	d012      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80077dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077e0:	d81a      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d022      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80077e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077ea:	d115      	bne.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077f0:	3308      	adds	r3, #8
 80077f2:	2100      	movs	r1, #0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 fce7 	bl	80091c8 <RCCEx_PLL2_Config>
 80077fa:	4603      	mov	r3, r0
 80077fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007800:	e015      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007806:	3328      	adds	r3, #40	; 0x28
 8007808:	2102      	movs	r1, #2
 800780a:	4618      	mov	r0, r3
 800780c:	f001 fd8e 	bl	800932c <RCCEx_PLL3_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007816:	e00a      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800781e:	e006      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007820:	bf00      	nop
 8007822:	e004      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007824:	bf00      	nop
 8007826:	e002      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007828:	bf00      	nop
 800782a:	e000      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800782c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800782e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10b      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007836:	4b39      	ldr	r3, [pc, #228]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800783e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007842:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007846:	4a35      	ldr	r2, [pc, #212]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007848:	430b      	orrs	r3, r1
 800784a:	6553      	str	r3, [r2, #84]	; 0x54
 800784c:	e003      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007852:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007866:	2300      	movs	r3, #0
 8007868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800786c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007870:	460b      	mov	r3, r1
 8007872:	4313      	orrs	r3, r2
 8007874:	d058      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800787a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800787e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007882:	d033      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007884:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007888:	d82c      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800788a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788e:	d02f      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007894:	d826      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007896:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800789a:	d02b      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800789c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078a0:	d820      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80078a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a6:	d012      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80078a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ac:	d81a      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d022      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80078b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078b6:	d115      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078bc:	3308      	adds	r3, #8
 80078be:	2100      	movs	r1, #0
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 fc81 	bl	80091c8 <RCCEx_PLL2_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80078cc:	e015      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078d2:	3328      	adds	r3, #40	; 0x28
 80078d4:	2102      	movs	r1, #2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 fd28 	bl	800932c <RCCEx_PLL3_Config>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80078e2:	e00a      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80078ea:	e006      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80078ec:	bf00      	nop
 80078ee:	e004      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80078f0:	bf00      	nop
 80078f2:	e002      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80078f4:	bf00      	nop
 80078f6:	e000      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80078f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10e      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007902:	4b06      	ldr	r3, [pc, #24]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800790a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800790e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007912:	4a02      	ldr	r2, [pc, #8]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007914:	430b      	orrs	r3, r1
 8007916:	6593      	str	r3, [r2, #88]	; 0x58
 8007918:	e006      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800791a:	bf00      	nop
 800791c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007920:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007924:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007938:	2300      	movs	r3, #0
 800793a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800793e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007942:	460b      	mov	r3, r1
 8007944:	4313      	orrs	r3, r2
 8007946:	d055      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800794c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007950:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007954:	d033      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007956:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800795a:	d82c      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800795c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007960:	d02f      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007966:	d826      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007968:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800796c:	d02b      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800796e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007972:	d820      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007978:	d012      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800797a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800797e:	d81a      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007980:	2b00      	cmp	r3, #0
 8007982:	d022      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007988:	d115      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800798a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800798e:	3308      	adds	r3, #8
 8007990:	2100      	movs	r1, #0
 8007992:	4618      	mov	r0, r3
 8007994:	f001 fc18 	bl	80091c8 <RCCEx_PLL2_Config>
 8007998:	4603      	mov	r3, r0
 800799a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800799e:	e015      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079a4:	3328      	adds	r3, #40	; 0x28
 80079a6:	2102      	movs	r1, #2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f001 fcbf 	bl	800932c <RCCEx_PLL3_Config>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80079b4:	e00a      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80079bc:	e006      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80079be:	bf00      	nop
 80079c0:	e004      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80079c2:	bf00      	nop
 80079c4:	e002      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80079c6:	bf00      	nop
 80079c8:	e000      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80079ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10b      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80079d4:	4ba1      	ldr	r3, [pc, #644]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80079dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079e4:	4a9d      	ldr	r2, [pc, #628]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079e6:	430b      	orrs	r3, r1
 80079e8:	6593      	str	r3, [r2, #88]	; 0x58
 80079ea:	e003      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80079f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80079f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	f002 0308 	and.w	r3, r2, #8
 8007a00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a04:	2300      	movs	r3, #0
 8007a06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4313      	orrs	r3, r2
 8007a12:	d01e      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a20:	d10c      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a26:	3328      	adds	r3, #40	; 0x28
 8007a28:	2102      	movs	r1, #2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f001 fc7e 	bl	800932c <RCCEx_PLL3_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a3c:	4b87      	ldr	r3, [pc, #540]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a4c:	4a83      	ldr	r2, [pc, #524]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f002 0310 	and.w	r3, r2, #16
 8007a5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a62:	2300      	movs	r3, #0
 8007a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	d01e      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7e:	d10c      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a84:	3328      	adds	r3, #40	; 0x28
 8007a86:	2102      	movs	r1, #2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fc4f 	bl	800932c <RCCEx_PLL3_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a9a:	4b70      	ldr	r3, [pc, #448]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007aaa:	4a6c      	ldr	r2, [pc, #432]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007aac:	430b      	orrs	r3, r1
 8007aae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007abc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ac6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007aca:	460b      	mov	r3, r1
 8007acc:	4313      	orrs	r3, r2
 8007ace:	d03e      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ad4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007adc:	d022      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ae2:	d81b      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aec:	d00b      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007aee:	e015      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007af4:	3308      	adds	r3, #8
 8007af6:	2100      	movs	r1, #0
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 fb65 	bl	80091c8 <RCCEx_PLL2_Config>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b04:	e00f      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b0a:	3328      	adds	r3, #40	; 0x28
 8007b0c:	2102      	movs	r1, #2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f001 fc0c 	bl	800932c <RCCEx_PLL3_Config>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b1a:	e004      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007b22:	e000      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10b      	bne.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b2e:	4b4b      	ldr	r3, [pc, #300]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b32:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b3e:	4a47      	ldr	r2, [pc, #284]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6593      	str	r3, [r2, #88]	; 0x58
 8007b44:	e003      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007b5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007b64:	460b      	mov	r3, r1
 8007b66:	4313      	orrs	r3, r2
 8007b68:	d03b      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b76:	d01f      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007b78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b7c:	d818      	bhi.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b82:	d003      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007b84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b88:	d007      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007b8a:	e011      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b8c:	4b33      	ldr	r3, [pc, #204]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	4a32      	ldr	r2, [pc, #200]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b98:	e00f      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b9e:	3328      	adds	r3, #40	; 0x28
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 fbc2 	bl	800932c <RCCEx_PLL3_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007bae:	e004      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007bb6:	e000      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10b      	bne.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bc2:	4b26      	ldr	r3, [pc, #152]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd2:	4a22      	ldr	r2, [pc, #136]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6553      	str	r3, [r2, #84]	; 0x54
 8007bd8:	e003      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007bee:	673b      	str	r3, [r7, #112]	; 0x70
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	677b      	str	r3, [r7, #116]	; 0x74
 8007bf4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	d034      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c0c:	d007      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007c0e:	e011      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c10:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	4a11      	ldr	r2, [pc, #68]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c1c:	e00e      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c22:	3308      	adds	r3, #8
 8007c24:	2102      	movs	r1, #2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 face 	bl	80091c8 <RCCEx_PLL2_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c32:	e003      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10d      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c44:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c52:	4a02      	ldr	r2, [pc, #8]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c54:	430b      	orrs	r3, r1
 8007c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c58:	e006      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007c5a:	bf00      	nop
 8007c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007c74:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c76:	2300      	movs	r3, #0
 8007c78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4313      	orrs	r3, r2
 8007c82:	d00c      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c88:	3328      	adds	r3, #40	; 0x28
 8007c8a:	2102      	movs	r1, #2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f001 fb4d 	bl	800932c <RCCEx_PLL3_Config>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007caa:	663b      	str	r3, [r7, #96]	; 0x60
 8007cac:	2300      	movs	r3, #0
 8007cae:	667b      	str	r3, [r7, #100]	; 0x64
 8007cb0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	d038      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cc6:	d018      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ccc:	d811      	bhi.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd2:	d014      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd8:	d80b      	bhi.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d011      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce2:	d106      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce4:	4bc3      	ldr	r3, [pc, #780]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	4ac2      	ldr	r2, [pc, #776]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007cf0:	e008      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007cf8:	e004      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007cfa:	bf00      	nop
 8007cfc:	e002      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007cfe:	bf00      	nop
 8007d00:	e000      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10b      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d0c:	4bb9      	ldr	r3, [pc, #740]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1c:	4ab5      	ldr	r2, [pc, #724]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	6553      	str	r3, [r2, #84]	; 0x54
 8007d22:	e003      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007d38:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007d42:	460b      	mov	r3, r1
 8007d44:	4313      	orrs	r3, r2
 8007d46:	d009      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d48:	4baa      	ldr	r3, [pc, #680]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d56:	4aa7      	ldr	r2, [pc, #668]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007d68:	653b      	str	r3, [r7, #80]	; 0x50
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	657b      	str	r3, [r7, #84]	; 0x54
 8007d6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007d72:	460b      	mov	r3, r1
 8007d74:	4313      	orrs	r3, r2
 8007d76:	d009      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d78:	4b9e      	ldr	r3, [pc, #632]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d86:	4a9b      	ldr	r2, [pc, #620]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007d98:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d9e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007da2:	460b      	mov	r3, r1
 8007da4:	4313      	orrs	r3, r2
 8007da6:	d009      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007da8:	4b92      	ldr	r3, [pc, #584]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dac:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db6:	4a8f      	ldr	r2, [pc, #572]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007db8:	430b      	orrs	r3, r1
 8007dba:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8007dca:	2300      	movs	r3, #0
 8007dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8007dce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	d00e      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007dd8:	4b86      	ldr	r3, [pc, #536]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	4a85      	ldr	r2, [pc, #532]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007dde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007de2:	6113      	str	r3, [r2, #16]
 8007de4:	4b83      	ldr	r3, [pc, #524]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007de6:	6919      	ldr	r1, [r3, #16]
 8007de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007df0:	4a80      	ldr	r2, [pc, #512]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007df2:	430b      	orrs	r3, r1
 8007df4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e04:	2300      	movs	r3, #0
 8007e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e08:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	d009      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e12:	4b78      	ldr	r3, [pc, #480]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e20:	4a74      	ldr	r2, [pc, #464]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e22:	430b      	orrs	r3, r1
 8007e24:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007e32:	633b      	str	r3, [r7, #48]	; 0x30
 8007e34:	2300      	movs	r3, #0
 8007e36:	637b      	str	r3, [r7, #52]	; 0x34
 8007e38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	d00a      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e42:	4b6c      	ldr	r3, [pc, #432]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e46:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e52:	4a68      	ldr	r2, [pc, #416]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e54:	430b      	orrs	r3, r1
 8007e56:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e60:	2100      	movs	r1, #0
 8007e62:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e6a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4313      	orrs	r3, r2
 8007e72:	d011      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e78:	3308      	adds	r3, #8
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 f9a3 	bl	80091c8 <RCCEx_PLL2_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007e88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	6239      	str	r1, [r7, #32]
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eaa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	d011      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb8:	3308      	adds	r3, #8
 8007eba:	2101      	movs	r1, #1
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f001 f983 	bl	80091c8 <RCCEx_PLL2_Config>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007ec8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ed4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	61b9      	str	r1, [r7, #24]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	61fb      	str	r3, [r7, #28]
 8007eea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	d011      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ef8:	3308      	adds	r3, #8
 8007efa:	2102      	movs	r1, #2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f001 f963 	bl	80091c8 <RCCEx_PLL2_Config>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007f08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	2100      	movs	r1, #0
 8007f22:	6139      	str	r1, [r7, #16]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	617b      	str	r3, [r7, #20]
 8007f2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4313      	orrs	r3, r2
 8007f32:	d011      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f38:	3328      	adds	r3, #40	; 0x28
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f001 f9f5 	bl	800932c <RCCEx_PLL3_Config>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8007f48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	2100      	movs	r1, #0
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d011      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f78:	3328      	adds	r3, #40	; 0x28
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f9d5 	bl	800932c <RCCEx_PLL3_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007f88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	6039      	str	r1, [r7, #0]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	607b      	str	r3, [r7, #4]
 8007faa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	d011      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fb8:	3328      	adds	r3, #40	; 0x28
 8007fba:	2102      	movs	r1, #2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 f9b5 	bl	800932c <RCCEx_PLL3_Config>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007fc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007fd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8007fd8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e000      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8007fec:	46bd      	mov	sp, r7
 8007fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ff2:	bf00      	nop
 8007ff4:	58024400 	.word	0x58024400

08007ff8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b090      	sub	sp, #64	; 0x40
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008006:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800800a:	430b      	orrs	r3, r1
 800800c:	f040 8094 	bne.w	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008010:	4b97      	ldr	r3, [pc, #604]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	2b04      	cmp	r3, #4
 800801e:	f200 8087 	bhi.w	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008022:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	0800803d 	.word	0x0800803d
 800802c:	08008065 	.word	0x08008065
 8008030:	0800808d 	.word	0x0800808d
 8008034:	08008129 	.word	0x08008129
 8008038:	080080b5 	.word	0x080080b5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800803c:	4b8c      	ldr	r3, [pc, #560]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008048:	d108      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800804a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800804e:	4618      	mov	r0, r3
 8008050:	f000 ff68 	bl	8008f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008058:	f000 bc97 	b.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008060:	f000 bc93 	b.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008064:	4b82      	ldr	r3, [pc, #520]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800806c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008070:	d108      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008072:	f107 0318 	add.w	r3, r7, #24
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fcac 	bl	80089d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008080:	f000 bc83 	b.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008088:	f000 bc7f 	b.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800808c:	4b78      	ldr	r3, [pc, #480]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008098:	d108      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800809a:	f107 030c 	add.w	r3, r7, #12
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fdec 	bl	8008c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080a8:	f000 bc6f 	b.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080b0:	f000 bc6b 	b.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080b4:	4b6e      	ldr	r3, [pc, #440]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080be:	4b6c      	ldr	r3, [pc, #432]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d10c      	bne.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80080ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d109      	bne.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080d0:	4b67      	ldr	r3, [pc, #412]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	08db      	lsrs	r3, r3, #3
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	4a66      	ldr	r2, [pc, #408]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080dc:	fa22 f303 	lsr.w	r3, r2, r3
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080e2:	e01f      	b.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080e4:	4b62      	ldr	r3, [pc, #392]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080f0:	d106      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80080f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080f8:	d102      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80080fa:	4b5f      	ldr	r3, [pc, #380]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80080fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080fe:	e011      	b.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008100:	4b5b      	ldr	r3, [pc, #364]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800810c:	d106      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008114:	d102      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008116:	4b59      	ldr	r3, [pc, #356]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800811a:	e003      	b.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008120:	f000 bc33 	b.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008124:	f000 bc31 	b.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008128:	4b55      	ldr	r3, [pc, #340]	; (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800812c:	f000 bc2d 	b.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008130:	2300      	movs	r3, #0
 8008132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008134:	f000 bc29 	b.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800813c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008140:	430b      	orrs	r3, r1
 8008142:	f040 809f 	bne.w	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8008146:	4b4a      	ldr	r3, [pc, #296]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800814a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800814e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008156:	d04d      	beq.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800815e:	f200 8084 	bhi.w	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	2bc0      	cmp	r3, #192	; 0xc0
 8008166:	d07d      	beq.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	2bc0      	cmp	r3, #192	; 0xc0
 800816c:	d87d      	bhi.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	2b80      	cmp	r3, #128	; 0x80
 8008172:	d02d      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	2b80      	cmp	r3, #128	; 0x80
 8008178:	d877      	bhi.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	d012      	beq.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008186:	e070      	b.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008188:	4b39      	ldr	r3, [pc, #228]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008194:	d107      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fec2 	bl	8008f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081a4:	e3f1      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081aa:	e3ee      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081ac:	4b30      	ldr	r3, [pc, #192]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081b8:	d107      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ba:	f107 0318 	add.w	r3, r7, #24
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fc08 	bl	80089d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081c8:	e3df      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ce:	e3dc      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081d0:	4b27      	ldr	r3, [pc, #156]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081dc:	d107      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081de:	f107 030c 	add.w	r3, r7, #12
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fd4a 	bl	8008c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ec:	e3cd      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f2:	e3ca      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081f4:	4b1e      	ldr	r3, [pc, #120]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081fe:	4b1c      	ldr	r3, [pc, #112]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0304 	and.w	r3, r3, #4
 8008206:	2b04      	cmp	r3, #4
 8008208:	d10c      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	2b00      	cmp	r3, #0
 800820e:	d109      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008210:	4b17      	ldr	r3, [pc, #92]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	08db      	lsrs	r3, r3, #3
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	4a16      	ldr	r2, [pc, #88]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800821c:	fa22 f303 	lsr.w	r3, r2, r3
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008222:	e01e      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008224:	4b12      	ldr	r3, [pc, #72]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008230:	d106      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008238:	d102      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800823a:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800823c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800823e:	e010      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008240:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800824c:	d106      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800824e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008254:	d102      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008256:	4b09      	ldr	r3, [pc, #36]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800825a:	e002      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800825c:	2300      	movs	r3, #0
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008260:	e393      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008262:	e392      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008264:	4b06      	ldr	r3, [pc, #24]	; (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008268:	e38f      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826e:	e38c      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008270:	58024400 	.word	0x58024400
 8008274:	03d09000 	.word	0x03d09000
 8008278:	003d0900 	.word	0x003d0900
 800827c:	016e3600 	.word	0x016e3600
 8008280:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008288:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800828c:	430b      	orrs	r3, r1
 800828e:	f040 809c 	bne.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8008292:	4b9e      	ldr	r3, [pc, #632]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008296:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800829a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a2:	d054      	beq.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082aa:	f200 808b 	bhi.w	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80082b4:	f000 8083 	beq.w	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80082be:	f200 8081 	bhi.w	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c8:	d02f      	beq.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d0:	d878      	bhi.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d004      	beq.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082de:	d012      	beq.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80082e0:	e070      	b.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082e2:	4b8a      	ldr	r3, [pc, #552]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082ee:	d107      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fe15 	bl	8008f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082fe:	e344      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008304:	e341      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008306:	4b81      	ldr	r3, [pc, #516]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800830e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008312:	d107      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008314:	f107 0318 	add.w	r3, r7, #24
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fb5b 	bl	80089d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008322:	e332      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008328:	e32f      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800832a:	4b78      	ldr	r3, [pc, #480]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008336:	d107      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008338:	f107 030c 	add.w	r3, r7, #12
 800833c:	4618      	mov	r0, r3
 800833e:	f000 fc9d 	bl	8008c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008346:	e320      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800834c:	e31d      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800834e:	4b6f      	ldr	r3, [pc, #444]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008356:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008358:	4b6c      	ldr	r3, [pc, #432]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b04      	cmp	r3, #4
 8008362:	d10c      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800836a:	4b68      	ldr	r3, [pc, #416]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	08db      	lsrs	r3, r3, #3
 8008370:	f003 0303 	and.w	r3, r3, #3
 8008374:	4a66      	ldr	r2, [pc, #408]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008376:	fa22 f303 	lsr.w	r3, r2, r3
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800837c:	e01e      	b.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800837e:	4b63      	ldr	r3, [pc, #396]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838a:	d106      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800838c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008392:	d102      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008394:	4b5f      	ldr	r3, [pc, #380]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008398:	e010      	b.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800839a:	4b5c      	ldr	r3, [pc, #368]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083a6:	d106      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80083a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ae:	d102      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083b0:	4b59      	ldr	r3, [pc, #356]	; (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b4:	e002      	b.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 80083ba:	e2e6      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80083bc:	e2e5      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083be:	4b57      	ldr	r3, [pc, #348]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c2:	e2e2      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c8:	e2df      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80083ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ce:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80083d2:	430b      	orrs	r3, r1
 80083d4:	f040 80a7 	bne.w	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80083d8:	4b4c      	ldr	r3, [pc, #304]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80083da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083dc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80083e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083e8:	d055      	beq.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80083ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083f0:	f200 8096 	bhi.w	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083fa:	f000 8084 	beq.w	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008404:	f200 808c 	bhi.w	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800840e:	d030      	beq.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8008410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008416:	f200 8083 	bhi.w	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008426:	d012      	beq.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8008428:	e07a      	b.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800842a:	4b38      	ldr	r3, [pc, #224]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008432:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008436:	d107      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fd71 	bl	8008f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008446:	e2a0      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008448:	2300      	movs	r3, #0
 800844a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800844c:	e29d      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800844e:	4b2f      	ldr	r3, [pc, #188]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800845a:	d107      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800845c:	f107 0318 	add.w	r3, r7, #24
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fab7 	bl	80089d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800846a:	e28e      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800846c:	2300      	movs	r3, #0
 800846e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008470:	e28b      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008472:	4b26      	ldr	r3, [pc, #152]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800847a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800847e:	d107      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008480:	f107 030c 	add.w	r3, r7, #12
 8008484:	4618      	mov	r0, r3
 8008486:	f000 fbf9 	bl	8008c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800848e:	e27c      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008494:	e279      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008496:	4b1d      	ldr	r3, [pc, #116]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800849e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084a0:	4b1a      	ldr	r3, [pc, #104]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	d10c      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80084ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d109      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084b2:	4b16      	ldr	r3, [pc, #88]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	08db      	lsrs	r3, r3, #3
 80084b8:	f003 0303 	and.w	r3, r3, #3
 80084bc:	4a14      	ldr	r2, [pc, #80]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80084be:	fa22 f303 	lsr.w	r3, r2, r3
 80084c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084c4:	e01e      	b.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084c6:	4b11      	ldr	r3, [pc, #68]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d2:	d106      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80084d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084da:	d102      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084dc:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e0:	e010      	b.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084e2:	4b0a      	ldr	r3, [pc, #40]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084ee:	d106      	bne.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f6:	d102      	bne.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084f8:	4b07      	ldr	r3, [pc, #28]	; (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80084fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084fc:	e002      	b.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008502:	e242      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008504:	e241      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800850a:	e23e      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800850c:	58024400 	.word	0x58024400
 8008510:	03d09000 	.word	0x03d09000
 8008514:	003d0900 	.word	0x003d0900
 8008518:	016e3600 	.word	0x016e3600
 800851c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008524:	e231      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800852a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800852e:	430b      	orrs	r3, r1
 8008530:	f040 8085 	bne.w	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008534:	4b9c      	ldr	r3, [pc, #624]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008538:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800853c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008544:	d06b      	beq.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800854c:	d874      	bhi.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008554:	d056      	beq.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800855c:	d86c      	bhi.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008560:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008564:	d03b      	beq.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8008566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008568:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800856c:	d864      	bhi.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008574:	d021      	beq.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800857c:	d85c      	bhi.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858a:	d004      	beq.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800858c:	e054      	b.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800858e:	f7fe fb5f 	bl	8006c50 <HAL_RCC_GetPCLK1Freq>
 8008592:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008594:	e1f9      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008596:	4b84      	ldr	r3, [pc, #528]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800859e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085a2:	d107      	bne.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a4:	f107 0318 	add.w	r3, r7, #24
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 fa13 	bl	80089d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b2:	e1ea      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b8:	e1e7      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085ba:	4b7b      	ldr	r3, [pc, #492]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085c6:	d107      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c8:	f107 030c 	add.w	r3, r7, #12
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 fb55 	bl	8008c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d6:	e1d8      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80085d8:	2300      	movs	r3, #0
 80085da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085dc:	e1d5      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085de:	4b72      	ldr	r3, [pc, #456]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0304 	and.w	r3, r3, #4
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d109      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085ea:	4b6f      	ldr	r3, [pc, #444]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	08db      	lsrs	r3, r3, #3
 80085f0:	f003 0303 	and.w	r3, r3, #3
 80085f4:	4a6d      	ldr	r2, [pc, #436]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80085f6:	fa22 f303 	lsr.w	r3, r2, r3
 80085fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085fc:	e1c5      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008602:	e1c2      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008604:	4b68      	ldr	r3, [pc, #416]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800860c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008610:	d102      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8008612:	4b67      	ldr	r3, [pc, #412]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008616:	e1b8      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800861c:	e1b5      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800861e:	4b62      	ldr	r3, [pc, #392]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862a:	d102      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800862c:	4b61      	ldr	r3, [pc, #388]	; (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800862e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008630:	e1ab      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008636:	e1a8      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800863c:	e1a5      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800863e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008642:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008646:	430b      	orrs	r3, r1
 8008648:	d173      	bne.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800864a:	4b57      	ldr	r3, [pc, #348]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800864c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008652:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800865a:	d02f      	beq.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008662:	d863      	bhi.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008666:	2b00      	cmp	r3, #0
 8008668:	d004      	beq.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008670:	d012      	beq.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008672:	e05b      	b.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008674:	4b4c      	ldr	r3, [pc, #304]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800867c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008680:	d107      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008682:	f107 0318 	add.w	r3, r7, #24
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f9a4 	bl	80089d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008690:	e17b      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008696:	e178      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008698:	4b43      	ldr	r3, [pc, #268]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086a4:	d107      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086a6:	f107 030c 	add.w	r3, r7, #12
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fae6 	bl	8008c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086b4:	e169      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ba:	e166      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086bc:	4b3a      	ldr	r3, [pc, #232]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086c6:	4b38      	ldr	r3, [pc, #224]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d10c      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80086d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d109      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086d8:	4b33      	ldr	r3, [pc, #204]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	08db      	lsrs	r3, r3, #3
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	4a32      	ldr	r2, [pc, #200]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80086e4:	fa22 f303 	lsr.w	r3, r2, r3
 80086e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ea:	e01e      	b.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086ec:	4b2e      	ldr	r3, [pc, #184]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086f8:	d106      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80086fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008700:	d102      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008702:	4b2b      	ldr	r3, [pc, #172]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008706:	e010      	b.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008708:	4b27      	ldr	r3, [pc, #156]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008714:	d106      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800871c:	d102      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800871e:	4b25      	ldr	r3, [pc, #148]	; (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008722:	e002      	b.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008728:	e12f      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800872a:	e12e      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008730:	e12b      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008736:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800873a:	430b      	orrs	r3, r1
 800873c:	d13c      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800873e:	4b1a      	ldr	r3, [pc, #104]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008746:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	2b00      	cmp	r3, #0
 800874c:	d004      	beq.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008754:	d012      	beq.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8008756:	e023      	b.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008758:	4b13      	ldr	r3, [pc, #76]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008764:	d107      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fbda 	bl	8008f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008774:	e109      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800877a:	e106      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008788:	d107      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800878a:	f107 0318 	add.w	r3, r7, #24
 800878e:	4618      	mov	r0, r3
 8008790:	f000 f920 	bl	80089d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008798:	e0f7      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800879e:	e0f4      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087a4:	e0f1      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80087a6:	bf00      	nop
 80087a8:	58024400 	.word	0x58024400
 80087ac:	03d09000 	.word	0x03d09000
 80087b0:	003d0900 	.word	0x003d0900
 80087b4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80087b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087bc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80087c0:	430b      	orrs	r3, r1
 80087c2:	f040 8091 	bne.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80087c6:	4b73      	ldr	r3, [pc, #460]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80087c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80087ce:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80087d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80087d6:	f000 8081 	beq.w	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80087e0:	d87f      	bhi.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80087e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087e8:	d06b      	beq.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087f0:	d877      	bhi.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f8:	d056      	beq.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008800:	d86f      	bhi.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008808:	d03b      	beq.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008810:	d867      	bhi.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008818:	d021      	beq.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008820:	d85f      	bhi.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800882e:	d004      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008830:	e057      	b.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008832:	f000 f8b9 	bl	80089a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008836:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008838:	e0a7      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800883a:	4b56      	ldr	r3, [pc, #344]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008846:	d107      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008848:	f107 0318 	add.w	r3, r7, #24
 800884c:	4618      	mov	r0, r3
 800884e:	f000 f8c1 	bl	80089d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008856:	e098      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800885c:	e095      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800885e:	4b4d      	ldr	r3, [pc, #308]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800886a:	d107      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800886c:	f107 030c 	add.w	r3, r7, #12
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fa03 	bl	8008c7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800887a:	e086      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008880:	e083      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008882:	4b44      	ldr	r3, [pc, #272]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0304 	and.w	r3, r3, #4
 800888a:	2b04      	cmp	r3, #4
 800888c:	d109      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800888e:	4b41      	ldr	r3, [pc, #260]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	08db      	lsrs	r3, r3, #3
 8008894:	f003 0303 	and.w	r3, r3, #3
 8008898:	4a3f      	ldr	r2, [pc, #252]	; (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800889a:	fa22 f303 	lsr.w	r3, r2, r3
 800889e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088a0:	e073      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088a6:	e070      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80088a8:	4b3a      	ldr	r3, [pc, #232]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088b4:	d102      	bne.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80088b6:	4b39      	ldr	r3, [pc, #228]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80088b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ba:	e066      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088c0:	e063      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80088c2:	4b34      	ldr	r3, [pc, #208]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088ce:	d102      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80088d0:	4b33      	ldr	r3, [pc, #204]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80088d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d4:	e059      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088da:	e056      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088dc:	4b31      	ldr	r3, [pc, #196]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80088de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e0:	e053      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e6:	e050      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80088e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80088f0:	430b      	orrs	r3, r1
 80088f2:	d148      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80088f4:	4b27      	ldr	r3, [pc, #156]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80088f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008904:	d02a      	beq.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800890c:	d838      	bhi.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	2b00      	cmp	r3, #0
 8008912:	d004      	beq.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800891a:	d00d      	beq.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800891c:	e030      	b.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800891e:	4b1d      	ldr	r3, [pc, #116]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800892a:	d102      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800892c:	4b1c      	ldr	r3, [pc, #112]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008930:	e02b      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008936:	e028      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008938:	4b16      	ldr	r3, [pc, #88]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008944:	d107      	bne.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800894a:	4618      	mov	r0, r3
 800894c:	f000 faea 	bl	8008f24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008954:	e019      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008956:	2300      	movs	r3, #0
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800895a:	e016      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800895c:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008968:	d107      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800896a:	f107 0318 	add.w	r3, r7, #24
 800896e:	4618      	mov	r0, r3
 8008970:	f000 f830 	bl	80089d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008978:	e007      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800897e:	e004      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008984:	e001      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800898a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800898c:	4618      	mov	r0, r3
 800898e:	3740      	adds	r7, #64	; 0x40
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	58024400 	.word	0x58024400
 8008998:	03d09000 	.word	0x03d09000
 800899c:	003d0900 	.word	0x003d0900
 80089a0:	016e3600 	.word	0x016e3600
 80089a4:	00bb8000 	.word	0x00bb8000

080089a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80089ac:	f7fe f920 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 80089b0:	4602      	mov	r2, r0
 80089b2:	4b06      	ldr	r3, [pc, #24]	; (80089cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	091b      	lsrs	r3, r3, #4
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	4904      	ldr	r1, [pc, #16]	; (80089d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80089be:	5ccb      	ldrb	r3, [r1, r3]
 80089c0:	f003 031f 	and.w	r3, r3, #31
 80089c4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	58024400 	.word	0x58024400
 80089d0:	08009568 	.word	0x08009568

080089d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b089      	sub	sp, #36	; 0x24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089dc:	4ba1      	ldr	r3, [pc, #644]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	f003 0303 	and.w	r3, r3, #3
 80089e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80089e6:	4b9f      	ldr	r3, [pc, #636]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	0b1b      	lsrs	r3, r3, #12
 80089ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80089f2:	4b9c      	ldr	r3, [pc, #624]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f6:	091b      	lsrs	r3, r3, #4
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80089fe:	4b99      	ldr	r3, [pc, #612]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a02:	08db      	lsrs	r3, r3, #3
 8008a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	fb02 f303 	mul.w	r3, r2, r3
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8111 	beq.w	8008c44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	f000 8083 	beq.w	8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	f200 80a1 	bhi.w	8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d003      	beq.n	8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d056      	beq.n	8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008a3e:	e099      	b.n	8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a40:	4b88      	ldr	r3, [pc, #544]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0320 	and.w	r3, r3, #32
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d02d      	beq.n	8008aa8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a4c:	4b85      	ldr	r3, [pc, #532]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	08db      	lsrs	r3, r3, #3
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	4a84      	ldr	r2, [pc, #528]	; (8008c68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008a58:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	ee07 3a90 	vmov	s15, r3
 8008a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a76:	4b7b      	ldr	r3, [pc, #492]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008aa6:	e087      	b.n	8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aba:	4b6a      	ldr	r3, [pc, #424]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ace:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aea:	e065      	b.n	8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afe:	4b59      	ldr	r3, [pc, #356]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b2e:	e043      	b.n	8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b42:	4b48      	ldr	r3, [pc, #288]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b72:	e021      	b.n	8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b86:	4b37      	ldr	r3, [pc, #220]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008bb8:	4b2a      	ldr	r3, [pc, #168]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	0a5b      	lsrs	r3, r3, #9
 8008bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bde:	ee17 2a90 	vmov	r2, s15
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008be6:	4b1f      	ldr	r3, [pc, #124]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bea:	0c1b      	lsrs	r3, r3, #16
 8008bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c0c:	ee17 2a90 	vmov	r2, s15
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008c14:	4b13      	ldr	r3, [pc, #76]	; (8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	0e1b      	lsrs	r3, r3, #24
 8008c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c3a:	ee17 2a90 	vmov	r2, s15
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008c42:	e008      	b.n	8008c56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	609a      	str	r2, [r3, #8]
}
 8008c56:	bf00      	nop
 8008c58:	3724      	adds	r7, #36	; 0x24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	58024400 	.word	0x58024400
 8008c68:	03d09000 	.word	0x03d09000
 8008c6c:	46000000 	.word	0x46000000
 8008c70:	4c742400 	.word	0x4c742400
 8008c74:	4a742400 	.word	0x4a742400
 8008c78:	4bb71b00 	.word	0x4bb71b00

08008c7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b089      	sub	sp, #36	; 0x24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c84:	4ba1      	ldr	r3, [pc, #644]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c88:	f003 0303 	and.w	r3, r3, #3
 8008c8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c8e:	4b9f      	ldr	r3, [pc, #636]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c92:	0d1b      	lsrs	r3, r3, #20
 8008c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c9a:	4b9c      	ldr	r3, [pc, #624]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	0a1b      	lsrs	r3, r3, #8
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ca6:	4b99      	ldr	r3, [pc, #612]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008caa:	08db      	lsrs	r3, r3, #3
 8008cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	fb02 f303 	mul.w	r3, r2, r3
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 8111 	beq.w	8008eec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	f000 8083 	beq.w	8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	f200 80a1 	bhi.w	8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d056      	beq.n	8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ce6:	e099      	b.n	8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ce8:	4b88      	ldr	r3, [pc, #544]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0320 	and.w	r3, r3, #32
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d02d      	beq.n	8008d50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cf4:	4b85      	ldr	r3, [pc, #532]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	08db      	lsrs	r3, r3, #3
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	4a84      	ldr	r2, [pc, #528]	; (8008f10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008d00:	fa22 f303 	lsr.w	r3, r2, r3
 8008d04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	ee07 3a90 	vmov	s15, r3
 8008d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1e:	4b7b      	ldr	r3, [pc, #492]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d4e:	e087      	b.n	8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d62:	4b6a      	ldr	r3, [pc, #424]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d92:	e065      	b.n	8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da6:	4b59      	ldr	r3, [pc, #356]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dd6:	e043      	b.n	8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dea:	4b48      	ldr	r3, [pc, #288]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dfe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e1a:	e021      	b.n	8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e2e:	4b37      	ldr	r3, [pc, #220]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008e60:	4b2a      	ldr	r3, [pc, #168]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e64:	0a5b      	lsrs	r3, r3, #9
 8008e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e86:	ee17 2a90 	vmov	r2, s15
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e8e:	4b1f      	ldr	r3, [pc, #124]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e92:	0c1b      	lsrs	r3, r3, #16
 8008e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e98:	ee07 3a90 	vmov	s15, r3
 8008e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eb4:	ee17 2a90 	vmov	r2, s15
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008ebc:	4b13      	ldr	r3, [pc, #76]	; (8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec0:	0e1b      	lsrs	r3, r3, #24
 8008ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ece:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ee2:	ee17 2a90 	vmov	r2, s15
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008eea:	e008      	b.n	8008efe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	609a      	str	r2, [r3, #8]
}
 8008efe:	bf00      	nop
 8008f00:	3724      	adds	r7, #36	; 0x24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	03d09000 	.word	0x03d09000
 8008f14:	46000000 	.word	0x46000000
 8008f18:	4c742400 	.word	0x4c742400
 8008f1c:	4a742400 	.word	0x4a742400
 8008f20:	4bb71b00 	.word	0x4bb71b00

08008f24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b089      	sub	sp, #36	; 0x24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f2c:	4ba0      	ldr	r3, [pc, #640]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f30:	f003 0303 	and.w	r3, r3, #3
 8008f34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008f36:	4b9e      	ldr	r3, [pc, #632]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3a:	091b      	lsrs	r3, r3, #4
 8008f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008f42:	4b9b      	ldr	r3, [pc, #620]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008f4c:	4b98      	ldr	r3, [pc, #608]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f50:	08db      	lsrs	r3, r3, #3
 8008f52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	fb02 f303 	mul.w	r3, r2, r3
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 8111 	beq.w	8009192 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	f000 8083 	beq.w	800907e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	f200 80a1 	bhi.w	80090c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d056      	beq.n	800903a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008f8c:	e099      	b.n	80090c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f8e:	4b88      	ldr	r3, [pc, #544]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0320 	and.w	r3, r3, #32
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d02d      	beq.n	8008ff6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f9a:	4b85      	ldr	r3, [pc, #532]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	08db      	lsrs	r3, r3, #3
 8008fa0:	f003 0303 	and.w	r3, r3, #3
 8008fa4:	4a83      	ldr	r2, [pc, #524]	; (80091b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8008faa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	ee07 3a90 	vmov	s15, r3
 8008fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc4:	4b7a      	ldr	r3, [pc, #488]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fcc:	ee07 3a90 	vmov	s15, r3
 8008fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fd8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80091b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ff4:	e087      	b.n	8009106 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	ee07 3a90 	vmov	s15, r3
 8008ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009000:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80091bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009008:	4b69      	ldr	r3, [pc, #420]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800900a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009010:	ee07 3a90 	vmov	s15, r3
 8009014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009018:	ed97 6a03 	vldr	s12, [r7, #12]
 800901c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80091b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800902c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009034:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009038:	e065      	b.n	8009106 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	ee07 3a90 	vmov	s15, r3
 8009040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009044:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80091c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904c:	4b58      	ldr	r3, [pc, #352]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009054:	ee07 3a90 	vmov	s15, r3
 8009058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009060:	eddf 5a55 	vldr	s11, [pc, #340]	; 80091b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009078:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800907c:	e043      	b.n	8009106 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	ee07 3a90 	vmov	s15, r3
 8009084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009088:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80091c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800908c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009090:	4b47      	ldr	r3, [pc, #284]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009098:	ee07 3a90 	vmov	s15, r3
 800909c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80090a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80091b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c0:	e021      	b.n	8009106 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	ee07 3a90 	vmov	s15, r3
 80090c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090cc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80091bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80090d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090d4:	4b36      	ldr	r3, [pc, #216]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090dc:	ee07 3a90 	vmov	s15, r3
 80090e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80090e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80091b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009100:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009104:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009106:	4b2a      	ldr	r3, [pc, #168]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910a:	0a5b      	lsrs	r3, r3, #9
 800910c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009110:	ee07 3a90 	vmov	s15, r3
 8009114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800911c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009120:	edd7 6a07 	vldr	s13, [r7, #28]
 8009124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800912c:	ee17 2a90 	vmov	r2, s15
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009134:	4b1e      	ldr	r3, [pc, #120]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009138:	0c1b      	lsrs	r3, r3, #16
 800913a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800914a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800914e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800915a:	ee17 2a90 	vmov	r2, s15
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009162:	4b13      	ldr	r3, [pc, #76]	; (80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009166:	0e1b      	lsrs	r3, r3, #24
 8009168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800916c:	ee07 3a90 	vmov	s15, r3
 8009170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009174:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800917c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009188:	ee17 2a90 	vmov	r2, s15
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009190:	e008      	b.n	80091a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	609a      	str	r2, [r3, #8]
}
 80091a4:	bf00      	nop
 80091a6:	3724      	adds	r7, #36	; 0x24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	58024400 	.word	0x58024400
 80091b4:	03d09000 	.word	0x03d09000
 80091b8:	46000000 	.word	0x46000000
 80091bc:	4c742400 	.word	0x4c742400
 80091c0:	4a742400 	.word	0x4a742400
 80091c4:	4bb71b00 	.word	0x4bb71b00

080091c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091d6:	4b53      	ldr	r3, [pc, #332]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80091d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091da:	f003 0303 	and.w	r3, r3, #3
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d101      	bne.n	80091e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e099      	b.n	800931a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80091e6:	4b4f      	ldr	r3, [pc, #316]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a4e      	ldr	r2, [pc, #312]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80091ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091f2:	f7f8 fadb 	bl	80017ac <HAL_GetTick>
 80091f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091f8:	e008      	b.n	800920c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091fa:	f7f8 fad7 	bl	80017ac <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	2b02      	cmp	r3, #2
 8009206:	d901      	bls.n	800920c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	e086      	b.n	800931a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800920c:	4b45      	ldr	r3, [pc, #276]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1f0      	bne.n	80091fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009218:	4b42      	ldr	r3, [pc, #264]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	031b      	lsls	r3, r3, #12
 8009226:	493f      	ldr	r1, [pc, #252]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 8009228:	4313      	orrs	r3, r2
 800922a:	628b      	str	r3, [r1, #40]	; 0x28
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	3b01      	subs	r3, #1
 8009232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	3b01      	subs	r3, #1
 800923c:	025b      	lsls	r3, r3, #9
 800923e:	b29b      	uxth	r3, r3
 8009240:	431a      	orrs	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	3b01      	subs	r3, #1
 8009248:	041b      	lsls	r3, r3, #16
 800924a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800924e:	431a      	orrs	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	3b01      	subs	r3, #1
 8009256:	061b      	lsls	r3, r3, #24
 8009258:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800925c:	4931      	ldr	r1, [pc, #196]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 800925e:	4313      	orrs	r3, r2
 8009260:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009262:	4b30      	ldr	r3, [pc, #192]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 8009264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009266:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	492d      	ldr	r1, [pc, #180]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 8009270:	4313      	orrs	r3, r2
 8009272:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009274:	4b2b      	ldr	r3, [pc, #172]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	f023 0220 	bic.w	r2, r3, #32
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	699b      	ldr	r3, [r3, #24]
 8009280:	4928      	ldr	r1, [pc, #160]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 8009282:	4313      	orrs	r3, r2
 8009284:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009286:	4b27      	ldr	r3, [pc, #156]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 8009288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928a:	4a26      	ldr	r2, [pc, #152]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 800928c:	f023 0310 	bic.w	r3, r3, #16
 8009290:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009292:	4b24      	ldr	r3, [pc, #144]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 8009294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009296:	4b24      	ldr	r3, [pc, #144]	; (8009328 <RCCEx_PLL2_Config+0x160>)
 8009298:	4013      	ands	r3, r2
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	69d2      	ldr	r2, [r2, #28]
 800929e:	00d2      	lsls	r2, r2, #3
 80092a0:	4920      	ldr	r1, [pc, #128]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80092a6:	4b1f      	ldr	r3, [pc, #124]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	4a1e      	ldr	r2, [pc, #120]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80092ac:	f043 0310 	orr.w	r3, r3, #16
 80092b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d106      	bne.n	80092c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80092b8:	4b1a      	ldr	r3, [pc, #104]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80092ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092bc:	4a19      	ldr	r2, [pc, #100]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80092be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092c4:	e00f      	b.n	80092e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d106      	bne.n	80092da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80092cc:	4b15      	ldr	r3, [pc, #84]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	4a14      	ldr	r2, [pc, #80]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80092d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092d8:	e005      	b.n	80092e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80092da:	4b12      	ldr	r3, [pc, #72]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80092dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092de:	4a11      	ldr	r2, [pc, #68]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80092e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80092e6:	4b0f      	ldr	r3, [pc, #60]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a0e      	ldr	r2, [pc, #56]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 80092ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092f2:	f7f8 fa5b 	bl	80017ac <HAL_GetTick>
 80092f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092f8:	e008      	b.n	800930c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80092fa:	f7f8 fa57 	bl	80017ac <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d901      	bls.n	800930c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e006      	b.n	800931a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800930c:	4b05      	ldr	r3, [pc, #20]	; (8009324 <RCCEx_PLL2_Config+0x15c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0f0      	beq.n	80092fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009318:	7bfb      	ldrb	r3, [r7, #15]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	58024400 	.word	0x58024400
 8009328:	ffff0007 	.word	0xffff0007

0800932c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800933a:	4b53      	ldr	r3, [pc, #332]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 800933c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933e:	f003 0303 	and.w	r3, r3, #3
 8009342:	2b03      	cmp	r3, #3
 8009344:	d101      	bne.n	800934a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e099      	b.n	800947e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800934a:	4b4f      	ldr	r3, [pc, #316]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a4e      	ldr	r2, [pc, #312]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 8009350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009356:	f7f8 fa29 	bl	80017ac <HAL_GetTick>
 800935a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800935c:	e008      	b.n	8009370 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800935e:	f7f8 fa25 	bl	80017ac <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	2b02      	cmp	r3, #2
 800936a:	d901      	bls.n	8009370 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800936c:	2303      	movs	r3, #3
 800936e:	e086      	b.n	800947e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009370:	4b45      	ldr	r3, [pc, #276]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1f0      	bne.n	800935e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800937c:	4b42      	ldr	r3, [pc, #264]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 800937e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009380:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	051b      	lsls	r3, r3, #20
 800938a:	493f      	ldr	r1, [pc, #252]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 800938c:	4313      	orrs	r3, r2
 800938e:	628b      	str	r3, [r1, #40]	; 0x28
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	3b01      	subs	r3, #1
 8009396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	3b01      	subs	r3, #1
 80093a0:	025b      	lsls	r3, r3, #9
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	431a      	orrs	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	041b      	lsls	r3, r3, #16
 80093ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093b2:	431a      	orrs	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	061b      	lsls	r3, r3, #24
 80093bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093c0:	4931      	ldr	r1, [pc, #196]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80093c6:	4b30      	ldr	r3, [pc, #192]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 80093c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	492d      	ldr	r1, [pc, #180]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80093d8:	4b2b      	ldr	r3, [pc, #172]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 80093da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	4928      	ldr	r1, [pc, #160]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80093ea:	4b27      	ldr	r3, [pc, #156]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 80093ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ee:	4a26      	ldr	r2, [pc, #152]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 80093f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80093f6:	4b24      	ldr	r3, [pc, #144]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 80093f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093fa:	4b24      	ldr	r3, [pc, #144]	; (800948c <RCCEx_PLL3_Config+0x160>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	69d2      	ldr	r2, [r2, #28]
 8009402:	00d2      	lsls	r2, r2, #3
 8009404:	4920      	ldr	r1, [pc, #128]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 8009406:	4313      	orrs	r3, r2
 8009408:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800940a:	4b1f      	ldr	r3, [pc, #124]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 8009410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800941c:	4b1a      	ldr	r3, [pc, #104]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 800941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009420:	4a19      	ldr	r2, [pc, #100]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 8009422:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009426:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009428:	e00f      	b.n	800944a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d106      	bne.n	800943e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009430:	4b15      	ldr	r3, [pc, #84]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	4a14      	ldr	r2, [pc, #80]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 8009436:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800943a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800943c:	e005      	b.n	800944a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800943e:	4b12      	ldr	r3, [pc, #72]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 8009440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009442:	4a11      	ldr	r2, [pc, #68]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 8009444:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009448:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800944a:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a0e      	ldr	r2, [pc, #56]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 8009450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009456:	f7f8 f9a9 	bl	80017ac <HAL_GetTick>
 800945a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800945c:	e008      	b.n	8009470 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800945e:	f7f8 f9a5 	bl	80017ac <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	2b02      	cmp	r3, #2
 800946a:	d901      	bls.n	8009470 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e006      	b.n	800947e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <RCCEx_PLL3_Config+0x15c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0f0      	beq.n	800945e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800947c:	7bfb      	ldrb	r3, [r7, #15]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	58024400 	.word	0x58024400
 800948c:	ffff0007 	.word	0xffff0007

08009490 <memset>:
 8009490:	4402      	add	r2, r0
 8009492:	4603      	mov	r3, r0
 8009494:	4293      	cmp	r3, r2
 8009496:	d100      	bne.n	800949a <memset+0xa>
 8009498:	4770      	bx	lr
 800949a:	f803 1b01 	strb.w	r1, [r3], #1
 800949e:	e7f9      	b.n	8009494 <memset+0x4>

080094a0 <__libc_init_array>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	4d0d      	ldr	r5, [pc, #52]	; (80094d8 <__libc_init_array+0x38>)
 80094a4:	4c0d      	ldr	r4, [pc, #52]	; (80094dc <__libc_init_array+0x3c>)
 80094a6:	1b64      	subs	r4, r4, r5
 80094a8:	10a4      	asrs	r4, r4, #2
 80094aa:	2600      	movs	r6, #0
 80094ac:	42a6      	cmp	r6, r4
 80094ae:	d109      	bne.n	80094c4 <__libc_init_array+0x24>
 80094b0:	4d0b      	ldr	r5, [pc, #44]	; (80094e0 <__libc_init_array+0x40>)
 80094b2:	4c0c      	ldr	r4, [pc, #48]	; (80094e4 <__libc_init_array+0x44>)
 80094b4:	f000 f826 	bl	8009504 <_init>
 80094b8:	1b64      	subs	r4, r4, r5
 80094ba:	10a4      	asrs	r4, r4, #2
 80094bc:	2600      	movs	r6, #0
 80094be:	42a6      	cmp	r6, r4
 80094c0:	d105      	bne.n	80094ce <__libc_init_array+0x2e>
 80094c2:	bd70      	pop	{r4, r5, r6, pc}
 80094c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c8:	4798      	blx	r3
 80094ca:	3601      	adds	r6, #1
 80094cc:	e7ee      	b.n	80094ac <__libc_init_array+0xc>
 80094ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d2:	4798      	blx	r3
 80094d4:	3601      	adds	r6, #1
 80094d6:	e7f2      	b.n	80094be <__libc_init_array+0x1e>
 80094d8:	08009580 	.word	0x08009580
 80094dc:	08009580 	.word	0x08009580
 80094e0:	08009580 	.word	0x08009580
 80094e4:	08009584 	.word	0x08009584

080094e8 <memcpy>:
 80094e8:	440a      	add	r2, r1
 80094ea:	4291      	cmp	r1, r2
 80094ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80094f0:	d100      	bne.n	80094f4 <memcpy+0xc>
 80094f2:	4770      	bx	lr
 80094f4:	b510      	push	{r4, lr}
 80094f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094fe:	4291      	cmp	r1, r2
 8009500:	d1f9      	bne.n	80094f6 <memcpy+0xe>
 8009502:	bd10      	pop	{r4, pc}

08009504 <_init>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	bf00      	nop
 8009508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950a:	bc08      	pop	{r3}
 800950c:	469e      	mov	lr, r3
 800950e:	4770      	bx	lr

08009510 <_fini>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	bf00      	nop
 8009514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009516:	bc08      	pop	{r3}
 8009518:	469e      	mov	lr, r3
 800951a:	4770      	bx	lr

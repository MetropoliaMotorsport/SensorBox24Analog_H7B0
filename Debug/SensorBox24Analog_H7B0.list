
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f8  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080093a4  080093a4  000193a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009408  08009408  00019408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800940c  0800940c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08009410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000046c  24000010  08009420  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400047c  08009420  0002047c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001568b  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026e5  00000000  00000000  0003570c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001270  00000000  00000000  00037df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e40  00000000  00000000  00039068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031f09  00000000  00000000  00039ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017045  00000000  00000000  0006bdb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d5ec  00000000  00000000  00082df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005030  00000000  00000000  001d03e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000007c  00000000  00000000  001d5414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800938c 	.word	0x0800938c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800938c 	.word	0x0800938c

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MX_DMA_Init();
 80002f0:	f000 fc1c 	bl	8000b2c <MX_DMA_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f001 f93c 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f834 	bl	8000364 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002fc:	f000 f8a8 	bl	8000450 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000300:	f000 fc3c 	bl	8000b7c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000304:	f000 f9d0 	bl	80006a8 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000308:	f000 fa88 	bl	800081c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800030c:	f000 faea 	bl	80008e4 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000310:	f000 fb4c 	bl	80009ac <MX_I2C1_Init>
  MX_I2C3_Init();
 8000314:	f000 fb8a 	bl	8000a2c <MX_I2C3_Init>
  MX_ADC1_Init();
 8000318:	f000 f8ca 	bl	80004b0 <MX_ADC1_Init>
  MX_I2C4_Init();
 800031c:	f000 fbc6 	bl	8000aac <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  //if(HAL_ADC_Start_IT(&hadc1) != HAL_OK){ Error_Handler(); }
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <main+0x68>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	461a      	mov	r2, r3
 8000326:	490c      	ldr	r1, [pc, #48]	; (8000358 <main+0x6c>)
 8000328:	480a      	ldr	r0, [pc, #40]	; (8000354 <main+0x68>)
 800032a:	f001 fcf5 	bl	8001d18 <HAL_ADC_Start_DMA>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <main+0x4c>
 8000334:	f000 fcb6 	bl	8000ca4 <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADC2Data, hadc2.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <main+0x70>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	461a      	mov	r2, r3
 800033e:	4908      	ldr	r1, [pc, #32]	; (8000360 <main+0x74>)
 8000340:	4806      	ldr	r0, [pc, #24]	; (800035c <main+0x70>)
 8000342:	f001 fce9 	bl	8001d18 <HAL_ADC_Start_DMA>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <main+0x64>
 800034c:	f000 fcaa 	bl	8000ca4 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000350:	e7fe      	b.n	8000350 <main+0x64>
 8000352:	bf00      	nop
 8000354:	2400002c 	.word	0x2400002c
 8000358:	24000420 	.word	0x24000420
 800035c:	24000090 	.word	0x24000090
 8000360:	24000438 	.word	0x24000438

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b09c      	sub	sp, #112	; 0x70
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800036e:	224c      	movs	r2, #76	; 0x4c
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f008 ffd0 	bl	8009318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2220      	movs	r2, #32
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f008 ffca 	bl	8009318 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000384:	4b30      	ldr	r3, [pc, #192]	; (8000448 <SystemClock_Config+0xe4>)
 8000386:	f04f 32ff 	mov.w	r2, #4294967295
 800038a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800038e:	2002      	movs	r0, #2
 8000390:	f005 fbd6 	bl	8005b40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000394:	2300      	movs	r3, #0
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	4b2c      	ldr	r3, [pc, #176]	; (800044c <SystemClock_Config+0xe8>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a2b      	ldr	r2, [pc, #172]	; (800044c <SystemClock_Config+0xe8>)
 800039e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b29      	ldr	r3, [pc, #164]	; (800044c <SystemClock_Config+0xe8>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003ac:	603b      	str	r3, [r7, #0]
 80003ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003b0:	bf00      	nop
 80003b2:	4b26      	ldr	r3, [pc, #152]	; (800044c <SystemClock_Config+0xe8>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003be:	d1f8      	bne.n	80003b2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c0:	2302      	movs	r3, #2
 80003c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003c4:	2301      	movs	r3, #1
 80003c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003c8:	2340      	movs	r3, #64	; 0x40
 80003ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003cc:	2302      	movs	r3, #2
 80003ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d0:	2300      	movs	r3, #0
 80003d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003d4:	2304      	movs	r3, #4
 80003d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003d8:	2308      	movs	r3, #8
 80003da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003dc:	2302      	movs	r3, #2
 80003de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80003e0:	2303      	movs	r3, #3
 80003e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003e4:	2302      	movs	r3, #2
 80003e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003e8:	230c      	movs	r3, #12
 80003ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f8:	4618      	mov	r0, r3
 80003fa:	f005 fbdb 	bl	8005bb4 <HAL_RCC_OscConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000404:	f000 fc4e 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000408:	233f      	movs	r3, #63	; 0x3f
 800040a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800040c:	2300      	movs	r3, #0
 800040e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000418:	2340      	movs	r3, #64	; 0x40
 800041a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800041c:	2340      	movs	r3, #64	; 0x40
 800041e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000424:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000426:	2340      	movs	r3, #64	; 0x40
 8000428:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2102      	movs	r1, #2
 800042e:	4618      	mov	r0, r3
 8000430:	f005 fff2 	bl	8006418 <HAL_RCC_ClockConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800043a:	f000 fc33 	bl	8000ca4 <Error_Handler>
  }
}
 800043e:	bf00      	nop
 8000440:	3770      	adds	r7, #112	; 0x70
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	58024400 	.word	0x58024400
 800044c:	58024800 	.word	0x58024800

08000450 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b0b0      	sub	sp, #192	; 0xc0
 8000454:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000456:	463b      	mov	r3, r7
 8000458:	22c0      	movs	r2, #192	; 0xc0
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f008 ff5b 	bl	8009318 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000462:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000466:	f04f 0300 	mov.w	r3, #0
 800046a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800046e:	2304      	movs	r3, #4
 8000470:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000472:	2308      	movs	r3, #8
 8000474:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 8000476:	230a      	movs	r3, #10
 8000478:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800047a:	2302      	movs	r3, #2
 800047c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800047e:	2302      	movs	r3, #2
 8000480:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000482:	23c0      	movs	r3, #192	; 0xc0
 8000484:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000486:	2300      	movs	r3, #0
 8000488:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800048e:	2300      	movs	r3, #0
 8000490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000494:	463b      	mov	r3, r7
 8000496:	4618      	mov	r0, r3
 8000498:	f006 fb34 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80004a2:	f000 fbff 	bl	8000ca4 <Error_Handler>
  }
}
 80004a6:	bf00      	nop
 80004a8:	37c0      	adds	r7, #192	; 0xc0
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	; 0x28
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]
 80004d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d4:	4b70      	ldr	r3, [pc, #448]	; (8000698 <MX_ADC1_Init+0x1e8>)
 80004d6:	4a71      	ldr	r2, [pc, #452]	; (800069c <MX_ADC1_Init+0x1ec>)
 80004d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80004da:	4b6f      	ldr	r3, [pc, #444]	; (8000698 <MX_ADC1_Init+0x1e8>)
 80004dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e2:	4b6d      	ldr	r3, [pc, #436]	; (8000698 <MX_ADC1_Init+0x1e8>)
 80004e4:	2208      	movs	r2, #8
 80004e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004e8:	4b6b      	ldr	r3, [pc, #428]	; (8000698 <MX_ADC1_Init+0x1e8>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004ee:	4b6a      	ldr	r3, [pc, #424]	; (8000698 <MX_ADC1_Init+0x1e8>)
 80004f0:	2208      	movs	r2, #8
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f4:	4b68      	ldr	r3, [pc, #416]	; (8000698 <MX_ADC1_Init+0x1e8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004fa:	4b67      	ldr	r3, [pc, #412]	; (8000698 <MX_ADC1_Init+0x1e8>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000500:	4b65      	ldr	r3, [pc, #404]	; (8000698 <MX_ADC1_Init+0x1e8>)
 8000502:	220b      	movs	r2, #11
 8000504:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000506:	4b64      	ldr	r3, [pc, #400]	; (8000698 <MX_ADC1_Init+0x1e8>)
 8000508:	2200      	movs	r2, #0
 800050a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050c:	4b62      	ldr	r3, [pc, #392]	; (8000698 <MX_ADC1_Init+0x1e8>)
 800050e:	2200      	movs	r2, #0
 8000510:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000512:	4b61      	ldr	r3, [pc, #388]	; (8000698 <MX_ADC1_Init+0x1e8>)
 8000514:	2200      	movs	r2, #0
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000518:	4b5f      	ldr	r3, [pc, #380]	; (8000698 <MX_ADC1_Init+0x1e8>)
 800051a:	2203      	movs	r2, #3
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800051e:	4b5e      	ldr	r3, [pc, #376]	; (8000698 <MX_ADC1_Init+0x1e8>)
 8000520:	2200      	movs	r2, #0
 8000522:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000524:	4b5c      	ldr	r3, [pc, #368]	; (8000698 <MX_ADC1_Init+0x1e8>)
 8000526:	2200      	movs	r2, #0
 8000528:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800052a:	4b5b      	ldr	r3, [pc, #364]	; (8000698 <MX_ADC1_Init+0x1e8>)
 800052c:	2200      	movs	r2, #0
 800052e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000532:	4859      	ldr	r0, [pc, #356]	; (8000698 <MX_ADC1_Init+0x1e8>)
 8000534:	f001 fa96 	bl	8001a64 <HAL_ADC_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800053e:	f000 fbb1 	bl	8000ca4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	4619      	mov	r1, r3
 800054c:	4852      	ldr	r0, [pc, #328]	; (8000698 <MX_ADC1_Init+0x1e8>)
 800054e:	f002 f995 	bl	800287c <HAL_ADCEx_MultiModeConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000558:	f000 fba4 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800055c:	4b50      	ldr	r3, [pc, #320]	; (80006a0 <MX_ADC1_Init+0x1f0>)
 800055e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000560:	2306      	movs	r3, #6
 8000562:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000564:	2306      	movs	r3, #6
 8000566:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000568:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800056c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800056e:	2304      	movs	r3, #4
 8000570:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000576:	2300      	movs	r3, #0
 8000578:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	4619      	mov	r1, r3
 800057e:	4846      	ldr	r0, [pc, #280]	; (8000698 <MX_ADC1_Init+0x1e8>)
 8000580:	f001 fc92 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800058a:	f000 fb8b 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800058e:	4b45      	ldr	r3, [pc, #276]	; (80006a4 <MX_ADC1_Init+0x1f4>)
 8000590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000592:	230c      	movs	r3, #12
 8000594:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000596:	463b      	mov	r3, r7
 8000598:	4619      	mov	r1, r3
 800059a:	483f      	ldr	r0, [pc, #252]	; (8000698 <MX_ADC1_Init+0x1e8>)
 800059c:	f001 fc84 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80005a6:	f000 fb7d 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005aa:	2312      	movs	r3, #18
 80005ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	4619      	mov	r1, r3
 80005b2:	4839      	ldr	r0, [pc, #228]	; (8000698 <MX_ADC1_Init+0x1e8>)
 80005b4:	f001 fc78 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80005be:	f000 fb71 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005c2:	2318      	movs	r3, #24
 80005c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4619      	mov	r1, r3
 80005ca:	4833      	ldr	r0, [pc, #204]	; (8000698 <MX_ADC1_Init+0x1e8>)
 80005cc:	f001 fc6c 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 80005d6:	f000 fb65 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	4619      	mov	r1, r3
 80005e4:	482c      	ldr	r0, [pc, #176]	; (8000698 <MX_ADC1_Init+0x1e8>)
 80005e6:	f001 fc5f 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80005f0:	f000 fb58 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80005f4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80005f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4619      	mov	r1, r3
 80005fe:	4826      	ldr	r0, [pc, #152]	; (8000698 <MX_ADC1_Init+0x1e8>)
 8000600:	f001 fc52 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800060a:	f000 fb4b 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800060e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	481f      	ldr	r0, [pc, #124]	; (8000698 <MX_ADC1_Init+0x1e8>)
 800061a:	f001 fc45 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8000624:	f000 fb3e 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000628:	f44f 7389 	mov.w	r3, #274	; 0x112
 800062c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4819      	ldr	r0, [pc, #100]	; (8000698 <MX_ADC1_Init+0x1e8>)
 8000634:	f001 fc38 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 800063e:	f000 fb31 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000642:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000646:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	4812      	ldr	r0, [pc, #72]	; (8000698 <MX_ADC1_Init+0x1e8>)
 800064e:	f001 fc2b 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000658:	f000 fb24 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800065c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000660:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4619      	mov	r1, r3
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <MX_ADC1_Init+0x1e8>)
 8000668:	f001 fc1e 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8000672:	f000 fb17 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000676:	f240 2306 	movw	r3, #518	; 0x206
 800067a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_ADC1_Init+0x1e8>)
 8000682:	f001 fc11 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800068c:	f000 fb0a 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3728      	adds	r7, #40	; 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2400002c 	.word	0x2400002c
 800069c:	40022000 	.word	0x40022000
 80006a0:	47520000 	.word	0x47520000
 80006a4:	10c00010 	.word	0x10c00010

080006a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]
 80006be:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006c0:	4b51      	ldr	r3, [pc, #324]	; (8000808 <MX_ADC2_Init+0x160>)
 80006c2:	4a52      	ldr	r2, [pc, #328]	; (800080c <MX_ADC2_Init+0x164>)
 80006c4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80006c6:	4b50      	ldr	r3, [pc, #320]	; (8000808 <MX_ADC2_Init+0x160>)
 80006c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006cc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006ce:	4b4e      	ldr	r3, [pc, #312]	; (8000808 <MX_ADC2_Init+0x160>)
 80006d0:	2208      	movs	r2, #8
 80006d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006d4:	4b4c      	ldr	r3, [pc, #304]	; (8000808 <MX_ADC2_Init+0x160>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006da:	4b4b      	ldr	r3, [pc, #300]	; (8000808 <MX_ADC2_Init+0x160>)
 80006dc:	2208      	movs	r2, #8
 80006de:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006e0:	4b49      	ldr	r3, [pc, #292]	; (8000808 <MX_ADC2_Init+0x160>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80006e6:	4b48      	ldr	r3, [pc, #288]	; (8000808 <MX_ADC2_Init+0x160>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 7;
 80006ec:	4b46      	ldr	r3, [pc, #280]	; (8000808 <MX_ADC2_Init+0x160>)
 80006ee:	2207      	movs	r2, #7
 80006f0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b45      	ldr	r3, [pc, #276]	; (8000808 <MX_ADC2_Init+0x160>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f8:	4b43      	ldr	r3, [pc, #268]	; (8000808 <MX_ADC2_Init+0x160>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fe:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC2_Init+0x160>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000704:	4b40      	ldr	r3, [pc, #256]	; (8000808 <MX_ADC2_Init+0x160>)
 8000706:	2203      	movs	r2, #3
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <MX_ADC2_Init+0x160>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000710:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <MX_ADC2_Init+0x160>)
 8000712:	2200      	movs	r2, #0
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000716:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <MX_ADC2_Init+0x160>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800071e:	483a      	ldr	r0, [pc, #232]	; (8000808 <MX_ADC2_Init+0x160>)
 8000720:	f001 f9a0 	bl	8001a64 <HAL_ADC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800072a:	f000 fabb 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800072e:	4b38      	ldr	r3, [pc, #224]	; (8000810 <MX_ADC2_Init+0x168>)
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000732:	2306      	movs	r3, #6
 8000734:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000736:	2306      	movs	r3, #6
 8000738:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800073e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000740:	2304      	movs	r3, #4
 8000742:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	482d      	ldr	r0, [pc, #180]	; (8000808 <MX_ADC2_Init+0x160>)
 8000752:	f001 fba9 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800075c:	f000 faa2 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000760:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <MX_ADC2_Init+0x16c>)
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000764:	230c      	movs	r3, #12
 8000766:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	4826      	ldr	r0, [pc, #152]	; (8000808 <MX_ADC2_Init+0x160>)
 800076e:	f001 fb9b 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8000778:	f000 fa94 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800077c:	2312      	movs	r3, #18
 800077e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4820      	ldr	r0, [pc, #128]	; (8000808 <MX_ADC2_Init+0x160>)
 8000786:	f001 fb8f 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 8000790:	f000 fa88 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000794:	2318      	movs	r3, #24
 8000796:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	481a      	ldr	r0, [pc, #104]	; (8000808 <MX_ADC2_Init+0x160>)
 800079e:	f001 fb83 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC2_Init+0x104>
  {
    Error_Handler();
 80007a8:	f000 fa7c 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80007ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4814      	ldr	r0, [pc, #80]	; (8000808 <MX_ADC2_Init+0x160>)
 80007b8:	f001 fb76 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 80007c2:	f000 fa6f 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007c6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80007ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_ADC2_Init+0x160>)
 80007d2:	f001 fb69 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80007dc:	f000 fa62 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_ADC2_Init+0x170>)
 80007e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80007e4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80007e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <MX_ADC2_Init+0x160>)
 80007f0:	f001 fb5a 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC2_Init+0x156>
  {
    Error_Handler();
 80007fa:	f000 fa53 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3720      	adds	r7, #32
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	24000090 	.word	0x24000090
 800080c:	40022100 	.word	0x40022100
 8000810:	36902000 	.word	0x36902000
 8000814:	0c900008 	.word	0x0c900008
 8000818:	cb840000 	.word	0xcb840000

0800081c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000822:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <MX_FDCAN1_Init+0xc4>)
 8000824:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800082c:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000832:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000834:	2200      	movs	r2, #0
 8000836:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 800083a:	2200      	movs	r2, #0
 800083c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000840:	2200      	movs	r2, #0
 8000842:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000846:	2210      	movs	r2, #16
 8000848:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 800084c:	2201      	movs	r2, #1
 800084e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000852:	2202      	movs	r2, #2
 8000854:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000858:	2202      	movs	r2, #2
 800085a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 800085e:	2201      	movs	r2, #1
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000864:	2201      	movs	r2, #1
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 800086a:	2201      	movs	r2, #1
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800086e:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000870:	2201      	movs	r2, #1
 8000872:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000876:	2200      	movs	r2, #0
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 800087c:	2200      	movs	r2, #0
 800087e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 800088e:	2204      	movs	r2, #4
 8000890:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 800089a:	2204      	movs	r2, #4
 800089c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 80008a6:	2204      	movs	r2, #4
 80008a8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 80008c4:	2204      	movs	r2, #4
 80008c6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_FDCAN1_Init+0xc0>)
 80008ca:	f004 fafd 	bl	8004ec8 <HAL_FDCAN_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008d4:	f000 f9e6 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	240001e4 	.word	0x240001e4
 80008e0:	4000a000 	.word	0x4000a000

080008e4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 80008ea:	4a2f      	ldr	r2, [pc, #188]	; (80009a8 <MX_FDCAN2_Init+0xc4>)
 80008ec:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80008f4:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000900:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000902:	2200      	movs	r2, #0
 8000904:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000908:	2200      	movs	r2, #0
 800090a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800090c:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 800090e:	2210      	movs	r2, #16
 8000910:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000912:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000914:	2201      	movs	r2, #1
 8000916:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000918:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 800091a:	2202      	movs	r2, #2
 800091c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800091e:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000920:	2202      	movs	r2, #2
 8000922:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000926:	2201      	movs	r2, #1
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800092a:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 800092c:	2201      	movs	r2, #1
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000932:	2201      	movs	r2, #1
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000938:	2201      	movs	r2, #1
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 800093e:	2200      	movs	r2, #0
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000944:	2200      	movs	r2, #0
 8000946:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 800094a:	2200      	movs	r2, #0
 800094c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000950:	2200      	movs	r2, #0
 8000952:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000956:	2204      	movs	r2, #4
 8000958:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 800095c:	2200      	movs	r2, #0
 800095e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000962:	2204      	movs	r2, #4
 8000964:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000968:	2200      	movs	r2, #0
 800096a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 800096e:	2204      	movs	r2, #4
 8000970:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 800097a:	2200      	movs	r2, #0
 800097c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000980:	2200      	movs	r2, #0
 8000982:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000986:	2200      	movs	r2, #0
 8000988:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 800098c:	2204      	movs	r2, #4
 800098e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_FDCAN2_Init+0xc0>)
 8000992:	f004 fa99 	bl	8004ec8 <HAL_FDCAN_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800099c:	f000 f982 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	24000284 	.word	0x24000284
 80009a8:	4000a400 	.word	0x4000a400

080009ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <MX_I2C1_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_I2C1_Init+0x7c>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009e8:	f004 ff82 	bl	80058f0 <HAL_I2C_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f2:	f000 f957 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009fa:	f005 f809 	bl	8005a10 <HAL_I2CEx_ConfigAnalogFilter>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a04:	f000 f94e 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_I2C1_Init+0x74>)
 8000a0c:	f005 f84b 	bl	8005aa6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 f945 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	24000324 	.word	0x24000324
 8000a24:	40005400 	.word	0x40005400
 8000a28:	00707cbb 	.word	0x00707cbb

08000a2c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a32:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <MX_I2C3_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <MX_I2C3_Init+0x7c>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a68:	f004 ff42 	bl	80058f0 <HAL_I2C_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a72:	f000 f917 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a7a:	f004 ffc9 	bl	8005a10 <HAL_I2CEx_ConfigAnalogFilter>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a84:	f000 f90e 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_I2C3_Init+0x74>)
 8000a8c:	f005 f80b 	bl	8005aa6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f000 f905 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	24000378 	.word	0x24000378
 8000aa4:	40005c00 	.word	0x40005c00
 8000aa8:	00707cbb 	.word	0x00707cbb

08000aac <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <MX_I2C4_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <MX_I2C4_Init+0x7c>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ae6:	480e      	ldr	r0, [pc, #56]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000ae8:	f004 ff02 	bl	80058f0 <HAL_I2C_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000af2:	f000 f8d7 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000afa:	f004 ff89 	bl	8005a10 <HAL_I2CEx_ConfigAnalogFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b04:	f000 f8ce 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_I2C4_Init+0x74>)
 8000b0c:	f004 ffcb 	bl	8005aa6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b16:	f000 f8c5 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	240003cc 	.word	0x240003cc
 8000b24:	58001c00 	.word	0x58001c00
 8000b28:	00707cbb 	.word	0x00707cbb

08000b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_DMA_Init+0x4c>)
 8000b34:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <MX_DMA_Init+0x4c>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <MX_DMA_Init+0x4c>)
 8000b44:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	200b      	movs	r0, #11
 8000b56:	f002 f808 	bl	8002b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b5a:	200b      	movs	r0, #11
 8000b5c:	f002 f81f 	bl	8002b9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	200c      	movs	r0, #12
 8000b66:	f002 f800 	bl	8002b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b6a:	200c      	movs	r0, #12
 8000b6c:	f002 f817 	bl	8002b9e <HAL_NVIC_EnableIRQ>

}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	58024400 	.word	0x58024400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000b84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b88:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000ba2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba6:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000bb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000bc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc4:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000bd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000bde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be2:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_GPIO_Init+0x8c>)
 8000bee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	58024400 	.word	0x58024400

08000c0c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	uint8_t ADC1_size = sizeof(ADC1Data)/sizeof(ADC1Data[0]);
 8000c14:	230b      	movs	r3, #11
 8000c16:	73fb      	strb	r3, [r7, #15]
	if(hadc->Instance == ADC1){
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <HAL_ADC_ConvCpltCallback+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d114      	bne.n	8000c4c <HAL_ADC_ConvCpltCallback+0x40>
		for(int j = 0; j < hadc->Init.NbrOfConversion -1 ;j++){
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	e00b      	b.n	8000c40 <HAL_ADC_ConvCpltCallback+0x34>
			all_raw_data[j] = ADC1Data[j];
 8000c28:	4a1a      	ldr	r2, [pc, #104]	; (8000c94 <HAL_ADC_ConvCpltCallback+0x88>)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c30:	b299      	uxth	r1, r3
 8000c32:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion -1 ;j++){
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	1e5a      	subs	r2, r3, #1
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8ed      	bhi.n	8000c28 <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
	if(hadc->Instance == ADC2){
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <HAL_ADC_ConvCpltCallback+0x90>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d116      	bne.n	8000c84 <HAL_ADC_ConvCpltCallback+0x78>
		for(int j = 0; j < hadc->Init.NbrOfConversion -1 ;j++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	e00d      	b.n	8000c78 <HAL_ADC_ConvCpltCallback+0x6c>
			all_raw_data[j+ ADC1_size] = ADC2Data[j];
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4413      	add	r3, r2
 8000c62:	490f      	ldr	r1, [pc, #60]	; (8000ca0 <HAL_ADC_ConvCpltCallback+0x94>)
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c6a:	b291      	uxth	r1, r2
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion -1 ;j++){
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	3301      	adds	r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	1e5a      	subs	r2, r3, #1
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8eb      	bhi.n	8000c5c <HAL_ADC_ConvCpltCallback+0x50>
		}
	}

}
 8000c84:	bf00      	nop
 8000c86:	371c      	adds	r7, #28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	40022000 	.word	0x40022000
 8000c94:	24000420 	.word	0x24000420
 8000c98:	24000448 	.word	0x24000448
 8000c9c:	40022100 	.word	0x40022100
 8000ca0:	24000438 	.word	0x24000438

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x30>)
 8000cc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	58024400 	.word	0x58024400

08000ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b090      	sub	sp, #64	; 0x40
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4aa0      	ldr	r2, [pc, #640]	; (8000f84 <HAL_ADC_MspInit+0x2a0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	f040 809a 	bne.w	8000e3c <HAL_ADC_MspInit+0x158>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d08:	4b9f      	ldr	r3, [pc, #636]	; (8000f88 <HAL_ADC_MspInit+0x2a4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	4a9e      	ldr	r2, [pc, #632]	; (8000f88 <HAL_ADC_MspInit+0x2a4>)
 8000d10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d12:	4b9d      	ldr	r3, [pc, #628]	; (8000f88 <HAL_ADC_MspInit+0x2a4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d10e      	bne.n	8000d38 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d1a:	4b9c      	ldr	r3, [pc, #624]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d1c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d20:	4a9a      	ldr	r2, [pc, #616]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d22:	f043 0320 	orr.w	r3, r3, #32
 8000d26:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d2a:	4b98      	ldr	r3, [pc, #608]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d2c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d30:	f003 0320 	and.w	r3, r3, #32
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d38:	4b94      	ldr	r3, [pc, #592]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d3e:	4a93      	ldr	r2, [pc, #588]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d48:	4b90      	ldr	r3, [pc, #576]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b8d      	ldr	r3, [pc, #564]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d5c:	4a8b      	ldr	r2, [pc, #556]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d66:	4b89      	ldr	r3, [pc, #548]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	623b      	str	r3, [r7, #32]
 8000d72:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	4b85      	ldr	r3, [pc, #532]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d7a:	4a84      	ldr	r2, [pc, #528]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d84:	4b81      	ldr	r3, [pc, #516]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000d86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> ADC1_INP18
    PA5     ------> ADC1_INP19
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000d92:	2316      	movs	r3, #22
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d96:	2303      	movs	r3, #3
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da2:	4619      	mov	r1, r3
 8000da4:	487a      	ldr	r0, [pc, #488]	; (8000f90 <HAL_ADC_MspInit+0x2ac>)
 8000da6:	f004 fbf3 	bl	8005590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000daa:	233f      	movs	r3, #63	; 0x3f
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dae:	2303      	movs	r3, #3
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4875      	ldr	r0, [pc, #468]	; (8000f94 <HAL_ADC_MspInit+0x2b0>)
 8000dbe:	f004 fbe7 	bl	8005590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4870      	ldr	r0, [pc, #448]	; (8000f98 <HAL_ADC_MspInit+0x2b4>)
 8000dd6:	f004 fbdb 	bl	8005590 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000dda:	4b70      	ldr	r3, [pc, #448]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000ddc:	4a70      	ldr	r2, [pc, #448]	; (8000fa0 <HAL_ADC_MspInit+0x2bc>)
 8000dde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000de0:	4b6e      	ldr	r3, [pc, #440]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000de2:	2209      	movs	r2, #9
 8000de4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de6:	4b6d      	ldr	r3, [pc, #436]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dec:	4b6b      	ldr	r3, [pc, #428]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dfa:	4b68      	ldr	r3, [pc, #416]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e02:	4b66      	ldr	r3, [pc, #408]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000e04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e0a:	4b64      	ldr	r3, [pc, #400]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e12:	4b62      	ldr	r3, [pc, #392]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e18:	4b60      	ldr	r3, [pc, #384]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e1e:	485f      	ldr	r0, [pc, #380]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000e20:	f001 fed8 	bl	8002bd4 <HAL_DMA_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_ADC_MspInit+0x14a>
    {
      Error_Handler();
 8000e2a:	f7ff ff3b 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a5a      	ldr	r2, [pc, #360]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000e32:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e34:	4a59      	ldr	r2, [pc, #356]	; (8000f9c <HAL_ADC_MspInit+0x2b8>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e3a:	e09e      	b.n	8000f7a <HAL_ADC_MspInit+0x296>
  else if(hadc->Instance==ADC2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a58      	ldr	r2, [pc, #352]	; (8000fa4 <HAL_ADC_MspInit+0x2c0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	f040 8099 	bne.w	8000f7a <HAL_ADC_MspInit+0x296>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e48:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <HAL_ADC_MspInit+0x2a4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a4e      	ldr	r2, [pc, #312]	; (8000f88 <HAL_ADC_MspInit+0x2a4>)
 8000e50:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e52:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <HAL_ADC_MspInit+0x2a4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d10e      	bne.n	8000e78 <HAL_ADC_MspInit+0x194>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000e5c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e60:	4a4a      	ldr	r2, [pc, #296]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e6a:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000e6c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e70:	f003 0320 	and.w	r3, r3, #32
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	4b44      	ldr	r3, [pc, #272]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000e7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e7e:	4a43      	ldr	r2, [pc, #268]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e88:	4b40      	ldr	r3, [pc, #256]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000e8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000e98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e9c:	4a3b      	ldr	r2, [pc, #236]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ea6:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000ea8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000eb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eba:	4a34      	ldr	r2, [pc, #208]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ec4:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <HAL_ADC_MspInit+0x2a8>)
 8000ec6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 8000ed2:	2329      	movs	r3, #41	; 0x29
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	482a      	ldr	r0, [pc, #168]	; (8000f90 <HAL_ADC_MspInit+0x2ac>)
 8000ee6:	f004 fb53 	bl	8005590 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eea:	23c0      	movs	r3, #192	; 0xc0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efa:	4619      	mov	r1, r3
 8000efc:	4825      	ldr	r0, [pc, #148]	; (8000f94 <HAL_ADC_MspInit+0x2b0>)
 8000efe:	f004 fb47 	bl	8005590 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f02:	2301      	movs	r3, #1
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	4820      	ldr	r0, [pc, #128]	; (8000f98 <HAL_ADC_MspInit+0x2b4>)
 8000f16:	f004 fb3b 	bl	8005590 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f1c:	4a23      	ldr	r2, [pc, #140]	; (8000fac <HAL_ADC_MspInit+0x2c8>)
 8000f1e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f22:	220a      	movs	r2, #10
 8000f24:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f38:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f40:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f48:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f50:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f5e:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f60:	f001 fe38 	bl	8002bd4 <HAL_DMA_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_ADC_MspInit+0x28a>
      Error_Handler();
 8000f6a:	f7ff fe9b 	bl	8000ca4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f72:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <HAL_ADC_MspInit+0x2c4>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f7a:	bf00      	nop
 8000f7c:	3740      	adds	r7, #64	; 0x40
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40022000 	.word	0x40022000
 8000f88:	24000470 	.word	0x24000470
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	58020800 	.word	0x58020800
 8000f94:	58020000 	.word	0x58020000
 8000f98:	58020400 	.word	0x58020400
 8000f9c:	240000f4 	.word	0x240000f4
 8000fa0:	40020010 	.word	0x40020010
 8000fa4:	40022100 	.word	0x40022100
 8000fa8:	2400016c 	.word	0x2400016c
 8000fac:	40020028 	.word	0x40020028

08000fb0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0bc      	sub	sp, #240	; 0xf0
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	22c0      	movs	r2, #192	; 0xc0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f008 f9a1 	bl	8009318 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a57      	ldr	r2, [pc, #348]	; (8001138 <HAL_FDCAN_MspInit+0x188>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d151      	bne.n	8001084 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fe0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff4:	f107 0318 	add.w	r3, r7, #24
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f005 fd83 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001004:	f7ff fe4e 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001008:	4b4c      	ldr	r3, [pc, #304]	; (800113c <HAL_FDCAN_MspInit+0x18c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a4b      	ldr	r2, [pc, #300]	; (800113c <HAL_FDCAN_MspInit+0x18c>)
 8001010:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001012:	4b4a      	ldr	r3, [pc, #296]	; (800113c <HAL_FDCAN_MspInit+0x18c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10e      	bne.n	8001038 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800101a:	4b49      	ldr	r3, [pc, #292]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 800101c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001020:	4a47      	ldr	r2, [pc, #284]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 8001022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001026:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 800102a:	4b45      	ldr	r3, [pc, #276]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 800102c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b41      	ldr	r3, [pc, #260]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 800103a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103e:	4a40      	ldr	r2, [pc, #256]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001048:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 800104a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001056:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800105a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001070:	2309      	movs	r3, #9
 8001072:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800107a:	4619      	mov	r1, r3
 800107c:	4831      	ldr	r0, [pc, #196]	; (8001144 <HAL_FDCAN_MspInit+0x194>)
 800107e:	f004 fa87 	bl	8005590 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001082:	e055      	b.n	8001130 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a2f      	ldr	r2, [pc, #188]	; (8001148 <HAL_FDCAN_MspInit+0x198>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d150      	bne.n	8001130 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800108e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800109a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800109e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a2:	f107 0318 	add.w	r3, r7, #24
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 fd2c 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 80010b2:	f7ff fdf7 	bl	8000ca4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <HAL_FDCAN_MspInit+0x18c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a1f      	ldr	r2, [pc, #124]	; (800113c <HAL_FDCAN_MspInit+0x18c>)
 80010be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <HAL_FDCAN_MspInit+0x18c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d10e      	bne.n	80010e6 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 80010ca:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 80010da:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80010de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 80010e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_FDCAN_MspInit+0x190>)
 80010f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001104:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001108:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800111e:	2309      	movs	r3, #9
 8001120:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001128:	4619      	mov	r1, r3
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <HAL_FDCAN_MspInit+0x19c>)
 800112c:	f004 fa30 	bl	8005590 <HAL_GPIO_Init>
}
 8001130:	bf00      	nop
 8001132:	37f0      	adds	r7, #240	; 0xf0
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	4000a000 	.word	0x4000a000
 800113c:	24000474 	.word	0x24000474
 8001140:	58024400 	.word	0x58024400
 8001144:	58020000 	.word	0x58020000
 8001148:	4000a400 	.word	0x4000a400
 800114c:	58020400 	.word	0x58020400

08001150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0c0      	sub	sp, #256	; 0x100
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800116c:	22c0      	movs	r2, #192	; 0xc0
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f008 f8d1 	bl	8009318 <memset>
  if(hi2c->Instance==I2C1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a86      	ldr	r2, [pc, #536]	; (8001394 <HAL_I2C_MspInit+0x244>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d146      	bne.n	800120e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001180:	f04f 0208 	mov.w	r2, #8
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001196:	4618      	mov	r0, r3
 8001198:	f005 fcb4 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011a2:	f7ff fd7f 	bl	8000ca4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b7c      	ldr	r3, [pc, #496]	; (8001398 <HAL_I2C_MspInit+0x248>)
 80011a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ac:	4a7a      	ldr	r2, [pc, #488]	; (8001398 <HAL_I2C_MspInit+0x248>)
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011b6:	4b78      	ldr	r3, [pc, #480]	; (8001398 <HAL_I2C_MspInit+0x248>)
 80011b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c4:	23c0      	movs	r3, #192	; 0xc0
 80011c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ca:	2312      	movs	r3, #18
 80011cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011dc:	2304      	movs	r3, #4
 80011de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011e6:	4619      	mov	r1, r3
 80011e8:	486c      	ldr	r0, [pc, #432]	; (800139c <HAL_I2C_MspInit+0x24c>)
 80011ea:	f004 f9d1 	bl	8005590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ee:	4b6a      	ldr	r3, [pc, #424]	; (8001398 <HAL_I2C_MspInit+0x248>)
 80011f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011f4:	4a68      	ldr	r2, [pc, #416]	; (8001398 <HAL_I2C_MspInit+0x248>)
 80011f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011fe:	4b66      	ldr	r3, [pc, #408]	; (8001398 <HAL_I2C_MspInit+0x248>)
 8001200:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001208:	623b      	str	r3, [r7, #32]
 800120a:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800120c:	e0bd      	b.n	800138a <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a63      	ldr	r2, [pc, #396]	; (80013a0 <HAL_I2C_MspInit+0x250>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d16c      	bne.n	80012f2 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001218:	f04f 0208 	mov.w	r2, #8
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122e:	4618      	mov	r0, r3
 8001230:	f005 fc68 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800123a:	f7ff fd33 	bl	8000ca4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b56      	ldr	r3, [pc, #344]	; (8001398 <HAL_I2C_MspInit+0x248>)
 8001240:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001244:	4a54      	ldr	r2, [pc, #336]	; (8001398 <HAL_I2C_MspInit+0x248>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800124e:	4b52      	ldr	r3, [pc, #328]	; (8001398 <HAL_I2C_MspInit+0x248>)
 8001250:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b4e      	ldr	r3, [pc, #312]	; (8001398 <HAL_I2C_MspInit+0x248>)
 800125e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001262:	4a4d      	ldr	r2, [pc, #308]	; (8001398 <HAL_I2C_MspInit+0x248>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800126c:	4b4a      	ldr	r3, [pc, #296]	; (8001398 <HAL_I2C_MspInit+0x248>)
 800126e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800127a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001282:	2312      	movs	r3, #18
 8001284:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001294:	2304      	movs	r3, #4
 8001296:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800129e:	4619      	mov	r1, r3
 80012a0:	4840      	ldr	r0, [pc, #256]	; (80013a4 <HAL_I2C_MspInit+0x254>)
 80012a2:	f004 f975 	bl	8005590 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	2312      	movs	r3, #18
 80012b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012c0:	2304      	movs	r3, #4
 80012c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012ca:	4619      	mov	r1, r3
 80012cc:	4836      	ldr	r0, [pc, #216]	; (80013a8 <HAL_I2C_MspInit+0x258>)
 80012ce:	f004 f95f 	bl	8005590 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <HAL_I2C_MspInit+0x248>)
 80012d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012d8:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <HAL_I2C_MspInit+0x248>)
 80012da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012de:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_I2C_MspInit+0x248>)
 80012e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697b      	ldr	r3, [r7, #20]
}
 80012f0:	e04b      	b.n	800138a <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <HAL_I2C_MspInit+0x25c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d146      	bne.n	800138a <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80012fc:	f04f 0210 	mov.w	r2, #16
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001312:	4618      	mov	r0, r3
 8001314:	f005 fbf6 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 800131e:	f7ff fcc1 	bl	8000ca4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_I2C_MspInit+0x248>)
 8001324:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_I2C_MspInit+0x248>)
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_I2C_MspInit+0x248>)
 8001334:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001340:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001344:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001348:	2312      	movs	r3, #18
 800134a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800135a:	2306      	movs	r3, #6
 800135c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <HAL_I2C_MspInit+0x24c>)
 8001368:	f004 f912 	bl	8005590 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_I2C_MspInit+0x248>)
 800136e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_I2C_MspInit+0x248>)
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_I2C_MspInit+0x248>)
 800137e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
}
 800138a:	bf00      	nop
 800138c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40005400 	.word	0x40005400
 8001398:	58024400 	.word	0x58024400
 800139c:	58020400 	.word	0x58020400
 80013a0:	40005c00 	.word	0x40005c00
 80013a4:	58020800 	.word	0x58020800
 80013a8:	58020000 	.word	0x58020000
 80013ac:	58001c00 	.word	0x58001c00

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fc:	f000 f92a 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <DMA1_Stream0_IRQHandler+0x10>)
 800140a:	f002 f9db 	bl	80037c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	240000f4 	.word	0x240000f4

08001418 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <DMA1_Stream1_IRQHandler+0x10>)
 800141e:	f002 f9d1 	bl	80037c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2400016c 	.word	0x2400016c

0800142c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <SystemInit+0xd0>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001436:	4a31      	ldr	r2, [pc, #196]	; (80014fc <SystemInit+0xd0>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001440:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <SystemInit+0xd4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	2b02      	cmp	r3, #2
 800144a:	d807      	bhi.n	800145c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <SystemInit+0xd4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f023 030f 	bic.w	r3, r3, #15
 8001454:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <SystemInit+0xd4>)
 8001456:	f043 0303 	orr.w	r3, r3, #3
 800145a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <SystemInit+0xd8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a28      	ldr	r2, [pc, #160]	; (8001504 <SystemInit+0xd8>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001468:	4b26      	ldr	r3, [pc, #152]	; (8001504 <SystemInit+0xd8>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <SystemInit+0xd8>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4924      	ldr	r1, [pc, #144]	; (8001504 <SystemInit+0xd8>)
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <SystemInit+0xdc>)
 8001476:	4013      	ands	r3, r2
 8001478:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <SystemInit+0xd4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <SystemInit+0xd4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 030f 	bic.w	r3, r3, #15
 800148e:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <SystemInit+0xd4>)
 8001490:	f043 0303 	orr.w	r3, r3, #3
 8001494:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <SystemInit+0xd8>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <SystemInit+0xd8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <SystemInit+0xd8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <SystemInit+0xd8>)
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <SystemInit+0xe0>)
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <SystemInit+0xd8>)
 80014b0:	4a17      	ldr	r2, [pc, #92]	; (8001510 <SystemInit+0xe4>)
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <SystemInit+0xd8>)
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <SystemInit+0xe8>)
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <SystemInit+0xd8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <SystemInit+0xd8>)
 80014c2:	4a14      	ldr	r2, [pc, #80]	; (8001514 <SystemInit+0xe8>)
 80014c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <SystemInit+0xd8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <SystemInit+0xd8>)
 80014ce:	4a11      	ldr	r2, [pc, #68]	; (8001514 <SystemInit+0xe8>)
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <SystemInit+0xd8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <SystemInit+0xd8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a09      	ldr	r2, [pc, #36]	; (8001504 <SystemInit+0xd8>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <SystemInit+0xd8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <SystemInit+0xec>)
 80014ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	52002000 	.word	0x52002000
 8001504:	58024400 	.word	0x58024400
 8001508:	eaf6ed7f 	.word	0xeaf6ed7f
 800150c:	02020200 	.word	0x02020200
 8001510:	01ff0000 	.word	0x01ff0000
 8001514:	01010280 	.word	0x01010280
 8001518:	52004000 	.word	0x52004000

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001554 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001520:	f7ff ff84 	bl	800142c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001526:	490d      	ldr	r1, [pc, #52]	; (800155c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800153c:	4c0a      	ldr	r4, [pc, #40]	; (8001568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800154a:	f007 feed 	bl	8009328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7fe fecd 	bl	80002ec <main>
  bx  lr
 8001552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001558:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800155c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001560:	08009410 	.word	0x08009410
  ldr r2, =_sbss
 8001564:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001568:	2400047c 	.word	0x2400047c

0800156c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC_IRQHandler>
	...

08001570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001576:	2003      	movs	r0, #3
 8001578:	f001 faec 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800157c:	f005 f902 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 8001580:	4602      	mov	r2, r0
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_Init+0x68>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	0a1b      	lsrs	r3, r3, #8
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	4913      	ldr	r1, [pc, #76]	; (80015dc <HAL_Init+0x6c>)
 800158e:	5ccb      	ldrb	r3, [r1, r3]
 8001590:	f003 031f 	and.w	r3, r3, #31
 8001594:	fa22 f303 	lsr.w	r3, r2, r3
 8001598:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_Init+0x68>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <HAL_Init+0x6c>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	f003 031f 	and.w	r3, r3, #31
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	fa22 f303 	lsr.w	r3, r2, r3
 80015b0:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <HAL_Init+0x70>)
 80015b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015b4:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <HAL_Init+0x74>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ba:	200f      	movs	r0, #15
 80015bc:	f000 f814 	bl	80015e8 <HAL_InitTick>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e002      	b.n	80015d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015ca:	f7ff fb71 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	58024400 	.word	0x58024400
 80015dc:	080093f0 	.word	0x080093f0
 80015e0:	24000004 	.word	0x24000004
 80015e4:	24000000 	.word	0x24000000

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_InitTick+0x60>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e021      	b.n	8001640 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_InitTick+0x64>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_InitTick+0x60>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f001 fad1 	bl	8002bba <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f001 fa9b 	bl	8002b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_InitTick+0x68>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2400000c 	.word	0x2400000c
 800164c:	24000000 	.word	0x24000000
 8001650:	24000008 	.word	0x24000008

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	2400000c 	.word	0x2400000c
 8001678:	24000478 	.word	0x24000478

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	24000478 	.word	0x24000478

08001694 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	609a      	str	r2, [r3, #8]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3360      	adds	r3, #96	; 0x60
 800170e:	461a      	mov	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	430b      	orrs	r3, r1
 800172a:	431a      	orrs	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	431a      	orrs	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	611a      	str	r2, [r3, #16]
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800176e:	b480      	push	{r7}
 8001770:	b087      	sub	sp, #28
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3360      	adds	r3, #96	; 0x60
 800177e:	461a      	mov	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	431a      	orrs	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	601a      	str	r2, [r3, #0]
  }
}
 8001798:	bf00      	nop
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3330      	adds	r3, #48	; 0x30
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	4413      	add	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	211f      	movs	r1, #31
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	401a      	ands	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0e9b      	lsrs	r3, r3, #26
 8001802:	f003 011f 	and.w	r1, r3, #31
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001816:	bf00      	nop
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f023 0203 	bic.w	r2, r3, #3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	60da      	str	r2, [r3, #12]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3314      	adds	r3, #20
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	0e5b      	lsrs	r3, r3, #25
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	4413      	add	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	0d1b      	lsrs	r3, r3, #20
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	2107      	movs	r1, #7
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	401a      	ands	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	0d1b      	lsrs	r3, r3, #20
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	431a      	orrs	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001892:	bf00      	nop
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0318 	and.w	r3, r3, #24
 80018c2:	4908      	ldr	r1, [pc, #32]	; (80018e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018c4:	40d9      	lsrs	r1, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	400b      	ands	r3, r1
 80018ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018ce:	431a      	orrs	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	000fffff 	.word	0x000fffff

080018e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 031f 	and.w	r3, r3, #31
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001912:	4013      	ands	r3, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6093      	str	r3, [r2, #8]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	5fffffc0 	.word	0x5fffffc0

08001928 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800193c:	d101      	bne.n	8001942 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <LL_ADC_EnableInternalRegulator+0x24>)
 800195e:	4013      	ands	r3, r2
 8001960:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	6fffffc0 	.word	0x6fffffc0

08001978 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800198c:	d101      	bne.n	8001992 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <LL_ADC_Enable+0x24>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	7fffffc0 	.word	0x7fffffc0

080019c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <LL_ADC_IsEnabled+0x18>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <LL_ADC_IsEnabled+0x1a>
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <LL_ADC_REG_StartConversion+0x24>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	f043 0204 	orr.w	r2, r3, #4
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	7fffffc0 	.word	0x7fffffc0

08001a18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e138      	b.n	8001cf0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff f929 	bl	8000ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff3f 	bl	8001928 <LL_ADC_IsDeepPowerDownEnabled>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff25 	bl	8001904 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff5a 	bl	8001978 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d114      	bne.n	8001af4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff3e 	bl	8001950 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ad4:	4b88      	ldr	r3, [pc, #544]	; (8001cf8 <HAL_ADC_Init+0x294>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	4a88      	ldr	r2, [pc, #544]	; (8001cfc <HAL_ADC_Init+0x298>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ae6:	e002      	b.n	8001aee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f9      	bne.n	8001ae8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff3d 	bl	8001978 <LL_ADC_IsInternalRegulatorEnabled>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10d      	bne.n	8001b20 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	f043 0210 	orr.w	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff77 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001b2a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 80d2 	bne.w	8001cde <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f040 80ce 	bne.w	8001cde <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b4a:	f043 0202 	orr.w	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff36 	bl	80019c8 <LL_ADC_IsEnabled>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d110      	bne.n	8001b84 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b62:	4867      	ldr	r0, [pc, #412]	; (8001d00 <HAL_ADC_Init+0x29c>)
 8001b64:	f7ff ff30 	bl	80019c8 <LL_ADC_IsEnabled>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	4866      	ldr	r0, [pc, #408]	; (8001d04 <HAL_ADC_Init+0x2a0>)
 8001b6c:	f7ff ff2c 	bl	80019c8 <LL_ADC_IsEnabled>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4323      	orrs	r3, r4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4862      	ldr	r0, [pc, #392]	; (8001d08 <HAL_ADC_Init+0x2a4>)
 8001b80:	f7ff fd88 	bl	8001694 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7d5b      	ldrb	r3, [r3, #21]
 8001b88:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b8e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001b94:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7f1b      	ldrb	r3, [r3, #28]
 8001b9a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7f1b      	ldrb	r3, [r3, #28]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d106      	bne.n	8001bb6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	045b      	lsls	r3, r3, #17
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <HAL_ADC_Init+0x2a8>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	69b9      	ldr	r1, [r7, #24]
 8001be2:	430b      	orrs	r3, r1
 8001be4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff14 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001bf0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff21 	bl	8001a3e <LL_ADC_INJ_IsConversionOngoing>
 8001bfc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d14a      	bne.n	8001c9a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d147      	bne.n	8001c9a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7d1b      	ldrb	r3, [r3, #20]
 8001c0e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <HAL_ADC_Init+0x2ac>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	69b9      	ldr	r1, [r7, #24]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d11b      	bne.n	8001c6e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <HAL_ADC_Init+0x2b0>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c4a:	3a01      	subs	r2, #1
 8001c4c:	0411      	lsls	r1, r2, #16
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c58:	4311      	orrs	r1, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	611a      	str	r2, [r3, #16]
 8001c6c:	e007      	b.n	8001c7e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0201 	bic.w	r2, r2, #1
 8001c7c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fcfd 	bl	8002694 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10c      	bne.n	8001cbc <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	f023 010f 	bic.w	r1, r3, #15
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cba:	e007      	b.n	8001ccc <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 020f 	bic.w	r2, r2, #15
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	f023 0303 	bic.w	r3, r3, #3
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	655a      	str	r2, [r3, #84]	; 0x54
 8001cdc:	e007      	b.n	8001cee <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f043 0210 	orr.w	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cee:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3724      	adds	r7, #36	; 0x24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd90      	pop	{r4, r7, pc}
 8001cf8:	24000000 	.word	0x24000000
 8001cfc:	053e2d63 	.word	0x053e2d63
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40022100 	.word	0x40022100
 8001d08:	40022300 	.word	0x40022300
 8001d0c:	fff0c003 	.word	0xfff0c003
 8001d10:	ffffbffc 	.word	0xffffbffc
 8001d14:	fc00f81e 	.word	0xfc00f81e

08001d18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d24:	484f      	ldr	r0, [pc, #316]	; (8001e64 <HAL_ADC_Start_DMA+0x14c>)
 8001d26:	f7ff fddf 	bl	80018e8 <LL_ADC_GetMultimode>
 8001d2a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fe71 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f040 808c 	bne.w	8001e56 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_Start_DMA+0x34>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e087      	b.n	8001e5c <HAL_ADC_Start_DMA+0x144>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b05      	cmp	r3, #5
 8001d5e:	d002      	beq.n	8001d66 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b09      	cmp	r3, #9
 8001d64:	d170      	bne.n	8001e48 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fb84 	bl	8002474 <ADC_Enable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d163      	bne.n	8001e3e <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_ADC_Start_DMA+0x150>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a38      	ldr	r2, [pc, #224]	; (8001e6c <HAL_ADC_Start_DMA+0x154>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d002      	beq.n	8001d96 <HAL_ADC_Start_DMA+0x7e>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	e000      	b.n	8001d98 <HAL_ADC_Start_DMA+0x80>
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_ADC_Start_DMA+0x158>)
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d002      	beq.n	8001da6 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	f023 0206 	bic.w	r2, r3, #6
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	659a      	str	r2, [r3, #88]	; 0x58
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <HAL_ADC_Start_DMA+0x15c>)
 8001dd8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_ADC_Start_DMA+0x160>)
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <HAL_ADC_Start_DMA+0x164>)
 8001de8:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	221c      	movs	r2, #28
 8001df0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0210 	orr.w	r2, r2, #16
 8001e08:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	4619      	mov	r1, r3
 8001e14:	4610      	mov	r0, r2
 8001e16:	f7ff fd04 	bl	8001822 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3340      	adds	r3, #64	; 0x40
 8001e24:	4619      	mov	r1, r3
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f001 fa61 	bl	80032f0 <HAL_DMA_Start_IT>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fdda 	bl	80019f0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e3c:	e00d      	b.n	8001e5a <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001e46:	e008      	b.n	8001e5a <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e54:	e001      	b.n	8001e5a <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e56:	2302      	movs	r3, #2
 8001e58:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40022300 	.word	0x40022300
 8001e68:	fffff0fe 	.word	0xfffff0fe
 8001e6c:	40022100 	.word	0x40022100
 8001e70:	40022000 	.word	0x40022000
 8001e74:	0800256d 	.word	0x0800256d
 8001e78:	08002645 	.word	0x08002645
 8001e7c:	08002661 	.word	0x08002661

08001e80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b0a1      	sub	sp, #132	; 0x84
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4a9a      	ldr	r2, [pc, #616]	; (800212c <HAL_ADC_ConfigChannel+0x284>)
 8001ec2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x2a>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e2bc      	b.n	800244c <HAL_ADC_ConfigChannel+0x5a4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fd9a 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 82a1 	bne.w	800242e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d108      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x62>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	2201      	movs	r2, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	e016      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x90>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f1a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001f22:	2320      	movs	r3, #32
 8001f24:	e003      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	2201      	movs	r2, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	69d1      	ldr	r1, [r2, #28]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	430b      	orrs	r3, r1
 8001f44:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	f7ff fc39 	bl	80017ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fd5b 	bl	8001a18 <LL_ADC_REG_IsConversionOngoing>
 8001f62:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fd68 	bl	8001a3e <LL_ADC_INJ_IsConversionOngoing>
 8001f6e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 80a0 	bne.w	80020b8 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 809c 	bne.w	80020b8 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f7ff fc5b 	bl	8001848 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x110>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	e00a      	b.n	8001fce <HAL_ADC_ConfigChannel+0x126>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d027      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6919      	ldr	r1, [r3, #16]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe6:	f7ff fb89 	bl	80016fc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6919      	ldr	r1, [r3, #16]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	7e5b      	ldrb	r3, [r3, #25]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x158>
 8001ffa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ffe:	e000      	b.n	8002002 <HAL_ADC_ConfigChannel+0x15a>
 8002000:	2300      	movs	r3, #0
 8002002:	461a      	mov	r2, r3
 8002004:	f7ff fbb3 	bl	800176e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6919      	ldr	r1, [r3, #16]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	7e1b      	ldrb	r3, [r3, #24]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d102      	bne.n	800201e <HAL_ADC_ConfigChannel+0x176>
 8002018:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800201c:	e000      	b.n	8002020 <HAL_ADC_ConfigChannel+0x178>
 800201e:	2300      	movs	r3, #0
 8002020:	461a      	mov	r2, r3
 8002022:	f7ff fb8b 	bl	800173c <LL_ADC_SetDataRightShift>
 8002026:	e047      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	069b      	lsls	r3, r3, #26
 8002038:	429a      	cmp	r2, r3
 800203a:	d107      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800204a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	069b      	lsls	r3, r3, #26
 800205c:	429a      	cmp	r2, r3
 800205e:	d107      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800206e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002092:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800209a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020b6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fc83 	bl	80019c8 <LL_ADC_IsEnabled>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 81bb 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6819      	ldr	r1, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f7ff fbe2 	bl	80018a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a12      	ldr	r2, [pc, #72]	; (800212c <HAL_ADC_ConfigChannel+0x284>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	f040 8130 	bne.w	8002348 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10b      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x268>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0e9b      	lsrs	r3, r3, #26
 80020fe:	3301      	adds	r3, #1
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	2b09      	cmp	r3, #9
 8002106:	bf94      	ite	ls
 8002108:	2301      	movls	r3, #1
 800210a:	2300      	movhi	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e01b      	b.n	8002148 <HAL_ADC_ConfigChannel+0x2a0>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800211e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002120:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d103      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e005      	b.n	8002138 <HAL_ADC_ConfigChannel+0x290>
 800212c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3301      	adds	r3, #1
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2b09      	cmp	r3, #9
 8002140:	bf94      	ite	ls
 8002142:	2301      	movls	r3, #1
 8002144:	2300      	movhi	r3, #0
 8002146:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002148:	2b00      	cmp	r3, #0
 800214a:	d079      	beq.n	8002240 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x2c0>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	3301      	adds	r3, #1
 8002160:	069b      	lsls	r3, r3, #26
 8002162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002166:	e015      	b.n	8002194 <HAL_ADC_ConfigChannel+0x2ec>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002178:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800217a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e003      	b.n	800218c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3301      	adds	r3, #1
 800218e:	069b      	lsls	r3, r3, #26
 8002190:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x30c>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	3301      	adds	r3, #1
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	e017      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x33c>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80021c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80021c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80021d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	ea42 0103 	orr.w	r1, r2, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10a      	bne.n	800220a <HAL_ADC_ConfigChannel+0x362>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0e9b      	lsrs	r3, r3, #26
 80021fa:	3301      	adds	r3, #1
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	051b      	lsls	r3, r3, #20
 8002208:	e018      	b.n	800223c <HAL_ADC_ConfigChannel+0x394>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800221c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002222:	2320      	movs	r3, #32
 8002224:	e003      	b.n	800222e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800223c:	430b      	orrs	r3, r1
 800223e:	e07e      	b.n	800233e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_ADC_ConfigChannel+0x3b4>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	069b      	lsls	r3, r3, #26
 8002256:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800225a:	e015      	b.n	8002288 <HAL_ADC_ConfigChannel+0x3e0>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002274:	2320      	movs	r3, #32
 8002276:	e003      	b.n	8002280 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	3301      	adds	r3, #1
 8002282:	069b      	lsls	r3, r3, #26
 8002284:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x400>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	3301      	adds	r3, #1
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	e017      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x430>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	61bb      	str	r3, [r7, #24]
  return result;
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2101      	movs	r1, #1
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	ea42 0103 	orr.w	r1, r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x45c>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	3301      	adds	r3, #1
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	3b1e      	subs	r3, #30
 80022fc:	051b      	lsls	r3, r3, #20
 80022fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002302:	e01b      	b.n	800233c <HAL_ADC_ConfigChannel+0x494>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	60fb      	str	r3, [r7, #12]
  return result;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e003      	b.n	8002328 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3301      	adds	r3, #1
 800232a:	f003 021f 	and.w	r2, r3, #31
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	3b1e      	subs	r3, #30
 8002336:	051b      	lsls	r3, r3, #20
 8002338:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233c:	430b      	orrs	r3, r1
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	6892      	ldr	r2, [r2, #8]
 8002342:	4619      	mov	r1, r3
 8002344:	f7ff fa80 	bl	8001848 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	da77      	bge.n	8002440 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002350:	4840      	ldr	r0, [pc, #256]	; (8002454 <HAL_ADC_ConfigChannel+0x5ac>)
 8002352:	f7ff f9c5 	bl	80016e0 <LL_ADC_GetCommonPathInternalCh>
 8002356:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002358:	483f      	ldr	r0, [pc, #252]	; (8002458 <HAL_ADC_ConfigChannel+0x5b0>)
 800235a:	f7ff fb35 	bl	80019c8 <LL_ADC_IsEnabled>
 800235e:	4604      	mov	r4, r0
 8002360:	483e      	ldr	r0, [pc, #248]	; (800245c <HAL_ADC_ConfigChannel+0x5b4>)
 8002362:	f7ff fb31 	bl	80019c8 <LL_ADC_IsEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	4323      	orrs	r3, r4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d155      	bne.n	800241a <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a3b      	ldr	r2, [pc, #236]	; (8002460 <HAL_ADC_ConfigChannel+0x5b8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d122      	bne.n	80023be <HAL_ADC_ConfigChannel+0x516>
 8002378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11d      	bne.n	80023be <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a35      	ldr	r2, [pc, #212]	; (800245c <HAL_ADC_ConfigChannel+0x5b4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d159      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800238c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002392:	4619      	mov	r1, r3
 8002394:	482f      	ldr	r0, [pc, #188]	; (8002454 <HAL_ADC_ConfigChannel+0x5ac>)
 8002396:	f7ff f990 	bl	80016ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800239a:	4b32      	ldr	r3, [pc, #200]	; (8002464 <HAL_ADC_ConfigChannel+0x5bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	4a31      	ldr	r2, [pc, #196]	; (8002468 <HAL_ADC_ConfigChannel+0x5c0>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	099b      	lsrs	r3, r3, #6
 80023a8:	3301      	adds	r3, #1
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023ae:	e002      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f9      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023bc:	e040      	b.n	8002440 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2a      	ldr	r2, [pc, #168]	; (800246c <HAL_ADC_ConfigChannel+0x5c4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d111      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x544>
 80023c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a21      	ldr	r2, [pc, #132]	; (800245c <HAL_ADC_ConfigChannel+0x5b4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d131      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80023dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023e2:	4619      	mov	r1, r3
 80023e4:	481b      	ldr	r0, [pc, #108]	; (8002454 <HAL_ADC_ConfigChannel+0x5ac>)
 80023e6:	f7ff f968 	bl	80016ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023ea:	e029      	b.n	8002440 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a1f      	ldr	r2, [pc, #124]	; (8002470 <HAL_ADC_ConfigChannel+0x5c8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d124      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x598>
 80023f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11f      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a15      	ldr	r2, [pc, #84]	; (800245c <HAL_ADC_ConfigChannel+0x5b4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d11a      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800240a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002410:	4619      	mov	r1, r3
 8002412:	4810      	ldr	r0, [pc, #64]	; (8002454 <HAL_ADC_ConfigChannel+0x5ac>)
 8002414:	f7ff f951 	bl	80016ba <LL_ADC_SetCommonPathInternalCh>
 8002418:	e012      	b.n	8002440 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	f043 0220 	orr.w	r2, r3, #32
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800242c:	e008      	b.n	8002440 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f043 0220 	orr.w	r2, r3, #32
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002448:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800244c:	4618      	mov	r0, r3
 800244e:	3784      	adds	r7, #132	; 0x84
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	40022300 	.word	0x40022300
 8002458:	40022000 	.word	0x40022000
 800245c:	40022100 	.word	0x40022100
 8002460:	cb840000 	.word	0xcb840000
 8002464:	24000000 	.word	0x24000000
 8002468:	053e2d63 	.word	0x053e2d63
 800246c:	bac04000 	.word	0xbac04000
 8002470:	cfb80000 	.word	0xcfb80000

08002474 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff faa1 	bl	80019c8 <LL_ADC_IsEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d161      	bne.n	8002550 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	4b32      	ldr	r3, [pc, #200]	; (800255c <ADC_Enable+0xe8>)
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00d      	beq.n	80024b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	f043 0210 	orr.w	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e04d      	b.n	8002552 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fa70 	bl	80019a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024c0:	f7ff f8dc 	bl	800167c <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c6:	4826      	ldr	r0, [pc, #152]	; (8002560 <ADC_Enable+0xec>)
 80024c8:	f7ff fa0e 	bl	80018e8 <LL_ADC_GetMultimode>
 80024cc:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a24      	ldr	r2, [pc, #144]	; (8002564 <ADC_Enable+0xf0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d002      	beq.n	80024de <ADC_Enable+0x6a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	e000      	b.n	80024e0 <ADC_Enable+0x6c>
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <ADC_Enable+0xf4>)
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d02c      	beq.n	8002542 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d130      	bne.n	8002550 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ee:	e028      	b.n	8002542 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fa67 	bl	80019c8 <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fa4b 	bl	80019a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800250a:	f7ff f8b7 	bl	800167c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d914      	bls.n	8002542 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d00d      	beq.n	8002542 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e007      	b.n	8002552 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d1cf      	bne.n	80024f0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	8000003f 	.word	0x8000003f
 8002560:	40022300 	.word	0x40022300
 8002564:	40022100 	.word	0x40022100
 8002568:	40022000 	.word	0x40022000

0800256c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002582:	2b00      	cmp	r3, #0
 8002584:	d14b      	bne.n	800261e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d021      	beq.n	80025e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff f8fd 	bl	80017a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d032      	beq.n	8002616 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d12b      	bne.n	8002616 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11f      	bne.n	8002616 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
 80025e2:	e018      	b.n	8002616 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d111      	bne.n	8002616 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7fe faf8 	bl	8000c0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800261c:	e00e      	b.n	800263c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7ff fc32 	bl	8001e94 <HAL_ADC_ErrorCallback>
}
 8002630:	e004      	b.n	800263c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7ff fc14 	bl	8001e80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	f043 0204 	orr.w	r2, r3, #4
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7ff fc04 	bl	8001e94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800269c:	4b60      	ldr	r3, [pc, #384]	; (8002820 <ADC_ConfigureBoostMode+0x18c>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01c      	beq.n	80026e2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026a8:	f004 f9e6 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 80026ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026b6:	d010      	beq.n	80026da <ADC_ConfigureBoostMode+0x46>
 80026b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026bc:	d873      	bhi.n	80027a6 <ADC_ConfigureBoostMode+0x112>
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c2:	d002      	beq.n	80026ca <ADC_ConfigureBoostMode+0x36>
 80026c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026c8:	d16d      	bne.n	80027a6 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0c1b      	lsrs	r3, r3, #16
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	60fb      	str	r3, [r7, #12]
        break;
 80026d8:	e068      	b.n	80027ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	60fb      	str	r3, [r7, #12]
        break;
 80026e0:	e064      	b.n	80027ac <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026e6:	f04f 0100 	mov.w	r1, #0
 80026ea:	f005 fbc9 	bl	8007e80 <HAL_RCCEx_GetPeriphCLKFreq>
 80026ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026f8:	d051      	beq.n	800279e <ADC_ConfigureBoostMode+0x10a>
 80026fa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026fe:	d854      	bhi.n	80027aa <ADC_ConfigureBoostMode+0x116>
 8002700:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002704:	d047      	beq.n	8002796 <ADC_ConfigureBoostMode+0x102>
 8002706:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800270a:	d84e      	bhi.n	80027aa <ADC_ConfigureBoostMode+0x116>
 800270c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002710:	d03d      	beq.n	800278e <ADC_ConfigureBoostMode+0xfa>
 8002712:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002716:	d848      	bhi.n	80027aa <ADC_ConfigureBoostMode+0x116>
 8002718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800271c:	d033      	beq.n	8002786 <ADC_ConfigureBoostMode+0xf2>
 800271e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002722:	d842      	bhi.n	80027aa <ADC_ConfigureBoostMode+0x116>
 8002724:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002728:	d029      	beq.n	800277e <ADC_ConfigureBoostMode+0xea>
 800272a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800272e:	d83c      	bhi.n	80027aa <ADC_ConfigureBoostMode+0x116>
 8002730:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002734:	d01a      	beq.n	800276c <ADC_ConfigureBoostMode+0xd8>
 8002736:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800273a:	d836      	bhi.n	80027aa <ADC_ConfigureBoostMode+0x116>
 800273c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002740:	d014      	beq.n	800276c <ADC_ConfigureBoostMode+0xd8>
 8002742:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002746:	d830      	bhi.n	80027aa <ADC_ConfigureBoostMode+0x116>
 8002748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800274c:	d00e      	beq.n	800276c <ADC_ConfigureBoostMode+0xd8>
 800274e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002752:	d82a      	bhi.n	80027aa <ADC_ConfigureBoostMode+0x116>
 8002754:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002758:	d008      	beq.n	800276c <ADC_ConfigureBoostMode+0xd8>
 800275a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800275e:	d824      	bhi.n	80027aa <ADC_ConfigureBoostMode+0x116>
 8002760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002764:	d002      	beq.n	800276c <ADC_ConfigureBoostMode+0xd8>
 8002766:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800276a:	d11e      	bne.n	80027aa <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	0c9b      	lsrs	r3, r3, #18
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	60fb      	str	r3, [r7, #12]
        break;
 800277c:	e016      	b.n	80027ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	60fb      	str	r3, [r7, #12]
        break;
 8002784:	e012      	b.n	80027ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	60fb      	str	r3, [r7, #12]
        break;
 800278c:	e00e      	b.n	80027ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	60fb      	str	r3, [r7, #12]
        break;
 8002794:	e00a      	b.n	80027ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	09db      	lsrs	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]
        break;
 800279c:	e006      	b.n	80027ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	60fb      	str	r3, [r7, #12]
        break;
 80027a4:	e002      	b.n	80027ac <ADC_ConfigureBoostMode+0x118>
        break;
 80027a6:	bf00      	nop
 80027a8:	e000      	b.n	80027ac <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80027aa:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <ADC_ConfigureBoostMode+0x190>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d808      	bhi.n	80027cc <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027c8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027ca:	e025      	b.n	8002818 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a16      	ldr	r2, [pc, #88]	; (8002828 <ADC_ConfigureBoostMode+0x194>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d80a      	bhi.n	80027ea <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e6:	609a      	str	r2, [r3, #8]
}
 80027e8:	e016      	b.n	8002818 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a0f      	ldr	r2, [pc, #60]	; (800282c <ADC_ConfigureBoostMode+0x198>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d80a      	bhi.n	8002808 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002804:	609a      	str	r2, [r3, #8]
}
 8002806:	e007      	b.n	8002818 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002816:	609a      	str	r2, [r3, #8]
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40022300 	.word	0x40022300
 8002824:	005f5e10 	.word	0x005f5e10
 8002828:	00bebc20 	.word	0x00bebc20
 800282c:	017d7840 	.word	0x017d7840

08002830 <LL_ADC_IsEnabled>:
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <LL_ADC_IsEnabled+0x18>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <LL_ADC_IsEnabled+0x1a>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_ADC_REG_IsConversionOngoing>:
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b04      	cmp	r3, #4
 8002868:	d101      	bne.n	800286e <LL_ADC_REG_IsConversionOngoing+0x18>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b09f      	sub	sp, #124	; 0x7c
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002896:	2302      	movs	r3, #2
 8002898:	e080      	b.n	800299c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a3d      	ldr	r2, [pc, #244]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d102      	bne.n	80028ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028b4:	4b3c      	ldr	r3, [pc, #240]	; (80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	e001      	b.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e05f      	b.n	800299c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ffb9 	bl	8002856 <LL_ADC_REG_IsConversionOngoing>
 80028e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ffb3 	bl	8002856 <LL_ADC_REG_IsConversionOngoing>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d141      	bne.n	800297a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d13e      	bne.n	800297a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80028fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	431a      	orrs	r2, r3
 8002916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002918:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800291a:	4822      	ldr	r0, [pc, #136]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800291c:	f7ff ff88 	bl	8002830 <LL_ADC_IsEnabled>
 8002920:	4604      	mov	r4, r0
 8002922:	4821      	ldr	r0, [pc, #132]	; (80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002924:	f7ff ff84 	bl	8002830 <LL_ADC_IsEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	4323      	orrs	r3, r4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d12e      	bne.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002936:	4013      	ands	r3, r2
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	6811      	ldr	r1, [r2, #0]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	6892      	ldr	r2, [r2, #8]
 8002940:	430a      	orrs	r2, r1
 8002942:	431a      	orrs	r2, r3
 8002944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002946:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002948:	e021      	b.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800294a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002954:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002956:	4813      	ldr	r0, [pc, #76]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002958:	f7ff ff6a 	bl	8002830 <LL_ADC_IsEnabled>
 800295c:	4604      	mov	r4, r0
 800295e:	4812      	ldr	r0, [pc, #72]	; (80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002960:	f7ff ff66 	bl	8002830 <LL_ADC_IsEnabled>
 8002964:	4603      	mov	r3, r0
 8002966:	4323      	orrs	r3, r4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d110      	bne.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002972:	4013      	ands	r3, r2
 8002974:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002976:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002978:	e009      	b.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800298c:	e000      	b.n	8002990 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800298e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002998:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800299c:	4618      	mov	r0, r3
 800299e:	377c      	adds	r7, #124	; 0x7c
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd90      	pop	{r4, r7, pc}
 80029a4:	40022000 	.word	0x40022000
 80029a8:	40022100 	.word	0x40022100
 80029ac:	40022300 	.word	0x40022300
 80029b0:	fffff0e0 	.word	0xfffff0e0

080029b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <__NVIC_SetPriorityGrouping+0x40>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d0:	4013      	ands	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e2:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <__NVIC_SetPriorityGrouping+0x40>)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	60d3      	str	r3, [r2, #12]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00
 80029f8:	05fa0000 	.word	0x05fa0000

080029fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <__NVIC_GetPriorityGrouping+0x18>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 0307 	and.w	r3, r3, #7
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db0b      	blt.n	8002a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	4907      	ldr	r1, [pc, #28]	; (8002a50 <__NVIC_EnableIRQ+0x38>)
 8002a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2001      	movs	r0, #1
 8002a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e100 	.word	0xe000e100

08002a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	; (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	; (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f1c3 0307 	rsb	r3, r3, #7
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf28      	it	cs
 8002ac6:	2304      	movcs	r3, #4
 8002ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d902      	bls.n	8002ad8 <NVIC_EncodePriority+0x30>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3b03      	subs	r3, #3
 8002ad6:	e000      	b.n	8002ada <NVIC_EncodePriority+0x32>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	4313      	orrs	r3, r2
         );
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	; 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b20:	d301      	bcc.n	8002b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00f      	b.n	8002b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <SysTick_Config+0x40>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f7ff ff8e 	bl	8002a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <SysTick_Config+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3e:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <SysTick_Config+0x40>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff29 	bl	80029b4 <__NVIC_SetPriorityGrouping>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b78:	f7ff ff40 	bl	80029fc <__NVIC_GetPriorityGrouping>
 8002b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff ff90 	bl	8002aa8 <NVIC_EncodePriority>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff5f 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff33 	bl	8002a18 <__NVIC_EnableIRQ>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ffa4 	bl	8002b10 <SysTick_Config>
 8002bc8:	4603      	mov	r3, r0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7fe fd4e 	bl	800167c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e37d      	b.n	80032e8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a66      	ldr	r2, [pc, #408]	; (8002d8c <HAL_DMA_Init+0x1b8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d04a      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a65      	ldr	r2, [pc, #404]	; (8002d90 <HAL_DMA_Init+0x1bc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d045      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a63      	ldr	r2, [pc, #396]	; (8002d94 <HAL_DMA_Init+0x1c0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d040      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a62      	ldr	r2, [pc, #392]	; (8002d98 <HAL_DMA_Init+0x1c4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d03b      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a60      	ldr	r2, [pc, #384]	; (8002d9c <HAL_DMA_Init+0x1c8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d036      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5f      	ldr	r2, [pc, #380]	; (8002da0 <HAL_DMA_Init+0x1cc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d031      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5d      	ldr	r2, [pc, #372]	; (8002da4 <HAL_DMA_Init+0x1d0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d02c      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5c      	ldr	r2, [pc, #368]	; (8002da8 <HAL_DMA_Init+0x1d4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d027      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a5a      	ldr	r2, [pc, #360]	; (8002dac <HAL_DMA_Init+0x1d8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d022      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a59      	ldr	r2, [pc, #356]	; (8002db0 <HAL_DMA_Init+0x1dc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d01d      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a57      	ldr	r2, [pc, #348]	; (8002db4 <HAL_DMA_Init+0x1e0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d018      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a56      	ldr	r2, [pc, #344]	; (8002db8 <HAL_DMA_Init+0x1e4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d013      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a54      	ldr	r2, [pc, #336]	; (8002dbc <HAL_DMA_Init+0x1e8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00e      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a53      	ldr	r2, [pc, #332]	; (8002dc0 <HAL_DMA_Init+0x1ec>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d009      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a51      	ldr	r2, [pc, #324]	; (8002dc4 <HAL_DMA_Init+0x1f0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d004      	beq.n	8002c8c <HAL_DMA_Init+0xb8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <HAL_DMA_Init+0x1f4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_DMA_Init+0xbc>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <HAL_DMA_Init+0xbe>
 8002c90:	2300      	movs	r3, #0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 813c 	beq.w	8002f10 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a37      	ldr	r2, [pc, #220]	; (8002d8c <HAL_DMA_Init+0x1b8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d04a      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a36      	ldr	r2, [pc, #216]	; (8002d90 <HAL_DMA_Init+0x1bc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d045      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a34      	ldr	r2, [pc, #208]	; (8002d94 <HAL_DMA_Init+0x1c0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d040      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a33      	ldr	r2, [pc, #204]	; (8002d98 <HAL_DMA_Init+0x1c4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d03b      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a31      	ldr	r2, [pc, #196]	; (8002d9c <HAL_DMA_Init+0x1c8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d036      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a30      	ldr	r2, [pc, #192]	; (8002da0 <HAL_DMA_Init+0x1cc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d031      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2e      	ldr	r2, [pc, #184]	; (8002da4 <HAL_DMA_Init+0x1d0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d02c      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <HAL_DMA_Init+0x1d4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d027      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a2b      	ldr	r2, [pc, #172]	; (8002dac <HAL_DMA_Init+0x1d8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d022      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <HAL_DMA_Init+0x1dc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d01d      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <HAL_DMA_Init+0x1e0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d018      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <HAL_DMA_Init+0x1e4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d013      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a25      	ldr	r2, [pc, #148]	; (8002dbc <HAL_DMA_Init+0x1e8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00e      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a24      	ldr	r2, [pc, #144]	; (8002dc0 <HAL_DMA_Init+0x1ec>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d009      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_DMA_Init+0x1f0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <HAL_DMA_Init+0x174>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <HAL_DMA_Init+0x1f4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d108      	bne.n	8002d5a <HAL_DMA_Init+0x186>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e007      	b.n	8002d6a <HAL_DMA_Init+0x196>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d6a:	e02f      	b.n	8002dcc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d6c:	f7fe fc86 	bl	800167c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d928      	bls.n	8002dcc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2203      	movs	r2, #3
 8002d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e2ad      	b.n	80032e8 <HAL_DMA_Init+0x714>
 8002d8c:	40020010 	.word	0x40020010
 8002d90:	40020028 	.word	0x40020028
 8002d94:	40020040 	.word	0x40020040
 8002d98:	40020058 	.word	0x40020058
 8002d9c:	40020070 	.word	0x40020070
 8002da0:	40020088 	.word	0x40020088
 8002da4:	400200a0 	.word	0x400200a0
 8002da8:	400200b8 	.word	0x400200b8
 8002dac:	40020410 	.word	0x40020410
 8002db0:	40020428 	.word	0x40020428
 8002db4:	40020440 	.word	0x40020440
 8002db8:	40020458 	.word	0x40020458
 8002dbc:	40020470 	.word	0x40020470
 8002dc0:	40020488 	.word	0x40020488
 8002dc4:	400204a0 	.word	0x400204a0
 8002dc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1c8      	bne.n	8002d6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4b73      	ldr	r3, [pc, #460]	; (8002fb4 <HAL_DMA_Init+0x3e0>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002df2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d107      	bne.n	8002e30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b28      	cmp	r3, #40	; 0x28
 8002e36:	d903      	bls.n	8002e40 <HAL_DMA_Init+0x26c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8002e3e:	d91f      	bls.n	8002e80 <HAL_DMA_Init+0x2ac>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b3e      	cmp	r3, #62	; 0x3e
 8002e46:	d903      	bls.n	8002e50 <HAL_DMA_Init+0x27c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b42      	cmp	r3, #66	; 0x42
 8002e4e:	d917      	bls.n	8002e80 <HAL_DMA_Init+0x2ac>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b46      	cmp	r3, #70	; 0x46
 8002e56:	d903      	bls.n	8002e60 <HAL_DMA_Init+0x28c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b48      	cmp	r3, #72	; 0x48
 8002e5e:	d90f      	bls.n	8002e80 <HAL_DMA_Init+0x2ac>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b4e      	cmp	r3, #78	; 0x4e
 8002e66:	d903      	bls.n	8002e70 <HAL_DMA_Init+0x29c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b52      	cmp	r3, #82	; 0x52
 8002e6e:	d907      	bls.n	8002e80 <HAL_DMA_Init+0x2ac>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b73      	cmp	r3, #115	; 0x73
 8002e76:	d905      	bls.n	8002e84 <HAL_DMA_Init+0x2b0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b77      	cmp	r3, #119	; 0x77
 8002e7e:	d801      	bhi.n	8002e84 <HAL_DMA_Init+0x2b0>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_DMA_Init+0x2b2>
 8002e84:	2300      	movs	r3, #0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e90:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f023 0307 	bic.w	r3, r3, #7
 8002ea8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d117      	bne.n	8002eec <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00e      	beq.n	8002eec <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f001 fe70 	bl	8004bb4 <DMA_CheckFifoParam>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2240      	movs	r2, #64	; 0x40
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e1fd      	b.n	80032e8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f001 fdab 	bl	8004a50 <DMA_CalcBaseAndBitshift>
 8002efa:	4603      	mov	r3, r0
 8002efc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	223f      	movs	r2, #63	; 0x3f
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	e0fd      	b.n	800310c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <HAL_DMA_Init+0x3e4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d04a      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a27      	ldr	r2, [pc, #156]	; (8002fbc <HAL_DMA_Init+0x3e8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d045      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <HAL_DMA_Init+0x3ec>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d040      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <HAL_DMA_Init+0x3f0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d03b      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <HAL_DMA_Init+0x3f4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d036      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a21      	ldr	r2, [pc, #132]	; (8002fcc <HAL_DMA_Init+0x3f8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d031      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <HAL_DMA_Init+0x3fc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d02c      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_DMA_Init+0x400>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d027      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <HAL_DMA_Init+0x404>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d022      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <HAL_DMA_Init+0x408>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01d      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_DMA_Init+0x40c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d018      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_DMA_Init+0x410>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <HAL_DMA_Init+0x414>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a15      	ldr	r2, [pc, #84]	; (8002fec <HAL_DMA_Init+0x418>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <HAL_DMA_Init+0x41c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_DMA_Init+0x3dc>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a12      	ldr	r2, [pc, #72]	; (8002ff4 <HAL_DMA_Init+0x420>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d123      	bne.n	8002ff8 <HAL_DMA_Init+0x424>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e022      	b.n	8002ffa <HAL_DMA_Init+0x426>
 8002fb4:	fe10803f 	.word	0xfe10803f
 8002fb8:	48022c08 	.word	0x48022c08
 8002fbc:	48022c1c 	.word	0x48022c1c
 8002fc0:	48022c30 	.word	0x48022c30
 8002fc4:	48022c44 	.word	0x48022c44
 8002fc8:	48022c58 	.word	0x48022c58
 8002fcc:	48022c6c 	.word	0x48022c6c
 8002fd0:	48022c80 	.word	0x48022c80
 8002fd4:	48022c94 	.word	0x48022c94
 8002fd8:	58025408 	.word	0x58025408
 8002fdc:	5802541c 	.word	0x5802541c
 8002fe0:	58025430 	.word	0x58025430
 8002fe4:	58025444 	.word	0x58025444
 8002fe8:	58025458 	.word	0x58025458
 8002fec:	5802546c 	.word	0x5802546c
 8002ff0:	58025480 	.word	0x58025480
 8002ff4:	58025494 	.word	0x58025494
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d07d      	beq.n	80030fa <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7f      	ldr	r2, [pc, #508]	; (8003200 <HAL_DMA_Init+0x62c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d021      	beq.n	800304c <HAL_DMA_Init+0x478>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7d      	ldr	r2, [pc, #500]	; (8003204 <HAL_DMA_Init+0x630>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01c      	beq.n	800304c <HAL_DMA_Init+0x478>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7c      	ldr	r2, [pc, #496]	; (8003208 <HAL_DMA_Init+0x634>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d017      	beq.n	800304c <HAL_DMA_Init+0x478>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a7a      	ldr	r2, [pc, #488]	; (800320c <HAL_DMA_Init+0x638>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d012      	beq.n	800304c <HAL_DMA_Init+0x478>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a79      	ldr	r2, [pc, #484]	; (8003210 <HAL_DMA_Init+0x63c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00d      	beq.n	800304c <HAL_DMA_Init+0x478>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a77      	ldr	r2, [pc, #476]	; (8003214 <HAL_DMA_Init+0x640>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d008      	beq.n	800304c <HAL_DMA_Init+0x478>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a76      	ldr	r2, [pc, #472]	; (8003218 <HAL_DMA_Init+0x644>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <HAL_DMA_Init+0x478>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a74      	ldr	r2, [pc, #464]	; (800321c <HAL_DMA_Init+0x648>)
 800304a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4b6e      	ldr	r3, [pc, #440]	; (8003220 <HAL_DMA_Init+0x64c>)
 8003068:	4013      	ands	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d008      	beq.n	8003086 <HAL_DMA_Init+0x4b2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b80      	cmp	r3, #128	; 0x80
 800307a:	d102      	bne.n	8003082 <HAL_DMA_Init+0x4ae>
 800307c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003080:	e002      	b.n	8003088 <HAL_DMA_Init+0x4b4>
 8003082:	2300      	movs	r3, #0
 8003084:	e000      	b.n	8003088 <HAL_DMA_Init+0x4b4>
 8003086:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68d2      	ldr	r2, [r2, #12]
 800308c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800308e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003096:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800309e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030a6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030ae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030b6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b55      	ldr	r3, [pc, #340]	; (8003224 <HAL_DMA_Init+0x650>)
 80030ce:	4413      	add	r3, r2
 80030d0:	4a55      	ldr	r2, [pc, #340]	; (8003228 <HAL_DMA_Init+0x654>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	009a      	lsls	r2, r3, #2
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f001 fcb6 	bl	8004a50 <DMA_CalcBaseAndBitshift>
 80030e4:	4603      	mov	r3, r0
 80030e6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2201      	movs	r2, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	e008      	b.n	800310c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2240      	movs	r2, #64	; 0x40
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2203      	movs	r2, #3
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0ed      	b.n	80032e8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a46      	ldr	r2, [pc, #280]	; (800322c <HAL_DMA_Init+0x658>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d072      	beq.n	80031fc <HAL_DMA_Init+0x628>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a45      	ldr	r2, [pc, #276]	; (8003230 <HAL_DMA_Init+0x65c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d06d      	beq.n	80031fc <HAL_DMA_Init+0x628>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a43      	ldr	r2, [pc, #268]	; (8003234 <HAL_DMA_Init+0x660>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d068      	beq.n	80031fc <HAL_DMA_Init+0x628>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a42      	ldr	r2, [pc, #264]	; (8003238 <HAL_DMA_Init+0x664>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d063      	beq.n	80031fc <HAL_DMA_Init+0x628>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a40      	ldr	r2, [pc, #256]	; (800323c <HAL_DMA_Init+0x668>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d05e      	beq.n	80031fc <HAL_DMA_Init+0x628>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a3f      	ldr	r2, [pc, #252]	; (8003240 <HAL_DMA_Init+0x66c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d059      	beq.n	80031fc <HAL_DMA_Init+0x628>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a3d      	ldr	r2, [pc, #244]	; (8003244 <HAL_DMA_Init+0x670>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d054      	beq.n	80031fc <HAL_DMA_Init+0x628>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <HAL_DMA_Init+0x674>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d04f      	beq.n	80031fc <HAL_DMA_Init+0x628>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3a      	ldr	r2, [pc, #232]	; (800324c <HAL_DMA_Init+0x678>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d04a      	beq.n	80031fc <HAL_DMA_Init+0x628>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a39      	ldr	r2, [pc, #228]	; (8003250 <HAL_DMA_Init+0x67c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d045      	beq.n	80031fc <HAL_DMA_Init+0x628>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a37      	ldr	r2, [pc, #220]	; (8003254 <HAL_DMA_Init+0x680>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d040      	beq.n	80031fc <HAL_DMA_Init+0x628>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a36      	ldr	r2, [pc, #216]	; (8003258 <HAL_DMA_Init+0x684>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d03b      	beq.n	80031fc <HAL_DMA_Init+0x628>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a34      	ldr	r2, [pc, #208]	; (800325c <HAL_DMA_Init+0x688>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d036      	beq.n	80031fc <HAL_DMA_Init+0x628>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a33      	ldr	r2, [pc, #204]	; (8003260 <HAL_DMA_Init+0x68c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d031      	beq.n	80031fc <HAL_DMA_Init+0x628>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a31      	ldr	r2, [pc, #196]	; (8003264 <HAL_DMA_Init+0x690>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02c      	beq.n	80031fc <HAL_DMA_Init+0x628>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a30      	ldr	r2, [pc, #192]	; (8003268 <HAL_DMA_Init+0x694>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d027      	beq.n	80031fc <HAL_DMA_Init+0x628>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a13      	ldr	r2, [pc, #76]	; (8003200 <HAL_DMA_Init+0x62c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d022      	beq.n	80031fc <HAL_DMA_Init+0x628>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <HAL_DMA_Init+0x630>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01d      	beq.n	80031fc <HAL_DMA_Init+0x628>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a10      	ldr	r2, [pc, #64]	; (8003208 <HAL_DMA_Init+0x634>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d018      	beq.n	80031fc <HAL_DMA_Init+0x628>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a0f      	ldr	r2, [pc, #60]	; (800320c <HAL_DMA_Init+0x638>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <HAL_DMA_Init+0x628>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0d      	ldr	r2, [pc, #52]	; (8003210 <HAL_DMA_Init+0x63c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00e      	beq.n	80031fc <HAL_DMA_Init+0x628>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <HAL_DMA_Init+0x640>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_DMA_Init+0x628>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_DMA_Init+0x644>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_DMA_Init+0x628>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_DMA_Init+0x648>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d137      	bne.n	800326c <HAL_DMA_Init+0x698>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e036      	b.n	800326e <HAL_DMA_Init+0x69a>
 8003200:	58025408 	.word	0x58025408
 8003204:	5802541c 	.word	0x5802541c
 8003208:	58025430 	.word	0x58025430
 800320c:	58025444 	.word	0x58025444
 8003210:	58025458 	.word	0x58025458
 8003214:	5802546c 	.word	0x5802546c
 8003218:	58025480 	.word	0x58025480
 800321c:	58025494 	.word	0x58025494
 8003220:	fffe000f 	.word	0xfffe000f
 8003224:	a7fdabf8 	.word	0xa7fdabf8
 8003228:	cccccccd 	.word	0xcccccccd
 800322c:	40020010 	.word	0x40020010
 8003230:	40020028 	.word	0x40020028
 8003234:	40020040 	.word	0x40020040
 8003238:	40020058 	.word	0x40020058
 800323c:	40020070 	.word	0x40020070
 8003240:	40020088 	.word	0x40020088
 8003244:	400200a0 	.word	0x400200a0
 8003248:	400200b8 	.word	0x400200b8
 800324c:	40020410 	.word	0x40020410
 8003250:	40020428 	.word	0x40020428
 8003254:	40020440 	.word	0x40020440
 8003258:	40020458 	.word	0x40020458
 800325c:	40020470 	.word	0x40020470
 8003260:	40020488 	.word	0x40020488
 8003264:	400204a0 	.word	0x400204a0
 8003268:	400204b8 	.word	0x400204b8
 800326c:	2300      	movs	r3, #0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d032      	beq.n	80032d8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f001 fd1a 	bl	8004cac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	d102      	bne.n	8003286 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800329a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <HAL_DMA_Init+0x6f2>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d80c      	bhi.n	80032c6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f001 fd97 	bl	8004de0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	e008      	b.n	80032d8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e226      	b.n	800375a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_DMA_Start_IT+0x2a>
 8003316:	2302      	movs	r3, #2
 8003318:	e21f      	b.n	800375a <HAL_DMA_Start_IT+0x46a>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	f040 820a 	bne.w	8003744 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a68      	ldr	r2, [pc, #416]	; (80034e4 <HAL_DMA_Start_IT+0x1f4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d04a      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a66      	ldr	r2, [pc, #408]	; (80034e8 <HAL_DMA_Start_IT+0x1f8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d045      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a65      	ldr	r2, [pc, #404]	; (80034ec <HAL_DMA_Start_IT+0x1fc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d040      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a63      	ldr	r2, [pc, #396]	; (80034f0 <HAL_DMA_Start_IT+0x200>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d03b      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a62      	ldr	r2, [pc, #392]	; (80034f4 <HAL_DMA_Start_IT+0x204>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d036      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a60      	ldr	r2, [pc, #384]	; (80034f8 <HAL_DMA_Start_IT+0x208>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d031      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a5f      	ldr	r2, [pc, #380]	; (80034fc <HAL_DMA_Start_IT+0x20c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d02c      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a5d      	ldr	r2, [pc, #372]	; (8003500 <HAL_DMA_Start_IT+0x210>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d027      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a5c      	ldr	r2, [pc, #368]	; (8003504 <HAL_DMA_Start_IT+0x214>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d022      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a5a      	ldr	r2, [pc, #360]	; (8003508 <HAL_DMA_Start_IT+0x218>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01d      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a59      	ldr	r2, [pc, #356]	; (800350c <HAL_DMA_Start_IT+0x21c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d018      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a57      	ldr	r2, [pc, #348]	; (8003510 <HAL_DMA_Start_IT+0x220>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a56      	ldr	r2, [pc, #344]	; (8003514 <HAL_DMA_Start_IT+0x224>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00e      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a54      	ldr	r2, [pc, #336]	; (8003518 <HAL_DMA_Start_IT+0x228>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a53      	ldr	r2, [pc, #332]	; (800351c <HAL_DMA_Start_IT+0x22c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_DMA_Start_IT+0xee>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a51      	ldr	r2, [pc, #324]	; (8003520 <HAL_DMA_Start_IT+0x230>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d108      	bne.n	80033f0 <HAL_DMA_Start_IT+0x100>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e007      	b.n	8003400 <HAL_DMA_Start_IT+0x110>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f001 f93e 	bl	8004688 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a34      	ldr	r2, [pc, #208]	; (80034e4 <HAL_DMA_Start_IT+0x1f4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d04a      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a33      	ldr	r2, [pc, #204]	; (80034e8 <HAL_DMA_Start_IT+0x1f8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d045      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a31      	ldr	r2, [pc, #196]	; (80034ec <HAL_DMA_Start_IT+0x1fc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d040      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a30      	ldr	r2, [pc, #192]	; (80034f0 <HAL_DMA_Start_IT+0x200>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d03b      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2e      	ldr	r2, [pc, #184]	; (80034f4 <HAL_DMA_Start_IT+0x204>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d036      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <HAL_DMA_Start_IT+0x208>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d031      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <HAL_DMA_Start_IT+0x20c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d02c      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2a      	ldr	r2, [pc, #168]	; (8003500 <HAL_DMA_Start_IT+0x210>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d027      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_DMA_Start_IT+0x214>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d022      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a27      	ldr	r2, [pc, #156]	; (8003508 <HAL_DMA_Start_IT+0x218>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d01d      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a25      	ldr	r2, [pc, #148]	; (800350c <HAL_DMA_Start_IT+0x21c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d018      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a24      	ldr	r2, [pc, #144]	; (8003510 <HAL_DMA_Start_IT+0x220>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a22      	ldr	r2, [pc, #136]	; (8003514 <HAL_DMA_Start_IT+0x224>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00e      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a21      	ldr	r2, [pc, #132]	; (8003518 <HAL_DMA_Start_IT+0x228>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d009      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <HAL_DMA_Start_IT+0x22c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_DMA_Start_IT+0x1bc>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_DMA_Start_IT+0x230>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d101      	bne.n	80034b0 <HAL_DMA_Start_IT+0x1c0>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <HAL_DMA_Start_IT+0x1c2>
 80034b0:	2300      	movs	r3, #0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d036      	beq.n	8003524 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 021e 	bic.w	r2, r3, #30
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0216 	orr.w	r2, r2, #22
 80034c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d03e      	beq.n	8003550 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0208 	orr.w	r2, r2, #8
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	e035      	b.n	8003550 <HAL_DMA_Start_IT+0x260>
 80034e4:	40020010 	.word	0x40020010
 80034e8:	40020028 	.word	0x40020028
 80034ec:	40020040 	.word	0x40020040
 80034f0:	40020058 	.word	0x40020058
 80034f4:	40020070 	.word	0x40020070
 80034f8:	40020088 	.word	0x40020088
 80034fc:	400200a0 	.word	0x400200a0
 8003500:	400200b8 	.word	0x400200b8
 8003504:	40020410 	.word	0x40020410
 8003508:	40020428 	.word	0x40020428
 800350c:	40020440 	.word	0x40020440
 8003510:	40020458 	.word	0x40020458
 8003514:	40020470 	.word	0x40020470
 8003518:	40020488 	.word	0x40020488
 800351c:	400204a0 	.word	0x400204a0
 8003520:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 020e 	bic.w	r2, r3, #14
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 020a 	orr.w	r2, r2, #10
 8003536:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0204 	orr.w	r2, r2, #4
 800354e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a83      	ldr	r2, [pc, #524]	; (8003764 <HAL_DMA_Start_IT+0x474>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d072      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a82      	ldr	r2, [pc, #520]	; (8003768 <HAL_DMA_Start_IT+0x478>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d06d      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a80      	ldr	r2, [pc, #512]	; (800376c <HAL_DMA_Start_IT+0x47c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d068      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7f      	ldr	r2, [pc, #508]	; (8003770 <HAL_DMA_Start_IT+0x480>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d063      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a7d      	ldr	r2, [pc, #500]	; (8003774 <HAL_DMA_Start_IT+0x484>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d05e      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_DMA_Start_IT+0x488>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d059      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a7a      	ldr	r2, [pc, #488]	; (800377c <HAL_DMA_Start_IT+0x48c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d054      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a79      	ldr	r2, [pc, #484]	; (8003780 <HAL_DMA_Start_IT+0x490>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d04f      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a77      	ldr	r2, [pc, #476]	; (8003784 <HAL_DMA_Start_IT+0x494>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d04a      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a76      	ldr	r2, [pc, #472]	; (8003788 <HAL_DMA_Start_IT+0x498>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d045      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a74      	ldr	r2, [pc, #464]	; (800378c <HAL_DMA_Start_IT+0x49c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d040      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a73      	ldr	r2, [pc, #460]	; (8003790 <HAL_DMA_Start_IT+0x4a0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d03b      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a71      	ldr	r2, [pc, #452]	; (8003794 <HAL_DMA_Start_IT+0x4a4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d036      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a70      	ldr	r2, [pc, #448]	; (8003798 <HAL_DMA_Start_IT+0x4a8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d031      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a6e      	ldr	r2, [pc, #440]	; (800379c <HAL_DMA_Start_IT+0x4ac>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d02c      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6d      	ldr	r2, [pc, #436]	; (80037a0 <HAL_DMA_Start_IT+0x4b0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d027      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a6b      	ldr	r2, [pc, #428]	; (80037a4 <HAL_DMA_Start_IT+0x4b4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d022      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6a      	ldr	r2, [pc, #424]	; (80037a8 <HAL_DMA_Start_IT+0x4b8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d01d      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a68      	ldr	r2, [pc, #416]	; (80037ac <HAL_DMA_Start_IT+0x4bc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d018      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a67      	ldr	r2, [pc, #412]	; (80037b0 <HAL_DMA_Start_IT+0x4c0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d013      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a65      	ldr	r2, [pc, #404]	; (80037b4 <HAL_DMA_Start_IT+0x4c4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00e      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a64      	ldr	r2, [pc, #400]	; (80037b8 <HAL_DMA_Start_IT+0x4c8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d009      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a62      	ldr	r2, [pc, #392]	; (80037bc <HAL_DMA_Start_IT+0x4cc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_DMA_Start_IT+0x350>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a61      	ldr	r2, [pc, #388]	; (80037c0 <HAL_DMA_Start_IT+0x4d0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_DMA_Start_IT+0x354>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_DMA_Start_IT+0x356>
 8003644:	2300      	movs	r3, #0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01a      	beq.n	8003680 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003666:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a37      	ldr	r2, [pc, #220]	; (8003764 <HAL_DMA_Start_IT+0x474>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d04a      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a36      	ldr	r2, [pc, #216]	; (8003768 <HAL_DMA_Start_IT+0x478>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d045      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a34      	ldr	r2, [pc, #208]	; (800376c <HAL_DMA_Start_IT+0x47c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d040      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a33      	ldr	r2, [pc, #204]	; (8003770 <HAL_DMA_Start_IT+0x480>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d03b      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a31      	ldr	r2, [pc, #196]	; (8003774 <HAL_DMA_Start_IT+0x484>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d036      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a30      	ldr	r2, [pc, #192]	; (8003778 <HAL_DMA_Start_IT+0x488>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d031      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a2e      	ldr	r2, [pc, #184]	; (800377c <HAL_DMA_Start_IT+0x48c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02c      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2d      	ldr	r2, [pc, #180]	; (8003780 <HAL_DMA_Start_IT+0x490>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d027      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2b      	ldr	r2, [pc, #172]	; (8003784 <HAL_DMA_Start_IT+0x494>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d022      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <HAL_DMA_Start_IT+0x498>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d01d      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a28      	ldr	r2, [pc, #160]	; (800378c <HAL_DMA_Start_IT+0x49c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d018      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a27      	ldr	r2, [pc, #156]	; (8003790 <HAL_DMA_Start_IT+0x4a0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a25      	ldr	r2, [pc, #148]	; (8003794 <HAL_DMA_Start_IT+0x4a4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00e      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a24      	ldr	r2, [pc, #144]	; (8003798 <HAL_DMA_Start_IT+0x4a8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d009      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a22      	ldr	r2, [pc, #136]	; (800379c <HAL_DMA_Start_IT+0x4ac>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_DMA_Start_IT+0x430>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a21      	ldr	r2, [pc, #132]	; (80037a0 <HAL_DMA_Start_IT+0x4b0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d108      	bne.n	8003732 <HAL_DMA_Start_IT+0x442>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e012      	b.n	8003758 <HAL_DMA_Start_IT+0x468>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e009      	b.n	8003758 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800374a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003758:	7dfb      	ldrb	r3, [r7, #23]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40020010 	.word	0x40020010
 8003768:	40020028 	.word	0x40020028
 800376c:	40020040 	.word	0x40020040
 8003770:	40020058 	.word	0x40020058
 8003774:	40020070 	.word	0x40020070
 8003778:	40020088 	.word	0x40020088
 800377c:	400200a0 	.word	0x400200a0
 8003780:	400200b8 	.word	0x400200b8
 8003784:	40020410 	.word	0x40020410
 8003788:	40020428 	.word	0x40020428
 800378c:	40020440 	.word	0x40020440
 8003790:	40020458 	.word	0x40020458
 8003794:	40020470 	.word	0x40020470
 8003798:	40020488 	.word	0x40020488
 800379c:	400204a0 	.word	0x400204a0
 80037a0:	400204b8 	.word	0x400204b8
 80037a4:	58025408 	.word	0x58025408
 80037a8:	5802541c 	.word	0x5802541c
 80037ac:	58025430 	.word	0x58025430
 80037b0:	58025444 	.word	0x58025444
 80037b4:	58025458 	.word	0x58025458
 80037b8:	5802546c 	.word	0x5802546c
 80037bc:	58025480 	.word	0x58025480
 80037c0:	58025494 	.word	0x58025494

080037c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037d0:	4b67      	ldr	r3, [pc, #412]	; (8003970 <HAL_DMA_IRQHandler+0x1ac>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a67      	ldr	r2, [pc, #412]	; (8003974 <HAL_DMA_IRQHandler+0x1b0>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0a9b      	lsrs	r3, r3, #10
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a5f      	ldr	r2, [pc, #380]	; (8003978 <HAL_DMA_IRQHandler+0x1b4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d04a      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5d      	ldr	r2, [pc, #372]	; (800397c <HAL_DMA_IRQHandler+0x1b8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d045      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5c      	ldr	r2, [pc, #368]	; (8003980 <HAL_DMA_IRQHandler+0x1bc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d040      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5a      	ldr	r2, [pc, #360]	; (8003984 <HAL_DMA_IRQHandler+0x1c0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d03b      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a59      	ldr	r2, [pc, #356]	; (8003988 <HAL_DMA_IRQHandler+0x1c4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d036      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a57      	ldr	r2, [pc, #348]	; (800398c <HAL_DMA_IRQHandler+0x1c8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d031      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a56      	ldr	r2, [pc, #344]	; (8003990 <HAL_DMA_IRQHandler+0x1cc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d02c      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a54      	ldr	r2, [pc, #336]	; (8003994 <HAL_DMA_IRQHandler+0x1d0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d027      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a53      	ldr	r2, [pc, #332]	; (8003998 <HAL_DMA_IRQHandler+0x1d4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a51      	ldr	r2, [pc, #324]	; (800399c <HAL_DMA_IRQHandler+0x1d8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01d      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a50      	ldr	r2, [pc, #320]	; (80039a0 <HAL_DMA_IRQHandler+0x1dc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d018      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a4e      	ldr	r2, [pc, #312]	; (80039a4 <HAL_DMA_IRQHandler+0x1e0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a4d      	ldr	r2, [pc, #308]	; (80039a8 <HAL_DMA_IRQHandler+0x1e4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00e      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a4b      	ldr	r2, [pc, #300]	; (80039ac <HAL_DMA_IRQHandler+0x1e8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a4a      	ldr	r2, [pc, #296]	; (80039b0 <HAL_DMA_IRQHandler+0x1ec>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_DMA_IRQHandler+0xd2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a48      	ldr	r2, [pc, #288]	; (80039b4 <HAL_DMA_IRQHandler+0x1f0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_DMA_IRQHandler+0xd6>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <HAL_DMA_IRQHandler+0xd8>
 800389a:	2300      	movs	r3, #0
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 842b 	beq.w	80040f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	2208      	movs	r2, #8
 80038ac:	409a      	lsls	r2, r3
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80a2 	beq.w	80039fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2e      	ldr	r2, [pc, #184]	; (8003978 <HAL_DMA_IRQHandler+0x1b4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d04a      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2d      	ldr	r2, [pc, #180]	; (800397c <HAL_DMA_IRQHandler+0x1b8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d045      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a2b      	ldr	r2, [pc, #172]	; (8003980 <HAL_DMA_IRQHandler+0x1bc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d040      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <HAL_DMA_IRQHandler+0x1c0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d03b      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a28      	ldr	r2, [pc, #160]	; (8003988 <HAL_DMA_IRQHandler+0x1c4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d036      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a27      	ldr	r2, [pc, #156]	; (800398c <HAL_DMA_IRQHandler+0x1c8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d031      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a25      	ldr	r2, [pc, #148]	; (8003990 <HAL_DMA_IRQHandler+0x1cc>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d02c      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a24      	ldr	r2, [pc, #144]	; (8003994 <HAL_DMA_IRQHandler+0x1d0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d027      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a22      	ldr	r2, [pc, #136]	; (8003998 <HAL_DMA_IRQHandler+0x1d4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d022      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a21      	ldr	r2, [pc, #132]	; (800399c <HAL_DMA_IRQHandler+0x1d8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d01d      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <HAL_DMA_IRQHandler+0x1dc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d018      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <HAL_DMA_IRQHandler+0x1e0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d013      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1c      	ldr	r2, [pc, #112]	; (80039a8 <HAL_DMA_IRQHandler+0x1e4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00e      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <HAL_DMA_IRQHandler+0x1e8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d009      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <HAL_DMA_IRQHandler+0x1ec>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_DMA_IRQHandler+0x194>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <HAL_DMA_IRQHandler+0x1f0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d12f      	bne.n	80039b8 <HAL_DMA_IRQHandler+0x1f4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	e02e      	b.n	80039cc <HAL_DMA_IRQHandler+0x208>
 800396e:	bf00      	nop
 8003970:	24000000 	.word	0x24000000
 8003974:	1b4e81b5 	.word	0x1b4e81b5
 8003978:	40020010 	.word	0x40020010
 800397c:	40020028 	.word	0x40020028
 8003980:	40020040 	.word	0x40020040
 8003984:	40020058 	.word	0x40020058
 8003988:	40020070 	.word	0x40020070
 800398c:	40020088 	.word	0x40020088
 8003990:	400200a0 	.word	0x400200a0
 8003994:	400200b8 	.word	0x400200b8
 8003998:	40020410 	.word	0x40020410
 800399c:	40020428 	.word	0x40020428
 80039a0:	40020440 	.word	0x40020440
 80039a4:	40020458 	.word	0x40020458
 80039a8:	40020470 	.word	0x40020470
 80039ac:	40020488 	.word	0x40020488
 80039b0:	400204a0 	.word	0x400204a0
 80039b4:	400204b8 	.word	0x400204b8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0204 	bic.w	r2, r2, #4
 80039de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	2208      	movs	r2, #8
 80039ea:	409a      	lsls	r2, r3
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	f043 0201 	orr.w	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d06e      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a69      	ldr	r2, [pc, #420]	; (8003bbc <HAL_DMA_IRQHandler+0x3f8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d04a      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a67      	ldr	r2, [pc, #412]	; (8003bc0 <HAL_DMA_IRQHandler+0x3fc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d045      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a66      	ldr	r2, [pc, #408]	; (8003bc4 <HAL_DMA_IRQHandler+0x400>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d040      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a64      	ldr	r2, [pc, #400]	; (8003bc8 <HAL_DMA_IRQHandler+0x404>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d03b      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a63      	ldr	r2, [pc, #396]	; (8003bcc <HAL_DMA_IRQHandler+0x408>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d036      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a61      	ldr	r2, [pc, #388]	; (8003bd0 <HAL_DMA_IRQHandler+0x40c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d031      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a60      	ldr	r2, [pc, #384]	; (8003bd4 <HAL_DMA_IRQHandler+0x410>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d02c      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a5e      	ldr	r2, [pc, #376]	; (8003bd8 <HAL_DMA_IRQHandler+0x414>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d027      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a5d      	ldr	r2, [pc, #372]	; (8003bdc <HAL_DMA_IRQHandler+0x418>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d022      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a5b      	ldr	r2, [pc, #364]	; (8003be0 <HAL_DMA_IRQHandler+0x41c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01d      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a5a      	ldr	r2, [pc, #360]	; (8003be4 <HAL_DMA_IRQHandler+0x420>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d018      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a58      	ldr	r2, [pc, #352]	; (8003be8 <HAL_DMA_IRQHandler+0x424>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a57      	ldr	r2, [pc, #348]	; (8003bec <HAL_DMA_IRQHandler+0x428>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00e      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a55      	ldr	r2, [pc, #340]	; (8003bf0 <HAL_DMA_IRQHandler+0x42c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a54      	ldr	r2, [pc, #336]	; (8003bf4 <HAL_DMA_IRQHandler+0x430>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2ee>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a52      	ldr	r2, [pc, #328]	; (8003bf8 <HAL_DMA_IRQHandler+0x434>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d10a      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x304>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e003      	b.n	8003ad0 <HAL_DMA_IRQHandler+0x30c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00d      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	2201      	movs	r2, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	f043 0202 	orr.w	r2, r3, #2
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2204      	movs	r2, #4
 8003afa:	409a      	lsls	r2, r3
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 808f 	beq.w	8003c24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a2c      	ldr	r2, [pc, #176]	; (8003bbc <HAL_DMA_IRQHandler+0x3f8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d04a      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <HAL_DMA_IRQHandler+0x3fc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d045      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a29      	ldr	r2, [pc, #164]	; (8003bc4 <HAL_DMA_IRQHandler+0x400>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d040      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <HAL_DMA_IRQHandler+0x404>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d03b      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <HAL_DMA_IRQHandler+0x408>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d036      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a24      	ldr	r2, [pc, #144]	; (8003bd0 <HAL_DMA_IRQHandler+0x40c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d031      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <HAL_DMA_IRQHandler+0x410>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d02c      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <HAL_DMA_IRQHandler+0x414>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d027      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <HAL_DMA_IRQHandler+0x418>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1e      	ldr	r2, [pc, #120]	; (8003be0 <HAL_DMA_IRQHandler+0x41c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01d      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	; (8003be4 <HAL_DMA_IRQHandler+0x420>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d018      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <HAL_DMA_IRQHandler+0x424>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1a      	ldr	r2, [pc, #104]	; (8003bec <HAL_DMA_IRQHandler+0x428>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <HAL_DMA_IRQHandler+0x42c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <HAL_DMA_IRQHandler+0x430>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x3e2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a15      	ldr	r2, [pc, #84]	; (8003bf8 <HAL_DMA_IRQHandler+0x434>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d12a      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x438>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e023      	b.n	8003c04 <HAL_DMA_IRQHandler+0x440>
 8003bbc:	40020010 	.word	0x40020010
 8003bc0:	40020028 	.word	0x40020028
 8003bc4:	40020040 	.word	0x40020040
 8003bc8:	40020058 	.word	0x40020058
 8003bcc:	40020070 	.word	0x40020070
 8003bd0:	40020088 	.word	0x40020088
 8003bd4:	400200a0 	.word	0x400200a0
 8003bd8:	400200b8 	.word	0x400200b8
 8003bdc:	40020410 	.word	0x40020410
 8003be0:	40020428 	.word	0x40020428
 8003be4:	40020440 	.word	0x40020440
 8003be8:	40020458 	.word	0x40020458
 8003bec:	40020470 	.word	0x40020470
 8003bf0:	40020488 	.word	0x40020488
 8003bf4:	400204a0 	.word	0x400204a0
 8003bf8:	400204b8 	.word	0x400204b8
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	2204      	movs	r2, #4
 8003c12:	409a      	lsls	r2, r3
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f043 0204 	orr.w	r2, r3, #4
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80a6 	beq.w	8003d86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a85      	ldr	r2, [pc, #532]	; (8003e54 <HAL_DMA_IRQHandler+0x690>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d04a      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a83      	ldr	r2, [pc, #524]	; (8003e58 <HAL_DMA_IRQHandler+0x694>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d045      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a82      	ldr	r2, [pc, #520]	; (8003e5c <HAL_DMA_IRQHandler+0x698>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d040      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a80      	ldr	r2, [pc, #512]	; (8003e60 <HAL_DMA_IRQHandler+0x69c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d03b      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7f      	ldr	r2, [pc, #508]	; (8003e64 <HAL_DMA_IRQHandler+0x6a0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d036      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a7d      	ldr	r2, [pc, #500]	; (8003e68 <HAL_DMA_IRQHandler+0x6a4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d031      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a7c      	ldr	r2, [pc, #496]	; (8003e6c <HAL_DMA_IRQHandler+0x6a8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d02c      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a7a      	ldr	r2, [pc, #488]	; (8003e70 <HAL_DMA_IRQHandler+0x6ac>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d027      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a79      	ldr	r2, [pc, #484]	; (8003e74 <HAL_DMA_IRQHandler+0x6b0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d022      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a77      	ldr	r2, [pc, #476]	; (8003e78 <HAL_DMA_IRQHandler+0x6b4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01d      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a76      	ldr	r2, [pc, #472]	; (8003e7c <HAL_DMA_IRQHandler+0x6b8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d018      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a74      	ldr	r2, [pc, #464]	; (8003e80 <HAL_DMA_IRQHandler+0x6bc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a73      	ldr	r2, [pc, #460]	; (8003e84 <HAL_DMA_IRQHandler+0x6c0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00e      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a71      	ldr	r2, [pc, #452]	; (8003e88 <HAL_DMA_IRQHandler+0x6c4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d009      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a70      	ldr	r2, [pc, #448]	; (8003e8c <HAL_DMA_IRQHandler+0x6c8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_DMA_IRQHandler+0x516>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6e      	ldr	r2, [pc, #440]	; (8003e90 <HAL_DMA_IRQHandler+0x6cc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0x52c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e009      	b.n	8003d04 <HAL_DMA_IRQHandler+0x540>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d03e      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2210      	movs	r2, #16
 8003d12:	409a      	lsls	r2, r3
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d018      	beq.n	8003d58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d108      	bne.n	8003d46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d024      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
 8003d44:	e01f      	b.n	8003d86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01b      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4798      	blx	r3
 8003d56:	e016      	b.n	8003d86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d107      	bne.n	8003d76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0208 	bic.w	r2, r2, #8
 8003d74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2220      	movs	r2, #32
 8003d90:	409a      	lsls	r2, r3
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8110 	beq.w	8003fbc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2c      	ldr	r2, [pc, #176]	; (8003e54 <HAL_DMA_IRQHandler+0x690>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d04a      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <HAL_DMA_IRQHandler+0x694>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d045      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a29      	ldr	r2, [pc, #164]	; (8003e5c <HAL_DMA_IRQHandler+0x698>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d040      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a28      	ldr	r2, [pc, #160]	; (8003e60 <HAL_DMA_IRQHandler+0x69c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d03b      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <HAL_DMA_IRQHandler+0x6a0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d036      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <HAL_DMA_IRQHandler+0x6a4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d031      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_DMA_IRQHandler+0x6a8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d02c      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <HAL_DMA_IRQHandler+0x6ac>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d027      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a20      	ldr	r2, [pc, #128]	; (8003e74 <HAL_DMA_IRQHandler+0x6b0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d022      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <HAL_DMA_IRQHandler+0x6b4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d01d      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <HAL_DMA_IRQHandler+0x6b8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d018      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <HAL_DMA_IRQHandler+0x6bc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d013      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <HAL_DMA_IRQHandler+0x6c0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00e      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <HAL_DMA_IRQHandler+0x6c4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d009      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <HAL_DMA_IRQHandler+0x6c8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d004      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x678>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_DMA_IRQHandler+0x6cc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d12b      	bne.n	8003e94 <HAL_DMA_IRQHandler+0x6d0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	e02a      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x6e4>
 8003e52:	bf00      	nop
 8003e54:	40020010 	.word	0x40020010
 8003e58:	40020028 	.word	0x40020028
 8003e5c:	40020040 	.word	0x40020040
 8003e60:	40020058 	.word	0x40020058
 8003e64:	40020070 	.word	0x40020070
 8003e68:	40020088 	.word	0x40020088
 8003e6c:	400200a0 	.word	0x400200a0
 8003e70:	400200b8 	.word	0x400200b8
 8003e74:	40020410 	.word	0x40020410
 8003e78:	40020428 	.word	0x40020428
 8003e7c:	40020440 	.word	0x40020440
 8003e80:	40020458 	.word	0x40020458
 8003e84:	40020470 	.word	0x40020470
 8003e88:	40020488 	.word	0x40020488
 8003e8c:	400204a0 	.word	0x400204a0
 8003e90:	400204b8 	.word	0x400204b8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8087 	beq.w	8003fbc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d139      	bne.n	8003f3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0216 	bic.w	r2, r2, #22
 8003ed8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ee8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d103      	bne.n	8003efa <HAL_DMA_IRQHandler+0x736>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0208 	bic.w	r2, r2, #8
 8003f08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	223f      	movs	r2, #63	; 0x3f
 8003f14:	409a      	lsls	r2, r3
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8382 	beq.w	8004638 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
          }
          return;
 8003f3c:	e37c      	b.n	8004638 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d018      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d108      	bne.n	8003f6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d02c      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
 8003f6a:	e027      	b.n	8003fbc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d023      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
 8003f7c:	e01e      	b.n	8003fbc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10f      	bne.n	8003fac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0210 	bic.w	r2, r2, #16
 8003f9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 833e 	beq.w	8004642 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8088 	beq.w	80040e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a89      	ldr	r2, [pc, #548]	; (8004208 <HAL_DMA_IRQHandler+0xa44>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d04a      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a88      	ldr	r2, [pc, #544]	; (800420c <HAL_DMA_IRQHandler+0xa48>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d045      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a86      	ldr	r2, [pc, #536]	; (8004210 <HAL_DMA_IRQHandler+0xa4c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d040      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a85      	ldr	r2, [pc, #532]	; (8004214 <HAL_DMA_IRQHandler+0xa50>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d03b      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a83      	ldr	r2, [pc, #524]	; (8004218 <HAL_DMA_IRQHandler+0xa54>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d036      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a82      	ldr	r2, [pc, #520]	; (800421c <HAL_DMA_IRQHandler+0xa58>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d031      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a80      	ldr	r2, [pc, #512]	; (8004220 <HAL_DMA_IRQHandler+0xa5c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d02c      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a7f      	ldr	r2, [pc, #508]	; (8004224 <HAL_DMA_IRQHandler+0xa60>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d027      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a7d      	ldr	r2, [pc, #500]	; (8004228 <HAL_DMA_IRQHandler+0xa64>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d022      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a7c      	ldr	r2, [pc, #496]	; (800422c <HAL_DMA_IRQHandler+0xa68>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d01d      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a7a      	ldr	r2, [pc, #488]	; (8004230 <HAL_DMA_IRQHandler+0xa6c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a79      	ldr	r2, [pc, #484]	; (8004234 <HAL_DMA_IRQHandler+0xa70>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a77      	ldr	r2, [pc, #476]	; (8004238 <HAL_DMA_IRQHandler+0xa74>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a76      	ldr	r2, [pc, #472]	; (800423c <HAL_DMA_IRQHandler+0xa78>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a74      	ldr	r2, [pc, #464]	; (8004240 <HAL_DMA_IRQHandler+0xa7c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_DMA_IRQHandler+0x8b8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a73      	ldr	r2, [pc, #460]	; (8004244 <HAL_DMA_IRQHandler+0xa80>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d108      	bne.n	800408e <HAL_DMA_IRQHandler+0x8ca>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0201 	bic.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e007      	b.n	800409e <HAL_DMA_IRQHandler+0x8da>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3301      	adds	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d307      	bcc.n	80040ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f2      	bne.n	800409e <HAL_DMA_IRQHandler+0x8da>
 80040b8:	e000      	b.n	80040bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80040ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2203      	movs	r2, #3
 80040ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80040d2:	e003      	b.n	80040dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 82aa 	beq.w	8004642 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	4798      	blx	r3
 80040f6:	e2a4      	b.n	8004642 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a52      	ldr	r2, [pc, #328]	; (8004248 <HAL_DMA_IRQHandler+0xa84>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d04a      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a51      	ldr	r2, [pc, #324]	; (800424c <HAL_DMA_IRQHandler+0xa88>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d045      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a4f      	ldr	r2, [pc, #316]	; (8004250 <HAL_DMA_IRQHandler+0xa8c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d040      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a4e      	ldr	r2, [pc, #312]	; (8004254 <HAL_DMA_IRQHandler+0xa90>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d03b      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a4c      	ldr	r2, [pc, #304]	; (8004258 <HAL_DMA_IRQHandler+0xa94>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d036      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a4b      	ldr	r2, [pc, #300]	; (800425c <HAL_DMA_IRQHandler+0xa98>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d031      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a49      	ldr	r2, [pc, #292]	; (8004260 <HAL_DMA_IRQHandler+0xa9c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d02c      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a48      	ldr	r2, [pc, #288]	; (8004264 <HAL_DMA_IRQHandler+0xaa0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d027      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a46      	ldr	r2, [pc, #280]	; (8004268 <HAL_DMA_IRQHandler+0xaa4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d022      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a45      	ldr	r2, [pc, #276]	; (800426c <HAL_DMA_IRQHandler+0xaa8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d01d      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a43      	ldr	r2, [pc, #268]	; (8004270 <HAL_DMA_IRQHandler+0xaac>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d018      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a42      	ldr	r2, [pc, #264]	; (8004274 <HAL_DMA_IRQHandler+0xab0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d013      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a40      	ldr	r2, [pc, #256]	; (8004278 <HAL_DMA_IRQHandler+0xab4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00e      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a3f      	ldr	r2, [pc, #252]	; (800427c <HAL_DMA_IRQHandler+0xab8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d009      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a3d      	ldr	r2, [pc, #244]	; (8004280 <HAL_DMA_IRQHandler+0xabc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d004      	beq.n	8004198 <HAL_DMA_IRQHandler+0x9d4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <HAL_DMA_IRQHandler+0xac0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d101      	bne.n	800419c <HAL_DMA_IRQHandler+0x9d8>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <HAL_DMA_IRQHandler+0x9da>
 800419c:	2300      	movs	r3, #0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 824f 	beq.w	8004642 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	2204      	movs	r2, #4
 80041b6:	409a      	lsls	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80dd 	beq.w	800437c <HAL_DMA_IRQHandler+0xbb8>
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80d7 	beq.w	800437c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2204      	movs	r2, #4
 80041d8:	409a      	lsls	r2, r3
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d059      	beq.n	800429c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d14a      	bne.n	8004288 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8220 	beq.w	800463c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004204:	e21a      	b.n	800463c <HAL_DMA_IRQHandler+0xe78>
 8004206:	bf00      	nop
 8004208:	40020010 	.word	0x40020010
 800420c:	40020028 	.word	0x40020028
 8004210:	40020040 	.word	0x40020040
 8004214:	40020058 	.word	0x40020058
 8004218:	40020070 	.word	0x40020070
 800421c:	40020088 	.word	0x40020088
 8004220:	400200a0 	.word	0x400200a0
 8004224:	400200b8 	.word	0x400200b8
 8004228:	40020410 	.word	0x40020410
 800422c:	40020428 	.word	0x40020428
 8004230:	40020440 	.word	0x40020440
 8004234:	40020458 	.word	0x40020458
 8004238:	40020470 	.word	0x40020470
 800423c:	40020488 	.word	0x40020488
 8004240:	400204a0 	.word	0x400204a0
 8004244:	400204b8 	.word	0x400204b8
 8004248:	48022c08 	.word	0x48022c08
 800424c:	48022c1c 	.word	0x48022c1c
 8004250:	48022c30 	.word	0x48022c30
 8004254:	48022c44 	.word	0x48022c44
 8004258:	48022c58 	.word	0x48022c58
 800425c:	48022c6c 	.word	0x48022c6c
 8004260:	48022c80 	.word	0x48022c80
 8004264:	48022c94 	.word	0x48022c94
 8004268:	58025408 	.word	0x58025408
 800426c:	5802541c 	.word	0x5802541c
 8004270:	58025430 	.word	0x58025430
 8004274:	58025444 	.word	0x58025444
 8004278:	58025458 	.word	0x58025458
 800427c:	5802546c 	.word	0x5802546c
 8004280:	58025480 	.word	0x58025480
 8004284:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 81d5 	beq.w	800463c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800429a:	e1cf      	b.n	800463c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d160      	bne.n	8004368 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a7f      	ldr	r2, [pc, #508]	; (80044a8 <HAL_DMA_IRQHandler+0xce4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d04a      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a7d      	ldr	r2, [pc, #500]	; (80044ac <HAL_DMA_IRQHandler+0xce8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d045      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a7c      	ldr	r2, [pc, #496]	; (80044b0 <HAL_DMA_IRQHandler+0xcec>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d040      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a7a      	ldr	r2, [pc, #488]	; (80044b4 <HAL_DMA_IRQHandler+0xcf0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d03b      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a79      	ldr	r2, [pc, #484]	; (80044b8 <HAL_DMA_IRQHandler+0xcf4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d036      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a77      	ldr	r2, [pc, #476]	; (80044bc <HAL_DMA_IRQHandler+0xcf8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d031      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a76      	ldr	r2, [pc, #472]	; (80044c0 <HAL_DMA_IRQHandler+0xcfc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d02c      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a74      	ldr	r2, [pc, #464]	; (80044c4 <HAL_DMA_IRQHandler+0xd00>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d027      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a73      	ldr	r2, [pc, #460]	; (80044c8 <HAL_DMA_IRQHandler+0xd04>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d022      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a71      	ldr	r2, [pc, #452]	; (80044cc <HAL_DMA_IRQHandler+0xd08>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01d      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a70      	ldr	r2, [pc, #448]	; (80044d0 <HAL_DMA_IRQHandler+0xd0c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d018      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a6e      	ldr	r2, [pc, #440]	; (80044d4 <HAL_DMA_IRQHandler+0xd10>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6d      	ldr	r2, [pc, #436]	; (80044d8 <HAL_DMA_IRQHandler+0xd14>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6b      	ldr	r2, [pc, #428]	; (80044dc <HAL_DMA_IRQHandler+0xd18>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6a      	ldr	r2, [pc, #424]	; (80044e0 <HAL_DMA_IRQHandler+0xd1c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_DMA_IRQHandler+0xb82>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a68      	ldr	r2, [pc, #416]	; (80044e4 <HAL_DMA_IRQHandler+0xd20>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d108      	bne.n	8004358 <HAL_DMA_IRQHandler+0xb94>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0208 	bic.w	r2, r2, #8
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e007      	b.n	8004368 <HAL_DMA_IRQHandler+0xba4>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0204 	bic.w	r2, r2, #4
 8004366:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8165 	beq.w	800463c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800437a:	e15f      	b.n	800463c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	2202      	movs	r2, #2
 8004386:	409a      	lsls	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80c5 	beq.w	800451c <HAL_DMA_IRQHandler+0xd58>
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80bf 	beq.w	800451c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	2202      	movs	r2, #2
 80043a8:	409a      	lsls	r2, r3
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d018      	beq.n	80043ea <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 813a 	beq.w	8004640 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d4:	e134      	b.n	8004640 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8130 	beq.w	8004640 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043e8:	e12a      	b.n	8004640 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f040 8089 	bne.w	8004508 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2b      	ldr	r2, [pc, #172]	; (80044a8 <HAL_DMA_IRQHandler+0xce4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d04a      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a29      	ldr	r2, [pc, #164]	; (80044ac <HAL_DMA_IRQHandler+0xce8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d045      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a28      	ldr	r2, [pc, #160]	; (80044b0 <HAL_DMA_IRQHandler+0xcec>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d040      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <HAL_DMA_IRQHandler+0xcf0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d03b      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a25      	ldr	r2, [pc, #148]	; (80044b8 <HAL_DMA_IRQHandler+0xcf4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d036      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a23      	ldr	r2, [pc, #140]	; (80044bc <HAL_DMA_IRQHandler+0xcf8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d031      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a22      	ldr	r2, [pc, #136]	; (80044c0 <HAL_DMA_IRQHandler+0xcfc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d02c      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <HAL_DMA_IRQHandler+0xd00>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d027      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <HAL_DMA_IRQHandler+0xd04>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d022      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1d      	ldr	r2, [pc, #116]	; (80044cc <HAL_DMA_IRQHandler+0xd08>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01d      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1c      	ldr	r2, [pc, #112]	; (80044d0 <HAL_DMA_IRQHandler+0xd0c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d018      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1a      	ldr	r2, [pc, #104]	; (80044d4 <HAL_DMA_IRQHandler+0xd10>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <HAL_DMA_IRQHandler+0xd14>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a17      	ldr	r2, [pc, #92]	; (80044dc <HAL_DMA_IRQHandler+0xd18>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d009      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <HAL_DMA_IRQHandler+0xd1c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_DMA_IRQHandler+0xcd2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <HAL_DMA_IRQHandler+0xd20>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d128      	bne.n	80044e8 <HAL_DMA_IRQHandler+0xd24>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0214 	bic.w	r2, r2, #20
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e027      	b.n	80044f8 <HAL_DMA_IRQHandler+0xd34>
 80044a8:	40020010 	.word	0x40020010
 80044ac:	40020028 	.word	0x40020028
 80044b0:	40020040 	.word	0x40020040
 80044b4:	40020058 	.word	0x40020058
 80044b8:	40020070 	.word	0x40020070
 80044bc:	40020088 	.word	0x40020088
 80044c0:	400200a0 	.word	0x400200a0
 80044c4:	400200b8 	.word	0x400200b8
 80044c8:	40020410 	.word	0x40020410
 80044cc:	40020428 	.word	0x40020428
 80044d0:	40020440 	.word	0x40020440
 80044d4:	40020458 	.word	0x40020458
 80044d8:	40020470 	.word	0x40020470
 80044dc:	40020488 	.word	0x40020488
 80044e0:	400204a0 	.word	0x400204a0
 80044e4:	400204b8 	.word	0x400204b8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 020a 	bic.w	r2, r2, #10
 80044f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8097 	beq.w	8004640 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800451a:	e091      	b.n	8004640 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2208      	movs	r2, #8
 8004526:	409a      	lsls	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8088 	beq.w	8004642 <HAL_DMA_IRQHandler+0xe7e>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8082 	beq.w	8004642 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a41      	ldr	r2, [pc, #260]	; (8004648 <HAL_DMA_IRQHandler+0xe84>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d04a      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a3f      	ldr	r2, [pc, #252]	; (800464c <HAL_DMA_IRQHandler+0xe88>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d045      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a3e      	ldr	r2, [pc, #248]	; (8004650 <HAL_DMA_IRQHandler+0xe8c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d040      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a3c      	ldr	r2, [pc, #240]	; (8004654 <HAL_DMA_IRQHandler+0xe90>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d03b      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a3b      	ldr	r2, [pc, #236]	; (8004658 <HAL_DMA_IRQHandler+0xe94>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d036      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a39      	ldr	r2, [pc, #228]	; (800465c <HAL_DMA_IRQHandler+0xe98>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d031      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a38      	ldr	r2, [pc, #224]	; (8004660 <HAL_DMA_IRQHandler+0xe9c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d02c      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a36      	ldr	r2, [pc, #216]	; (8004664 <HAL_DMA_IRQHandler+0xea0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d027      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a35      	ldr	r2, [pc, #212]	; (8004668 <HAL_DMA_IRQHandler+0xea4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d022      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a33      	ldr	r2, [pc, #204]	; (800466c <HAL_DMA_IRQHandler+0xea8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01d      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a32      	ldr	r2, [pc, #200]	; (8004670 <HAL_DMA_IRQHandler+0xeac>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d018      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a30      	ldr	r2, [pc, #192]	; (8004674 <HAL_DMA_IRQHandler+0xeb0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2f      	ldr	r2, [pc, #188]	; (8004678 <HAL_DMA_IRQHandler+0xeb4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a2d      	ldr	r2, [pc, #180]	; (800467c <HAL_DMA_IRQHandler+0xeb8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a2c      	ldr	r2, [pc, #176]	; (8004680 <HAL_DMA_IRQHandler+0xebc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_DMA_IRQHandler+0xe1a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a2a      	ldr	r2, [pc, #168]	; (8004684 <HAL_DMA_IRQHandler+0xec0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d108      	bne.n	80045f0 <HAL_DMA_IRQHandler+0xe2c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 021c 	bic.w	r2, r2, #28
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e007      	b.n	8004600 <HAL_DMA_IRQHandler+0xe3c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 020e 	bic.w	r2, r2, #14
 80045fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2201      	movs	r2, #1
 800460a:	409a      	lsls	r2, r3
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4798      	blx	r3
 8004636:	e004      	b.n	8004642 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004638:	bf00      	nop
 800463a:	e002      	b.n	8004642 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800463c:	bf00      	nop
 800463e:	e000      	b.n	8004642 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004640:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004642:	3728      	adds	r7, #40	; 0x28
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40020010 	.word	0x40020010
 800464c:	40020028 	.word	0x40020028
 8004650:	40020040 	.word	0x40020040
 8004654:	40020058 	.word	0x40020058
 8004658:	40020070 	.word	0x40020070
 800465c:	40020088 	.word	0x40020088
 8004660:	400200a0 	.word	0x400200a0
 8004664:	400200b8 	.word	0x400200b8
 8004668:	40020410 	.word	0x40020410
 800466c:	40020428 	.word	0x40020428
 8004670:	40020440 	.word	0x40020440
 8004674:	40020458 	.word	0x40020458
 8004678:	40020470 	.word	0x40020470
 800467c:	40020488 	.word	0x40020488
 8004680:	400204a0 	.word	0x400204a0
 8004684:	400204b8 	.word	0x400204b8

08004688 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a7f      	ldr	r2, [pc, #508]	; (80048a4 <DMA_SetConfig+0x21c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d072      	beq.n	8004792 <DMA_SetConfig+0x10a>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a7d      	ldr	r2, [pc, #500]	; (80048a8 <DMA_SetConfig+0x220>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d06d      	beq.n	8004792 <DMA_SetConfig+0x10a>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a7c      	ldr	r2, [pc, #496]	; (80048ac <DMA_SetConfig+0x224>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d068      	beq.n	8004792 <DMA_SetConfig+0x10a>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a7a      	ldr	r2, [pc, #488]	; (80048b0 <DMA_SetConfig+0x228>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d063      	beq.n	8004792 <DMA_SetConfig+0x10a>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a79      	ldr	r2, [pc, #484]	; (80048b4 <DMA_SetConfig+0x22c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d05e      	beq.n	8004792 <DMA_SetConfig+0x10a>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a77      	ldr	r2, [pc, #476]	; (80048b8 <DMA_SetConfig+0x230>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d059      	beq.n	8004792 <DMA_SetConfig+0x10a>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a76      	ldr	r2, [pc, #472]	; (80048bc <DMA_SetConfig+0x234>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d054      	beq.n	8004792 <DMA_SetConfig+0x10a>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a74      	ldr	r2, [pc, #464]	; (80048c0 <DMA_SetConfig+0x238>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d04f      	beq.n	8004792 <DMA_SetConfig+0x10a>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a73      	ldr	r2, [pc, #460]	; (80048c4 <DMA_SetConfig+0x23c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d04a      	beq.n	8004792 <DMA_SetConfig+0x10a>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a71      	ldr	r2, [pc, #452]	; (80048c8 <DMA_SetConfig+0x240>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d045      	beq.n	8004792 <DMA_SetConfig+0x10a>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a70      	ldr	r2, [pc, #448]	; (80048cc <DMA_SetConfig+0x244>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d040      	beq.n	8004792 <DMA_SetConfig+0x10a>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a6e      	ldr	r2, [pc, #440]	; (80048d0 <DMA_SetConfig+0x248>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d03b      	beq.n	8004792 <DMA_SetConfig+0x10a>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a6d      	ldr	r2, [pc, #436]	; (80048d4 <DMA_SetConfig+0x24c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d036      	beq.n	8004792 <DMA_SetConfig+0x10a>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a6b      	ldr	r2, [pc, #428]	; (80048d8 <DMA_SetConfig+0x250>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d031      	beq.n	8004792 <DMA_SetConfig+0x10a>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a6a      	ldr	r2, [pc, #424]	; (80048dc <DMA_SetConfig+0x254>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d02c      	beq.n	8004792 <DMA_SetConfig+0x10a>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a68      	ldr	r2, [pc, #416]	; (80048e0 <DMA_SetConfig+0x258>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d027      	beq.n	8004792 <DMA_SetConfig+0x10a>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a67      	ldr	r2, [pc, #412]	; (80048e4 <DMA_SetConfig+0x25c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d022      	beq.n	8004792 <DMA_SetConfig+0x10a>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a65      	ldr	r2, [pc, #404]	; (80048e8 <DMA_SetConfig+0x260>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01d      	beq.n	8004792 <DMA_SetConfig+0x10a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a64      	ldr	r2, [pc, #400]	; (80048ec <DMA_SetConfig+0x264>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d018      	beq.n	8004792 <DMA_SetConfig+0x10a>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a62      	ldr	r2, [pc, #392]	; (80048f0 <DMA_SetConfig+0x268>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <DMA_SetConfig+0x10a>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a61      	ldr	r2, [pc, #388]	; (80048f4 <DMA_SetConfig+0x26c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00e      	beq.n	8004792 <DMA_SetConfig+0x10a>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a5f      	ldr	r2, [pc, #380]	; (80048f8 <DMA_SetConfig+0x270>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d009      	beq.n	8004792 <DMA_SetConfig+0x10a>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a5e      	ldr	r2, [pc, #376]	; (80048fc <DMA_SetConfig+0x274>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <DMA_SetConfig+0x10a>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a5c      	ldr	r2, [pc, #368]	; (8004900 <DMA_SetConfig+0x278>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <DMA_SetConfig+0x10e>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <DMA_SetConfig+0x110>
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047b6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a39      	ldr	r2, [pc, #228]	; (80048a4 <DMA_SetConfig+0x21c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d04a      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a38      	ldr	r2, [pc, #224]	; (80048a8 <DMA_SetConfig+0x220>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d045      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a36      	ldr	r2, [pc, #216]	; (80048ac <DMA_SetConfig+0x224>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d040      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a35      	ldr	r2, [pc, #212]	; (80048b0 <DMA_SetConfig+0x228>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d03b      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a33      	ldr	r2, [pc, #204]	; (80048b4 <DMA_SetConfig+0x22c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d036      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a32      	ldr	r2, [pc, #200]	; (80048b8 <DMA_SetConfig+0x230>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d031      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a30      	ldr	r2, [pc, #192]	; (80048bc <DMA_SetConfig+0x234>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d02c      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a2f      	ldr	r2, [pc, #188]	; (80048c0 <DMA_SetConfig+0x238>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d027      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a2d      	ldr	r2, [pc, #180]	; (80048c4 <DMA_SetConfig+0x23c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d022      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2c      	ldr	r2, [pc, #176]	; (80048c8 <DMA_SetConfig+0x240>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d01d      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2a      	ldr	r2, [pc, #168]	; (80048cc <DMA_SetConfig+0x244>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d018      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a29      	ldr	r2, [pc, #164]	; (80048d0 <DMA_SetConfig+0x248>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a27      	ldr	r2, [pc, #156]	; (80048d4 <DMA_SetConfig+0x24c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00e      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a26      	ldr	r2, [pc, #152]	; (80048d8 <DMA_SetConfig+0x250>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d009      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a24      	ldr	r2, [pc, #144]	; (80048dc <DMA_SetConfig+0x254>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <DMA_SetConfig+0x1d0>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <DMA_SetConfig+0x258>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d101      	bne.n	800485c <DMA_SetConfig+0x1d4>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <DMA_SetConfig+0x1d6>
 800485c:	2300      	movs	r3, #0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d059      	beq.n	8004916 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	223f      	movs	r2, #63	; 0x3f
 800486c:	409a      	lsls	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004880:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d138      	bne.n	8004904 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048a2:	e0ae      	b.n	8004a02 <DMA_SetConfig+0x37a>
 80048a4:	40020010 	.word	0x40020010
 80048a8:	40020028 	.word	0x40020028
 80048ac:	40020040 	.word	0x40020040
 80048b0:	40020058 	.word	0x40020058
 80048b4:	40020070 	.word	0x40020070
 80048b8:	40020088 	.word	0x40020088
 80048bc:	400200a0 	.word	0x400200a0
 80048c0:	400200b8 	.word	0x400200b8
 80048c4:	40020410 	.word	0x40020410
 80048c8:	40020428 	.word	0x40020428
 80048cc:	40020440 	.word	0x40020440
 80048d0:	40020458 	.word	0x40020458
 80048d4:	40020470 	.word	0x40020470
 80048d8:	40020488 	.word	0x40020488
 80048dc:	400204a0 	.word	0x400204a0
 80048e0:	400204b8 	.word	0x400204b8
 80048e4:	58025408 	.word	0x58025408
 80048e8:	5802541c 	.word	0x5802541c
 80048ec:	58025430 	.word	0x58025430
 80048f0:	58025444 	.word	0x58025444
 80048f4:	58025458 	.word	0x58025458
 80048f8:	5802546c 	.word	0x5802546c
 80048fc:	58025480 	.word	0x58025480
 8004900:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	60da      	str	r2, [r3, #12]
}
 8004914:	e075      	b.n	8004a02 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a3d      	ldr	r2, [pc, #244]	; (8004a10 <DMA_SetConfig+0x388>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d04a      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a3b      	ldr	r2, [pc, #236]	; (8004a14 <DMA_SetConfig+0x38c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d045      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a3a      	ldr	r2, [pc, #232]	; (8004a18 <DMA_SetConfig+0x390>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d040      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a38      	ldr	r2, [pc, #224]	; (8004a1c <DMA_SetConfig+0x394>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d03b      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a37      	ldr	r2, [pc, #220]	; (8004a20 <DMA_SetConfig+0x398>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d036      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a35      	ldr	r2, [pc, #212]	; (8004a24 <DMA_SetConfig+0x39c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d031      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <DMA_SetConfig+0x3a0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d02c      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a32      	ldr	r2, [pc, #200]	; (8004a2c <DMA_SetConfig+0x3a4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d027      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a31      	ldr	r2, [pc, #196]	; (8004a30 <DMA_SetConfig+0x3a8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d022      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a2f      	ldr	r2, [pc, #188]	; (8004a34 <DMA_SetConfig+0x3ac>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01d      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a2e      	ldr	r2, [pc, #184]	; (8004a38 <DMA_SetConfig+0x3b0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d018      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a2c      	ldr	r2, [pc, #176]	; (8004a3c <DMA_SetConfig+0x3b4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a2b      	ldr	r2, [pc, #172]	; (8004a40 <DMA_SetConfig+0x3b8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <DMA_SetConfig+0x3bc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d009      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a28      	ldr	r2, [pc, #160]	; (8004a48 <DMA_SetConfig+0x3c0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <DMA_SetConfig+0x32e>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a26      	ldr	r2, [pc, #152]	; (8004a4c <DMA_SetConfig+0x3c4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d101      	bne.n	80049ba <DMA_SetConfig+0x332>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <DMA_SetConfig+0x334>
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2201      	movs	r2, #1
 80049ca:	409a      	lsls	r2, r3
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d108      	bne.n	80049f2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	60da      	str	r2, [r3, #12]
}
 80049f0:	e007      	b.n	8004a02 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	60da      	str	r2, [r3, #12]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	48022c08 	.word	0x48022c08
 8004a14:	48022c1c 	.word	0x48022c1c
 8004a18:	48022c30 	.word	0x48022c30
 8004a1c:	48022c44 	.word	0x48022c44
 8004a20:	48022c58 	.word	0x48022c58
 8004a24:	48022c6c 	.word	0x48022c6c
 8004a28:	48022c80 	.word	0x48022c80
 8004a2c:	48022c94 	.word	0x48022c94
 8004a30:	58025408 	.word	0x58025408
 8004a34:	5802541c 	.word	0x5802541c
 8004a38:	58025430 	.word	0x58025430
 8004a3c:	58025444 	.word	0x58025444
 8004a40:	58025458 	.word	0x58025458
 8004a44:	5802546c 	.word	0x5802546c
 8004a48:	58025480 	.word	0x58025480
 8004a4c:	58025494 	.word	0x58025494

08004a50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a42      	ldr	r2, [pc, #264]	; (8004b68 <DMA_CalcBaseAndBitshift+0x118>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d04a      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a41      	ldr	r2, [pc, #260]	; (8004b6c <DMA_CalcBaseAndBitshift+0x11c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d045      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a3f      	ldr	r2, [pc, #252]	; (8004b70 <DMA_CalcBaseAndBitshift+0x120>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d040      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a3e      	ldr	r2, [pc, #248]	; (8004b74 <DMA_CalcBaseAndBitshift+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d03b      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a3c      	ldr	r2, [pc, #240]	; (8004b78 <DMA_CalcBaseAndBitshift+0x128>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d036      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a3b      	ldr	r2, [pc, #236]	; (8004b7c <DMA_CalcBaseAndBitshift+0x12c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d031      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a39      	ldr	r2, [pc, #228]	; (8004b80 <DMA_CalcBaseAndBitshift+0x130>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d02c      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a38      	ldr	r2, [pc, #224]	; (8004b84 <DMA_CalcBaseAndBitshift+0x134>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d027      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a36      	ldr	r2, [pc, #216]	; (8004b88 <DMA_CalcBaseAndBitshift+0x138>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d022      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a35      	ldr	r2, [pc, #212]	; (8004b8c <DMA_CalcBaseAndBitshift+0x13c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d01d      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a33      	ldr	r2, [pc, #204]	; (8004b90 <DMA_CalcBaseAndBitshift+0x140>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a32      	ldr	r2, [pc, #200]	; (8004b94 <DMA_CalcBaseAndBitshift+0x144>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a30      	ldr	r2, [pc, #192]	; (8004b98 <DMA_CalcBaseAndBitshift+0x148>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2f      	ldr	r2, [pc, #188]	; (8004b9c <DMA_CalcBaseAndBitshift+0x14c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a2d      	ldr	r2, [pc, #180]	; (8004ba0 <DMA_CalcBaseAndBitshift+0x150>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <DMA_CalcBaseAndBitshift+0xa8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a2c      	ldr	r2, [pc, #176]	; (8004ba4 <DMA_CalcBaseAndBitshift+0x154>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d101      	bne.n	8004afc <DMA_CalcBaseAndBitshift+0xac>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <DMA_CalcBaseAndBitshift+0xae>
 8004afc:	2300      	movs	r3, #0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d024      	beq.n	8004b4c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	3b10      	subs	r3, #16
 8004b0a:	4a27      	ldr	r2, [pc, #156]	; (8004ba8 <DMA_CalcBaseAndBitshift+0x158>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	4a24      	ldr	r2, [pc, #144]	; (8004bac <DMA_CalcBaseAndBitshift+0x15c>)
 8004b1c:	5cd3      	ldrb	r3, [r2, r3]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d908      	bls.n	8004b3c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <DMA_CalcBaseAndBitshift+0x160>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	1d1a      	adds	r2, r3, #4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	659a      	str	r2, [r3, #88]	; 0x58
 8004b3a:	e00d      	b.n	8004b58 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <DMA_CalcBaseAndBitshift+0x160>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6593      	str	r3, [r2, #88]	; 0x58
 8004b4a:	e005      	b.n	8004b58 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	40020010 	.word	0x40020010
 8004b6c:	40020028 	.word	0x40020028
 8004b70:	40020040 	.word	0x40020040
 8004b74:	40020058 	.word	0x40020058
 8004b78:	40020070 	.word	0x40020070
 8004b7c:	40020088 	.word	0x40020088
 8004b80:	400200a0 	.word	0x400200a0
 8004b84:	400200b8 	.word	0x400200b8
 8004b88:	40020410 	.word	0x40020410
 8004b8c:	40020428 	.word	0x40020428
 8004b90:	40020440 	.word	0x40020440
 8004b94:	40020458 	.word	0x40020458
 8004b98:	40020470 	.word	0x40020470
 8004b9c:	40020488 	.word	0x40020488
 8004ba0:	400204a0 	.word	0x400204a0
 8004ba4:	400204b8 	.word	0x400204b8
 8004ba8:	aaaaaaab 	.word	0xaaaaaaab
 8004bac:	08009400 	.word	0x08009400
 8004bb0:	fffffc00 	.word	0xfffffc00

08004bb4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d120      	bne.n	8004c0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d858      	bhi.n	8004c82 <DMA_CheckFifoParam+0xce>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <DMA_CheckFifoParam+0x24>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bfb 	.word	0x08004bfb
 8004be0:	08004be9 	.word	0x08004be9
 8004be4:	08004c83 	.word	0x08004c83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d048      	beq.n	8004c86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bf8:	e045      	b.n	8004c86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c02:	d142      	bne.n	8004c8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c08:	e03f      	b.n	8004c8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c12:	d123      	bne.n	8004c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d838      	bhi.n	8004c8e <DMA_CheckFifoParam+0xda>
 8004c1c:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <DMA_CheckFifoParam+0x70>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c35 	.word	0x08004c35
 8004c28:	08004c3b 	.word	0x08004c3b
 8004c2c:	08004c35 	.word	0x08004c35
 8004c30:	08004c4d 	.word	0x08004c4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
        break;
 8004c38:	e030      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d025      	beq.n	8004c92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c4a:	e022      	b.n	8004c92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c54:	d11f      	bne.n	8004c96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c5a:	e01c      	b.n	8004c96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d902      	bls.n	8004c6a <DMA_CheckFifoParam+0xb6>
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d003      	beq.n	8004c70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c68:	e018      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c6e:	e015      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00e      	beq.n	8004c9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8004c80:	e00b      	b.n	8004c9a <DMA_CheckFifoParam+0xe6>
        break;
 8004c82:	bf00      	nop
 8004c84:	e00a      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
        break;
 8004c86:	bf00      	nop
 8004c88:	e008      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e006      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e004      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
        break;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
        break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <DMA_CheckFifoParam+0xe8>
    break;
 8004c9a:	bf00      	nop
    }
  }

  return status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop

08004cac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a38      	ldr	r2, [pc, #224]	; (8004da0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d022      	beq.n	8004d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a36      	ldr	r2, [pc, #216]	; (8004da4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01d      	beq.n	8004d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a35      	ldr	r2, [pc, #212]	; (8004da8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d018      	beq.n	8004d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a33      	ldr	r2, [pc, #204]	; (8004dac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a32      	ldr	r2, [pc, #200]	; (8004db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00e      	beq.n	8004d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a30      	ldr	r2, [pc, #192]	; (8004db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d009      	beq.n	8004d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2f      	ldr	r2, [pc, #188]	; (8004db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2d      	ldr	r2, [pc, #180]	; (8004dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d101      	bne.n	8004d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01a      	beq.n	8004d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	3b08      	subs	r3, #8
 8004d1c:	4a28      	ldr	r2, [pc, #160]	; (8004dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	461a      	mov	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	2201      	movs	r2, #1
 8004d42:	409a      	lsls	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d48:	e024      	b.n	8004d94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	3b10      	subs	r3, #16
 8004d52:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d806      	bhi.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4a1b      	ldr	r2, [pc, #108]	; (8004dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d902      	bls.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a16      	ldr	r2, [pc, #88]	; (8004ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 031f 	and.w	r3, r3, #31
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	58025408 	.word	0x58025408
 8004da4:	5802541c 	.word	0x5802541c
 8004da8:	58025430 	.word	0x58025430
 8004dac:	58025444 	.word	0x58025444
 8004db0:	58025458 	.word	0x58025458
 8004db4:	5802546c 	.word	0x5802546c
 8004db8:	58025480 	.word	0x58025480
 8004dbc:	58025494 	.word	0x58025494
 8004dc0:	cccccccd 	.word	0xcccccccd
 8004dc4:	16009600 	.word	0x16009600
 8004dc8:	58025880 	.word	0x58025880
 8004dcc:	aaaaaaab 	.word	0xaaaaaaab
 8004dd0:	400204b8 	.word	0x400204b8
 8004dd4:	4002040f 	.word	0x4002040f
 8004dd8:	10008200 	.word	0x10008200
 8004ddc:	40020880 	.word	0x40020880

08004de0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d04a      	beq.n	8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d847      	bhi.n	8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a25      	ldr	r2, [pc, #148]	; (8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d022      	beq.n	8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a24      	ldr	r2, [pc, #144]	; (8004e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d01d      	beq.n	8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a22      	ldr	r2, [pc, #136]	; (8004ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d018      	beq.n	8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d013      	beq.n	8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00e      	beq.n	8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1e      	ldr	r2, [pc, #120]	; (8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d009      	beq.n	8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1c      	ldr	r2, [pc, #112]	; (8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d004      	beq.n	8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d101      	bne.n	8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e50:	2300      	movs	r3, #0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	461a      	mov	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e68:	671a      	str	r2, [r3, #112]	; 0x70
 8004e6a:	e009      	b.n	8004e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	461a      	mov	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a11      	ldr	r2, [pc, #68]	; (8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e7e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	2201      	movs	r2, #1
 8004e86:	409a      	lsls	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	58025408 	.word	0x58025408
 8004e9c:	5802541c 	.word	0x5802541c
 8004ea0:	58025430 	.word	0x58025430
 8004ea4:	58025444 	.word	0x58025444
 8004ea8:	58025458 	.word	0x58025458
 8004eac:	5802546c 	.word	0x5802546c
 8004eb0:	58025480 	.word	0x58025480
 8004eb4:	58025494 	.word	0x58025494
 8004eb8:	1600963f 	.word	0x1600963f
 8004ebc:	58025940 	.word	0x58025940
 8004ec0:	1000823f 	.word	0x1000823f
 8004ec4:	40020940 	.word	0x40020940

08004ec8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b098      	sub	sp, #96	; 0x60
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004ed0:	4a84      	ldr	r2, [pc, #528]	; (80050e4 <HAL_FDCAN_Init+0x21c>)
 8004ed2:	f107 030c 	add.w	r3, r7, #12
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	224c      	movs	r2, #76	; 0x4c
 8004eda:	4618      	mov	r0, r3
 8004edc:	f004 fa48 	bl	8009370 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e1c6      	b.n	8005278 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7e      	ldr	r2, [pc, #504]	; (80050e8 <HAL_FDCAN_Init+0x220>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d106      	bne.n	8004f02 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004efc:	461a      	mov	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc f84a 	bl	8000fb0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0210 	bic.w	r2, r2, #16
 8004f2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f2c:	f7fc fba6 	bl	800167c <HAL_GetTick>
 8004f30:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f32:	e014      	b.n	8004f5e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f34:	f7fc fba2 	bl	800167c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b0a      	cmp	r3, #10
 8004f40:	d90d      	bls.n	8004f5e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f48:	f043 0201 	orr.w	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2203      	movs	r2, #3
 8004f56:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e18c      	b.n	8005278 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d0e3      	beq.n	8004f34 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f7c:	f7fc fb7e 	bl	800167c <HAL_GetTick>
 8004f80:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f82:	e014      	b.n	8004fae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f84:	f7fc fb7a 	bl	800167c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b0a      	cmp	r3, #10
 8004f90:	d90d      	bls.n	8004fae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f98:	f043 0201 	orr.w	r2, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e164      	b.n	8005278 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0e3      	beq.n	8004f84 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0202 	orr.w	r2, r2, #2
 8004fca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	7c1b      	ldrb	r3, [r3, #16]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d108      	bne.n	8004fe6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe2:	619a      	str	r2, [r3, #24]
 8004fe4:	e007      	b.n	8004ff6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	7c5b      	ldrb	r3, [r3, #17]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d108      	bne.n	8005010 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500c:	619a      	str	r2, [r3, #24]
 800500e:	e007      	b.n	8005020 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800501e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	7c9b      	ldrb	r3, [r3, #18]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d108      	bne.n	800503a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699a      	ldr	r2, [r3, #24]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005036:	619a      	str	r2, [r3, #24]
 8005038:	e007      	b.n	800504a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005048:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800506e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0210 	bic.w	r2, r2, #16
 800507e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d108      	bne.n	800509a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0204 	orr.w	r2, r2, #4
 8005096:	619a      	str	r2, [r3, #24]
 8005098:	e030      	b.n	80050fc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d02c      	beq.n	80050fc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d020      	beq.n	80050ec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050b8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0210 	orr.w	r2, r2, #16
 80050c8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d114      	bne.n	80050fc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0220 	orr.w	r2, r2, #32
 80050e0:	619a      	str	r2, [r3, #24]
 80050e2:	e00b      	b.n	80050fc <HAL_FDCAN_Init+0x234>
 80050e4:	080093a4 	.word	0x080093a4
 80050e8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0220 	orr.w	r2, r2, #32
 80050fa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	3b01      	subs	r3, #1
 8005102:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	3b01      	subs	r3, #1
 800510a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800510c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005114:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	3b01      	subs	r3, #1
 800511e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005124:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005126:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005130:	d115      	bne.n	800515e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	3b01      	subs	r3, #1
 800513e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005140:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	3b01      	subs	r3, #1
 8005148:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800514a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	3b01      	subs	r3, #1
 8005154:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800515a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800515c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005184:	4413      	add	r3, r2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d011      	beq.n	80051ae <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005192:	f023 0107 	bic.w	r1, r3, #7
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	3360      	adds	r3, #96	; 0x60
 800519e:	443b      	add	r3, r7
 80051a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d011      	beq.n	80051da <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051be:	f023 0107 	bic.w	r1, r3, #7
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	3360      	adds	r3, #96	; 0x60
 80051ca:	443b      	add	r3, r7
 80051cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d012      	beq.n	8005208 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051ea:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	3360      	adds	r3, #96	; 0x60
 80051f6:	443b      	add	r3, r7
 80051f8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80051fc:	011a      	lsls	r2, r3, #4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520c:	2b00      	cmp	r3, #0
 800520e:	d012      	beq.n	8005236 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005218:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	3360      	adds	r3, #96	; 0x60
 8005224:	443b      	add	r3, r7
 8005226:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800522a:	021a      	lsls	r2, r3, #8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a11      	ldr	r2, [pc, #68]	; (8005280 <HAL_FDCAN_Init+0x3b8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d107      	bne.n	8005250 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f022 0203 	bic.w	r2, r2, #3
 800524e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f80b 	bl	8005284 <FDCAN_CalcultateRamBlockAddresses>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005274:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005278:	4618      	mov	r0, r3
 800527a:	3760      	adds	r7, #96	; 0x60
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	4000a000 	.word	0x4000a000

08005284 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800529a:	4ba7      	ldr	r3, [pc, #668]	; (8005538 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800529c:	4013      	ands	r3, r2
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	0091      	lsls	r1, r2, #2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	430b      	orrs	r3, r1
 80052a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	041a      	lsls	r2, r3, #16
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	4413      	add	r3, r2
 80052d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052da:	4b97      	ldr	r3, [pc, #604]	; (8005538 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052dc:	4013      	ands	r3, r2
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	0091      	lsls	r1, r2, #2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	430b      	orrs	r3, r1
 80052e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fc:	041a      	lsls	r2, r3, #16
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	4413      	add	r3, r2
 8005312:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800531c:	4b86      	ldr	r3, [pc, #536]	; (8005538 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800531e:	4013      	ands	r3, r2
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	0091      	lsls	r1, r2, #2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	430b      	orrs	r3, r1
 800532a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005336:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	041a      	lsls	r2, r3, #16
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4413      	add	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005364:	4b74      	ldr	r3, [pc, #464]	; (8005538 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005366:	4013      	ands	r3, r2
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	0091      	lsls	r1, r2, #2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	430b      	orrs	r3, r1
 8005372:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800537e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005386:	041a      	lsls	r2, r3, #16
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	4413      	add	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80053ac:	4b62      	ldr	r3, [pc, #392]	; (8005538 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	0091      	lsls	r1, r2, #2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	430b      	orrs	r3, r1
 80053ba:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80053c6:	fb02 f303 	mul.w	r3, r2, r3
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	4413      	add	r3, r2
 80053ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80053d8:	4b57      	ldr	r3, [pc, #348]	; (8005538 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053da:	4013      	ands	r3, r2
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	0091      	lsls	r1, r2, #2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	430b      	orrs	r3, r1
 80053e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053f2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	041a      	lsls	r2, r3, #16
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	4413      	add	r3, r2
 8005410:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800541a:	4b47      	ldr	r3, [pc, #284]	; (8005538 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800541c:	4013      	ands	r3, r2
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	0091      	lsls	r1, r2, #2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	430b      	orrs	r3, r1
 8005428:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005434:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543c:	041a      	lsls	r2, r3, #16
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005450:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005458:	061a      	lsls	r2, r3, #24
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005468:	4b34      	ldr	r3, [pc, #208]	; (800553c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800546a:	4413      	add	r3, r2
 800546c:	009a      	lsls	r2, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	441a      	add	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800549e:	fb01 f303 	mul.w	r3, r1, r3
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	441a      	add	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	441a      	add	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552e:	4a04      	ldr	r2, [pc, #16]	; (8005540 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d915      	bls.n	8005560 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005534:	e006      	b.n	8005544 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005536:	bf00      	nop
 8005538:	ffff0003 	.word	0xffff0003
 800553c:	10002b00 	.word	0x10002b00
 8005540:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800554a:	f043 0220 	orr.w	r2, r3, #32
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2203      	movs	r2, #3
 8005558:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e010      	b.n	8005582 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e005      	b.n	8005574 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3304      	adds	r3, #4
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	429a      	cmp	r2, r3
 800557e:	d3f3      	bcc.n	8005568 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop

08005590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005590:	b480      	push	{r7}
 8005592:	b089      	sub	sp, #36	; 0x24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800559e:	4b89      	ldr	r3, [pc, #548]	; (80057c4 <HAL_GPIO_Init+0x234>)
 80055a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055a2:	e194      	b.n	80058ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	2101      	movs	r1, #1
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	fa01 f303 	lsl.w	r3, r1, r3
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 8186 	beq.w	80058c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d005      	beq.n	80055d4 <HAL_GPIO_Init+0x44>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d130      	bne.n	8005636 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	2203      	movs	r2, #3
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800560a:	2201      	movs	r2, #1
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	091b      	lsrs	r3, r3, #4
 8005620:	f003 0201 	and.w	r2, r3, #1
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4313      	orrs	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b03      	cmp	r3, #3
 8005640:	d017      	beq.n	8005672 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	2203      	movs	r2, #3
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	4013      	ands	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4313      	orrs	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d123      	bne.n	80056c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	08da      	lsrs	r2, r3, #3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3208      	adds	r2, #8
 8005686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	220f      	movs	r2, #15
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	43db      	mvns	r3, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4013      	ands	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	08da      	lsrs	r2, r3, #3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3208      	adds	r2, #8
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	2203      	movs	r2, #3
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43db      	mvns	r3, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4013      	ands	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f003 0203 	and.w	r2, r3, #3
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 80e0 	beq.w	80058c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005708:	4b2f      	ldr	r3, [pc, #188]	; (80057c8 <HAL_GPIO_Init+0x238>)
 800570a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800570e:	4a2e      	ldr	r2, [pc, #184]	; (80057c8 <HAL_GPIO_Init+0x238>)
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005718:	4b2b      	ldr	r3, [pc, #172]	; (80057c8 <HAL_GPIO_Init+0x238>)
 800571a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005726:	4a29      	ldr	r2, [pc, #164]	; (80057cc <HAL_GPIO_Init+0x23c>)
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	089b      	lsrs	r3, r3, #2
 800572c:	3302      	adds	r3, #2
 800572e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	220f      	movs	r2, #15
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4013      	ands	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a20      	ldr	r2, [pc, #128]	; (80057d0 <HAL_GPIO_Init+0x240>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d052      	beq.n	80057f8 <HAL_GPIO_Init+0x268>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1f      	ldr	r2, [pc, #124]	; (80057d4 <HAL_GPIO_Init+0x244>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d031      	beq.n	80057be <HAL_GPIO_Init+0x22e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1e      	ldr	r2, [pc, #120]	; (80057d8 <HAL_GPIO_Init+0x248>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d02b      	beq.n	80057ba <HAL_GPIO_Init+0x22a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1d      	ldr	r2, [pc, #116]	; (80057dc <HAL_GPIO_Init+0x24c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d025      	beq.n	80057b6 <HAL_GPIO_Init+0x226>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1c      	ldr	r2, [pc, #112]	; (80057e0 <HAL_GPIO_Init+0x250>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d01f      	beq.n	80057b2 <HAL_GPIO_Init+0x222>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1b      	ldr	r2, [pc, #108]	; (80057e4 <HAL_GPIO_Init+0x254>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d019      	beq.n	80057ae <HAL_GPIO_Init+0x21e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1a      	ldr	r2, [pc, #104]	; (80057e8 <HAL_GPIO_Init+0x258>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <HAL_GPIO_Init+0x21a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a19      	ldr	r2, [pc, #100]	; (80057ec <HAL_GPIO_Init+0x25c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00d      	beq.n	80057a6 <HAL_GPIO_Init+0x216>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <HAL_GPIO_Init+0x260>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d007      	beq.n	80057a2 <HAL_GPIO_Init+0x212>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a17      	ldr	r2, [pc, #92]	; (80057f4 <HAL_GPIO_Init+0x264>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d101      	bne.n	800579e <HAL_GPIO_Init+0x20e>
 800579a:	2309      	movs	r3, #9
 800579c:	e02d      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 800579e:	230a      	movs	r3, #10
 80057a0:	e02b      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057a2:	2308      	movs	r3, #8
 80057a4:	e029      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057a6:	2307      	movs	r3, #7
 80057a8:	e027      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057aa:	2306      	movs	r3, #6
 80057ac:	e025      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057ae:	2305      	movs	r3, #5
 80057b0:	e023      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057b2:	2304      	movs	r3, #4
 80057b4:	e021      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057b6:	2303      	movs	r3, #3
 80057b8:	e01f      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e01d      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057be:	2301      	movs	r3, #1
 80057c0:	e01b      	b.n	80057fa <HAL_GPIO_Init+0x26a>
 80057c2:	bf00      	nop
 80057c4:	58000080 	.word	0x58000080
 80057c8:	58024400 	.word	0x58024400
 80057cc:	58000400 	.word	0x58000400
 80057d0:	58020000 	.word	0x58020000
 80057d4:	58020400 	.word	0x58020400
 80057d8:	58020800 	.word	0x58020800
 80057dc:	58020c00 	.word	0x58020c00
 80057e0:	58021000 	.word	0x58021000
 80057e4:	58021400 	.word	0x58021400
 80057e8:	58021800 	.word	0x58021800
 80057ec:	58021c00 	.word	0x58021c00
 80057f0:	58022000 	.word	0x58022000
 80057f4:	58022400 	.word	0x58022400
 80057f8:	2300      	movs	r3, #0
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	f002 0203 	and.w	r2, r2, #3
 8005800:	0092      	lsls	r2, r2, #2
 8005802:	4093      	lsls	r3, r2
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4313      	orrs	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800580a:	4938      	ldr	r1, [pc, #224]	; (80058ec <HAL_GPIO_Init+0x35c>)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	089b      	lsrs	r3, r3, #2
 8005810:	3302      	adds	r3, #2
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	43db      	mvns	r3, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4013      	ands	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800583e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	43db      	mvns	r3, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4013      	ands	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800586c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	3301      	adds	r3, #1
 80058cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f47f ae63 	bne.w	80055a4 <HAL_GPIO_Init+0x14>
  }
}
 80058de:	bf00      	nop
 80058e0:	bf00      	nop
 80058e2:	3724      	adds	r7, #36	; 0x24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	58000400 	.word	0x58000400

080058f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e07f      	b.n	8005a02 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fb fc1a 	bl	8001150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2224      	movs	r2, #36	; 0x24
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005940:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005950:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d107      	bne.n	800596a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	e006      	b.n	8005978 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005976:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d104      	bne.n	800598a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005988:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6859      	ldr	r1, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <HAL_I2C_Init+0x11c>)
 8005996:	430b      	orrs	r3, r1
 8005998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69d9      	ldr	r1, [r3, #28]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1a      	ldr	r2, [r3, #32]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	02008000 	.word	0x02008000

08005a10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d138      	bne.n	8005a98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e032      	b.n	8005a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2224      	movs	r2, #36	; 0x24
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0201 	bic.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6819      	ldr	r1, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	e000      	b.n	8005a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a98:	2302      	movs	r3, #2
  }
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d139      	bne.n	8005b30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e033      	b.n	8005b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2224      	movs	r2, #36	; 0x24
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005af8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e000      	b.n	8005b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005b48:	4b19      	ldr	r3, [pc, #100]	; (8005bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d00a      	beq.n	8005b6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b54:	4b16      	ldr	r3, [pc, #88]	; (8005bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d001      	beq.n	8005b66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e01f      	b.n	8005ba6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e01d      	b.n	8005ba6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f023 0207 	bic.w	r2, r3, #7
 8005b72:	490f      	ldr	r1, [pc, #60]	; (8005bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b7a:	f7fb fd7f 	bl	800167c <HAL_GetTick>
 8005b7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b80:	e009      	b.n	8005b96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b82:	f7fb fd7b 	bl	800167c <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b90:	d901      	bls.n	8005b96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e007      	b.n	8005ba6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b96:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba2:	d1ee      	bne.n	8005b82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	58024800 	.word	0x58024800

08005bb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08c      	sub	sp, #48	; 0x30
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f000 bc1f 	b.w	8006406 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80b3 	beq.w	8005d3c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bd6:	4b95      	ldr	r3, [pc, #596]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005be0:	4b92      	ldr	r3, [pc, #584]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d007      	beq.n	8005bfc <HAL_RCC_OscConfig+0x48>
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	2b18      	cmp	r3, #24
 8005bf0:	d112      	bne.n	8005c18 <HAL_RCC_OscConfig+0x64>
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d10d      	bne.n	8005c18 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bfc:	4b8b      	ldr	r3, [pc, #556]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8098 	beq.w	8005d3a <HAL_RCC_OscConfig+0x186>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f040 8093 	bne.w	8005d3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e3f6      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c20:	d106      	bne.n	8005c30 <HAL_RCC_OscConfig+0x7c>
 8005c22:	4b82      	ldr	r3, [pc, #520]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a81      	ldr	r2, [pc, #516]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	e058      	b.n	8005ce2 <HAL_RCC_OscConfig+0x12e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d112      	bne.n	8005c5e <HAL_RCC_OscConfig+0xaa>
 8005c38:	4b7c      	ldr	r3, [pc, #496]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a7b      	ldr	r2, [pc, #492]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	4b79      	ldr	r3, [pc, #484]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a78      	ldr	r2, [pc, #480]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	4b76      	ldr	r3, [pc, #472]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a75      	ldr	r2, [pc, #468]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	e041      	b.n	8005ce2 <HAL_RCC_OscConfig+0x12e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c66:	d112      	bne.n	8005c8e <HAL_RCC_OscConfig+0xda>
 8005c68:	4b70      	ldr	r3, [pc, #448]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a6f      	ldr	r2, [pc, #444]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	4b6d      	ldr	r3, [pc, #436]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a6c      	ldr	r2, [pc, #432]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	4b6a      	ldr	r3, [pc, #424]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a69      	ldr	r2, [pc, #420]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	e029      	b.n	8005ce2 <HAL_RCC_OscConfig+0x12e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005c96:	d112      	bne.n	8005cbe <HAL_RCC_OscConfig+0x10a>
 8005c98:	4b64      	ldr	r3, [pc, #400]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a63      	ldr	r2, [pc, #396]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	4b61      	ldr	r3, [pc, #388]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a60      	ldr	r2, [pc, #384]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b5e      	ldr	r3, [pc, #376]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a5d      	ldr	r2, [pc, #372]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	e011      	b.n	8005ce2 <HAL_RCC_OscConfig+0x12e>
 8005cbe:	4b5b      	ldr	r3, [pc, #364]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a5a      	ldr	r2, [pc, #360]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	4b58      	ldr	r3, [pc, #352]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a57      	ldr	r2, [pc, #348]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	4b55      	ldr	r3, [pc, #340]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a54      	ldr	r2, [pc, #336]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005cdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ce0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d013      	beq.n	8005d12 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cea:	f7fb fcc7 	bl	800167c <HAL_GetTick>
 8005cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf2:	f7fb fcc3 	bl	800167c <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b64      	cmp	r3, #100	; 0x64
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e380      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d04:	4b49      	ldr	r3, [pc, #292]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x13e>
 8005d10:	e014      	b.n	8005d3c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d12:	f7fb fcb3 	bl	800167c <HAL_GetTick>
 8005d16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d1a:	f7fb fcaf 	bl	800167c <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b64      	cmp	r3, #100	; 0x64
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e36c      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d2c:	4b3f      	ldr	r3, [pc, #252]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1f0      	bne.n	8005d1a <HAL_RCC_OscConfig+0x166>
 8005d38:	e000      	b.n	8005d3c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 808c 	beq.w	8005e62 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d4a:	4b38      	ldr	r3, [pc, #224]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d52:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d54:	4b35      	ldr	r3, [pc, #212]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <HAL_RCC_OscConfig+0x1bc>
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	2b18      	cmp	r3, #24
 8005d64:	d137      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x222>
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d132      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d70:	4b2e      	ldr	r3, [pc, #184]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_RCC_OscConfig+0x1d4>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e33e      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d88:	4b28      	ldr	r3, [pc, #160]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f023 0219 	bic.w	r2, r3, #25
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4925      	ldr	r1, [pc, #148]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9a:	f7fb fc6f 	bl	800167c <HAL_GetTick>
 8005d9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005da2:	f7fb fc6b 	bl	800167c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e328      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc0:	4b1a      	ldr	r3, [pc, #104]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	061b      	lsls	r3, r3, #24
 8005dce:	4917      	ldr	r1, [pc, #92]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dd4:	e045      	b.n	8005e62 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d028      	beq.n	8005e30 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dde:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f023 0219 	bic.w	r2, r3, #25
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	4910      	ldr	r1, [pc, #64]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fb fc44 	bl	800167c <HAL_GetTick>
 8005df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df8:	f7fb fc40 	bl	800167c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e2fd      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e0a:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	061b      	lsls	r3, r3, #24
 8005e24:	4901      	ldr	r1, [pc, #4]	; (8005e2c <HAL_RCC_OscConfig+0x278>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	604b      	str	r3, [r1, #4]
 8005e2a:	e01a      	b.n	8005e62 <HAL_RCC_OscConfig+0x2ae>
 8005e2c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e30:	4b97      	ldr	r3, [pc, #604]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a96      	ldr	r2, [pc, #600]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3c:	f7fb fc1e 	bl	800167c <HAL_GetTick>
 8005e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e44:	f7fb fc1a 	bl	800167c <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e2d7      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e56:	4b8e      	ldr	r3, [pc, #568]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f0      	bne.n	8005e44 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d06a      	beq.n	8005f44 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e6e:	4b88      	ldr	r3, [pc, #544]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e78:	4b85      	ldr	r3, [pc, #532]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d007      	beq.n	8005e94 <HAL_RCC_OscConfig+0x2e0>
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2b18      	cmp	r3, #24
 8005e88:	d11b      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x30e>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d116      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e94:	4b7e      	ldr	r3, [pc, #504]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <HAL_RCC_OscConfig+0x2f8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	2b80      	cmp	r3, #128	; 0x80
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e2ac      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eac:	4b78      	ldr	r3, [pc, #480]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	061b      	lsls	r3, r3, #24
 8005eba:	4975      	ldr	r1, [pc, #468]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ec0:	e040      	b.n	8005f44 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d023      	beq.n	8005f12 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005eca:	4b71      	ldr	r3, [pc, #452]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a70      	ldr	r2, [pc, #448]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed6:	f7fb fbd1 	bl	800167c <HAL_GetTick>
 8005eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ede:	f7fb fbcd 	bl	800167c <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e28a      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ef0:	4b67      	ldr	r3, [pc, #412]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f0      	beq.n	8005ede <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005efc:	4b64      	ldr	r3, [pc, #400]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	061b      	lsls	r3, r3, #24
 8005f0a:	4961      	ldr	r1, [pc, #388]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60cb      	str	r3, [r1, #12]
 8005f10:	e018      	b.n	8005f44 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f12:	4b5f      	ldr	r3, [pc, #380]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a5e      	ldr	r2, [pc, #376]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1e:	f7fb fbad 	bl	800167c <HAL_GetTick>
 8005f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f26:	f7fb fba9 	bl	800167c <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e266      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f38:	4b55      	ldr	r3, [pc, #340]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1f0      	bne.n	8005f26 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d036      	beq.n	8005fbe <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d019      	beq.n	8005f8c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f58:	4b4d      	ldr	r3, [pc, #308]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5c:	4a4c      	ldr	r2, [pc, #304]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f64:	f7fb fb8a 	bl	800167c <HAL_GetTick>
 8005f68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f6c:	f7fb fb86 	bl	800167c <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e243      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f7e:	4b44      	ldr	r3, [pc, #272]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCC_OscConfig+0x3b8>
 8005f8a:	e018      	b.n	8005fbe <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f8c:	4b40      	ldr	r3, [pc, #256]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f90:	4a3f      	ldr	r2, [pc, #252]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005f92:	f023 0301 	bic.w	r3, r3, #1
 8005f96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f98:	f7fb fb70 	bl	800167c <HAL_GetTick>
 8005f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fa0:	f7fb fb6c 	bl	800167c <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e229      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fb2:	4b37      	ldr	r3, [pc, #220]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d036      	beq.n	8006038 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d019      	beq.n	8006006 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fd2:	4b2f      	ldr	r3, [pc, #188]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2e      	ldr	r2, [pc, #184]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005fd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fde:	f7fb fb4d 	bl	800167c <HAL_GetTick>
 8005fe2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fe6:	f7fb fb49 	bl	800167c <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e206      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ff8:	4b25      	ldr	r3, [pc, #148]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0f0      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x432>
 8006004:	e018      	b.n	8006038 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006006:	4b22      	ldr	r3, [pc, #136]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a21      	ldr	r2, [pc, #132]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 800600c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006010:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006012:	f7fb fb33 	bl	800167c <HAL_GetTick>
 8006016:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800601a:	f7fb fb2f 	bl	800167c <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e1ec      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800602c:	4b18      	ldr	r3, [pc, #96]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1f0      	bne.n	800601a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80af 	beq.w	80061a4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006046:	4b13      	ldr	r3, [pc, #76]	; (8006094 <HAL_RCC_OscConfig+0x4e0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a12      	ldr	r2, [pc, #72]	; (8006094 <HAL_RCC_OscConfig+0x4e0>)
 800604c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006050:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006052:	f7fb fb13 	bl	800167c <HAL_GetTick>
 8006056:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800605a:	f7fb fb0f 	bl	800167c <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b64      	cmp	r3, #100	; 0x64
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e1cc      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <HAL_RCC_OscConfig+0x4e0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0f0      	beq.n	800605a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d10b      	bne.n	8006098 <HAL_RCC_OscConfig+0x4e4>
 8006080:	4b03      	ldr	r3, [pc, #12]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006084:	4a02      	ldr	r2, [pc, #8]	; (8006090 <HAL_RCC_OscConfig+0x4dc>)
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	6713      	str	r3, [r2, #112]	; 0x70
 800608c:	e05b      	b.n	8006146 <HAL_RCC_OscConfig+0x592>
 800608e:	bf00      	nop
 8006090:	58024400 	.word	0x58024400
 8006094:	58024800 	.word	0x58024800
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d112      	bne.n	80060c6 <HAL_RCC_OscConfig+0x512>
 80060a0:	4b9d      	ldr	r3, [pc, #628]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a4:	4a9c      	ldr	r2, [pc, #624]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	6713      	str	r3, [r2, #112]	; 0x70
 80060ac:	4b9a      	ldr	r3, [pc, #616]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b0:	4a99      	ldr	r2, [pc, #612]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b6:	6713      	str	r3, [r2, #112]	; 0x70
 80060b8:	4b97      	ldr	r3, [pc, #604]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060bc:	4a96      	ldr	r2, [pc, #600]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060be:	f023 0304 	bic.w	r3, r3, #4
 80060c2:	6713      	str	r3, [r2, #112]	; 0x70
 80060c4:	e03f      	b.n	8006146 <HAL_RCC_OscConfig+0x592>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d112      	bne.n	80060f4 <HAL_RCC_OscConfig+0x540>
 80060ce:	4b92      	ldr	r3, [pc, #584]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	4a91      	ldr	r2, [pc, #580]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060d4:	f043 0304 	orr.w	r3, r3, #4
 80060d8:	6713      	str	r3, [r2, #112]	; 0x70
 80060da:	4b8f      	ldr	r3, [pc, #572]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	4a8e      	ldr	r2, [pc, #568]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e4:	6713      	str	r3, [r2, #112]	; 0x70
 80060e6:	4b8c      	ldr	r3, [pc, #560]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ea:	4a8b      	ldr	r2, [pc, #556]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6713      	str	r3, [r2, #112]	; 0x70
 80060f2:	e028      	b.n	8006146 <HAL_RCC_OscConfig+0x592>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	2b85      	cmp	r3, #133	; 0x85
 80060fa:	d112      	bne.n	8006122 <HAL_RCC_OscConfig+0x56e>
 80060fc:	4b86      	ldr	r3, [pc, #536]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80060fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006100:	4a85      	ldr	r2, [pc, #532]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006102:	f043 0304 	orr.w	r3, r3, #4
 8006106:	6713      	str	r3, [r2, #112]	; 0x70
 8006108:	4b83      	ldr	r3, [pc, #524]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610c:	4a82      	ldr	r2, [pc, #520]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800610e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006112:	6713      	str	r3, [r2, #112]	; 0x70
 8006114:	4b80      	ldr	r3, [pc, #512]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006118:	4a7f      	ldr	r2, [pc, #508]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	6713      	str	r3, [r2, #112]	; 0x70
 8006120:	e011      	b.n	8006146 <HAL_RCC_OscConfig+0x592>
 8006122:	4b7d      	ldr	r3, [pc, #500]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	4a7c      	ldr	r2, [pc, #496]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006128:	f023 0301 	bic.w	r3, r3, #1
 800612c:	6713      	str	r3, [r2, #112]	; 0x70
 800612e:	4b7a      	ldr	r3, [pc, #488]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006132:	4a79      	ldr	r2, [pc, #484]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006134:	f023 0304 	bic.w	r3, r3, #4
 8006138:	6713      	str	r3, [r2, #112]	; 0x70
 800613a:	4b77      	ldr	r3, [pc, #476]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800613c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613e:	4a76      	ldr	r2, [pc, #472]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006144:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d015      	beq.n	800617a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614e:	f7fb fa95 	bl	800167c <HAL_GetTick>
 8006152:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006154:	e00a      	b.n	800616c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006156:	f7fb fa91 	bl	800167c <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	f241 3288 	movw	r2, #5000	; 0x1388
 8006164:	4293      	cmp	r3, r2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e14c      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800616c:	4b6a      	ldr	r3, [pc, #424]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800616e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0ee      	beq.n	8006156 <HAL_RCC_OscConfig+0x5a2>
 8006178:	e014      	b.n	80061a4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617a:	f7fb fa7f 	bl	800167c <HAL_GetTick>
 800617e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006180:	e00a      	b.n	8006198 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006182:	f7fb fa7b 	bl	800167c <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e136      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006198:	4b5f      	ldr	r3, [pc, #380]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800619a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1ee      	bne.n	8006182 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 812b 	beq.w	8006404 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80061ae:	4b5a      	ldr	r3, [pc, #360]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061b6:	2b18      	cmp	r3, #24
 80061b8:	f000 80bb 	beq.w	8006332 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	f040 8095 	bne.w	80062f0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c6:	4b54      	ldr	r3, [pc, #336]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a53      	ldr	r2, [pc, #332]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80061cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d2:	f7fb fa53 	bl	800167c <HAL_GetTick>
 80061d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061da:	f7fb fa4f 	bl	800167c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e10c      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ec:	4b4a      	ldr	r3, [pc, #296]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f0      	bne.n	80061da <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061f8:	4b47      	ldr	r3, [pc, #284]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80061fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061fc:	4b47      	ldr	r3, [pc, #284]	; (800631c <HAL_RCC_OscConfig+0x768>)
 80061fe:	4013      	ands	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006208:	0112      	lsls	r2, r2, #4
 800620a:	430a      	orrs	r2, r1
 800620c:	4942      	ldr	r1, [pc, #264]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800620e:	4313      	orrs	r3, r2
 8006210:	628b      	str	r3, [r1, #40]	; 0x28
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	3b01      	subs	r3, #1
 8006218:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006220:	3b01      	subs	r3, #1
 8006222:	025b      	lsls	r3, r3, #9
 8006224:	b29b      	uxth	r3, r3
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	3b01      	subs	r3, #1
 800622e:	041b      	lsls	r3, r3, #16
 8006230:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	3b01      	subs	r3, #1
 800623c:	061b      	lsls	r3, r3, #24
 800623e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006242:	4935      	ldr	r1, [pc, #212]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006244:	4313      	orrs	r3, r2
 8006246:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006248:	4b33      	ldr	r3, [pc, #204]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	4a32      	ldr	r2, [pc, #200]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006254:	4b30      	ldr	r3, [pc, #192]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006258:	4b31      	ldr	r3, [pc, #196]	; (8006320 <HAL_RCC_OscConfig+0x76c>)
 800625a:	4013      	ands	r3, r2
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006260:	00d2      	lsls	r2, r2, #3
 8006262:	492d      	ldr	r1, [pc, #180]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006264:	4313      	orrs	r3, r2
 8006266:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006268:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	f023 020c 	bic.w	r2, r3, #12
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	4928      	ldr	r1, [pc, #160]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006276:	4313      	orrs	r3, r2
 8006278:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800627a:	4b27      	ldr	r3, [pc, #156]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627e:	f023 0202 	bic.w	r2, r3, #2
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006286:	4924      	ldr	r1, [pc, #144]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006288:	4313      	orrs	r3, r2
 800628a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800628c:	4b22      	ldr	r3, [pc, #136]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	4a21      	ldr	r2, [pc, #132]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 8006292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006298:	4b1f      	ldr	r3, [pc, #124]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	4a1e      	ldr	r2, [pc, #120]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 800629e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80062a4:	4b1c      	ldr	r3, [pc, #112]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80062aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80062b0:	4b19      	ldr	r3, [pc, #100]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	4a18      	ldr	r2, [pc, #96]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062bc:	4b16      	ldr	r3, [pc, #88]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a15      	ldr	r2, [pc, #84]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80062c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7fb f9d8 	bl	800167c <HAL_GetTick>
 80062cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d0:	f7fb f9d4 	bl	800167c <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e091      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062e2:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0f0      	beq.n	80062d0 <HAL_RCC_OscConfig+0x71c>
 80062ee:	e089      	b.n	8006404 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f0:	4b09      	ldr	r3, [pc, #36]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a08      	ldr	r2, [pc, #32]	; (8006318 <HAL_RCC_OscConfig+0x764>)
 80062f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fc:	f7fb f9be 	bl	800167c <HAL_GetTick>
 8006300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006302:	e00f      	b.n	8006324 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006304:	f7fb f9ba 	bl	800167c <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d908      	bls.n	8006324 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e077      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
 8006316:	bf00      	nop
 8006318:	58024400 	.word	0x58024400
 800631c:	fffffc0c 	.word	0xfffffc0c
 8006320:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006324:	4b3a      	ldr	r3, [pc, #232]	; (8006410 <HAL_RCC_OscConfig+0x85c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e9      	bne.n	8006304 <HAL_RCC_OscConfig+0x750>
 8006330:	e068      	b.n	8006404 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006332:	4b37      	ldr	r3, [pc, #220]	; (8006410 <HAL_RCC_OscConfig+0x85c>)
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006338:	4b35      	ldr	r3, [pc, #212]	; (8006410 <HAL_RCC_OscConfig+0x85c>)
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	2b01      	cmp	r3, #1
 8006344:	d031      	beq.n	80063aa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f003 0203 	and.w	r2, r3, #3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006350:	429a      	cmp	r2, r3
 8006352:	d12a      	bne.n	80063aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	091b      	lsrs	r3, r3, #4
 8006358:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006360:	429a      	cmp	r2, r3
 8006362:	d122      	bne.n	80063aa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006370:	429a      	cmp	r2, r3
 8006372:	d11a      	bne.n	80063aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	0a5b      	lsrs	r3, r3, #9
 8006378:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006380:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006382:	429a      	cmp	r2, r3
 8006384:	d111      	bne.n	80063aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	0c1b      	lsrs	r3, r3, #16
 800638a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006394:	429a      	cmp	r2, r3
 8006396:	d108      	bne.n	80063aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	0e1b      	lsrs	r3, r3, #24
 800639c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d001      	beq.n	80063ae <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e02b      	b.n	8006406 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80063ae:	4b18      	ldr	r3, [pc, #96]	; (8006410 <HAL_RCC_OscConfig+0x85c>)
 80063b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b2:	08db      	lsrs	r3, r3, #3
 80063b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063b8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d01f      	beq.n	8006404 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80063c4:	4b12      	ldr	r3, [pc, #72]	; (8006410 <HAL_RCC_OscConfig+0x85c>)
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	4a11      	ldr	r2, [pc, #68]	; (8006410 <HAL_RCC_OscConfig+0x85c>)
 80063ca:	f023 0301 	bic.w	r3, r3, #1
 80063ce:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063d0:	f7fb f954 	bl	800167c <HAL_GetTick>
 80063d4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80063d6:	bf00      	nop
 80063d8:	f7fb f950 	bl	800167c <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d0f9      	beq.n	80063d8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063e4:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <HAL_RCC_OscConfig+0x85c>)
 80063e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <HAL_RCC_OscConfig+0x860>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063f0:	00d2      	lsls	r2, r2, #3
 80063f2:	4907      	ldr	r1, [pc, #28]	; (8006410 <HAL_RCC_OscConfig+0x85c>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <HAL_RCC_OscConfig+0x85c>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4a04      	ldr	r2, [pc, #16]	; (8006410 <HAL_RCC_OscConfig+0x85c>)
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3730      	adds	r7, #48	; 0x30
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	58024400 	.word	0x58024400
 8006414:	ffff0007 	.word	0xffff0007

08006418 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e19c      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800642c:	4b8a      	ldr	r3, [pc, #552]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d910      	bls.n	800645c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643a:	4b87      	ldr	r3, [pc, #540]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 020f 	bic.w	r2, r3, #15
 8006442:	4985      	ldr	r1, [pc, #532]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	4313      	orrs	r3, r2
 8006448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800644a:	4b83      	ldr	r3, [pc, #524]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e184      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d010      	beq.n	800648a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	4b7b      	ldr	r3, [pc, #492]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006474:	429a      	cmp	r2, r3
 8006476:	d908      	bls.n	800648a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006478:	4b78      	ldr	r3, [pc, #480]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	4975      	ldr	r1, [pc, #468]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006486:	4313      	orrs	r3, r2
 8006488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d010      	beq.n	80064b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	4b70      	ldr	r3, [pc, #448]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d908      	bls.n	80064b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064a6:	4b6d      	ldr	r3, [pc, #436]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	496a      	ldr	r1, [pc, #424]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d010      	beq.n	80064e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	4b64      	ldr	r3, [pc, #400]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d908      	bls.n	80064e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064d4:	4b61      	ldr	r3, [pc, #388]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	495e      	ldr	r1, [pc, #376]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d010      	beq.n	8006514 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69da      	ldr	r2, [r3, #28]
 80064f6:	4b59      	ldr	r3, [pc, #356]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064fe:	429a      	cmp	r2, r3
 8006500:	d908      	bls.n	8006514 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006502:	4b56      	ldr	r3, [pc, #344]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	4953      	ldr	r1, [pc, #332]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006510:	4313      	orrs	r3, r2
 8006512:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d010      	beq.n	8006542 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	4b4d      	ldr	r3, [pc, #308]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	429a      	cmp	r2, r3
 800652e:	d908      	bls.n	8006542 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006530:	4b4a      	ldr	r3, [pc, #296]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f023 020f 	bic.w	r2, r3, #15
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4947      	ldr	r1, [pc, #284]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800653e:	4313      	orrs	r3, r2
 8006540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d055      	beq.n	80065fa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800654e:	4b43      	ldr	r3, [pc, #268]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	4940      	ldr	r1, [pc, #256]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800655c:	4313      	orrs	r3, r2
 800655e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d107      	bne.n	8006578 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006568:	4b3c      	ldr	r3, [pc, #240]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d121      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0f6      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2b03      	cmp	r3, #3
 800657e:	d107      	bne.n	8006590 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006580:	4b36      	ldr	r3, [pc, #216]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d115      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e0ea      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d107      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006598:	4b30      	ldr	r3, [pc, #192]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d109      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0de      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065a8:	4b2c      	ldr	r3, [pc, #176]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e0d6      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065b8:	4b28      	ldr	r3, [pc, #160]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f023 0207 	bic.w	r2, r3, #7
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	4925      	ldr	r1, [pc, #148]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ca:	f7fb f857 	bl	800167c <HAL_GetTick>
 80065ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d0:	e00a      	b.n	80065e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d2:	f7fb f853 	bl	800167c <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e0be      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e8:	4b1c      	ldr	r3, [pc, #112]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d1eb      	bne.n	80065d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d010      	beq.n	8006628 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	4b14      	ldr	r3, [pc, #80]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	429a      	cmp	r2, r3
 8006614:	d208      	bcs.n	8006628 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006616:	4b11      	ldr	r3, [pc, #68]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f023 020f 	bic.w	r2, r3, #15
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	490e      	ldr	r1, [pc, #56]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006624:	4313      	orrs	r3, r2
 8006626:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d214      	bcs.n	8006660 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006636:	4b08      	ldr	r3, [pc, #32]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f023 020f 	bic.w	r2, r3, #15
 800663e:	4906      	ldr	r1, [pc, #24]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	4313      	orrs	r3, r2
 8006644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006646:	4b04      	ldr	r3, [pc, #16]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d005      	beq.n	8006660 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e086      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
 8006658:	52002000 	.word	0x52002000
 800665c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d010      	beq.n	800668e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	4b3f      	ldr	r3, [pc, #252]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006678:	429a      	cmp	r2, r3
 800667a:	d208      	bcs.n	800668e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800667c:	4b3c      	ldr	r3, [pc, #240]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	4939      	ldr	r1, [pc, #228]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 800668a:	4313      	orrs	r3, r2
 800668c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d010      	beq.n	80066bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	695a      	ldr	r2, [r3, #20]
 800669e:	4b34      	ldr	r3, [pc, #208]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d208      	bcs.n	80066bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066aa:	4b31      	ldr	r3, [pc, #196]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	492e      	ldr	r1, [pc, #184]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d010      	beq.n	80066ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	4b28      	ldr	r3, [pc, #160]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d208      	bcs.n	80066ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066d8:	4b25      	ldr	r3, [pc, #148]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	4922      	ldr	r1, [pc, #136]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d010      	beq.n	8006718 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69da      	ldr	r2, [r3, #28]
 80066fa:	4b1d      	ldr	r3, [pc, #116]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006702:	429a      	cmp	r2, r3
 8006704:	d208      	bcs.n	8006718 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006706:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	4917      	ldr	r1, [pc, #92]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006714:	4313      	orrs	r3, r2
 8006716:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006718:	f000 f834 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 800671c:	4602      	mov	r2, r0
 800671e:	4b14      	ldr	r3, [pc, #80]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	0a1b      	lsrs	r3, r3, #8
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	4912      	ldr	r1, [pc, #72]	; (8006774 <HAL_RCC_ClockConfig+0x35c>)
 800672a:	5ccb      	ldrb	r3, [r1, r3]
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
 8006734:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006736:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	4a0d      	ldr	r2, [pc, #52]	; (8006774 <HAL_RCC_ClockConfig+0x35c>)
 8006740:	5cd3      	ldrb	r3, [r2, r3]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	fa22 f303 	lsr.w	r3, r2, r3
 800674c:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <HAL_RCC_ClockConfig+0x360>)
 800674e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006750:	4a0a      	ldr	r2, [pc, #40]	; (800677c <HAL_RCC_ClockConfig+0x364>)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <HAL_RCC_ClockConfig+0x368>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f7fa ff44 	bl	80015e8 <HAL_InitTick>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	58024400 	.word	0x58024400
 8006774:	080093f0 	.word	0x080093f0
 8006778:	24000004 	.word	0x24000004
 800677c:	24000000 	.word	0x24000000
 8006780:	24000008 	.word	0x24000008

08006784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006784:	b480      	push	{r7}
 8006786:	b089      	sub	sp, #36	; 0x24
 8006788:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800678a:	4bb3      	ldr	r3, [pc, #716]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006792:	2b18      	cmp	r3, #24
 8006794:	f200 8155 	bhi.w	8006a42 <HAL_RCC_GetSysClockFreq+0x2be>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	08006805 	.word	0x08006805
 80067a4:	08006a43 	.word	0x08006a43
 80067a8:	08006a43 	.word	0x08006a43
 80067ac:	08006a43 	.word	0x08006a43
 80067b0:	08006a43 	.word	0x08006a43
 80067b4:	08006a43 	.word	0x08006a43
 80067b8:	08006a43 	.word	0x08006a43
 80067bc:	08006a43 	.word	0x08006a43
 80067c0:	0800682b 	.word	0x0800682b
 80067c4:	08006a43 	.word	0x08006a43
 80067c8:	08006a43 	.word	0x08006a43
 80067cc:	08006a43 	.word	0x08006a43
 80067d0:	08006a43 	.word	0x08006a43
 80067d4:	08006a43 	.word	0x08006a43
 80067d8:	08006a43 	.word	0x08006a43
 80067dc:	08006a43 	.word	0x08006a43
 80067e0:	08006831 	.word	0x08006831
 80067e4:	08006a43 	.word	0x08006a43
 80067e8:	08006a43 	.word	0x08006a43
 80067ec:	08006a43 	.word	0x08006a43
 80067f0:	08006a43 	.word	0x08006a43
 80067f4:	08006a43 	.word	0x08006a43
 80067f8:	08006a43 	.word	0x08006a43
 80067fc:	08006a43 	.word	0x08006a43
 8006800:	08006837 	.word	0x08006837
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006804:	4b94      	ldr	r3, [pc, #592]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d009      	beq.n	8006824 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006810:	4b91      	ldr	r3, [pc, #580]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	08db      	lsrs	r3, r3, #3
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	4a90      	ldr	r2, [pc, #576]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
 8006820:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006822:	e111      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006824:	4b8d      	ldr	r3, [pc, #564]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006826:	61bb      	str	r3, [r7, #24]
      break;
 8006828:	e10e      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800682a:	4b8d      	ldr	r3, [pc, #564]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800682c:	61bb      	str	r3, [r7, #24]
      break;
 800682e:	e10b      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006830:	4b8c      	ldr	r3, [pc, #560]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006832:	61bb      	str	r3, [r7, #24]
      break;
 8006834:	e108      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006836:	4b88      	ldr	r3, [pc, #544]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006840:	4b85      	ldr	r3, [pc, #532]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800684a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800684c:	4b82      	ldr	r3, [pc, #520]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006856:	4b80      	ldr	r3, [pc, #512]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	08db      	lsrs	r3, r3, #3
 800685c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	fb02 f303 	mul.w	r3, r2, r3
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 80e1 	beq.w	8006a3c <HAL_RCC_GetSysClockFreq+0x2b8>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b02      	cmp	r3, #2
 800687e:	f000 8083 	beq.w	8006988 <HAL_RCC_GetSysClockFreq+0x204>
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b02      	cmp	r3, #2
 8006886:	f200 80a1 	bhi.w	80069cc <HAL_RCC_GetSysClockFreq+0x248>
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_RCC_GetSysClockFreq+0x114>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d056      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006896:	e099      	b.n	80069cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006898:	4b6f      	ldr	r3, [pc, #444]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d02d      	beq.n	8006900 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068a4:	4b6c      	ldr	r3, [pc, #432]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	08db      	lsrs	r3, r3, #3
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	4a6b      	ldr	r2, [pc, #428]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
 80068b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ce:	4b62      	ldr	r3, [pc, #392]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068de:	ed97 6a02 	vldr	s12, [r7, #8]
 80068e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80068fe:	e087      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006a6c <HAL_RCC_GetSysClockFreq+0x2e8>
 800690e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006912:	4b51      	ldr	r3, [pc, #324]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006922:	ed97 6a02 	vldr	s12, [r7, #8]
 8006926:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800692a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006942:	e065      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006956:	4b40      	ldr	r3, [pc, #256]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006966:	ed97 6a02 	vldr	s12, [r7, #8]
 800696a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800696e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800697a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006986:	e043      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006a74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699a:	4b2f      	ldr	r3, [pc, #188]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069ca:	e021      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 80069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069de:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80069f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006a10:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	0a5b      	lsrs	r3, r3, #9
 8006a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	ee07 3a90 	vmov	s15, r3
 8006a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a34:	ee17 3a90 	vmov	r3, s15
 8006a38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006a3a:	e005      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61bb      	str	r3, [r7, #24]
      break;
 8006a40:	e002      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006a42:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a44:	61bb      	str	r3, [r7, #24]
      break;
 8006a46:	bf00      	nop
  }

  return sysclockfreq;
 8006a48:	69bb      	ldr	r3, [r7, #24]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3724      	adds	r7, #36	; 0x24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	03d09000 	.word	0x03d09000
 8006a60:	003d0900 	.word	0x003d0900
 8006a64:	016e3600 	.word	0x016e3600
 8006a68:	46000000 	.word	0x46000000
 8006a6c:	4c742400 	.word	0x4c742400
 8006a70:	4a742400 	.word	0x4a742400
 8006a74:	4bb71b00 	.word	0x4bb71b00

08006a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006a7e:	f7ff fe81 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b10      	ldr	r3, [pc, #64]	; (8006ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	0a1b      	lsrs	r3, r3, #8
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	490f      	ldr	r1, [pc, #60]	; (8006acc <HAL_RCC_GetHCLKFreq+0x54>)
 8006a90:	5ccb      	ldrb	r3, [r1, r3]
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	4a09      	ldr	r2, [pc, #36]	; (8006acc <HAL_RCC_GetHCLKFreq+0x54>)
 8006aa6:	5cd3      	ldrb	r3, [r2, r3]
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab2:	4a07      	ldr	r2, [pc, #28]	; (8006ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ab4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ab6:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006abc:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006abe:	681b      	ldr	r3, [r3, #0]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	58024400 	.word	0x58024400
 8006acc:	080093f0 	.word	0x080093f0
 8006ad0:	24000004 	.word	0x24000004
 8006ad4:	24000000 	.word	0x24000000

08006ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006adc:	f7ff ffcc 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	091b      	lsrs	r3, r3, #4
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	4904      	ldr	r1, [pc, #16]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	f003 031f 	and.w	r3, r3, #31
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	58024400 	.word	0x58024400
 8006b00:	080093f0 	.word	0x080093f0

08006b04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b08:	b0c8      	sub	sp, #288	; 0x120
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b16:	2300      	movs	r3, #0
 8006b18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006b28:	2500      	movs	r5, #0
 8006b2a:	ea54 0305 	orrs.w	r3, r4, r5
 8006b2e:	d049      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b3a:	d02f      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006b3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b40:	d828      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b46:	d01a      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b4c:	d822      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b56:	d007      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b58:	e01c      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b5a:	4ba7      	ldr	r3, [pc, #668]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	4aa6      	ldr	r2, [pc, #664]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b66:	e01a      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	2102      	movs	r1, #2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f002 fa6d 	bl	8009050 <RCCEx_PLL2_Config>
 8006b76:	4603      	mov	r3, r0
 8006b78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b7c:	e00f      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b82:	3328      	adds	r3, #40	; 0x28
 8006b84:	2102      	movs	r1, #2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f002 fb14 	bl	80091b4 <RCCEx_PLL3_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b92:	e004      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b9a:	e000      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ba6:	4b94      	ldr	r3, [pc, #592]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006baa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb4:	4a90      	ldr	r2, [pc, #576]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	6513      	str	r3, [r2, #80]	; 0x50
 8006bba:	e003      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006bd0:	f04f 0900 	mov.w	r9, #0
 8006bd4:	ea58 0309 	orrs.w	r3, r8, r9
 8006bd8:	d047      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d82a      	bhi.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006c01 	.word	0x08006c01
 8006bf0:	08006c0f 	.word	0x08006c0f
 8006bf4:	08006c25 	.word	0x08006c25
 8006bf8:	08006c43 	.word	0x08006c43
 8006bfc:	08006c43 	.word	0x08006c43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c00:	4b7d      	ldr	r3, [pc, #500]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	4a7c      	ldr	r2, [pc, #496]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c0c:	e01a      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c12:	3308      	adds	r3, #8
 8006c14:	2100      	movs	r1, #0
 8006c16:	4618      	mov	r0, r3
 8006c18:	f002 fa1a 	bl	8009050 <RCCEx_PLL2_Config>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c22:	e00f      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c28:	3328      	adds	r3, #40	; 0x28
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f002 fac1 	bl	80091b4 <RCCEx_PLL3_Config>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c38:	e004      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c40:	e000      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c4c:	4b6a      	ldr	r3, [pc, #424]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c50:	f023 0107 	bic.w	r1, r3, #7
 8006c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5a:	4a67      	ldr	r2, [pc, #412]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6513      	str	r3, [r2, #80]	; 0x50
 8006c60:	e003      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006c76:	f04f 0b00 	mov.w	fp, #0
 8006c7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006c7e:	d054      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006c8a:	d036      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006c8c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006c90:	d82f      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c96:	d032      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c9c:	d829      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8006ca0:	d02f      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006ca2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ca4:	d825      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ca6:	2b80      	cmp	r3, #128	; 0x80
 8006ca8:	d018      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006caa:	2b80      	cmp	r3, #128	; 0x80
 8006cac:	d821      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006cb2:	2b40      	cmp	r3, #64	; 0x40
 8006cb4:	d007      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006cb6:	e01c      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cb8:	4b4f      	ldr	r3, [pc, #316]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	4a4e      	ldr	r2, [pc, #312]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006cc4:	e01e      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cca:	3308      	adds	r3, #8
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f002 f9be 	bl	8009050 <RCCEx_PLL2_Config>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006cda:	e013      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce0:	3328      	adds	r3, #40	; 0x28
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f002 fa65 	bl	80091b4 <RCCEx_PLL3_Config>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006cf0:	e008      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006cf8:	e004      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006cfa:	bf00      	nop
 8006cfc:	e002      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006cfe:	bf00      	nop
 8006d00:	e000      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006d0c:	4b3a      	ldr	r3, [pc, #232]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d10:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1a:	4a37      	ldr	r2, [pc, #220]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6513      	str	r3, [r2, #80]	; 0x50
 8006d20:	e003      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d26:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006d36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006d44:	460b      	mov	r3, r1
 8006d46:	4313      	orrs	r3, r2
 8006d48:	d05c      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d50:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006d54:	d03b      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006d56:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006d5a:	d834      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d60:	d037      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d66:	d82e      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006d68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d6c:	d033      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d6e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d72:	d828      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d78:	d01a      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d7e:	d822      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d88:	d007      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006d8a:	e01c      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	4a19      	ldr	r2, [pc, #100]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006d98:	e01e      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d9e:	3308      	adds	r3, #8
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f002 f954 	bl	8009050 <RCCEx_PLL2_Config>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006dae:	e013      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006db4:	3328      	adds	r3, #40	; 0x28
 8006db6:	2100      	movs	r1, #0
 8006db8:	4618      	mov	r0, r3
 8006dba:	f002 f9fb 	bl	80091b4 <RCCEx_PLL3_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006dcc:	e004      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006dce:	bf00      	nop
 8006dd0:	e002      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006dd2:	bf00      	nop
 8006dd4:	e000      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10d      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006de0:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dee:	4a02      	ldr	r2, [pc, #8]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006df0:	430b      	orrs	r3, r1
 8006df2:	6513      	str	r3, [r2, #80]	; 0x50
 8006df4:	e006      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006df6:	bf00      	nop
 8006df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006e10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e14:	2300      	movs	r3, #0
 8006e16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4313      	orrs	r3, r2
 8006e22:	d03a      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2a:	2b30      	cmp	r3, #48	; 0x30
 8006e2c:	d01f      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006e2e:	2b30      	cmp	r3, #48	; 0x30
 8006e30:	d819      	bhi.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d00c      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d815      	bhi.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d019      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006e3e:	2b10      	cmp	r3, #16
 8006e40:	d111      	bne.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e42:	4bae      	ldr	r3, [pc, #696]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	4aad      	ldr	r2, [pc, #692]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006e4e:	e011      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e54:	3308      	adds	r3, #8
 8006e56:	2102      	movs	r1, #2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f002 f8f9 	bl	8009050 <RCCEx_PLL2_Config>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006e64:	e006      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006e6c:	e002      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006e6e:	bf00      	nop
 8006e70:	e000      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006e7c:	4b9f      	ldr	r3, [pc, #636]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e80:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8a:	4a9c      	ldr	r2, [pc, #624]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e90:	e003      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006ea6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006eb0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	d051      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ec4:	d035      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eca:	d82e      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006ecc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ed0:	d031      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006ed2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ed6:	d828      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006edc:	d01a      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee2:	d822      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eec:	d007      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006eee:	e01c      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef0:	4b82      	ldr	r3, [pc, #520]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	4a81      	ldr	r2, [pc, #516]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006efc:	e01c      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f02:	3308      	adds	r3, #8
 8006f04:	2100      	movs	r1, #0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f002 f8a2 	bl	8009050 <RCCEx_PLL2_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f12:	e011      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f18:	3328      	adds	r3, #40	; 0x28
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f002 f949 	bl	80091b4 <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f28:	e006      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f30:	e002      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006f32:	bf00      	nop
 8006f34:	e000      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f40:	4b6e      	ldr	r3, [pc, #440]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f44:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f4e:	4a6b      	ldr	r2, [pc, #428]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f50:	430b      	orrs	r3, r1
 8006f52:	6513      	str	r3, [r2, #80]	; 0x50
 8006f54:	e003      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	d053      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f88:	d033      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006f8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f8e:	d82c      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006f90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f94:	d02f      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006f96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f9a:	d826      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006f9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fa0:	d02b      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006fa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fa6:	d820      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fac:	d012      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb2:	d81a      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d022      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbc:	d115      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f002 f842 	bl	8009050 <RCCEx_PLL2_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fd2:	e015      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fd8:	3328      	adds	r3, #40	; 0x28
 8006fda:	2101      	movs	r1, #1
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f002 f8e9 	bl	80091b4 <RCCEx_PLL3_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fe8:	e00a      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ff0:	e006      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006ff2:	bf00      	nop
 8006ff4:	e004      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006ff6:	bf00      	nop
 8006ff8:	e002      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006ffa:	bf00      	nop
 8006ffc:	e000      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007000:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007008:	4b3c      	ldr	r3, [pc, #240]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007016:	4a39      	ldr	r2, [pc, #228]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007018:	430b      	orrs	r3, r1
 800701a:	6513      	str	r3, [r2, #80]	; 0x50
 800701c:	e003      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007022:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007032:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007036:	2300      	movs	r3, #0
 8007038:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800703c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007040:	460b      	mov	r3, r1
 8007042:	4313      	orrs	r3, r2
 8007044:	d060      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800704a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800704e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007052:	d039      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007054:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007058:	d832      	bhi.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800705a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800705e:	d035      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007064:	d82c      	bhi.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706a:	d031      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800706c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007070:	d826      	bhi.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007072:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007076:	d02d      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007078:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800707c:	d820      	bhi.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800707e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007082:	d012      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007088:	d81a      	bhi.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d024      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800708e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007092:	d115      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007098:	3308      	adds	r3, #8
 800709a:	2101      	movs	r1, #1
 800709c:	4618      	mov	r0, r3
 800709e:	f001 ffd7 	bl	8009050 <RCCEx_PLL2_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80070a8:	e017      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ae:	3328      	adds	r3, #40	; 0x28
 80070b0:	2101      	movs	r1, #1
 80070b2:	4618      	mov	r0, r3
 80070b4:	f002 f87e 	bl	80091b4 <RCCEx_PLL3_Config>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80070be:	e00c      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80070c6:	e008      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070c8:	bf00      	nop
 80070ca:	e006      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070cc:	bf00      	nop
 80070ce:	e004      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070d0:	bf00      	nop
 80070d2:	e002      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070d4:	bf00      	nop
 80070d6:	e000      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10e      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070e2:	4b06      	ldr	r3, [pc, #24]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80070ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070f2:	4a02      	ldr	r2, [pc, #8]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070f4:	430b      	orrs	r3, r1
 80070f6:	6593      	str	r3, [r2, #88]	; 0x58
 80070f8:	e006      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80070fa:	bf00      	nop
 80070fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007100:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007104:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007118:	2300      	movs	r3, #0
 800711a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800711e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007122:	460b      	mov	r3, r1
 8007124:	4313      	orrs	r3, r2
 8007126:	d037      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800712c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800712e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007132:	d00e      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007138:	d816      	bhi.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d018      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800713e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007142:	d111      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007144:	4bc4      	ldr	r3, [pc, #784]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	4ac3      	ldr	r2, [pc, #780]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800714a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800714e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007150:	e00f      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007156:	3308      	adds	r3, #8
 8007158:	2101      	movs	r1, #1
 800715a:	4618      	mov	r0, r3
 800715c:	f001 ff78 	bl	8009050 <RCCEx_PLL2_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007166:	e004      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800716e:	e000      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007172:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800717a:	4bb7      	ldr	r3, [pc, #732]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800717c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007188:	4ab3      	ldr	r2, [pc, #716]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800718a:	430b      	orrs	r3, r1
 800718c:	6513      	str	r3, [r2, #80]	; 0x50
 800718e:	e003      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007190:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007194:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80071a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071a8:	2300      	movs	r3, #0
 80071aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4313      	orrs	r3, r2
 80071b6:	d039      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80071b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d81c      	bhi.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80071c2:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	08007205 	.word	0x08007205
 80071cc:	080071d9 	.word	0x080071d9
 80071d0:	080071e7 	.word	0x080071e7
 80071d4:	08007205 	.word	0x08007205
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d8:	4b9f      	ldr	r3, [pc, #636]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	4a9e      	ldr	r2, [pc, #632]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071e4:	e00f      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071ea:	3308      	adds	r3, #8
 80071ec:	2102      	movs	r1, #2
 80071ee:	4618      	mov	r0, r3
 80071f0:	f001 ff2e 	bl	8009050 <RCCEx_PLL2_Config>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071fa:	e004      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007202:	e000      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007206:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800720e:	4b92      	ldr	r3, [pc, #584]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007212:	f023 0103 	bic.w	r1, r3, #3
 8007216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800721a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721c:	4a8e      	ldr	r2, [pc, #568]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800721e:	430b      	orrs	r3, r1
 8007220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007222:	e003      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007224:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007228:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800722c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007238:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800723c:	2300      	movs	r3, #0
 800723e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007242:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007246:	460b      	mov	r3, r1
 8007248:	4313      	orrs	r3, r2
 800724a:	f000 8099 	beq.w	8007380 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800724e:	4b83      	ldr	r3, [pc, #524]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a82      	ldr	r2, [pc, #520]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007258:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800725a:	f7fa fa0f 	bl	800167c <HAL_GetTick>
 800725e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007262:	e00b      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007264:	f7fa fa0a 	bl	800167c <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b64      	cmp	r3, #100	; 0x64
 8007272:	d903      	bls.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800727a:	e005      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800727c:	4b77      	ldr	r3, [pc, #476]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0ed      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007288:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800728c:	2b00      	cmp	r3, #0
 800728e:	d173      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007290:	4b71      	ldr	r3, [pc, #452]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007298:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800729c:	4053      	eors	r3, r2
 800729e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d015      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a6:	4b6c      	ldr	r3, [pc, #432]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072b2:	4b69      	ldr	r3, [pc, #420]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b6:	4a68      	ldr	r2, [pc, #416]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072bc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072be:	4b66      	ldr	r3, [pc, #408]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	4a65      	ldr	r2, [pc, #404]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072c8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072ca:	4a63      	ldr	r2, [pc, #396]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072de:	d118      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e0:	f7fa f9cc 	bl	800167c <HAL_GetTick>
 80072e4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072e8:	e00d      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ea:	f7fa f9c7 	bl	800167c <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072f4:	1ad2      	subs	r2, r2, r3
 80072f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d903      	bls.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8007304:	e005      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007306:	4b54      	ldr	r3, [pc, #336]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0eb      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007312:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007316:	2b00      	cmp	r3, #0
 8007318:	d129      	bne.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800731a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800731e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800732a:	d10e      	bne.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800732c:	4b4a      	ldr	r3, [pc, #296]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007338:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800733c:	091a      	lsrs	r2, r3, #4
 800733e:	4b48      	ldr	r3, [pc, #288]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007340:	4013      	ands	r3, r2
 8007342:	4a45      	ldr	r2, [pc, #276]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007344:	430b      	orrs	r3, r1
 8007346:	6113      	str	r3, [r2, #16]
 8007348:	e005      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800734a:	4b43      	ldr	r3, [pc, #268]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	4a42      	ldr	r2, [pc, #264]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007350:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007354:	6113      	str	r3, [r2, #16]
 8007356:	4b40      	ldr	r3, [pc, #256]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007358:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800735a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800735e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007366:	4a3c      	ldr	r2, [pc, #240]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007368:	430b      	orrs	r3, r1
 800736a:	6713      	str	r3, [r2, #112]	; 0x70
 800736c:	e008      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800736e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007372:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8007376:	e003      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007378:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800737c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	f002 0301 	and.w	r3, r2, #1
 800738c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007390:	2300      	movs	r3, #0
 8007392:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007396:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800739a:	460b      	mov	r3, r1
 800739c:	4313      	orrs	r3, r2
 800739e:	f000 8090 	beq.w	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80073a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073aa:	2b28      	cmp	r3, #40	; 0x28
 80073ac:	d870      	bhi.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	08007499 	.word	0x08007499
 80073b8:	08007491 	.word	0x08007491
 80073bc:	08007491 	.word	0x08007491
 80073c0:	08007491 	.word	0x08007491
 80073c4:	08007491 	.word	0x08007491
 80073c8:	08007491 	.word	0x08007491
 80073cc:	08007491 	.word	0x08007491
 80073d0:	08007491 	.word	0x08007491
 80073d4:	08007465 	.word	0x08007465
 80073d8:	08007491 	.word	0x08007491
 80073dc:	08007491 	.word	0x08007491
 80073e0:	08007491 	.word	0x08007491
 80073e4:	08007491 	.word	0x08007491
 80073e8:	08007491 	.word	0x08007491
 80073ec:	08007491 	.word	0x08007491
 80073f0:	08007491 	.word	0x08007491
 80073f4:	0800747b 	.word	0x0800747b
 80073f8:	08007491 	.word	0x08007491
 80073fc:	08007491 	.word	0x08007491
 8007400:	08007491 	.word	0x08007491
 8007404:	08007491 	.word	0x08007491
 8007408:	08007491 	.word	0x08007491
 800740c:	08007491 	.word	0x08007491
 8007410:	08007491 	.word	0x08007491
 8007414:	08007499 	.word	0x08007499
 8007418:	08007491 	.word	0x08007491
 800741c:	08007491 	.word	0x08007491
 8007420:	08007491 	.word	0x08007491
 8007424:	08007491 	.word	0x08007491
 8007428:	08007491 	.word	0x08007491
 800742c:	08007491 	.word	0x08007491
 8007430:	08007491 	.word	0x08007491
 8007434:	08007499 	.word	0x08007499
 8007438:	08007491 	.word	0x08007491
 800743c:	08007491 	.word	0x08007491
 8007440:	08007491 	.word	0x08007491
 8007444:	08007491 	.word	0x08007491
 8007448:	08007491 	.word	0x08007491
 800744c:	08007491 	.word	0x08007491
 8007450:	08007491 	.word	0x08007491
 8007454:	08007499 	.word	0x08007499
 8007458:	58024400 	.word	0x58024400
 800745c:	58024800 	.word	0x58024800
 8007460:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007468:	3308      	adds	r3, #8
 800746a:	2101      	movs	r1, #1
 800746c:	4618      	mov	r0, r3
 800746e:	f001 fdef 	bl	8009050 <RCCEx_PLL2_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007478:	e00f      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800747a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800747e:	3328      	adds	r3, #40	; 0x28
 8007480:	2101      	movs	r1, #1
 8007482:	4618      	mov	r0, r3
 8007484:	f001 fe96 	bl	80091b4 <RCCEx_PLL3_Config>
 8007488:	4603      	mov	r3, r0
 800748a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800748e:	e004      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007496:	e000      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800749a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10b      	bne.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80074a2:	4bc0      	ldr	r3, [pc, #768]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80074a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80074aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b2:	4abc      	ldr	r2, [pc, #752]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80074b4:	430b      	orrs	r3, r1
 80074b6:	6553      	str	r3, [r2, #84]	; 0x54
 80074b8:	e003      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	f002 0302 	and.w	r3, r2, #2
 80074ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074d2:	2300      	movs	r3, #0
 80074d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074d8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80074dc:	460b      	mov	r3, r1
 80074de:	4313      	orrs	r3, r2
 80074e0:	d043      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80074e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	d824      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80074ee:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	08007541 	.word	0x08007541
 80074f8:	0800750d 	.word	0x0800750d
 80074fc:	08007523 	.word	0x08007523
 8007500:	08007541 	.word	0x08007541
 8007504:	08007541 	.word	0x08007541
 8007508:	08007541 	.word	0x08007541
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800750c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007510:	3308      	adds	r3, #8
 8007512:	2101      	movs	r1, #1
 8007514:	4618      	mov	r0, r3
 8007516:	f001 fd9b 	bl	8009050 <RCCEx_PLL2_Config>
 800751a:	4603      	mov	r3, r0
 800751c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007520:	e00f      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007526:	3328      	adds	r3, #40	; 0x28
 8007528:	2101      	movs	r1, #1
 800752a:	4618      	mov	r0, r3
 800752c:	f001 fe42 	bl	80091b4 <RCCEx_PLL3_Config>
 8007530:	4603      	mov	r3, r0
 8007532:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007536:	e004      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800753e:	e000      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007542:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10b      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800754a:	4b96      	ldr	r3, [pc, #600]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800754c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754e:	f023 0107 	bic.w	r1, r3, #7
 8007552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800755a:	4a92      	ldr	r2, [pc, #584]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800755c:	430b      	orrs	r3, r1
 800755e:	6553      	str	r3, [r2, #84]	; 0x54
 8007560:	e003      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007562:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007566:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800756a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f002 0304 	and.w	r3, r2, #4
 8007576:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800757a:	2300      	movs	r3, #0
 800757c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007580:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007584:	460b      	mov	r3, r1
 8007586:	4313      	orrs	r3, r2
 8007588:	d043      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800758a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800758e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007592:	2b05      	cmp	r3, #5
 8007594:	d824      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007596:	a201      	add	r2, pc, #4	; (adr r2, 800759c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759c:	080075e9 	.word	0x080075e9
 80075a0:	080075b5 	.word	0x080075b5
 80075a4:	080075cb 	.word	0x080075cb
 80075a8:	080075e9 	.word	0x080075e9
 80075ac:	080075e9 	.word	0x080075e9
 80075b0:	080075e9 	.word	0x080075e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075b8:	3308      	adds	r3, #8
 80075ba:	2101      	movs	r1, #1
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 fd47 	bl	8009050 <RCCEx_PLL2_Config>
 80075c2:	4603      	mov	r3, r0
 80075c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075c8:	e00f      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075ce:	3328      	adds	r3, #40	; 0x28
 80075d0:	2101      	movs	r1, #1
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 fdee 	bl	80091b4 <RCCEx_PLL3_Config>
 80075d8:	4603      	mov	r3, r0
 80075da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075de:	e004      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80075e6:	e000      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80075e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10b      	bne.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075f2:	4b6c      	ldr	r3, [pc, #432]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f6:	f023 0107 	bic.w	r1, r3, #7
 80075fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007602:	4a68      	ldr	r2, [pc, #416]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007604:	430b      	orrs	r3, r1
 8007606:	6593      	str	r3, [r2, #88]	; 0x58
 8007608:	e003      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800760e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f002 0320 	and.w	r3, r2, #32
 800761e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007622:	2300      	movs	r3, #0
 8007624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007628:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800762c:	460b      	mov	r3, r1
 800762e:	4313      	orrs	r3, r2
 8007630:	d055      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800763a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800763e:	d033      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007644:	d82c      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764a:	d02f      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800764c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007650:	d826      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007652:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007656:	d02b      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007658:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800765c:	d820      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800765e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007662:	d012      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007668:	d81a      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d022      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800766e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007672:	d115      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007678:	3308      	adds	r3, #8
 800767a:	2100      	movs	r1, #0
 800767c:	4618      	mov	r0, r3
 800767e:	f001 fce7 	bl	8009050 <RCCEx_PLL2_Config>
 8007682:	4603      	mov	r3, r0
 8007684:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007688:	e015      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800768a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800768e:	3328      	adds	r3, #40	; 0x28
 8007690:	2102      	movs	r1, #2
 8007692:	4618      	mov	r0, r3
 8007694:	f001 fd8e 	bl	80091b4 <RCCEx_PLL3_Config>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800769e:	e00a      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80076a6:	e006      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80076a8:	bf00      	nop
 80076aa:	e004      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80076ac:	bf00      	nop
 80076ae:	e002      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80076b0:	bf00      	nop
 80076b2:	e000      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80076b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10b      	bne.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076be:	4b39      	ldr	r3, [pc, #228]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80076c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076ce:	4a35      	ldr	r2, [pc, #212]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076d0:	430b      	orrs	r3, r1
 80076d2:	6553      	str	r3, [r2, #84]	; 0x54
 80076d4:	e003      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80076ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076ee:	2300      	movs	r3, #0
 80076f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4313      	orrs	r3, r2
 80076fc:	d058      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80076fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007702:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007706:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800770a:	d033      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800770c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007710:	d82c      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007716:	d02f      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800771c:	d826      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800771e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007722:	d02b      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007724:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007728:	d820      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800772a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800772e:	d012      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007734:	d81a      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d022      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800773a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800773e:	d115      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007744:	3308      	adds	r3, #8
 8007746:	2100      	movs	r1, #0
 8007748:	4618      	mov	r0, r3
 800774a:	f001 fc81 	bl	8009050 <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007754:	e015      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800775a:	3328      	adds	r3, #40	; 0x28
 800775c:	2102      	movs	r1, #2
 800775e:	4618      	mov	r0, r3
 8007760:	f001 fd28 	bl	80091b4 <RCCEx_PLL3_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800776a:	e00a      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007772:	e006      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007774:	bf00      	nop
 8007776:	e004      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007778:	bf00      	nop
 800777a:	e002      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800777c:	bf00      	nop
 800777e:	e000      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007782:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10e      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800778a:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800778c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007796:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800779a:	4a02      	ldr	r2, [pc, #8]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800779c:	430b      	orrs	r3, r1
 800779e:	6593      	str	r3, [r2, #88]	; 0x58
 80077a0:	e006      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80077a2:	bf00      	nop
 80077a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80077b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80077bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077c0:	2300      	movs	r3, #0
 80077c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80077ca:	460b      	mov	r3, r1
 80077cc:	4313      	orrs	r3, r2
 80077ce:	d055      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80077d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077dc:	d033      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80077de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077e2:	d82c      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80077e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e8:	d02f      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80077ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ee:	d826      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80077f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077f4:	d02b      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80077f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077fa:	d820      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80077fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007800:	d012      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007806:	d81a      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007808:	2b00      	cmp	r3, #0
 800780a:	d022      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800780c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007810:	d115      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007816:	3308      	adds	r3, #8
 8007818:	2100      	movs	r1, #0
 800781a:	4618      	mov	r0, r3
 800781c:	f001 fc18 	bl	8009050 <RCCEx_PLL2_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007826:	e015      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800782c:	3328      	adds	r3, #40	; 0x28
 800782e:	2102      	movs	r1, #2
 8007830:	4618      	mov	r0, r3
 8007832:	f001 fcbf 	bl	80091b4 <RCCEx_PLL3_Config>
 8007836:	4603      	mov	r3, r0
 8007838:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800783c:	e00a      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007844:	e006      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007846:	bf00      	nop
 8007848:	e004      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800784a:	bf00      	nop
 800784c:	e002      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800784e:	bf00      	nop
 8007850:	e000      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007854:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10b      	bne.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800785c:	4ba1      	ldr	r3, [pc, #644]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800785e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007860:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007868:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800786c:	4a9d      	ldr	r2, [pc, #628]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800786e:	430b      	orrs	r3, r1
 8007870:	6593      	str	r3, [r2, #88]	; 0x58
 8007872:	e003      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007874:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007878:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800787c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f002 0308 	and.w	r3, r2, #8
 8007888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800788c:	2300      	movs	r3, #0
 800788e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007892:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007896:	460b      	mov	r3, r1
 8007898:	4313      	orrs	r3, r2
 800789a:	d01e      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800789c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a8:	d10c      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078ae:	3328      	adds	r3, #40	; 0x28
 80078b0:	2102      	movs	r1, #2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f001 fc7e 	bl	80091b4 <RCCEx_PLL3_Config>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078c4:	4b87      	ldr	r3, [pc, #540]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80078c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d4:	4a83      	ldr	r2, [pc, #524]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80078d6:	430b      	orrs	r3, r1
 80078d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f002 0310 	and.w	r3, r2, #16
 80078e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078ea:	2300      	movs	r3, #0
 80078ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80078f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80078f4:	460b      	mov	r3, r1
 80078f6:	4313      	orrs	r3, r2
 80078f8:	d01e      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80078fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007906:	d10c      	bne.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800790c:	3328      	adds	r3, #40	; 0x28
 800790e:	2102      	movs	r1, #2
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fc4f 	bl	80091b4 <RCCEx_PLL3_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007922:	4b70      	ldr	r3, [pc, #448]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800792a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800792e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007932:	4a6c      	ldr	r2, [pc, #432]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007934:	430b      	orrs	r3, r1
 8007936:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007948:	2300      	movs	r3, #0
 800794a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800794e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007952:	460b      	mov	r3, r1
 8007954:	4313      	orrs	r3, r2
 8007956:	d03e      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800795c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007964:	d022      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800796a:	d81b      	bhi.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007974:	d00b      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007976:	e015      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800797c:	3308      	adds	r3, #8
 800797e:	2100      	movs	r1, #0
 8007980:	4618      	mov	r0, r3
 8007982:	f001 fb65 	bl	8009050 <RCCEx_PLL2_Config>
 8007986:	4603      	mov	r3, r0
 8007988:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800798c:	e00f      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800798e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007992:	3328      	adds	r3, #40	; 0x28
 8007994:	2102      	movs	r1, #2
 8007996:	4618      	mov	r0, r3
 8007998:	f001 fc0c 	bl	80091b4 <RCCEx_PLL3_Config>
 800799c:	4603      	mov	r3, r0
 800799e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80079a2:	e004      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80079aa:	e000      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80079ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10b      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079b6:	4b4b      	ldr	r3, [pc, #300]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80079be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079c6:	4a47      	ldr	r2, [pc, #284]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079c8:	430b      	orrs	r3, r1
 80079ca:	6593      	str	r3, [r2, #88]	; 0x58
 80079cc:	e003      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80079d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80079e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80079e4:	2300      	movs	r3, #0
 80079e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80079ec:	460b      	mov	r3, r1
 80079ee:	4313      	orrs	r3, r2
 80079f0:	d03b      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80079f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079fe:	d01f      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007a00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a04:	d818      	bhi.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0a:	d003      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a10:	d007      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007a12:	e011      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a14:	4b33      	ldr	r3, [pc, #204]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	4a32      	ldr	r2, [pc, #200]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a20:	e00f      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a26:	3328      	adds	r3, #40	; 0x28
 8007a28:	2101      	movs	r1, #1
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f001 fbc2 	bl	80091b4 <RCCEx_PLL3_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a36:	e004      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007a3e:	e000      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10b      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a4a:	4b26      	ldr	r3, [pc, #152]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5a:	4a22      	ldr	r2, [pc, #136]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6553      	str	r3, [r2, #84]	; 0x54
 8007a60:	e003      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007a76:	673b      	str	r3, [r7, #112]	; 0x70
 8007a78:	2300      	movs	r3, #0
 8007a7a:	677b      	str	r3, [r7, #116]	; 0x74
 8007a7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007a80:	460b      	mov	r3, r1
 8007a82:	4313      	orrs	r3, r2
 8007a84:	d034      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a94:	d007      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007a96:	e011      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a98:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	4a11      	ldr	r2, [pc, #68]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007aa4:	e00e      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aaa:	3308      	adds	r3, #8
 8007aac:	2102      	movs	r1, #2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 face 	bl	8009050 <RCCEx_PLL2_Config>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007aba:	e003      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10d      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007acc:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ada:	4a02      	ldr	r2, [pc, #8]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007adc:	430b      	orrs	r3, r1
 8007ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ae0:	e006      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007ae2:	bf00      	nop
 8007ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007aec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007afc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007afe:	2300      	movs	r3, #0
 8007b00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007b06:	460b      	mov	r3, r1
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	d00c      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b10:	3328      	adds	r3, #40	; 0x28
 8007b12:	2102      	movs	r1, #2
 8007b14:	4618      	mov	r0, r3
 8007b16:	f001 fb4d 	bl	80091b4 <RCCEx_PLL3_Config>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007b32:	663b      	str	r3, [r7, #96]	; 0x60
 8007b34:	2300      	movs	r3, #0
 8007b36:	667b      	str	r3, [r7, #100]	; 0x64
 8007b38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	d038      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b4e:	d018      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b54:	d811      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b5a:	d014      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b60:	d80b      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d011      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b6a:	d106      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b6c:	4bc3      	ldr	r3, [pc, #780]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	4ac2      	ldr	r2, [pc, #776]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b78:	e008      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007b80:	e004      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007b82:	bf00      	nop
 8007b84:	e002      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007b86:	bf00      	nop
 8007b88:	e000      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10b      	bne.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b94:	4bb9      	ldr	r3, [pc, #740]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba4:	4ab5      	ldr	r2, [pc, #724]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	6553      	str	r3, [r2, #84]	; 0x54
 8007baa:	e003      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007bc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	d009      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007bd0:	4baa      	ldr	r3, [pc, #680]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bde:	4aa7      	ldr	r2, [pc, #668]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007be0:	430b      	orrs	r3, r1
 8007be2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	657b      	str	r3, [r7, #84]	; 0x54
 8007bf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	d009      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c00:	4b9e      	ldr	r3, [pc, #632]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c04:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0e:	4a9b      	ldr	r2, [pc, #620]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c10:	430b      	orrs	r3, r1
 8007c12:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007c20:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c22:	2300      	movs	r3, #0
 8007c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c26:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	d009      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007c30:	4b92      	ldr	r3, [pc, #584]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c34:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c3e:	4a8f      	ldr	r2, [pc, #572]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c40:	430b      	orrs	r3, r1
 8007c42:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007c50:	643b      	str	r3, [r7, #64]	; 0x40
 8007c52:	2300      	movs	r3, #0
 8007c54:	647b      	str	r3, [r7, #68]	; 0x44
 8007c56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	d00e      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c60:	4b86      	ldr	r3, [pc, #536]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	4a85      	ldr	r2, [pc, #532]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c6a:	6113      	str	r3, [r2, #16]
 8007c6c:	4b83      	ldr	r3, [pc, #524]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c6e:	6919      	ldr	r1, [r3, #16]
 8007c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007c78:	4a80      	ldr	r2, [pc, #512]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007c94:	460b      	mov	r3, r1
 8007c96:	4313      	orrs	r3, r2
 8007c98:	d009      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c9a:	4b78      	ldr	r3, [pc, #480]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca8:	4a74      	ldr	r2, [pc, #464]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007caa:	430b      	orrs	r3, r1
 8007cac:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007cba:	633b      	str	r3, [r7, #48]	; 0x30
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	d00a      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cca:	4b6c      	ldr	r3, [pc, #432]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cce:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cda:	4a68      	ldr	r2, [pc, #416]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007cdc:	430b      	orrs	r3, r1
 8007cde:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	2100      	movs	r1, #0
 8007cea:	62b9      	str	r1, [r7, #40]	; 0x28
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cf2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	d011      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d00:	3308      	adds	r3, #8
 8007d02:	2100      	movs	r1, #0
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 f9a3 	bl	8009050 <RCCEx_PLL2_Config>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007d10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	2100      	movs	r1, #0
 8007d2a:	6239      	str	r1, [r7, #32]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
 8007d32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007d36:	460b      	mov	r3, r1
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	d011      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d40:	3308      	adds	r3, #8
 8007d42:	2101      	movs	r1, #1
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 f983 	bl	8009050 <RCCEx_PLL2_Config>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007d50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	2100      	movs	r1, #0
 8007d6a:	61b9      	str	r1, [r7, #24]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	61fb      	str	r3, [r7, #28]
 8007d72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d76:	460b      	mov	r3, r1
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	d011      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d80:	3308      	adds	r3, #8
 8007d82:	2102      	movs	r1, #2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 f963 	bl	8009050 <RCCEx_PLL2_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007d90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	2100      	movs	r1, #0
 8007daa:	6139      	str	r1, [r7, #16]
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	617b      	str	r3, [r7, #20]
 8007db2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007db6:	460b      	mov	r3, r1
 8007db8:	4313      	orrs	r3, r2
 8007dba:	d011      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dc0:	3328      	adds	r3, #40	; 0x28
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 f9f5 	bl	80091b4 <RCCEx_PLL3_Config>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8007dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ddc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	2100      	movs	r1, #0
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	f003 0310 	and.w	r3, r3, #16
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007df6:	460b      	mov	r3, r1
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	d011      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e00:	3328      	adds	r3, #40	; 0x28
 8007e02:	2101      	movs	r1, #1
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 f9d5 	bl	80091b4 <RCCEx_PLL3_Config>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007e10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	2100      	movs	r1, #0
 8007e2a:	6039      	str	r1, [r7, #0]
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	607b      	str	r3, [r7, #4]
 8007e32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e36:	460b      	mov	r3, r1
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	d011      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e40:	3328      	adds	r3, #40	; 0x28
 8007e42:	2102      	movs	r1, #2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 f9b5 	bl	80091b4 <RCCEx_PLL3_Config>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007e50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d003      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8007e60:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	e000      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8007e74:	46bd      	mov	sp, r7
 8007e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e7a:	bf00      	nop
 8007e7c:	58024400 	.word	0x58024400

08007e80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b090      	sub	sp, #64	; 0x40
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e8e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007e92:	430b      	orrs	r3, r1
 8007e94:	f040 8094 	bne.w	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007e98:	4b97      	ldr	r3, [pc, #604]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9c:	f003 0307 	and.w	r3, r3, #7
 8007ea0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	f200 8087 	bhi.w	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007eaa:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007ec5 	.word	0x08007ec5
 8007eb4:	08007eed 	.word	0x08007eed
 8007eb8:	08007f15 	.word	0x08007f15
 8007ebc:	08007fb1 	.word	0x08007fb1
 8007ec0:	08007f3d 	.word	0x08007f3d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ec4:	4b8c      	ldr	r3, [pc, #560]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ed0:	d108      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 ff68 	bl	8008dac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ee0:	f000 bc97 	b.w	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee8:	f000 bc93 	b.w	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eec:	4b82      	ldr	r3, [pc, #520]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ef8:	d108      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007efa:	f107 0318 	add.w	r3, r7, #24
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 fcac 	bl	800885c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f08:	f000 bc83 	b.w	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f10:	f000 bc7f 	b.w	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f14:	4b78      	ldr	r3, [pc, #480]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f20:	d108      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f22:	f107 030c 	add.w	r3, r7, #12
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fdec 	bl	8008b04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f30:	f000 bc6f 	b.w	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f38:	f000 bc6b 	b.w	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f3c:	4b6e      	ldr	r3, [pc, #440]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f44:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f46:	4b6c      	ldr	r3, [pc, #432]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0304 	and.w	r3, r3, #4
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d10c      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d109      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f58:	4b67      	ldr	r3, [pc, #412]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	08db      	lsrs	r3, r3, #3
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	4a66      	ldr	r2, [pc, #408]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007f64:	fa22 f303 	lsr.w	r3, r2, r3
 8007f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f6a:	e01f      	b.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f6c:	4b62      	ldr	r3, [pc, #392]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f78:	d106      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f80:	d102      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f82:	4b5f      	ldr	r3, [pc, #380]	; (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f86:	e011      	b.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f88:	4b5b      	ldr	r3, [pc, #364]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f94:	d106      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f9c:	d102      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f9e:	4b59      	ldr	r3, [pc, #356]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fa2:	e003      	b.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007fa8:	f000 bc33 	b.w	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007fac:	f000 bc31 	b.w	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fb0:	4b55      	ldr	r3, [pc, #340]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fb4:	f000 bc2d 	b.w	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fbc:	f000 bc29 	b.w	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	f040 809f 	bne.w	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8007fce:	4b4a      	ldr	r3, [pc, #296]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007fd6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fde:	d04d      	beq.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe6:	f200 8084 	bhi.w	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	2bc0      	cmp	r3, #192	; 0xc0
 8007fee:	d07d      	beq.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ff4:	d87d      	bhi.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	2b80      	cmp	r3, #128	; 0x80
 8007ffa:	d02d      	beq.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	2b80      	cmp	r3, #128	; 0x80
 8008000:	d877      	bhi.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	d012      	beq.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800800e:	e070      	b.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008010:	4b39      	ldr	r3, [pc, #228]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800801c:	d107      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800801e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008022:	4618      	mov	r0, r3
 8008024:	f000 fec2 	bl	8008dac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800802c:	e3f1      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008032:	e3ee      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008034:	4b30      	ldr	r3, [pc, #192]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800803c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008040:	d107      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008042:	f107 0318 	add.w	r3, r7, #24
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fc08 	bl	800885c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008050:	e3df      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008056:	e3dc      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008058:	4b27      	ldr	r3, [pc, #156]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008064:	d107      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008066:	f107 030c 	add.w	r3, r7, #12
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fd4a 	bl	8008b04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008074:	e3cd      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800807a:	e3ca      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800807c:	4b1e      	ldr	r3, [pc, #120]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800807e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008080:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008084:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008086:	4b1c      	ldr	r3, [pc, #112]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0304 	and.w	r3, r3, #4
 800808e:	2b04      	cmp	r3, #4
 8008090:	d10c      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008094:	2b00      	cmp	r3, #0
 8008096:	d109      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008098:	4b17      	ldr	r3, [pc, #92]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	08db      	lsrs	r3, r3, #3
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	4a16      	ldr	r2, [pc, #88]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080a4:	fa22 f303 	lsr.w	r3, r2, r3
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080aa:	e01e      	b.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080ac:	4b12      	ldr	r3, [pc, #72]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b8:	d106      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80080ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080c0:	d102      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80080c2:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080c6:	e010      	b.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080c8:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080d4:	d106      	bne.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80080d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080dc:	d102      	bne.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080e2:	e002      	b.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80080e8:	e393      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80080ea:	e392      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80080ec:	4b06      	ldr	r3, [pc, #24]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80080ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080f0:	e38f      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080f6:	e38c      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80080f8:	58024400 	.word	0x58024400
 80080fc:	03d09000 	.word	0x03d09000
 8008100:	003d0900 	.word	0x003d0900
 8008104:	016e3600 	.word	0x016e3600
 8008108:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800810c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008110:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008114:	430b      	orrs	r3, r1
 8008116:	f040 809c 	bne.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800811a:	4b9e      	ldr	r3, [pc, #632]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800811c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008122:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800812a:	d054      	beq.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008132:	f200 808b 	bhi.w	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800813c:	f000 8083 	beq.w	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008146:	f200 8081 	bhi.w	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008150:	d02f      	beq.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008158:	d878      	bhi.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	2b00      	cmp	r3, #0
 800815e:	d004      	beq.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008166:	d012      	beq.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008168:	e070      	b.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800816a:	4b8a      	ldr	r3, [pc, #552]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008176:	d107      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fe15 	bl	8008dac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008186:	e344      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800818c:	e341      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800818e:	4b81      	ldr	r3, [pc, #516]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800819a:	d107      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800819c:	f107 0318 	add.w	r3, r7, #24
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fb5b 	bl	800885c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081aa:	e332      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081b0:	e32f      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081b2:	4b78      	ldr	r3, [pc, #480]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081be:	d107      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081c0:	f107 030c 	add.w	r3, r7, #12
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fc9d 	bl	8008b04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ce:	e320      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d4:	e31d      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081d6:	4b6f      	ldr	r3, [pc, #444]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80081d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081e0:	4b6c      	ldr	r3, [pc, #432]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d10c      	bne.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80081ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d109      	bne.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081f2:	4b68      	ldr	r3, [pc, #416]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	08db      	lsrs	r3, r3, #3
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	4a66      	ldr	r2, [pc, #408]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80081fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008204:	e01e      	b.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008206:	4b63      	ldr	r3, [pc, #396]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008212:	d106      	bne.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800821a:	d102      	bne.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800821c:	4b5f      	ldr	r3, [pc, #380]	; (800839c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800821e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008220:	e010      	b.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008222:	4b5c      	ldr	r3, [pc, #368]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800822e:	d106      	bne.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008236:	d102      	bne.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008238:	4b59      	ldr	r3, [pc, #356]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800823c:	e002      	b.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8008242:	e2e6      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008244:	e2e5      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008246:	4b57      	ldr	r3, [pc, #348]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800824a:	e2e2      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008250:	e2df      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008256:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800825a:	430b      	orrs	r3, r1
 800825c:	f040 80a7 	bne.w	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008260:	4b4c      	ldr	r3, [pc, #304]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008264:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008268:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008270:	d055      	beq.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008278:	f200 8096 	bhi.w	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008282:	f000 8084 	beq.w	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8008286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008288:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800828c:	f200 808c 	bhi.w	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008296:	d030      	beq.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800829e:	f200 8083 	bhi.w	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d004      	beq.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ae:	d012      	beq.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80082b0:	e07a      	b.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082b2:	4b38      	ldr	r3, [pc, #224]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082be:	d107      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fd71 	bl	8008dac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ce:	e2a0      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d4:	e29d      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082d6:	4b2f      	ldr	r3, [pc, #188]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082e2:	d107      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082e4:	f107 0318 	add.w	r3, r7, #24
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fab7 	bl	800885c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082f2:	e28e      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082f8:	e28b      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082fa:	4b26      	ldr	r3, [pc, #152]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008306:	d107      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008308:	f107 030c 	add.w	r3, r7, #12
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fbf9 	bl	8008b04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008316:	e27c      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800831c:	e279      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800831e:	4b1d      	ldr	r3, [pc, #116]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008326:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008328:	4b1a      	ldr	r3, [pc, #104]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b04      	cmp	r3, #4
 8008332:	d10c      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800833a:	4b16      	ldr	r3, [pc, #88]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	08db      	lsrs	r3, r3, #3
 8008340:	f003 0303 	and.w	r3, r3, #3
 8008344:	4a14      	ldr	r2, [pc, #80]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008346:	fa22 f303 	lsr.w	r3, r2, r3
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800834c:	e01e      	b.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800834e:	4b11      	ldr	r3, [pc, #68]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800835a:	d106      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800835c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008362:	d102      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008364:	4b0d      	ldr	r3, [pc, #52]	; (800839c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008368:	e010      	b.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800836a:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008376:	d106      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800837e:	d102      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008380:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008384:	e002      	b.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800838a:	e242      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800838c:	e241      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800838e:	4b05      	ldr	r3, [pc, #20]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008392:	e23e      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008394:	58024400 	.word	0x58024400
 8008398:	03d09000 	.word	0x03d09000
 800839c:	003d0900 	.word	0x003d0900
 80083a0:	016e3600 	.word	0x016e3600
 80083a4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ac:	e231      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80083ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80083b6:	430b      	orrs	r3, r1
 80083b8:	f040 8085 	bne.w	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80083bc:	4b9c      	ldr	r3, [pc, #624]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80083c4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80083c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083cc:	d06b      	beq.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083d4:	d874      	bhi.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083dc:	d056      	beq.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083e4:	d86c      	bhi.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083ec:	d03b      	beq.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80083ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083f4:	d864      	bhi.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083fc:	d021      	beq.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008404:	d85c      	bhi.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	2b00      	cmp	r3, #0
 800840a:	d004      	beq.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008412:	d004      	beq.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008414:	e054      	b.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008416:	f7fe fb5f 	bl	8006ad8 <HAL_RCC_GetPCLK1Freq>
 800841a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800841c:	e1f9      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800841e:	4b84      	ldr	r3, [pc, #528]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800842a:	d107      	bne.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800842c:	f107 0318 	add.w	r3, r7, #24
 8008430:	4618      	mov	r0, r3
 8008432:	f000 fa13 	bl	800885c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800843a:	e1ea      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008440:	e1e7      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008442:	4b7b      	ldr	r3, [pc, #492]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800844a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800844e:	d107      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008450:	f107 030c 	add.w	r3, r7, #12
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fb55 	bl	8008b04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800845e:	e1d8      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008464:	e1d5      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008466:	4b72      	ldr	r3, [pc, #456]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	2b04      	cmp	r3, #4
 8008470:	d109      	bne.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008472:	4b6f      	ldr	r3, [pc, #444]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	08db      	lsrs	r3, r3, #3
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	4a6d      	ldr	r2, [pc, #436]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800847e:	fa22 f303 	lsr.w	r3, r2, r3
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008484:	e1c5      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800848a:	e1c2      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800848c:	4b68      	ldr	r3, [pc, #416]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008498:	d102      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800849a:	4b67      	ldr	r3, [pc, #412]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800849c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800849e:	e1b8      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a4:	e1b5      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084a6:	4b62      	ldr	r3, [pc, #392]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084b2:	d102      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80084b4:	4b61      	ldr	r3, [pc, #388]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80084b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084b8:	e1ab      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084ba:	2300      	movs	r3, #0
 80084bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084be:	e1a8      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084c4:	e1a5      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80084c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ca:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80084ce:	430b      	orrs	r3, r1
 80084d0:	d173      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80084d2:	4b57      	ldr	r3, [pc, #348]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80084da:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084e2:	d02f      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084ea:	d863      	bhi.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f8:	d012      	beq.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80084fa:	e05b      	b.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084fc:	4b4c      	ldr	r3, [pc, #304]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008508:	d107      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800850a:	f107 0318 	add.w	r3, r7, #24
 800850e:	4618      	mov	r0, r3
 8008510:	f000 f9a4 	bl	800885c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008518:	e17b      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800851e:	e178      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008520:	4b43      	ldr	r3, [pc, #268]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800852c:	d107      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800852e:	f107 030c 	add.w	r3, r7, #12
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fae6 	bl	8008b04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800853c:	e169      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008542:	e166      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008544:	4b3a      	ldr	r3, [pc, #232]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800854c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800854e:	4b38      	ldr	r3, [pc, #224]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0304 	and.w	r3, r3, #4
 8008556:	2b04      	cmp	r3, #4
 8008558:	d10c      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800855a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855c:	2b00      	cmp	r3, #0
 800855e:	d109      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008560:	4b33      	ldr	r3, [pc, #204]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	08db      	lsrs	r3, r3, #3
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	4a32      	ldr	r2, [pc, #200]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800856c:	fa22 f303 	lsr.w	r3, r2, r3
 8008570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008572:	e01e      	b.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008574:	4b2e      	ldr	r3, [pc, #184]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008580:	d106      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8008582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008588:	d102      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800858a:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800858c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800858e:	e010      	b.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008590:	4b27      	ldr	r3, [pc, #156]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800859c:	d106      	bne.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085a4:	d102      	bne.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085a6:	4b25      	ldr	r3, [pc, #148]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80085a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085aa:	e002      	b.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80085b0:	e12f      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80085b2:	e12e      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b8:	e12b      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80085ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085be:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80085c2:	430b      	orrs	r3, r1
 80085c4:	d13c      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80085c6:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085ce:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085dc:	d012      	beq.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80085de:	e023      	b.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085e0:	4b13      	ldr	r3, [pc, #76]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085ec:	d107      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fbda 	bl	8008dac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085fc:	e109      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008602:	e106      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008604:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800860c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008610:	d107      	bne.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008612:	f107 0318 	add.w	r3, r7, #24
 8008616:	4618      	mov	r0, r3
 8008618:	f000 f920 	bl	800885c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008620:	e0f7      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008626:	e0f4      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008628:	2300      	movs	r3, #0
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800862c:	e0f1      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800862e:	bf00      	nop
 8008630:	58024400 	.word	0x58024400
 8008634:	03d09000 	.word	0x03d09000
 8008638:	003d0900 	.word	0x003d0900
 800863c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008644:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008648:	430b      	orrs	r3, r1
 800864a:	f040 8091 	bne.w	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800864e:	4b73      	ldr	r3, [pc, #460]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008652:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008656:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800865e:	f000 8081 	beq.w	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008668:	d87f      	bhi.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008670:	d06b      	beq.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008678:	d877      	bhi.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008680:	d056      	beq.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008688:	d86f      	bhi.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008690:	d03b      	beq.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008698:	d867      	bhi.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086a0:	d021      	beq.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086a8:	d85f      	bhi.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80086aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086b6:	d004      	beq.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80086b8:	e057      	b.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80086ba:	f000 f8b9 	bl	8008830 <HAL_RCCEx_GetD3PCLK1Freq>
 80086be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086c0:	e0a7      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086c2:	4b56      	ldr	r3, [pc, #344]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086ce:	d107      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086d0:	f107 0318 	add.w	r3, r7, #24
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 f8c1 	bl	800885c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086de:	e098      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086e4:	e095      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086e6:	4b4d      	ldr	r3, [pc, #308]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f2:	d107      	bne.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086f4:	f107 030c 	add.w	r3, r7, #12
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fa03 	bl	8008b04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008702:	e086      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008708:	e083      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800870a:	4b44      	ldr	r3, [pc, #272]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b04      	cmp	r3, #4
 8008714:	d109      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008716:	4b41      	ldr	r3, [pc, #260]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	08db      	lsrs	r3, r3, #3
 800871c:	f003 0303 	and.w	r3, r3, #3
 8008720:	4a3f      	ldr	r2, [pc, #252]	; (8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008722:	fa22 f303 	lsr.w	r3, r2, r3
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008728:	e073      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800872e:	e070      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008730:	4b3a      	ldr	r3, [pc, #232]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800873c:	d102      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800873e:	4b39      	ldr	r3, [pc, #228]	; (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008740:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008742:	e066      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008748:	e063      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800874a:	4b34      	ldr	r3, [pc, #208]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008756:	d102      	bne.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008758:	4b33      	ldr	r3, [pc, #204]	; (8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800875c:	e059      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008762:	e056      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008764:	4b31      	ldr	r3, [pc, #196]	; (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008768:	e053      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800876e:	e050      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008774:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008778:	430b      	orrs	r3, r1
 800877a:	d148      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800877c:	4b27      	ldr	r3, [pc, #156]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800877e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008780:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008784:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800878c:	d02a      	beq.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008794:	d838      	bhi.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	2b00      	cmp	r3, #0
 800879a:	d004      	beq.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087a2:	d00d      	beq.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80087a4:	e030      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087a6:	4b1d      	ldr	r3, [pc, #116]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087b2:	d102      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80087b4:	4b1c      	ldr	r3, [pc, #112]	; (8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087b8:	e02b      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087be:	e028      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087c0:	4b16      	ldr	r3, [pc, #88]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087cc:	d107      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 faea 	bl	8008dac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087dc:	e019      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e2:	e016      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087e4:	4b0d      	ldr	r3, [pc, #52]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087f0:	d107      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087f2:	f107 0318 	add.w	r3, r7, #24
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f830 	bl	800885c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008800:	e007      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008806:	e004      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800880c:	e001      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008814:	4618      	mov	r0, r3
 8008816:	3740      	adds	r7, #64	; 0x40
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	58024400 	.word	0x58024400
 8008820:	03d09000 	.word	0x03d09000
 8008824:	003d0900 	.word	0x003d0900
 8008828:	016e3600 	.word	0x016e3600
 800882c:	00bb8000 	.word	0x00bb8000

08008830 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008834:	f7fe f920 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8008838:	4602      	mov	r2, r0
 800883a:	4b06      	ldr	r3, [pc, #24]	; (8008854 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	091b      	lsrs	r3, r3, #4
 8008840:	f003 0307 	and.w	r3, r3, #7
 8008844:	4904      	ldr	r1, [pc, #16]	; (8008858 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008846:	5ccb      	ldrb	r3, [r1, r3]
 8008848:	f003 031f 	and.w	r3, r3, #31
 800884c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008850:	4618      	mov	r0, r3
 8008852:	bd80      	pop	{r7, pc}
 8008854:	58024400 	.word	0x58024400
 8008858:	080093f0 	.word	0x080093f0

0800885c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800885c:	b480      	push	{r7}
 800885e:	b089      	sub	sp, #36	; 0x24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008864:	4ba1      	ldr	r3, [pc, #644]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	f003 0303 	and.w	r3, r3, #3
 800886c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800886e:	4b9f      	ldr	r3, [pc, #636]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	0b1b      	lsrs	r3, r3, #12
 8008874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008878:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800887a:	4b9c      	ldr	r3, [pc, #624]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	091b      	lsrs	r3, r3, #4
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008886:	4b99      	ldr	r3, [pc, #612]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888a:	08db      	lsrs	r3, r3, #3
 800888c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	fb02 f303 	mul.w	r3, r2, r3
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8111 	beq.w	8008acc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	f000 8083 	beq.w	80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	f200 80a1 	bhi.w	80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d003      	beq.n	80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d056      	beq.n	8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80088c6:	e099      	b.n	80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088c8:	4b88      	ldr	r3, [pc, #544]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0320 	and.w	r3, r3, #32
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d02d      	beq.n	8008930 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088d4:	4b85      	ldr	r3, [pc, #532]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	08db      	lsrs	r3, r3, #3
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	4a84      	ldr	r2, [pc, #528]	; (8008af0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80088e0:	fa22 f303 	lsr.w	r3, r2, r3
 80088e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	ee07 3a90 	vmov	s15, r3
 80088ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	ee07 3a90 	vmov	s15, r3
 80088f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088fe:	4b7b      	ldr	r3, [pc, #492]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800890e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008912:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008af4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800891a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800891e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800892a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800892e:	e087      	b.n	8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800893e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008942:	4b6a      	ldr	r3, [pc, #424]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008952:	ed97 6a03 	vldr	s12, [r7, #12]
 8008956:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008af4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800895a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800895e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800896a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800896e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008972:	e065      	b.n	8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008986:	4b59      	ldr	r3, [pc, #356]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008996:	ed97 6a03 	vldr	s12, [r7, #12]
 800899a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008af4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800899e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089b6:	e043      	b.n	8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80089c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ca:	4b48      	ldr	r3, [pc, #288]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089da:	ed97 6a03 	vldr	s12, [r7, #12]
 80089de:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008af4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089fa:	e021      	b.n	8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0e:	4b37      	ldr	r3, [pc, #220]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008af4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008a40:	4b2a      	ldr	r3, [pc, #168]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	0a5b      	lsrs	r3, r3, #9
 8008a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a66:	ee17 2a90 	vmov	r2, s15
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008a6e:	4b1f      	ldr	r3, [pc, #124]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a72:	0c1b      	lsrs	r3, r3, #16
 8008a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a78:	ee07 3a90 	vmov	s15, r3
 8008a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a94:	ee17 2a90 	vmov	r2, s15
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008a9c:	4b13      	ldr	r3, [pc, #76]	; (8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa0:	0e1b      	lsrs	r3, r3, #24
 8008aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ac2:	ee17 2a90 	vmov	r2, s15
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008aca:	e008      	b.n	8008ade <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	609a      	str	r2, [r3, #8]
}
 8008ade:	bf00      	nop
 8008ae0:	3724      	adds	r7, #36	; 0x24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	58024400 	.word	0x58024400
 8008af0:	03d09000 	.word	0x03d09000
 8008af4:	46000000 	.word	0x46000000
 8008af8:	4c742400 	.word	0x4c742400
 8008afc:	4a742400 	.word	0x4a742400
 8008b00:	4bb71b00 	.word	0x4bb71b00

08008b04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b089      	sub	sp, #36	; 0x24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b0c:	4ba1      	ldr	r3, [pc, #644]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	f003 0303 	and.w	r3, r3, #3
 8008b14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008b16:	4b9f      	ldr	r3, [pc, #636]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1a:	0d1b      	lsrs	r3, r3, #20
 8008b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b22:	4b9c      	ldr	r3, [pc, #624]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	0a1b      	lsrs	r3, r3, #8
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008b2e:	4b99      	ldr	r3, [pc, #612]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b32:	08db      	lsrs	r3, r3, #3
 8008b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	fb02 f303 	mul.w	r3, r2, r3
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8111 	beq.w	8008d74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	f000 8083 	beq.w	8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	f200 80a1 	bhi.w	8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d056      	beq.n	8008c1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008b6e:	e099      	b.n	8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b70:	4b88      	ldr	r3, [pc, #544]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0320 	and.w	r3, r3, #32
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d02d      	beq.n	8008bd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b7c:	4b85      	ldr	r3, [pc, #532]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	08db      	lsrs	r3, r3, #3
 8008b82:	f003 0303 	and.w	r3, r3, #3
 8008b86:	4a84      	ldr	r2, [pc, #528]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b88:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	ee07 3a90 	vmov	s15, r3
 8008b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba6:	4b7b      	ldr	r3, [pc, #492]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008bd6:	e087      	b.n	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bea:	4b6a      	ldr	r3, [pc, #424]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c1a:	e065      	b.n	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2e:	4b59      	ldr	r3, [pc, #356]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c42:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c5e:	e043      	b.n	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c72:	4b48      	ldr	r3, [pc, #288]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c86:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ca2:	e021      	b.n	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb6:	4b37      	ldr	r3, [pc, #220]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ce6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008ce8:	4b2a      	ldr	r3, [pc, #168]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cec:	0a5b      	lsrs	r3, r3, #9
 8008cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d0e:	ee17 2a90 	vmov	r2, s15
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d16:	4b1f      	ldr	r3, [pc, #124]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1a:	0c1b      	lsrs	r3, r3, #16
 8008d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d20:	ee07 3a90 	vmov	s15, r3
 8008d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d3c:	ee17 2a90 	vmov	r2, s15
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008d44:	4b13      	ldr	r3, [pc, #76]	; (8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	0e1b      	lsrs	r3, r3, #24
 8008d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d4e:	ee07 3a90 	vmov	s15, r3
 8008d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d6a:	ee17 2a90 	vmov	r2, s15
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008d72:	e008      	b.n	8008d86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	609a      	str	r2, [r3, #8]
}
 8008d86:	bf00      	nop
 8008d88:	3724      	adds	r7, #36	; 0x24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	58024400 	.word	0x58024400
 8008d98:	03d09000 	.word	0x03d09000
 8008d9c:	46000000 	.word	0x46000000
 8008da0:	4c742400 	.word	0x4c742400
 8008da4:	4a742400 	.word	0x4a742400
 8008da8:	4bb71b00 	.word	0x4bb71b00

08008dac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b089      	sub	sp, #36	; 0x24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008db4:	4ba0      	ldr	r3, [pc, #640]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008dbe:	4b9e      	ldr	r3, [pc, #632]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc2:	091b      	lsrs	r3, r3, #4
 8008dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dc8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008dca:	4b9b      	ldr	r3, [pc, #620]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008dd4:	4b98      	ldr	r3, [pc, #608]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd8:	08db      	lsrs	r3, r3, #3
 8008dda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	fb02 f303 	mul.w	r3, r2, r3
 8008de4:	ee07 3a90 	vmov	s15, r3
 8008de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 8111 	beq.w	800901a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	f000 8083 	beq.w	8008f06 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	f200 80a1 	bhi.w	8008f4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d056      	beq.n	8008ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008e14:	e099      	b.n	8008f4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e16:	4b88      	ldr	r3, [pc, #544]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0320 	and.w	r3, r3, #32
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d02d      	beq.n	8008e7e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e22:	4b85      	ldr	r3, [pc, #532]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	08db      	lsrs	r3, r3, #3
 8008e28:	f003 0303 	and.w	r3, r3, #3
 8008e2c:	4a83      	ldr	r2, [pc, #524]	; (800903c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e32:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	ee07 3a90 	vmov	s15, r3
 8008e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4c:	4b7a      	ldr	r3, [pc, #488]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e54:	ee07 3a90 	vmov	s15, r3
 8008e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e60:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009040 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e78:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e7c:	e087      	b.n	8008f8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	ee07 3a90 	vmov	s15, r3
 8008e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e88:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009044 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e90:	4b69      	ldr	r3, [pc, #420]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e98:	ee07 3a90 	vmov	s15, r3
 8008e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ea4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009040 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ebc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ec0:	e065      	b.n	8008f8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	ee07 3a90 	vmov	s15, r3
 8008ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ecc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009048 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed4:	4b58      	ldr	r3, [pc, #352]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008edc:	ee07 3a90 	vmov	s15, r3
 8008ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ee8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009040 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f04:	e043      	b.n	8008f8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	ee07 3a90 	vmov	s15, r3
 8008f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f10:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800904c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f18:	4b47      	ldr	r3, [pc, #284]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f28:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f2c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009040 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f48:	e021      	b.n	8008f8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	ee07 3a90 	vmov	s15, r3
 8008f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f54:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009044 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f5c:	4b36      	ldr	r3, [pc, #216]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f64:	ee07 3a90 	vmov	s15, r3
 8008f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f70:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009040 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f8c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008f8e:	4b2a      	ldr	r3, [pc, #168]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f92:	0a5b      	lsrs	r3, r3, #9
 8008f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f98:	ee07 3a90 	vmov	s15, r3
 8008f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fb4:	ee17 2a90 	vmov	r2, s15
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008fbc:	4b1e      	ldr	r3, [pc, #120]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc0:	0c1b      	lsrs	r3, r3, #16
 8008fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fe2:	ee17 2a90 	vmov	r2, s15
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008fea:	4b13      	ldr	r3, [pc, #76]	; (8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fee:	0e1b      	lsrs	r3, r3, #24
 8008ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff4:	ee07 3a90 	vmov	s15, r3
 8008ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009000:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009004:	edd7 6a07 	vldr	s13, [r7, #28]
 8009008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800900c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009010:	ee17 2a90 	vmov	r2, s15
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009018:	e008      	b.n	800902c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	609a      	str	r2, [r3, #8]
}
 800902c:	bf00      	nop
 800902e:	3724      	adds	r7, #36	; 0x24
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	58024400 	.word	0x58024400
 800903c:	03d09000 	.word	0x03d09000
 8009040:	46000000 	.word	0x46000000
 8009044:	4c742400 	.word	0x4c742400
 8009048:	4a742400 	.word	0x4a742400
 800904c:	4bb71b00 	.word	0x4bb71b00

08009050 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800905e:	4b53      	ldr	r3, [pc, #332]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009062:	f003 0303 	and.w	r3, r3, #3
 8009066:	2b03      	cmp	r3, #3
 8009068:	d101      	bne.n	800906e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e099      	b.n	80091a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800906e:	4b4f      	ldr	r3, [pc, #316]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a4e      	ldr	r2, [pc, #312]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009074:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800907a:	f7f8 faff 	bl	800167c <HAL_GetTick>
 800907e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009080:	e008      	b.n	8009094 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009082:	f7f8 fafb 	bl	800167c <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	2b02      	cmp	r3, #2
 800908e:	d901      	bls.n	8009094 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e086      	b.n	80091a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009094:	4b45      	ldr	r3, [pc, #276]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1f0      	bne.n	8009082 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80090a0:	4b42      	ldr	r3, [pc, #264]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 80090a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	031b      	lsls	r3, r3, #12
 80090ae:	493f      	ldr	r1, [pc, #252]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	628b      	str	r3, [r1, #40]	; 0x28
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	025b      	lsls	r3, r3, #9
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	431a      	orrs	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	041b      	lsls	r3, r3, #16
 80090d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090d6:	431a      	orrs	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	3b01      	subs	r3, #1
 80090de:	061b      	lsls	r3, r3, #24
 80090e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090e4:	4931      	ldr	r1, [pc, #196]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80090ea:	4b30      	ldr	r3, [pc, #192]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 80090ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	492d      	ldr	r1, [pc, #180]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80090fc:	4b2b      	ldr	r3, [pc, #172]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	f023 0220 	bic.w	r2, r3, #32
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	4928      	ldr	r1, [pc, #160]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 800910a:	4313      	orrs	r3, r2
 800910c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800910e:	4b27      	ldr	r3, [pc, #156]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	4a26      	ldr	r2, [pc, #152]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009114:	f023 0310 	bic.w	r3, r3, #16
 8009118:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800911a:	4b24      	ldr	r3, [pc, #144]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 800911c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800911e:	4b24      	ldr	r3, [pc, #144]	; (80091b0 <RCCEx_PLL2_Config+0x160>)
 8009120:	4013      	ands	r3, r2
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	69d2      	ldr	r2, [r2, #28]
 8009126:	00d2      	lsls	r2, r2, #3
 8009128:	4920      	ldr	r1, [pc, #128]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 800912a:	4313      	orrs	r3, r2
 800912c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800912e:	4b1f      	ldr	r3, [pc, #124]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009132:	4a1e      	ldr	r2, [pc, #120]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009134:	f043 0310 	orr.w	r3, r3, #16
 8009138:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d106      	bne.n	800914e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009140:	4b1a      	ldr	r3, [pc, #104]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	4a19      	ldr	r2, [pc, #100]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009146:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800914a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800914c:	e00f      	b.n	800916e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d106      	bne.n	8009162 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009154:	4b15      	ldr	r3, [pc, #84]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	4a14      	ldr	r2, [pc, #80]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 800915a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800915e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009160:	e005      	b.n	800916e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009162:	4b12      	ldr	r3, [pc, #72]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009166:	4a11      	ldr	r2, [pc, #68]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009168:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800916c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800916e:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a0e      	ldr	r2, [pc, #56]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009174:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800917a:	f7f8 fa7f 	bl	800167c <HAL_GetTick>
 800917e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009180:	e008      	b.n	8009194 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009182:	f7f8 fa7b 	bl	800167c <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d901      	bls.n	8009194 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e006      	b.n	80091a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009194:	4b05      	ldr	r3, [pc, #20]	; (80091ac <RCCEx_PLL2_Config+0x15c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0f0      	beq.n	8009182 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	58024400 	.word	0x58024400
 80091b0:	ffff0007 	.word	0xffff0007

080091b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091c2:	4b53      	ldr	r3, [pc, #332]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80091c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c6:	f003 0303 	and.w	r3, r3, #3
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d101      	bne.n	80091d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e099      	b.n	8009306 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091d2:	4b4f      	ldr	r3, [pc, #316]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a4e      	ldr	r2, [pc, #312]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80091d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091de:	f7f8 fa4d 	bl	800167c <HAL_GetTick>
 80091e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091e4:	e008      	b.n	80091f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80091e6:	f7f8 fa49 	bl	800167c <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d901      	bls.n	80091f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e086      	b.n	8009306 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091f8:	4b45      	ldr	r3, [pc, #276]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1f0      	bne.n	80091e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009204:	4b42      	ldr	r3, [pc, #264]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 8009206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009208:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	051b      	lsls	r3, r3, #20
 8009212:	493f      	ldr	r1, [pc, #252]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 8009214:	4313      	orrs	r3, r2
 8009216:	628b      	str	r3, [r1, #40]	; 0x28
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	3b01      	subs	r3, #1
 800921e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	3b01      	subs	r3, #1
 8009228:	025b      	lsls	r3, r3, #9
 800922a:	b29b      	uxth	r3, r3
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	3b01      	subs	r3, #1
 8009234:	041b      	lsls	r3, r3, #16
 8009236:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800923a:	431a      	orrs	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	3b01      	subs	r3, #1
 8009242:	061b      	lsls	r3, r3, #24
 8009244:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009248:	4931      	ldr	r1, [pc, #196]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 800924a:	4313      	orrs	r3, r2
 800924c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800924e:	4b30      	ldr	r3, [pc, #192]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 8009250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009252:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	492d      	ldr	r1, [pc, #180]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 800925c:	4313      	orrs	r3, r2
 800925e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009260:	4b2b      	ldr	r3, [pc, #172]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	4928      	ldr	r1, [pc, #160]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 800926e:	4313      	orrs	r3, r2
 8009270:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009272:	4b27      	ldr	r3, [pc, #156]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	4a26      	ldr	r2, [pc, #152]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 8009278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800927c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800927e:	4b24      	ldr	r3, [pc, #144]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 8009280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009282:	4b24      	ldr	r3, [pc, #144]	; (8009314 <RCCEx_PLL3_Config+0x160>)
 8009284:	4013      	ands	r3, r2
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	69d2      	ldr	r2, [r2, #28]
 800928a:	00d2      	lsls	r2, r2, #3
 800928c:	4920      	ldr	r1, [pc, #128]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 800928e:	4313      	orrs	r3, r2
 8009290:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009292:	4b1f      	ldr	r3, [pc, #124]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 8009294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009296:	4a1e      	ldr	r2, [pc, #120]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 8009298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800929c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d106      	bne.n	80092b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80092a4:	4b1a      	ldr	r3, [pc, #104]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80092a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a8:	4a19      	ldr	r2, [pc, #100]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80092aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092b0:	e00f      	b.n	80092d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d106      	bne.n	80092c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092b8:	4b15      	ldr	r3, [pc, #84]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80092ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092bc:	4a14      	ldr	r2, [pc, #80]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80092be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092c4:	e005      	b.n	80092d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092c6:	4b12      	ldr	r3, [pc, #72]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80092c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ca:	4a11      	ldr	r2, [pc, #68]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80092cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80092d2:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a0e      	ldr	r2, [pc, #56]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80092d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092de:	f7f8 f9cd 	bl	800167c <HAL_GetTick>
 80092e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092e4:	e008      	b.n	80092f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80092e6:	f7f8 f9c9 	bl	800167c <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d901      	bls.n	80092f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e006      	b.n	8009306 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092f8:	4b05      	ldr	r3, [pc, #20]	; (8009310 <RCCEx_PLL3_Config+0x15c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d0f0      	beq.n	80092e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009304:	7bfb      	ldrb	r3, [r7, #15]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	58024400 	.word	0x58024400
 8009314:	ffff0007 	.word	0xffff0007

08009318 <memset>:
 8009318:	4402      	add	r2, r0
 800931a:	4603      	mov	r3, r0
 800931c:	4293      	cmp	r3, r2
 800931e:	d100      	bne.n	8009322 <memset+0xa>
 8009320:	4770      	bx	lr
 8009322:	f803 1b01 	strb.w	r1, [r3], #1
 8009326:	e7f9      	b.n	800931c <memset+0x4>

08009328 <__libc_init_array>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	4d0d      	ldr	r5, [pc, #52]	; (8009360 <__libc_init_array+0x38>)
 800932c:	4c0d      	ldr	r4, [pc, #52]	; (8009364 <__libc_init_array+0x3c>)
 800932e:	1b64      	subs	r4, r4, r5
 8009330:	10a4      	asrs	r4, r4, #2
 8009332:	2600      	movs	r6, #0
 8009334:	42a6      	cmp	r6, r4
 8009336:	d109      	bne.n	800934c <__libc_init_array+0x24>
 8009338:	4d0b      	ldr	r5, [pc, #44]	; (8009368 <__libc_init_array+0x40>)
 800933a:	4c0c      	ldr	r4, [pc, #48]	; (800936c <__libc_init_array+0x44>)
 800933c:	f000 f826 	bl	800938c <_init>
 8009340:	1b64      	subs	r4, r4, r5
 8009342:	10a4      	asrs	r4, r4, #2
 8009344:	2600      	movs	r6, #0
 8009346:	42a6      	cmp	r6, r4
 8009348:	d105      	bne.n	8009356 <__libc_init_array+0x2e>
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009350:	4798      	blx	r3
 8009352:	3601      	adds	r6, #1
 8009354:	e7ee      	b.n	8009334 <__libc_init_array+0xc>
 8009356:	f855 3b04 	ldr.w	r3, [r5], #4
 800935a:	4798      	blx	r3
 800935c:	3601      	adds	r6, #1
 800935e:	e7f2      	b.n	8009346 <__libc_init_array+0x1e>
 8009360:	08009408 	.word	0x08009408
 8009364:	08009408 	.word	0x08009408
 8009368:	08009408 	.word	0x08009408
 800936c:	0800940c 	.word	0x0800940c

08009370 <memcpy>:
 8009370:	440a      	add	r2, r1
 8009372:	4291      	cmp	r1, r2
 8009374:	f100 33ff 	add.w	r3, r0, #4294967295
 8009378:	d100      	bne.n	800937c <memcpy+0xc>
 800937a:	4770      	bx	lr
 800937c:	b510      	push	{r4, lr}
 800937e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009386:	4291      	cmp	r1, r2
 8009388:	d1f9      	bne.n	800937e <memcpy+0xe>
 800938a:	bd10      	pop	{r4, pc}

0800938c <_init>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	bf00      	nop
 8009390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009392:	bc08      	pop	{r3}
 8009394:	469e      	mov	lr, r3
 8009396:	4770      	bx	lr

08009398 <_fini>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	bf00      	nop
 800939c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939e:	bc08      	pop	{r3}
 80093a0:	469e      	mov	lr, r3
 80093a2:	4770      	bx	lr
